// This file was generated on Thu Oct 31, 2019 19:56 (UTC+01) by REx v5.49 which is Copyright (c) 1979-2019 by Gunther Rademacher <grd@gmx.net>
// REx command line: XQueryParser.ebnf -ll 2 -backtrack -tree -javascript -a xqlint

                                                            // line 2 "XQueryParser.ebnf"
                                                            var XQueryParser = exports.XQueryParser = function XQueryParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 9 "XQueryParser.js"
  var thisParser = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var begin = b;
    var end = e;
    var state = s;
    var offending = o;
    var expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};
    this.isAmbiguousInput = function() {return false;};

    this.getMessage = function()
    {
      return offending < 0
           ? "lexical analysis failed"
           : "syntax error";
    };
  };

  function init(source, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = source;
    size = source.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  this.getTokenOffset = function()
  {
    return b0;
  };

  this.getTokenEnd = function()
  {
    return e0;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.reset = function(l, b, e)
  {
    reset(l, b, e);
  };

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? XQueryParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = XQueryParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [XQueryParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var message = e.getMessage();
    var found = this.getOffendingToken(e);
    var tokenSet = this.getExpectedTokenSet(e);
    var size = e.getEnd() - e.getBegin();
    message += (found == null ? "" : ", found " + found)
            + "\nwhile expecting "
            + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
            + "\n"
            + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ");
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    return message
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(284);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Module();
    consume(26);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 280:                       // 'xquery'
      lookahead2W(201);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 66840                 // 'xquery' 'encoding'
     || lk == 138008)               // 'xquery' 'version'
    {
      parse_VersionDecl();
    }
    lookahead1W(284);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    switch (l1)
    {
    case 188:                       // 'module'
      lookahead2W(194);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 97468:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(280);                   // 'xquery'
    lookahead1W(118);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 130:                       // 'encoding'
      consume(130);                 // 'encoding'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      break;
    default:
      consume(269);                 // 'version'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      lookahead1W(111);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 130)                // 'encoding'
      {
        consume(130);               // 'encoding'
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(11);                // StringLiteral
      }
    }
    lookahead1W(30);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(140);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(188);                   // 'module'
    lookahead1W(63);                // S^WS | '(:' | 'namespace'
    consume(190);                   // 'namespace'
    lookahead1W(253);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(31);                // S^WS | '(:' | '='
    consume(61);                    // '='
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(30);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(284);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      switch (l1)
      {
      case 113:                     // 'declare'
        lookahead2W(216);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'collection' |
                                    // 'construction' | 'contains' | 'context' | 'copy-namespaces' | 'decimal-format' |
                                    // 'default' | 'div' | 'eq' | 'except' | 'ft-option' | 'function' | 'ge' | 'gt' |
                                    // 'idiv' | 'index' | 'instance' | 'integrity' | 'intersect' | 'is' | 'le' | 'lt' |
                                    // 'mod' | 'namespace' | 'ne' | 'option' | 'or' | 'ordering' | 'revalidation' |
                                    // 'to' | 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      case 158:                     // 'import'
        lookahead2W(204);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' |
                                    // 'schema' | 'to' | 'treat' | 'union' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 45169               // 'declare' 'base-uri'
       && lk != 46193               // 'declare' 'boundary-space'
       && lk != 52849               // 'declare' 'construction'
       && lk != 55921               // 'declare' 'copy-namespaces'
       && lk != 56945               // 'declare' 'decimal-format'
       && lk != 58481               // 'declare' 'default'
       && lk != 74865               // 'declare' 'ft-option'
       && lk != 96414               // 'import' 'module'
       && lk != 97393               // 'declare' 'namespace'
       && lk != 107121              // 'declare' 'ordering'
       && lk != 116849              // 'declare' 'revalidation'
       && lk != 118430)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 113:                     // 'declare'
        lookahead2W(180);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 58481)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 97393:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 158:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 74865:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(30);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(284);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      switch (l1)
      {
      case 113:                     // 'declare'
        lookahead2W(213);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'collection' | 'contains' | 'context' | 'div' | 'eq' |
                                    // 'except' | 'function' | 'ge' | 'gt' | 'idiv' | 'index' | 'instance' |
                                    // 'integrity' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'option' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 17009               // 'declare' '%'
       && lk != 51313               // 'declare' 'collection'
       && lk != 54385               // 'declare' 'context'
       && lk != 76913               // 'declare' 'function'
       && lk != 82033               // 'declare' 'index'
       && lk != 85105               // 'declare' 'integrity'
       && lk != 105073              // 'declare' 'option'
       && lk != 134769              // 'declare' 'updating'
       && lk != 137329)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 113:                     // 'declare'
        lookahead2W(177);           // S^WS | '%' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 54385:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 105073:                  // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(30);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(54);                    // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 113:                       // 'declare'
      lookahead2W(174);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 58481)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 46193:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 45169:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 52849:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 107121:                    // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 116849:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 55921:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(35);                // S^WS | '(:' | 'boundary-space'
    consume(90);                    // 'boundary-space'
    lookahead1W(135);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 220:                       // 'preserve'
      consume(220);                 // 'preserve'
      break;
    default:
      consume(247);                 // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(48);                // S^WS | '(:' | 'default'
    consume(114);                   // 'default'
    lookahead1W(40);                // S^WS | '(:' | 'collation'
    consume(99);                    // 'collation'
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    consumeT(113);                  // 'declare'
    lookahead1W(48);                // S^WS | '(:' | 'default'
    consumeT(114);                  // 'default'
    lookahead1W(40);                // S^WS | '(:' | 'collation'
    consumeT(99);                   // 'collation'
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(34);                // S^WS | '(:' | 'base-uri'
    consume(88);                    // 'base-uri'
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'construction'
    consume(103);                   // 'construction'
    lookahead1W(135);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 247:                       // 'strip'
      consume(247);                 // 'strip'
      break;
    default:
      consume(220);                 // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(70);                // S^WS | '(:' | 'ordering'
    consume(209);                   // 'ordering'
    lookahead1W(133);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 208:                       // 'ordered'
      consume(208);                 // 'ordered'
      break;
    default:
      consume(262);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(48);                // S^WS | '(:' | 'default'
    consume(114);                   // 'default'
    lookahead1W(69);                // S^WS | '(:' | 'order'
    consume(207);                   // 'order'
    lookahead1W(51);                // S^WS | '(:' | 'empty'
    consume(128);                   // 'empty'
    lookahead1W(123);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 152:                       // 'greatest'
      consume(152);                 // 'greatest'
      break;
    default:
      consume(178);                 // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    consumeT(113);                  // 'declare'
    lookahead1W(48);                // S^WS | '(:' | 'default'
    consumeT(114);                  // 'default'
    lookahead1W(69);                // S^WS | '(:' | 'order'
    consumeT(207);                  // 'order'
    lookahead1W(51);                // S^WS | '(:' | 'empty'
    consumeT(128);                  // 'empty'
    lookahead1W(123);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 152:                       // 'greatest'
      consumeT(152);                // 'greatest'
      break;
    default:
      consumeT(178);                // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'copy-namespaces'
    consume(109);                   // 'copy-namespaces'
    lookahead1W(130);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(27);                // S^WS | '(:' | ','
    consume(42);                    // ','
    lookahead1W(125);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 220:                       // 'preserve'
      consume(220);                 // 'preserve'
      break;
    default:
      consume(196);                 // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 162:                       // 'inherit'
      consume(162);                 // 'inherit'
      break;
    default:
      consume(195);                 // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(116);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 111:                       // 'decimal-format'
      consume(111);                 // 'decimal-format'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(114);                 // 'default'
      lookahead1W(47);              // S^WS | '(:' | 'decimal-format'
      consume(111);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(182);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 54)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(31);              // S^WS | '(:' | '='
      consume(61);                  // '='
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 112:                       // 'decimal-separator'
      consume(112);                 // 'decimal-separator'
      break;
    case 154:                       // 'grouping-separator'
      consume(154);                 // 'grouping-separator'
      break;
    case 161:                       // 'infinity'
      consume(161);                 // 'infinity'
      break;
    case 185:                       // 'minus-sign'
      consume(185);                 // 'minus-sign'
      break;
    case 69:                        // 'NaN'
      consume(69);                  // 'NaN'
      break;
    case 215:                       // 'percent'
      consume(215);                 // 'percent'
      break;
    case 214:                       // 'per-mille'
      consume(214);                 // 'per-mille'
      break;
    case 281:                       // 'zero-digit'
      consume(281);                 // 'zero-digit'
      break;
    case 121:                       // 'digit'
      consume(121);                 // 'digit'
      break;
    default:
      consume(213);                 // 'pattern-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 158:                       // 'import'
      lookahead2W(128);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 118430:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(158);                   // 'import'
    lookahead1W(75);                // S^WS | '(:' | 'schema'
    consume(231);                   // 'schema'
    lookahead1W(139);               // URILiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 7)                    // URILiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(110);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 86)                   // 'at'
    {
      consume(86);                  // 'at'
      lookahead1W(17);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      for (;;)
      {
        lookahead1W(105);           // S^WS | '(:' | ',' | ';'
        if (l1 != 42)               // ','
        {
          break;
        }
        consume(42);                // ','
        lookahead1W(17);            // URILiteral | S^WS | '(:'
        consume(7);                 // URILiteral
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 190:                       // 'namespace'
      consume(190);                 // 'namespace'
      lookahead1W(253);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(31);              // S^WS | '(:' | '='
      consume(61);                  // '='
      break;
    default:
      consume(114);                 // 'default'
      lookahead1W(49);              // S^WS | '(:' | 'element'
      consume(126);                 // 'element'
      lookahead1W(63);              // S^WS | '(:' | 'namespace'
      consume(190);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(158);                   // 'import'
    lookahead1W(62);                // S^WS | '(:' | 'module'
    consume(188);                   // 'module'
    lookahead1W(92);                // URILiteral | S^WS | '(:' | 'namespace'
    if (l1 == 190)                  // 'namespace'
    {
      consume(190);                 // 'namespace'
      lookahead1W(253);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(31);              // S^WS | '(:' | '='
      consume(61);                  // '='
    }
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(110);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 86)                   // 'at'
    {
      consume(86);                  // 'at'
      lookahead1W(17);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      for (;;)
      {
        lookahead1W(105);           // S^WS | '(:' | ',' | ';'
        if (l1 != 42)               // ','
        {
          break;
        }
        consume(42);                // ','
        lookahead1W(17);            // URILiteral | S^WS | '(:'
        consume(7);                 // URILiteral
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(63);                // S^WS | '(:' | 'namespace'
    consume(190);                   // 'namespace'
    lookahead1W(253);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(31);                // S^WS | '(:' | '='
    consume(61);                    // '='
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(48);                // S^WS | '(:' | 'default'
    consume(114);                   // 'default'
    lookahead1W(117);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 126:                       // 'element'
      consume(126);                 // 'element'
      break;
    default:
      consume(150);                 // 'function'
    }
    lookahead1W(63);                // S^WS | '(:' | 'namespace'
    consume(190);                   // 'namespace'
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    consumeT(113);                  // 'declare'
    lookahead1W(48);                // S^WS | '(:' | 'default'
    consumeT(114);                  // 'default'
    lookahead1W(117);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 126:                       // 'element'
      consumeT(126);                // 'element'
      break;
    default:
      consumeT(150);                // 'function'
    }
    lookahead1W(63);                // S^WS | '(:' | 'namespace'
    consumeT(190);                  // 'namespace'
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(54);                // S^WS | '(:' | 'ft-option'
    consume(146);                   // 'ft-option'
    lookahead1W(83);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(113);                   // 'declare'
    for (;;)
    {
      lookahead1W(172);             // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (l1 != 33                  // '%'
       && l1 != 263)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 263:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 268:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    case 150:                       // 'function'
      whitespace();
      parse_FunctionDecl();
      break;
    case 100:                       // 'collection'
      whitespace();
      parse_CollectionDecl();
      break;
    case 160:                       // 'index'
      whitespace();
      parse_IndexDecl();
      break;
    default:
      whitespace();
      parse_ICDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    consume(263);                   // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(33);                    // '%'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(173);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 35)                   // '('
    {
      consume(35);                  // '('
      lookahead1W(156);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        consume(42);                // ','
        lookahead1W(156);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(38);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    consumeT(33);                   // '%'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(173);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 35)                   // '('
    {
      consumeT(35);                 // '('
      lookahead1W(156);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        consumeT(42);               // ','
        lookahead1W(156);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(38);                 // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(268);                   // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(149);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(108);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 53:                        // ':='
      consume(53);                  // ':='
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(138);                 // 'external'
      lookahead1W(106);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        consume(53);                // ':='
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(45);                // S^WS | '(:' | 'context'
    consume(106);                   // 'context'
    lookahead1W(57);                // S^WS | '(:' | 'item'
    consume(170);                   // 'item'
    lookahead1W(149);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 84)                   // 'as'
    {
      consume(84);                  // 'as'
      lookahead1W(267);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(108);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 53:                        // ':='
      consume(53);                  // ':='
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(138);                 // 'external'
      lookahead1W(106);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        consume(53);                // ':='
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(103);             // S^WS | '(:' | ')' | ','
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(103);             // S^WS | '(:' | ')' | ','
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(32);                    // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(145);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    consumeT(32);                   // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(145);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 84)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(282);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Expr();
    consume(288);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    consumeT(282);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Expr();
    consumeT(288);                  // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(68);                // S^WS | '(:' | 'option'
    consume(205);                   // 'option'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_ExprSingle();
    }
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(175);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 226)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(175);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 226)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 142:                       // 'for'
      lookahead2W(143);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16526:                     // 'for' '$'
      parse_ForClause();
      break;
    case 179:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 142:                       // 'for'
      lookahead2W(143);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16526:                     // 'for' '$'
      try_ForClause();
      break;
    case 179:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 142:                       // 'for'
    case 179:                       // 'let'
      parse_InitialClause();
      break;
    case 272:                       // 'where'
      parse_WhereClause();
      break;
    case 153:                       // 'group'
      parse_GroupByClause();
      break;
    case 110:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 142:                       // 'for'
    case 179:                       // 'let'
      try_InitialClause();
      break;
    case 272:                       // 'where'
      try_WhereClause();
      break;
    case 153:                       // 'group'
      try_GroupByClause();
      break;
    case 110:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(142);                   // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    consumeT(142);                  // 'for'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(32);                    // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(166);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(160);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(152);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 86)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(124);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 234)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(55);                // S^WS | '(:' | 'in'
    consume(159);                   // 'in'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    consumeT(32);                   // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(166);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 84)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(160);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 77)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(152);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 86)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(124);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 234)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(55);                // S^WS | '(:' | 'in'
    consumeT(159);                  // 'in'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(77);                    // 'allowing'
    lookahead1W(51);                // S^WS | '(:' | 'empty'
    consume(128);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    consumeT(77);                   // 'allowing'
    lookahead1W(51);                // S^WS | '(:' | 'empty'
    consumeT(128);                  // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(86);                    // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    consumeT(86);                   // 'at'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    consume(234);                   // 'score'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    consumeT(234);                  // 'score'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(179);                   // 'let'
    lookahead1W(98);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(98);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    consumeT(179);                  // 'let'
    lookahead1W(98);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(98);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 32:                        // '$'
      consume(32);                  // '$'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(107);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 84)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(29);                // S^WS | '(:' | ':='
    consume(53);                    // ':='
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 32:                        // '$'
      consumeT(32);                 // '$'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(107);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 84)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(29);                // S^WS | '(:' | ':='
    consumeT(53);                   // ':='
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(142);                   // 'for'
    lookahead1W(137);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 257:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    consumeT(142);                  // 'for'
    lookahead1W(137);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 257:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(257);                   // 'tumbling'
    lookahead1W(87);                // S^WS | '(:' | 'window'
    consume(275);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(112);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(55);                // S^WS | '(:' | 'in'
    consume(159);                   // 'in'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    if (l1 == 131                   // 'end'
     || l1 == 204)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    consumeT(257);                  // 'tumbling'
    lookahead1W(87);                // S^WS | '(:' | 'window'
    consumeT(275);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(112);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 84)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(55);                // S^WS | '(:' | 'in'
    consumeT(159);                  // 'in'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    if (l1 == 131                   // 'end'
     || l1 == 204)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(240);                   // 'sliding'
    lookahead1W(87);                // S^WS | '(:' | 'window'
    consume(275);                   // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(112);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(55);                // S^WS | '(:' | 'in'
    consume(159);                   // 'in'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    consumeT(240);                  // 'sliding'
    lookahead1W(87);                // S^WS | '(:' | 'window'
    consumeT(275);                  // 'window'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(112);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 84)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(55);                // S^WS | '(:' | 'in'
    consumeT(159);                  // 'in'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(243);                   // 'start'
    lookahead1W(165);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(85);                // S^WS | '(:' | 'when'
    consume(271);                   // 'when'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    consumeT(243);                  // 'start'
    lookahead1W(165);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(85);                // S^WS | '(:' | 'when'
    consumeT(271);                  // 'when'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 204)                  // 'only'
    {
      consume(204);                 // 'only'
    }
    lookahead1W(52);                // S^WS | '(:' | 'end'
    consume(131);                   // 'end'
    lookahead1W(165);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(85);                // S^WS | '(:' | 'when'
    consume(271);                   // 'when'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 204)                  // 'only'
    {
      consumeT(204);                // 'only'
    }
    lookahead1W(52);                // S^WS | '(:' | 'end'
    consumeT(131);                  // 'end'
    lookahead1W(165);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(85);                // S^WS | '(:' | 'when'
    consumeT(271);                  // 'when'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 32)                   // '$'
    {
      consume(32);                  // '$'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(161);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 86)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(155);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 221)                  // 'previous'
    {
      consume(221);                 // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(32);                  // '$'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(129);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 193)                  // 'next'
    {
      consume(193);                 // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(32);                  // '$'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 32)                   // '$'
    {
      consumeT(32);                 // '$'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_CurrentItem();
    }
    lookahead1W(161);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 86)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(155);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 221)                  // 'previous'
    {
      consumeT(221);                // 'previous'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(32);                 // '$'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_PreviousItem();
    }
    lookahead1W(129);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 193)                  // 'next'
    {
      consumeT(193);                // 'next'
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(32);                 // '$'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(110);                   // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    consumeT(110);                  // 'count'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(272);                   // 'where'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    consumeT(272);                  // 'where'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(153);                   // 'group'
    lookahead1W(36);                // S^WS | '(:' | 'by'
    consume(92);                    // 'by'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    consumeT(153);                  // 'group'
    lookahead1W(36);                // S^WS | '(:' | 'by'
    consumeT(92);                   // 'by'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(178);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(178);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    switch (l1)
    {
    case 32:                        // '$'
      lookahead2W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 3104                  // '$' EQName^Token
     || lk == 38432                 // '$' 'after'
     || lk == 39456                 // '$' 'allowing'
     || lk == 39968                 // '$' 'ancestor'
     || lk == 40480                 // '$' 'ancestor-or-self'
     || lk == 40992                 // '$' 'and'
     || lk == 42016                 // '$' 'append'
     || lk == 42528                 // '$' 'array'
     || lk == 43040                 // '$' 'as'
     || lk == 43552                 // '$' 'ascending'
     || lk == 44064                 // '$' 'at'
     || lk == 44576                 // '$' 'attribute'
     || lk == 45088                 // '$' 'base-uri'
     || lk == 45600                 // '$' 'before'
     || lk == 46112                 // '$' 'boundary-space'
     || lk == 46624                 // '$' 'break'
     || lk == 47648                 // '$' 'case'
     || lk == 48160                 // '$' 'cast'
     || lk == 48672                 // '$' 'castable'
     || lk == 49184                 // '$' 'catch'
     || lk == 50208                 // '$' 'child'
     || lk == 50720                 // '$' 'collation'
     || lk == 51744                 // '$' 'comment'
     || lk == 52256                 // '$' 'constraint'
     || lk == 52768                 // '$' 'construction'
     || lk == 54304                 // '$' 'context'
     || lk == 54816                 // '$' 'continue'
     || lk == 55328                 // '$' 'copy'
     || lk == 55840                 // '$' 'copy-namespaces'
     || lk == 56352                 // '$' 'count'
     || lk == 56864                 // '$' 'decimal-format'
     || lk == 57888                 // '$' 'declare'
     || lk == 58400                 // '$' 'default'
     || lk == 58912                 // '$' 'delete'
     || lk == 59424                 // '$' 'descendant'
     || lk == 59936                 // '$' 'descendant-or-self'
     || lk == 60448                 // '$' 'descending'
     || lk == 63008                 // '$' 'div'
     || lk == 63520                 // '$' 'document'
     || lk == 64032                 // '$' 'document-node'
     || lk == 64544                 // '$' 'element'
     || lk == 65056                 // '$' 'else'
     || lk == 65568                 // '$' 'empty'
     || lk == 66080                 // '$' 'empty-sequence'
     || lk == 66592                 // '$' 'encoding'
     || lk == 67104                 // '$' 'end'
     || lk == 68128                 // '$' 'eq'
     || lk == 68640                 // '$' 'every'
     || lk == 69664                 // '$' 'except'
     || lk == 70176                 // '$' 'exit'
     || lk == 70688                 // '$' 'external'
     || lk == 71200                 // '$' 'first'
     || lk == 71712                 // '$' 'following'
     || lk == 72224                 // '$' 'following-sibling'
     || lk == 72736                 // '$' 'for'
     || lk == 74784                 // '$' 'ft-option'
     || lk == 76832                 // '$' 'function'
     || lk == 77344                 // '$' 'ge'
     || lk == 78368                 // '$' 'group'
     || lk == 79392                 // '$' 'gt'
     || lk == 79904                 // '$' 'idiv'
     || lk == 80416                 // '$' 'if'
     || lk == 80928                 // '$' 'import'
     || lk == 81440                 // '$' 'in'
     || lk == 81952                 // '$' 'index'
     || lk == 84000                 // '$' 'insert'
     || lk == 84512                 // '$' 'instance'
     || lk == 85024                 // '$' 'integrity'
     || lk == 85536                 // '$' 'intersect'
     || lk == 86048                 // '$' 'into'
     || lk == 86560                 // '$' 'is'
     || lk == 87072                 // '$' 'item'
     || lk == 87584                 // '$' 'json'
     || lk == 88096                 // '$' 'json-item'
     || lk == 89632                 // '$' 'last'
     || lk == 90144                 // '$' 'lax'
     || lk == 90656                 // '$' 'le'
     || lk == 91680                 // '$' 'let'
     || lk == 92704                 // '$' 'loop'
     || lk == 93728                 // '$' 'lt'
     || lk == 94240                 // '$' 'map'
     || lk == 95264                 // '$' 'mod'
     || lk == 95776                 // '$' 'modify'
     || lk == 96288                 // '$' 'module'
     || lk == 97312                 // '$' 'namespace'
     || lk == 97824                 // '$' 'namespace-node'
     || lk == 98336                 // '$' 'ne'
     || lk == 100896                // '$' 'node'
     || lk == 101408                // '$' 'nodes'
     || lk == 102432                // '$' 'object'
     || lk == 104480                // '$' 'only'
     || lk == 104992                // '$' 'option'
     || lk == 105504                // '$' 'or'
     || lk == 106016                // '$' 'order'
     || lk == 106528                // '$' 'ordered'
     || lk == 107040                // '$' 'ordering'
     || lk == 108576                // '$' 'parent'
     || lk == 111648                // '$' 'preceding'
     || lk == 112160                // '$' 'preceding-sibling'
     || lk == 113696                // '$' 'processing-instruction'
     || lk == 114720                // '$' 'rename'
     || lk == 115232                // '$' 'replace'
     || lk == 115744                // '$' 'return'
     || lk == 116256                // '$' 'returning'
     || lk == 116768                // '$' 'revalidation'
     || lk == 117792                // '$' 'satisfies'
     || lk == 118304                // '$' 'schema'
     || lk == 118816                // '$' 'schema-attribute'
     || lk == 119328                // '$' 'schema-element'
     || lk == 119840                // '$' 'score'
     || lk == 120352                // '$' 'self'
     || lk == 122912                // '$' 'sliding'
     || lk == 123424                // '$' 'some'
     || lk == 123936                // '$' 'stable'
     || lk == 124448                // '$' 'start'
     || lk == 125984                // '$' 'strict'
     || lk == 127008                // '$' 'structured-item'
     || lk == 127520                // '$' 'switch'
     || lk == 128032                // '$' 'text'
     || lk == 130080                // '$' 'to'
     || lk == 130592                // '$' 'treat'
     || lk == 131104                // '$' 'try'
     || lk == 131616                // '$' 'tumbling'
     || lk == 132128                // '$' 'type'
     || lk == 132640                // '$' 'typeswitch'
     || lk == 133152                // '$' 'union'
     || lk == 134176                // '$' 'unordered'
     || lk == 134688                // '$' 'updating'
     || lk == 136224                // '$' 'validate'
     || lk == 136736                // '$' 'value'
     || lk == 137248                // '$' 'variable'
     || lk == 137760                // '$' 'version'
     || lk == 139296                // '$' 'where'
     || lk == 139808                // '$' 'while'
     || lk == 141344                // '$' 'with'
     || lk == 143392)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(184);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 53              // ':='
           || l1 == 84)             // 'as'
          {
            if (l1 == 84)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(29);        // S^WS | '(:' | ':='
            consumeT(53);           // ':='
            lookahead1W(276);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
            try_ExprSingle();
          }
          if (l1 == 99)             // 'collation'
          {
            consumeT(99);           // 'collation'
            lookahead1W(17);        // URILiteral | S^WS | '(:'
            consumeT(7);            // URILiteral
          }
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(2, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      parse_GroupingVariable();
      lookahead1W(184);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 53                  // ':='
       || l1 == 84)                 // 'as'
      {
        if (l1 == 84)               // 'as'
        {
          whitespace();
          parse_TypeDeclaration();
        }
        lookahead1W(29);            // S^WS | '(:' | ':='
        consume(53);                // ':='
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        whitespace();
        parse_ExprSingle();
      }
      if (l1 == 99)                 // 'collation'
      {
        consume(99);                // 'collation'
        lookahead1W(17);            // URILiteral | S^WS | '(:'
        consume(7);                 // URILiteral
      }
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    switch (l1)
    {
    case 32:                        // '$'
      lookahead2W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 3104                  // '$' EQName^Token
     || lk == 38432                 // '$' 'after'
     || lk == 39456                 // '$' 'allowing'
     || lk == 39968                 // '$' 'ancestor'
     || lk == 40480                 // '$' 'ancestor-or-self'
     || lk == 40992                 // '$' 'and'
     || lk == 42016                 // '$' 'append'
     || lk == 42528                 // '$' 'array'
     || lk == 43040                 // '$' 'as'
     || lk == 43552                 // '$' 'ascending'
     || lk == 44064                 // '$' 'at'
     || lk == 44576                 // '$' 'attribute'
     || lk == 45088                 // '$' 'base-uri'
     || lk == 45600                 // '$' 'before'
     || lk == 46112                 // '$' 'boundary-space'
     || lk == 46624                 // '$' 'break'
     || lk == 47648                 // '$' 'case'
     || lk == 48160                 // '$' 'cast'
     || lk == 48672                 // '$' 'castable'
     || lk == 49184                 // '$' 'catch'
     || lk == 50208                 // '$' 'child'
     || lk == 50720                 // '$' 'collation'
     || lk == 51744                 // '$' 'comment'
     || lk == 52256                 // '$' 'constraint'
     || lk == 52768                 // '$' 'construction'
     || lk == 54304                 // '$' 'context'
     || lk == 54816                 // '$' 'continue'
     || lk == 55328                 // '$' 'copy'
     || lk == 55840                 // '$' 'copy-namespaces'
     || lk == 56352                 // '$' 'count'
     || lk == 56864                 // '$' 'decimal-format'
     || lk == 57888                 // '$' 'declare'
     || lk == 58400                 // '$' 'default'
     || lk == 58912                 // '$' 'delete'
     || lk == 59424                 // '$' 'descendant'
     || lk == 59936                 // '$' 'descendant-or-self'
     || lk == 60448                 // '$' 'descending'
     || lk == 63008                 // '$' 'div'
     || lk == 63520                 // '$' 'document'
     || lk == 64032                 // '$' 'document-node'
     || lk == 64544                 // '$' 'element'
     || lk == 65056                 // '$' 'else'
     || lk == 65568                 // '$' 'empty'
     || lk == 66080                 // '$' 'empty-sequence'
     || lk == 66592                 // '$' 'encoding'
     || lk == 67104                 // '$' 'end'
     || lk == 68128                 // '$' 'eq'
     || lk == 68640                 // '$' 'every'
     || lk == 69664                 // '$' 'except'
     || lk == 70176                 // '$' 'exit'
     || lk == 70688                 // '$' 'external'
     || lk == 71200                 // '$' 'first'
     || lk == 71712                 // '$' 'following'
     || lk == 72224                 // '$' 'following-sibling'
     || lk == 72736                 // '$' 'for'
     || lk == 74784                 // '$' 'ft-option'
     || lk == 76832                 // '$' 'function'
     || lk == 77344                 // '$' 'ge'
     || lk == 78368                 // '$' 'group'
     || lk == 79392                 // '$' 'gt'
     || lk == 79904                 // '$' 'idiv'
     || lk == 80416                 // '$' 'if'
     || lk == 80928                 // '$' 'import'
     || lk == 81440                 // '$' 'in'
     || lk == 81952                 // '$' 'index'
     || lk == 84000                 // '$' 'insert'
     || lk == 84512                 // '$' 'instance'
     || lk == 85024                 // '$' 'integrity'
     || lk == 85536                 // '$' 'intersect'
     || lk == 86048                 // '$' 'into'
     || lk == 86560                 // '$' 'is'
     || lk == 87072                 // '$' 'item'
     || lk == 87584                 // '$' 'json'
     || lk == 88096                 // '$' 'json-item'
     || lk == 89632                 // '$' 'last'
     || lk == 90144                 // '$' 'lax'
     || lk == 90656                 // '$' 'le'
     || lk == 91680                 // '$' 'let'
     || lk == 92704                 // '$' 'loop'
     || lk == 93728                 // '$' 'lt'
     || lk == 94240                 // '$' 'map'
     || lk == 95264                 // '$' 'mod'
     || lk == 95776                 // '$' 'modify'
     || lk == 96288                 // '$' 'module'
     || lk == 97312                 // '$' 'namespace'
     || lk == 97824                 // '$' 'namespace-node'
     || lk == 98336                 // '$' 'ne'
     || lk == 100896                // '$' 'node'
     || lk == 101408                // '$' 'nodes'
     || lk == 102432                // '$' 'object'
     || lk == 104480                // '$' 'only'
     || lk == 104992                // '$' 'option'
     || lk == 105504                // '$' 'or'
     || lk == 106016                // '$' 'order'
     || lk == 106528                // '$' 'ordered'
     || lk == 107040                // '$' 'ordering'
     || lk == 108576                // '$' 'parent'
     || lk == 111648                // '$' 'preceding'
     || lk == 112160                // '$' 'preceding-sibling'
     || lk == 113696                // '$' 'processing-instruction'
     || lk == 114720                // '$' 'rename'
     || lk == 115232                // '$' 'replace'
     || lk == 115744                // '$' 'return'
     || lk == 116256                // '$' 'returning'
     || lk == 116768                // '$' 'revalidation'
     || lk == 117792                // '$' 'satisfies'
     || lk == 118304                // '$' 'schema'
     || lk == 118816                // '$' 'schema-attribute'
     || lk == 119328                // '$' 'schema-element'
     || lk == 119840                // '$' 'score'
     || lk == 120352                // '$' 'self'
     || lk == 122912                // '$' 'sliding'
     || lk == 123424                // '$' 'some'
     || lk == 123936                // '$' 'stable'
     || lk == 124448                // '$' 'start'
     || lk == 125984                // '$' 'strict'
     || lk == 127008                // '$' 'structured-item'
     || lk == 127520                // '$' 'switch'
     || lk == 128032                // '$' 'text'
     || lk == 130080                // '$' 'to'
     || lk == 130592                // '$' 'treat'
     || lk == 131104                // '$' 'try'
     || lk == 131616                // '$' 'tumbling'
     || lk == 132128                // '$' 'type'
     || lk == 132640                // '$' 'typeswitch'
     || lk == 133152                // '$' 'union'
     || lk == 134176                // '$' 'unordered'
     || lk == 134688                // '$' 'updating'
     || lk == 136224                // '$' 'validate'
     || lk == 136736                // '$' 'value'
     || lk == 137248                // '$' 'variable'
     || lk == 137760                // '$' 'version'
     || lk == 139296                // '$' 'where'
     || lk == 139808                // '$' 'while'
     || lk == 141344                // '$' 'with'
     || lk == 143392)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(184);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 53              // ':='
           || l1 == 84)             // 'as'
          {
            if (l1 == 84)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(29);        // S^WS | '(:' | ':='
            consumeT(53);           // ':='
            lookahead1W(276);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
            try_ExprSingle();
          }
          if (l1 == 99)             // 'collation'
          {
            consumeT(99);           // 'collation'
            lookahead1W(17);        // URILiteral | S^WS | '(:'
            consumeT(7);            // URILiteral
          }
          memoize(2, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      try_GroupingVariable();
      lookahead1W(184);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 53                  // ':='
       || l1 == 84)                 // 'as'
      {
        if (l1 == 84)               // 'as'
        {
          try_TypeDeclaration();
        }
        lookahead1W(29);            // S^WS | '(:' | ':='
        consumeT(53);               // ':='
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        try_ExprSingle();
      }
      if (l1 == 99)                 // 'collation'
      {
        consumeT(99);               // 'collation'
        lookahead1W(17);            // URILiteral | S^WS | '(:'
        consumeT(7);                // URILiteral
      }
      break;
    case -3:
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    consume(32);                    // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    consumeT(32);                   // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 207:                       // 'order'
      consume(207);                 // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consume(92);                  // 'by'
      break;
    default:
      consume(242);                 // 'stable'
      lookahead1W(69);              // S^WS | '(:' | 'order'
      consume(207);                 // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consume(92);                  // 'by'
    }
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 207:                       // 'order'
      consumeT(207);                // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consumeT(92);                 // 'by'
      break;
    default:
      consumeT(242);                // 'stable'
      lookahead1W(69);              // S^WS | '(:' | 'order'
      consumeT(207);                // 'order'
      lookahead1W(36);              // S^WS | '(:' | 'by'
      consumeT(92);                 // 'by'
    }
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(178);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(178);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 85                    // 'ascending'
     || l1 == 118)                  // 'descending'
    {
      switch (l1)
      {
      case 85:                      // 'ascending'
        consume(85);                // 'ascending'
        break;
      default:
        consume(118);               // 'descending'
      }
    }
    lookahead1W(181);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 128)                  // 'empty'
    {
      consume(128);                 // 'empty'
      lookahead1W(123);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 152:                     // 'greatest'
        consume(152);               // 'greatest'
        break;
      default:
        consume(178);               // 'least'
      }
    }
    lookahead1W(179);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 99)                   // 'collation'
    {
      consume(99);                  // 'collation'
      lookahead1W(17);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 85                    // 'ascending'
     || l1 == 118)                  // 'descending'
    {
      switch (l1)
      {
      case 85:                      // 'ascending'
        consumeT(85);               // 'ascending'
        break;
      default:
        consumeT(118);              // 'descending'
      }
    }
    lookahead1W(181);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 128)                  // 'empty'
    {
      consumeT(128);                // 'empty'
      lookahead1W(123);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 152:                     // 'greatest'
        consumeT(152);              // 'greatest'
        break;
      default:
        consumeT(178);              // 'least'
      }
    }
    lookahead1W(179);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 99)                   // 'collation'
    {
      consumeT(99);                 // 'collation'
      lookahead1W(17);              // URILiteral | S^WS | '(:'
      consumeT(7);                  // URILiteral
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(226);                   // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    consumeT(226);                  // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 241:                       // 'some'
      consume(241);                 // 'some'
      break;
    default:
      consume(134);                 // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_QuantifiedVarDecl();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_QuantifiedVarDecl();
    }
    consume(230);                   // 'satisfies'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 241:                       // 'some'
      consumeT(241);                // 'some'
      break;
    default:
      consumeT(134);                // 'every'
    }
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_QuantifiedVarDecl();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_QuantifiedVarDecl();
    }
    consumeT(230);                  // 'satisfies'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_QuantifiedVarDecl()
  {
    eventHandler.startNonterminal("QuantifiedVarDecl", e0);
    consume(32);                    // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(112);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(55);                // S^WS | '(:' | 'in'
    consume(159);                   // 'in'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedVarDecl", e0);
  }

  function try_QuantifiedVarDecl()
  {
    consumeT(32);                   // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(112);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 84)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(55);                // S^WS | '(:' | 'in'
    consumeT(159);                  // 'in'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(249);                   // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consume(114);                   // 'default'
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consume(226);                   // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    consumeT(249);                  // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Expr();
    consumeT(38);                   // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consumeT(114);                  // 'default'
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consumeT(226);                  // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(93);                  // 'case'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consume(226);                   // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(93);                 // 'case'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_SwitchCaseOperand();
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consumeT(226);                  // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(259);                   // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consume(114);                   // 'default'
    lookahead1W(97);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 32)                   // '$'
    {
      consume(32);                  // '$'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consume(226);                   // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    consumeT(259);                  // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Expr();
    consumeT(38);                   // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      try_CaseClause();
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consumeT(114);                  // 'default'
    lookahead1W(97);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 32)                   // '$'
    {
      consumeT(32);                 // '$'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consumeT(226);                  // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(93);                    // 'case'
    lookahead1W(270);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 32)                   // '$'
    {
      consume(32);                  // '$'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consume(84);                  // 'as'
    }
    lookahead1W(267);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(226);                   // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    consumeT(93);                   // 'case'
    lookahead1W(270);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 32)                   // '$'
    {
      consumeT(32);                 // '$'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consumeT(84);                 // 'as'
    }
    lookahead1W(267);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceTypeUnion();
    consumeT(226);                  // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 285)                // '|'
      {
        break;
      }
      consume(285);                 // '|'
      lookahead1W(267);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 285)                // '|'
      {
        break;
      }
      consumeT(285);                // '|'
      lookahead1W(267);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(157);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    lookahead1W(79);                // S^WS | '(:' | 'then'
    consume(251);                   // 'then'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    consume(127);                   // 'else'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    consumeT(157);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Expr();
    consumeT(38);                   // ')'
    lookahead1W(79);                // S^WS | '(:' | 'then'
    consumeT(251);                  // 'then'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
    consumeT(127);                  // 'else'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(185);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}' | '}`'
      if (l1 != 96)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(185);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}' | '}`'
      if (l1 != 96)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(256);                   // 'try'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consume(282);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_TryTargetExpr();
    consume(288);                   // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    consumeT(256);                  // 'try'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consumeT(282);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_TryTargetExpr();
    consumeT(288);                  // '}'
  }

  function parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(96);                    // 'catch'
    lookahead1W(262);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_CatchErrorList();
    consume(282);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Expr();
    consume(288);                   // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    consumeT(96);                   // 'catch'
    lookahead1W(262);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_CatchErrorList();
    consumeT(282);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Expr();
    consumeT(288);                  // '}'
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(138);             // S^WS | '(:' | '{' | '|'
      if (l1 != 285)                // '|'
      {
        break;
      }
      consume(285);                 // '|'
      lookahead1W(262);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(138);             // S^WS | '(:' | '{' | '|'
      if (l1 != 285)                // '|'
      {
        break;
      }
      consumeT(285);                // '|'
      lookahead1W(262);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 206)                // 'or'
      {
        break;
      }
      consume(206);                 // 'or'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 206)                // 'or'
      {
        break;
      }
      consumeT(206);                // 'or'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 80)                 // 'and'
      {
        break;
      }
      consume(80);                  // 'and'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      if (l1 != 80)                 // 'and'
      {
        break;
      }
      consumeT(80);                 // 'and'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    if (l1 == 28                    // '!='
     || l1 == 55                    // '<'
     || l1 == 58                    // '<<'
     || l1 == 59                    // '<='
     || l1 == 61                    // '='
     || l1 == 63                    // '>'
     || l1 == 64                    // '>='
     || l1 == 65                    // '>>'
     || l1 == 133                   // 'eq'
     || l1 == 151                   // 'ge'
     || l1 == 155                   // 'gt'
     || l1 == 169                   // 'is'
     || l1 == 177                   // 'le'
     || l1 == 183                   // 'lt'
     || l1 == 192)                  // 'ne'
    {
      switch (l1)
      {
      case 133:                     // 'eq'
      case 151:                     // 'ge'
      case 155:                     // 'gt'
      case 177:                     // 'le'
      case 183:                     // 'lt'
      case 192:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 58:                      // '<<'
      case 65:                      // '>>'
      case 169:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    if (l1 == 28                    // '!='
     || l1 == 55                    // '<'
     || l1 == 58                    // '<<'
     || l1 == 59                    // '<='
     || l1 == 61                    // '='
     || l1 == 63                    // '>'
     || l1 == 64                    // '>='
     || l1 == 65                    // '>>'
     || l1 == 133                   // 'eq'
     || l1 == 151                   // 'ge'
     || l1 == 155                   // 'gt'
     || l1 == 169                   // 'is'
     || l1 == 177                   // 'le'
     || l1 == 183                   // 'lt'
     || l1 == 192)                  // 'ne'
    {
      switch (l1)
      {
      case 133:                     // 'eq'
      case 151:                     // 'ge'
      case 155:                     // 'gt'
      case 177:                     // 'le'
      case 183:                     // 'lt'
      case 192:                     // 'ne'
        try_ValueComp();
        break;
      case 58:                      // '<<'
      case 65:                      // '>>'
      case 169:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 104)                  // 'contains'
    {
      consume(104);                 // 'contains'
      lookahead1W(78);              // S^WS | '(:' | 'text'
      consume(250);                 // 'text'
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 277)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    if (l1 == 104)                  // 'contains'
    {
      consumeT(104);                // 'contains'
      lookahead1W(78);              // S^WS | '(:' | 'text'
      consumeT(250);                // 'text'
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 277)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 286)                // '||'
      {
        break;
      }
      consume(286);                 // '||'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 286)                // '||'
      {
        break;
      }
      consumeT(286);                // '||'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 254)                  // 'to'
    {
      consume(254);                 // 'to'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 254)                  // 'to'
    {
      consumeT(254);                // 'to'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '+'
        consume(41);                // '+'
        break;
      default:
        consume(43);                // '-'
      }
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 41:                      // '+'
        consumeT(41);               // '+'
        break;
      default:
        consumeT(43);               // '-'
      }
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 39                  // '*'
       && l1 != 123                 // 'div'
       && l1 != 156                 // 'idiv'
       && l1 != 186)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '*'
        consume(39);                // '*'
        break;
      case 123:                     // 'div'
        consume(123);               // 'div'
        break;
      case 156:                     // 'idiv'
        consume(156);               // 'idiv'
        break;
      default:
        consume(186);               // 'mod'
      }
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 39                  // '*'
       && l1 != 123                 // 'div'
       && l1 != 156                 // 'idiv'
       && l1 != 186)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 39:                      // '*'
        consumeT(39);               // '*'
        break;
      case 123:                     // 'div'
        consumeT(123);              // 'div'
        break;
      case 156:                     // 'idiv'
        consumeT(156);              // 'idiv'
        break;
      default:
        consumeT(186);              // 'mod'
      }
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 260                 // 'union'
       && l1 != 285)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 260:                     // 'union'
        consume(260);               // 'union'
        break;
      default:
        consume(285);               // '|'
      }
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 260                 // 'union'
       && l1 != 285)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 260:                     // 'union'
        consumeT(260);              // 'union'
        break;
      default:
        consumeT(285);              // '|'
      }
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(225);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      if (l1 != 136                 // 'except'
       && l1 != 167)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 167:                     // 'intersect'
        consume(167);               // 'intersect'
        break;
      default:
        consume(136);               // 'except'
      }
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(225);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      if (l1 != 136                 // 'except'
       && l1 != 167)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 167:                     // 'intersect'
        consumeT(167);              // 'intersect'
        break;
      default:
        consumeT(136);              // 'except'
      }
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' |
                                    // '}`'
    if (l1 == 165)                  // 'instance'
    {
      consume(165);                 // 'instance'
      lookahead1W(66);              // S^WS | '(:' | 'of'
      consume(202);                 // 'of'
      lookahead1W(267);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' |
                                    // '}`'
    if (l1 == 165)                  // 'instance'
    {
      consumeT(165);                // 'instance'
      lookahead1W(66);              // S^WS | '(:' | 'of'
      consumeT(202);                // 'of'
      lookahead1W(267);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
    if (l1 == 255)                  // 'treat'
    {
      consume(255);                 // 'treat'
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consume(84);                  // 'as'
      lookahead1W(267);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
    if (l1 == 255)                  // 'treat'
    {
      consumeT(255);                // 'treat'
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consumeT(84);                 // 'as'
      lookahead1W(267);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(228);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
    if (l1 == 95)                   // 'castable'
    {
      consume(95);                  // 'castable'
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consume(84);                  // 'as'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(228);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
    if (l1 == 95)                   // 'castable'
    {
      consumeT(95);                 // 'castable'
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consumeT(84);                 // 'as'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_ArrowExpr();
    if (l1 == 94)                   // 'cast'
    {
      consume(94);                  // 'cast'
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consume(84);                  // 'as'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_ArrowExpr();
    if (l1 == 94)                   // 'cast'
    {
      consumeT(94);                 // 'cast'
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consumeT(84);                 // 'as'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_ArrowExpr()
  {
    eventHandler.startNonterminal("ArrowExpr", e0);
    parse_UnaryExpr();
    for (;;)
    {
      lookahead1W(230);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '|}' | '}' | '}`'
      if (l1 != 62)                 // '=>'
      {
        break;
      }
      consume(62);                  // '=>'
      lookahead1W(266);             // EQName^Token | S^WS | '$' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      whitespace();
      parse_ArgumentList();
    }
    eventHandler.endNonterminal("ArrowExpr", e0);
  }

  function try_ArrowExpr()
  {
    try_UnaryExpr();
    for (;;)
    {
      lookahead1W(230);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '=>' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' |
                                    // 'stable' | 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // 'words' | '|' | '||' | '|}' | '}' | '}`'
      if (l1 != 62)                 // '=>'
      {
        break;
      }
      consumeT(62);                 // '=>'
      lookahead1W(266);             // EQName^Token | S^WS | '$' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_ArrowFunctionSpecifier();
      lookahead1W(24);              // S^WS | '(' | '(:'
      try_ArgumentList();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 43:                      // '-'
        consume(43);                // '-'
        break;
      default:
        consume(41);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      if (l1 != 41                  // '+'
       && l1 != 43)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 43:                      // '-'
        consumeT(43);               // '-'
        break;
      default:
        consumeT(41);               // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 266:                       // 'validate'
      lookahead2W(252);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 90378:                     // 'validate' 'lax'
    case 126218:                    // 'validate' 'strict'
    case 132362:                    // 'validate' 'type'
    case 144650:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 36:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 266:                       // 'validate'
      lookahead2W(252);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 90378:                     // 'validate' 'lax'
    case 126218:                    // 'validate' 'strict'
    case 132362:                    // 'validate' 'type'
    case 144650:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 36:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 27)                 // '!'
      {
        break;
      }
      consume(27);                  // '!'
      lookahead1W(274);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 27)                 // '!'
      {
        break;
      }
      consumeT(27);                 // '!'
      lookahead1W(274);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 61:                        // '='
      consume(61);                  // '='
      break;
    case 28:                        // '!='
      consume(28);                  // '!='
      break;
    case 55:                        // '<'
      consume(55);                  // '<'
      break;
    case 59:                        // '<='
      consume(59);                  // '<='
      break;
    case 63:                        // '>'
      consume(63);                  // '>'
      break;
    default:
      consume(64);                  // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 61:                        // '='
      consumeT(61);                 // '='
      break;
    case 28:                        // '!='
      consumeT(28);                 // '!='
      break;
    case 55:                        // '<'
      consumeT(55);                 // '<'
      break;
    case 59:                        // '<='
      consumeT(59);                 // '<='
      break;
    case 63:                        // '>'
      consumeT(63);                 // '>'
      break;
    default:
      consumeT(64);                 // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 133:                       // 'eq'
      consume(133);                 // 'eq'
      break;
    case 192:                       // 'ne'
      consume(192);                 // 'ne'
      break;
    case 183:                       // 'lt'
      consume(183);                 // 'lt'
      break;
    case 177:                       // 'le'
      consume(177);                 // 'le'
      break;
    case 155:                       // 'gt'
      consume(155);                 // 'gt'
      break;
    default:
      consume(151);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 133:                       // 'eq'
      consumeT(133);                // 'eq'
      break;
    case 192:                       // 'ne'
      consumeT(192);                // 'ne'
      break;
    case 183:                       // 'lt'
      consumeT(183);                // 'lt'
      break;
    case 177:                       // 'le'
      consumeT(177);                // 'le'
      break;
    case 155:                       // 'gt'
      consumeT(155);                // 'gt'
      break;
    default:
      consumeT(151);                // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 169:                       // 'is'
      consume(169);                 // 'is'
      break;
    case 58:                        // '<<'
      consume(58);                  // '<<'
      break;
    default:
      consume(65);                  // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 169:                       // 'is'
      consumeT(169);                // 'is'
      break;
    case 58:                        // '<<'
      consumeT(58);                 // '<<'
      break;
    default:
      consumeT(65);                 // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(266);                   // 'validate'
    lookahead1W(162);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 282)                  // '{'
    {
      switch (l1)
      {
      case 258:                     // 'type'
        consume(258);               // 'type'
        lookahead1W(259);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    consume(282);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Expr();
    consume(288);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    consumeT(266);                  // 'validate'
    lookahead1W(162);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 282)                  // '{'
    {
      switch (l1)
      {
      case 258:                     // 'type'
        consumeT(258);              // 'type'
        lookahead1W(259);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    consumeT(282);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Expr();
    consumeT(288);                  // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 176:                       // 'lax'
      consume(176);                 // 'lax'
      break;
    default:
      consume(246);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 176:                       // 'lax'
      consumeT(176);                // 'lax'
      break;
    default:
      consumeT(246);                // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(102);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    consume(282);                   // '{'
    lookahead1W(282);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
    if (l1 != 288)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(288);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(102);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    consumeT(282);                  // '{'
    lookahead1W(282);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
    if (l1 != 288)                  // '}'
    {
      try_Expr();
    }
    consumeT(288);                  // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(36);                    // '(#'
    lookahead1(256);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 22)                   // S
    {
      consume(22);                  // S
    }
    parse_EQName();
    lookahead1(11);                 // S | '#)'
    if (l1 == 22)                   // S
    {
      consume(22);                  // S
      lookahead1(0);                // PragmaContents
      consume(1);                   // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consume(31);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    consumeT(36);                   // '(#'
    lookahead1(256);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 22)                   // S
    {
      consumeT(22);                 // S
    }
    try_EQName();
    lookahead1(11);                 // S | '#)'
    if (l1 == 22)                   // S
    {
      consumeT(22);                 // S
      lookahead1(0);                // PragmaContents
      consumeT(1);                  // PragmaContents
    }
    lookahead1(6);                  // '#)'
    consumeT(31);                   // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 47:                        // '/'
      consume(47);                  // '/'
      lookahead1W(294);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' | ']' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' |
                                    // '{|' | '|' | '||' | '|}' | '}' | '}`'
      switch (l1)
      {
      case 26:                      // EOF
      case 27:                      // '!'
      case 28:                      // '!='
      case 38:                      // ')'
      case 39:                      // '*'
      case 41:                      // '+'
      case 42:                      // ','
      case 43:                      // '-'
      case 50:                      // ':'
      case 54:                      // ';'
      case 58:                      // '<<'
      case 59:                      // '<='
      case 61:                      // '='
      case 62:                      // '=>'
      case 63:                      // '>'
      case 64:                      // '>='
      case 65:                      // '>>'
      case 71:                      // ']'
      case 92:                      // 'by'
      case 104:                     // 'contains'
      case 211:                     // 'paragraphs'
      case 238:                     // 'sentences'
      case 253:                     // 'times'
      case 279:                     // 'words'
      case 285:                     // '|'
      case 286:                     // '||'
      case 287:                     // '|}'
      case 288:                     // '}'
      case 289:                     // '}`'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 48:                        // '//'
      consume(48);                  // '//'
      lookahead1W(273);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 47:                        // '/'
      consumeT(47);                 // '/'
      lookahead1W(294);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '=>' | '>' | '>=' | '>>' | '?' | '@' | '[' | ']' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'structured-item' |
                                    // 'switch' | 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' |
                                    // 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' | 'value' |
                                    // 'variable' | 'version' | 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' |
                                    // '{|' | '|' | '||' | '|}' | '}' | '}`'
      switch (l1)
      {
      case 26:                      // EOF
      case 27:                      // '!'
      case 28:                      // '!='
      case 38:                      // ')'
      case 39:                      // '*'
      case 41:                      // '+'
      case 42:                      // ','
      case 43:                      // '-'
      case 50:                      // ':'
      case 54:                      // ';'
      case 58:                      // '<<'
      case 59:                      // '<='
      case 61:                      // '='
      case 62:                      // '=>'
      case 63:                      // '>'
      case 64:                      // '>='
      case 65:                      // '>>'
      case 71:                      // ']'
      case 92:                      // 'by'
      case 104:                     // 'contains'
      case 211:                     // 'paragraphs'
      case 238:                     // 'sentences'
      case 253:                     // 'times'
      case 279:                     // 'words'
      case 285:                     // '|'
      case 286:                     // '||'
      case 287:                     // '|}'
      case 288:                     // '}'
      case 289:                     // '}`'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 48:                        // '//'
      consumeT(48);                 // '//'
      lookahead1W(273);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 27:                      // '!'
        lookahead2W(274);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 26                  // EOF
       && lk != 28                  // '!='
       && lk != 38                  // ')'
       && lk != 39                  // '*'
       && lk != 41                  // '+'
       && lk != 42                  // ','
       && lk != 43                  // '-'
       && lk != 47                  // '/'
       && lk != 48                  // '//'
       && lk != 50                  // ':'
       && lk != 54                  // ';'
       && lk != 55                  // '<'
       && lk != 58                  // '<<'
       && lk != 59                  // '<='
       && lk != 61                  // '='
       && lk != 62                  // '=>'
       && lk != 63                  // '>'
       && lk != 64                  // '>='
       && lk != 65                  // '>>'
       && lk != 71                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 84                  // 'as'
       && lk != 85                  // 'ascending'
       && lk != 86                  // 'at'
       && lk != 89                  // 'before'
       && lk != 92                  // 'by'
       && lk != 93                  // 'case'
       && lk != 94                  // 'cast'
       && lk != 95                  // 'castable'
       && lk != 99                  // 'collation'
       && lk != 104                 // 'contains'
       && lk != 110                 // 'count'
       && lk != 114                 // 'default'
       && lk != 118                 // 'descending'
       && lk != 123                 // 'div'
       && lk != 127                 // 'else'
       && lk != 128                 // 'empty'
       && lk != 131                 // 'end'
       && lk != 133                 // 'eq'
       && lk != 136                 // 'except'
       && lk != 142                 // 'for'
       && lk != 151                 // 'ge'
       && lk != 153                 // 'group'
       && lk != 155                 // 'gt'
       && lk != 156                 // 'idiv'
       && lk != 165                 // 'instance'
       && lk != 167                 // 'intersect'
       && lk != 168                 // 'into'
       && lk != 169                 // 'is'
       && lk != 177                 // 'le'
       && lk != 179                 // 'let'
       && lk != 183                 // 'lt'
       && lk != 186                 // 'mod'
       && lk != 187                 // 'modify'
       && lk != 192                 // 'ne'
       && lk != 204                 // 'only'
       && lk != 206                 // 'or'
       && lk != 207                 // 'order'
       && lk != 211                 // 'paragraphs'
       && lk != 226                 // 'return'
       && lk != 230                 // 'satisfies'
       && lk != 238                 // 'sentences'
       && lk != 242                 // 'stable'
       && lk != 243                 // 'start'
       && lk != 253                 // 'times'
       && lk != 254                 // 'to'
       && lk != 255                 // 'treat'
       && lk != 260                 // 'union'
       && lk != 272                 // 'where'
       && lk != 276                 // 'with'
       && lk != 279                 // 'words'
       && lk != 285                 // '|'
       && lk != 286                 // '||'
       && lk != 287                 // '|}'
       && lk != 288                 // '}'
       && lk != 289                 // '}`'
       && lk != 24091               // '!' '/'
       && lk != 24603)              // '!' '//'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 47:                // '/'
              consumeT(47);         // '/'
              break;
            case 48:                // '//'
              consumeT(48);         // '//'
              break;
            default:
              consumeT(27);         // '!'
            }
            lookahead1W(273);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0, lk);
        }
      }
      if (lk != -1
       && lk != 47                  // '/'
       && lk != 48)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 47:                      // '/'
        consume(47);                // '/'
        break;
      case 48:                      // '//'
        consume(48);                // '//'
        break;
      default:
        consume(27);                // '!'
      }
      lookahead1W(273);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 27:                      // '!'
        lookahead2W(274);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 26                  // EOF
       && lk != 28                  // '!='
       && lk != 38                  // ')'
       && lk != 39                  // '*'
       && lk != 41                  // '+'
       && lk != 42                  // ','
       && lk != 43                  // '-'
       && lk != 47                  // '/'
       && lk != 48                  // '//'
       && lk != 50                  // ':'
       && lk != 54                  // ';'
       && lk != 55                  // '<'
       && lk != 58                  // '<<'
       && lk != 59                  // '<='
       && lk != 61                  // '='
       && lk != 62                  // '=>'
       && lk != 63                  // '>'
       && lk != 64                  // '>='
       && lk != 65                  // '>>'
       && lk != 71                  // ']'
       && lk != 75                  // 'after'
       && lk != 80                  // 'and'
       && lk != 84                  // 'as'
       && lk != 85                  // 'ascending'
       && lk != 86                  // 'at'
       && lk != 89                  // 'before'
       && lk != 92                  // 'by'
       && lk != 93                  // 'case'
       && lk != 94                  // 'cast'
       && lk != 95                  // 'castable'
       && lk != 99                  // 'collation'
       && lk != 104                 // 'contains'
       && lk != 110                 // 'count'
       && lk != 114                 // 'default'
       && lk != 118                 // 'descending'
       && lk != 123                 // 'div'
       && lk != 127                 // 'else'
       && lk != 128                 // 'empty'
       && lk != 131                 // 'end'
       && lk != 133                 // 'eq'
       && lk != 136                 // 'except'
       && lk != 142                 // 'for'
       && lk != 151                 // 'ge'
       && lk != 153                 // 'group'
       && lk != 155                 // 'gt'
       && lk != 156                 // 'idiv'
       && lk != 165                 // 'instance'
       && lk != 167                 // 'intersect'
       && lk != 168                 // 'into'
       && lk != 169                 // 'is'
       && lk != 177                 // 'le'
       && lk != 179                 // 'let'
       && lk != 183                 // 'lt'
       && lk != 186                 // 'mod'
       && lk != 187                 // 'modify'
       && lk != 192                 // 'ne'
       && lk != 204                 // 'only'
       && lk != 206                 // 'or'
       && lk != 207                 // 'order'
       && lk != 211                 // 'paragraphs'
       && lk != 226                 // 'return'
       && lk != 230                 // 'satisfies'
       && lk != 238                 // 'sentences'
       && lk != 242                 // 'stable'
       && lk != 243                 // 'start'
       && lk != 253                 // 'times'
       && lk != 254                 // 'to'
       && lk != 255                 // 'treat'
       && lk != 260                 // 'union'
       && lk != 272                 // 'where'
       && lk != 276                 // 'with'
       && lk != 279                 // 'words'
       && lk != 285                 // '|'
       && lk != 286                 // '||'
       && lk != 287                 // '|}'
       && lk != 288                 // '}'
       && lk != 289                 // '}`'
       && lk != 24091               // '!' '/'
       && lk != 24603)              // '!' '//'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 47:                // '/'
              consumeT(47);         // '/'
              break;
            case 48:                // '//'
              consumeT(48);         // '//'
              break;
            default:
              consumeT(27);         // '!'
            }
            lookahead1W(273);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_StepExpr();
            memoize(3, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(3, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 47                  // '/'
       && lk != 48)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 47:                      // '/'
        consumeT(47);               // '/'
        break;
      case 48:                      // '//'
        consumeT(48);               // '//'
        break;
      default:
        consumeT(27);               // '!'
      }
      lookahead1W(273);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 83:                        // 'array'
      lookahead2W(247);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 87:                        // 'attribute'
      lookahead2W(292);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' |
                                    // '>' | '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 126:                       // 'element'
      lookahead2W(291);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 190:                       // 'namespace'
    case 222:                       // 'processing-instruction'
      lookahead2W(290);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' |
                                    // 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    case 101:                       // 'comment'
    case 124:                       // 'document'
    case 184:                       // 'map'
    case 208:                       // 'ordered'
    case 250:                       // 'text'
    case 262:                       // 'unordered'
      lookahead2W(251);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}' | '}`'
      break;
    case 129:                       // 'empty-sequence'
    case 157:                       // 'if'
    case 170:                       // 'item'
    case 172:                       // 'json-item'
    case 248:                       // 'structured-item'
    case 249:                       // 'switch'
    case 259:                       // 'typeswitch'
      lookahead2W(243);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 98:                        // 'child'
    case 116:                       // 'descendant'
    case 117:                       // 'descendant-or-self'
    case 140:                       // 'following'
    case 141:                       // 'following-sibling'
    case 212:                       // 'parent'
    case 218:                       // 'preceding'
    case 219:                       // 'preceding-sibling'
    case 235:                       // 'self'
      lookahead2W(250);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    case 6:                         // EQName^Token
    case 75:                        // 'after'
    case 77:                        // 'allowing'
    case 80:                        // 'and'
    case 82:                        // 'append'
    case 84:                        // 'as'
    case 85:                        // 'ascending'
    case 86:                        // 'at'
    case 88:                        // 'base-uri'
    case 89:                        // 'before'
    case 90:                        // 'boundary-space'
    case 91:                        // 'break'
    case 93:                        // 'case'
    case 94:                        // 'cast'
    case 95:                        // 'castable'
    case 96:                        // 'catch'
    case 99:                        // 'collation'
    case 102:                       // 'constraint'
    case 103:                       // 'construction'
    case 106:                       // 'context'
    case 107:                       // 'continue'
    case 108:                       // 'copy'
    case 109:                       // 'copy-namespaces'
    case 110:                       // 'count'
    case 111:                       // 'decimal-format'
    case 113:                       // 'declare'
    case 114:                       // 'default'
    case 115:                       // 'delete'
    case 118:                       // 'descending'
    case 123:                       // 'div'
    case 125:                       // 'document-node'
    case 127:                       // 'else'
    case 128:                       // 'empty'
    case 130:                       // 'encoding'
    case 131:                       // 'end'
    case 133:                       // 'eq'
    case 134:                       // 'every'
    case 136:                       // 'except'
    case 137:                       // 'exit'
    case 138:                       // 'external'
    case 139:                       // 'first'
    case 142:                       // 'for'
    case 146:                       // 'ft-option'
    case 150:                       // 'function'
    case 151:                       // 'ge'
    case 153:                       // 'group'
    case 155:                       // 'gt'
    case 156:                       // 'idiv'
    case 158:                       // 'import'
    case 159:                       // 'in'
    case 160:                       // 'index'
    case 164:                       // 'insert'
    case 165:                       // 'instance'
    case 166:                       // 'integrity'
    case 167:                       // 'intersect'
    case 168:                       // 'into'
    case 169:                       // 'is'
    case 171:                       // 'json'
    case 175:                       // 'last'
    case 176:                       // 'lax'
    case 177:                       // 'le'
    case 179:                       // 'let'
    case 181:                       // 'loop'
    case 183:                       // 'lt'
    case 186:                       // 'mod'
    case 187:                       // 'modify'
    case 188:                       // 'module'
    case 191:                       // 'namespace-node'
    case 192:                       // 'ne'
    case 197:                       // 'node'
    case 198:                       // 'nodes'
    case 200:                       // 'object'
    case 204:                       // 'only'
    case 205:                       // 'option'
    case 206:                       // 'or'
    case 207:                       // 'order'
    case 209:                       // 'ordering'
    case 224:                       // 'rename'
    case 225:                       // 'replace'
    case 226:                       // 'return'
    case 227:                       // 'returning'
    case 228:                       // 'revalidation'
    case 230:                       // 'satisfies'
    case 231:                       // 'schema'
    case 232:                       // 'schema-attribute'
    case 233:                       // 'schema-element'
    case 234:                       // 'score'
    case 240:                       // 'sliding'
    case 241:                       // 'some'
    case 242:                       // 'stable'
    case 243:                       // 'start'
    case 246:                       // 'strict'
    case 254:                       // 'to'
    case 255:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
    case 280:                       // 'xquery'
      lookahead2W(246);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 38487                 // 'attribute' 'after'
     || lk == 38526                 // 'element' 'after'
     || lk == 38590                 // 'namespace' 'after'
     || lk == 38622                 // 'processing-instruction' 'after'
     || lk == 41047                 // 'attribute' 'and'
     || lk == 41086                 // 'element' 'and'
     || lk == 41150                 // 'namespace' 'and'
     || lk == 41182                 // 'processing-instruction' 'and'
     || lk == 43095                 // 'attribute' 'as'
     || lk == 43134                 // 'element' 'as'
     || lk == 43198                 // 'namespace' 'as'
     || lk == 43230                 // 'processing-instruction' 'as'
     || lk == 43607                 // 'attribute' 'ascending'
     || lk == 43646                 // 'element' 'ascending'
     || lk == 43710                 // 'namespace' 'ascending'
     || lk == 43742                 // 'processing-instruction' 'ascending'
     || lk == 44119                 // 'attribute' 'at'
     || lk == 44158                 // 'element' 'at'
     || lk == 44222                 // 'namespace' 'at'
     || lk == 44254                 // 'processing-instruction' 'at'
     || lk == 45655                 // 'attribute' 'before'
     || lk == 45694                 // 'element' 'before'
     || lk == 45758                 // 'namespace' 'before'
     || lk == 45790                 // 'processing-instruction' 'before'
     || lk == 47703                 // 'attribute' 'case'
     || lk == 47742                 // 'element' 'case'
     || lk == 47806                 // 'namespace' 'case'
     || lk == 47838                 // 'processing-instruction' 'case'
     || lk == 48215                 // 'attribute' 'cast'
     || lk == 48254                 // 'element' 'cast'
     || lk == 48318                 // 'namespace' 'cast'
     || lk == 48350                 // 'processing-instruction' 'cast'
     || lk == 48727                 // 'attribute' 'castable'
     || lk == 48766                 // 'element' 'castable'
     || lk == 48830                 // 'namespace' 'castable'
     || lk == 48862                 // 'processing-instruction' 'castable'
     || lk == 50775                 // 'attribute' 'collation'
     || lk == 50814                 // 'element' 'collation'
     || lk == 50878                 // 'namespace' 'collation'
     || lk == 50910                 // 'processing-instruction' 'collation'
     || lk == 56407                 // 'attribute' 'count'
     || lk == 56446                 // 'element' 'count'
     || lk == 56510                 // 'namespace' 'count'
     || lk == 56542                 // 'processing-instruction' 'count'
     || lk == 58455                 // 'attribute' 'default'
     || lk == 58494                 // 'element' 'default'
     || lk == 58558                 // 'namespace' 'default'
     || lk == 58590                 // 'processing-instruction' 'default'
     || lk == 60503                 // 'attribute' 'descending'
     || lk == 60542                 // 'element' 'descending'
     || lk == 60606                 // 'namespace' 'descending'
     || lk == 60638                 // 'processing-instruction' 'descending'
     || lk == 63063                 // 'attribute' 'div'
     || lk == 63102                 // 'element' 'div'
     || lk == 63166                 // 'namespace' 'div'
     || lk == 63198                 // 'processing-instruction' 'div'
     || lk == 65111                 // 'attribute' 'else'
     || lk == 65150                 // 'element' 'else'
     || lk == 65214                 // 'namespace' 'else'
     || lk == 65246                 // 'processing-instruction' 'else'
     || lk == 65623                 // 'attribute' 'empty'
     || lk == 65662                 // 'element' 'empty'
     || lk == 65726                 // 'namespace' 'empty'
     || lk == 65758                 // 'processing-instruction' 'empty'
     || lk == 67159                 // 'attribute' 'end'
     || lk == 67198                 // 'element' 'end'
     || lk == 67262                 // 'namespace' 'end'
     || lk == 67294                 // 'processing-instruction' 'end'
     || lk == 68183                 // 'attribute' 'eq'
     || lk == 68222                 // 'element' 'eq'
     || lk == 68286                 // 'namespace' 'eq'
     || lk == 68318                 // 'processing-instruction' 'eq'
     || lk == 69719                 // 'attribute' 'except'
     || lk == 69758                 // 'element' 'except'
     || lk == 69822                 // 'namespace' 'except'
     || lk == 69854                 // 'processing-instruction' 'except'
     || lk == 72791                 // 'attribute' 'for'
     || lk == 72830                 // 'element' 'for'
     || lk == 72894                 // 'namespace' 'for'
     || lk == 72926                 // 'processing-instruction' 'for'
     || lk == 77399                 // 'attribute' 'ge'
     || lk == 77438                 // 'element' 'ge'
     || lk == 77502                 // 'namespace' 'ge'
     || lk == 77534                 // 'processing-instruction' 'ge'
     || lk == 78423                 // 'attribute' 'group'
     || lk == 78462                 // 'element' 'group'
     || lk == 78526                 // 'namespace' 'group'
     || lk == 78558                 // 'processing-instruction' 'group'
     || lk == 79447                 // 'attribute' 'gt'
     || lk == 79486                 // 'element' 'gt'
     || lk == 79550                 // 'namespace' 'gt'
     || lk == 79582                 // 'processing-instruction' 'gt'
     || lk == 79959                 // 'attribute' 'idiv'
     || lk == 79998                 // 'element' 'idiv'
     || lk == 80062                 // 'namespace' 'idiv'
     || lk == 80094                 // 'processing-instruction' 'idiv'
     || lk == 84567                 // 'attribute' 'instance'
     || lk == 84606                 // 'element' 'instance'
     || lk == 84670                 // 'namespace' 'instance'
     || lk == 84702                 // 'processing-instruction' 'instance'
     || lk == 85591                 // 'attribute' 'intersect'
     || lk == 85630                 // 'element' 'intersect'
     || lk == 85694                 // 'namespace' 'intersect'
     || lk == 85726                 // 'processing-instruction' 'intersect'
     || lk == 86103                 // 'attribute' 'into'
     || lk == 86142                 // 'element' 'into'
     || lk == 86206                 // 'namespace' 'into'
     || lk == 86238                 // 'processing-instruction' 'into'
     || lk == 86615                 // 'attribute' 'is'
     || lk == 86654                 // 'element' 'is'
     || lk == 86718                 // 'namespace' 'is'
     || lk == 86750                 // 'processing-instruction' 'is'
     || lk == 90711                 // 'attribute' 'le'
     || lk == 90750                 // 'element' 'le'
     || lk == 90814                 // 'namespace' 'le'
     || lk == 90846                 // 'processing-instruction' 'le'
     || lk == 91735                 // 'attribute' 'let'
     || lk == 91774                 // 'element' 'let'
     || lk == 91838                 // 'namespace' 'let'
     || lk == 91870                 // 'processing-instruction' 'let'
     || lk == 93783                 // 'attribute' 'lt'
     || lk == 93822                 // 'element' 'lt'
     || lk == 93886                 // 'namespace' 'lt'
     || lk == 93918                 // 'processing-instruction' 'lt'
     || lk == 95319                 // 'attribute' 'mod'
     || lk == 95358                 // 'element' 'mod'
     || lk == 95422                 // 'namespace' 'mod'
     || lk == 95454                 // 'processing-instruction' 'mod'
     || lk == 95831                 // 'attribute' 'modify'
     || lk == 95870                 // 'element' 'modify'
     || lk == 95934                 // 'namespace' 'modify'
     || lk == 95966                 // 'processing-instruction' 'modify'
     || lk == 98391                 // 'attribute' 'ne'
     || lk == 98430                 // 'element' 'ne'
     || lk == 98494                 // 'namespace' 'ne'
     || lk == 98526                 // 'processing-instruction' 'ne'
     || lk == 104535                // 'attribute' 'only'
     || lk == 104574                // 'element' 'only'
     || lk == 104638                // 'namespace' 'only'
     || lk == 104670                // 'processing-instruction' 'only'
     || lk == 105559                // 'attribute' 'or'
     || lk == 105598                // 'element' 'or'
     || lk == 105662                // 'namespace' 'or'
     || lk == 105694                // 'processing-instruction' 'or'
     || lk == 106071                // 'attribute' 'order'
     || lk == 106110                // 'element' 'order'
     || lk == 106174                // 'namespace' 'order'
     || lk == 106206                // 'processing-instruction' 'order'
     || lk == 115799                // 'attribute' 'return'
     || lk == 115838                // 'element' 'return'
     || lk == 115902                // 'namespace' 'return'
     || lk == 115934                // 'processing-instruction' 'return'
     || lk == 117847                // 'attribute' 'satisfies'
     || lk == 117886                // 'element' 'satisfies'
     || lk == 117950                // 'namespace' 'satisfies'
     || lk == 117982                // 'processing-instruction' 'satisfies'
     || lk == 123991                // 'attribute' 'stable'
     || lk == 124030                // 'element' 'stable'
     || lk == 124094                // 'namespace' 'stable'
     || lk == 124126                // 'processing-instruction' 'stable'
     || lk == 124503                // 'attribute' 'start'
     || lk == 124542                // 'element' 'start'
     || lk == 124606                // 'namespace' 'start'
     || lk == 124638                // 'processing-instruction' 'start'
     || lk == 130135                // 'attribute' 'to'
     || lk == 130174                // 'element' 'to'
     || lk == 130238                // 'namespace' 'to'
     || lk == 130270                // 'processing-instruction' 'to'
     || lk == 130647                // 'attribute' 'treat'
     || lk == 130686                // 'element' 'treat'
     || lk == 130750                // 'namespace' 'treat'
     || lk == 130782                // 'processing-instruction' 'treat'
     || lk == 133207                // 'attribute' 'union'
     || lk == 133246                // 'element' 'union'
     || lk == 133310                // 'namespace' 'union'
     || lk == 133342                // 'processing-instruction' 'union'
     || lk == 139351                // 'attribute' 'where'
     || lk == 139390                // 'element' 'where'
     || lk == 139454                // 'namespace' 'where'
     || lk == 139486                // 'processing-instruction' 'where'
     || lk == 141399                // 'attribute' 'with'
     || lk == 141438                // 'element' 'with'
     || lk == 141502                // 'namespace' 'with'
     || lk == 141534)               // 'processing-instruction' 'with'
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(4, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 32:                        // '$'
    case 33:                        // '%'
    case 35:                        // '('
    case 45:                        // '.'
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
    case 66:                        // '?'
    case 70:                        // '['
    case 73:                        // '``['
    case 282:                       // '{'
    case 284:                       // '{|'
    case 3159:                      // 'attribute' EQName^Token
    case 3198:                      // 'element' EQName^Token
    case 9918:                      // 'namespace' NCName^Token
    case 9950:                      // 'processing-instruction' NCName^Token
    case 15366:                     // EQName^Token '#'
    case 15435:                     // 'after' '#'
    case 15437:                     // 'allowing' '#'
    case 15438:                     // 'ancestor' '#'
    case 15439:                     // 'ancestor-or-self' '#'
    case 15440:                     // 'and' '#'
    case 15442:                     // 'append' '#'
    case 15443:                     // 'array' '#'
    case 15444:                     // 'as' '#'
    case 15445:                     // 'ascending' '#'
    case 15446:                     // 'at' '#'
    case 15447:                     // 'attribute' '#'
    case 15448:                     // 'base-uri' '#'
    case 15449:                     // 'before' '#'
    case 15450:                     // 'boundary-space' '#'
    case 15451:                     // 'break' '#'
    case 15453:                     // 'case' '#'
    case 15454:                     // 'cast' '#'
    case 15455:                     // 'castable' '#'
    case 15456:                     // 'catch' '#'
    case 15458:                     // 'child' '#'
    case 15459:                     // 'collation' '#'
    case 15461:                     // 'comment' '#'
    case 15462:                     // 'constraint' '#'
    case 15463:                     // 'construction' '#'
    case 15466:                     // 'context' '#'
    case 15467:                     // 'continue' '#'
    case 15468:                     // 'copy' '#'
    case 15469:                     // 'copy-namespaces' '#'
    case 15470:                     // 'count' '#'
    case 15471:                     // 'decimal-format' '#'
    case 15473:                     // 'declare' '#'
    case 15474:                     // 'default' '#'
    case 15475:                     // 'delete' '#'
    case 15476:                     // 'descendant' '#'
    case 15477:                     // 'descendant-or-self' '#'
    case 15478:                     // 'descending' '#'
    case 15483:                     // 'div' '#'
    case 15484:                     // 'document' '#'
    case 15485:                     // 'document-node' '#'
    case 15486:                     // 'element' '#'
    case 15487:                     // 'else' '#'
    case 15488:                     // 'empty' '#'
    case 15489:                     // 'empty-sequence' '#'
    case 15490:                     // 'encoding' '#'
    case 15491:                     // 'end' '#'
    case 15493:                     // 'eq' '#'
    case 15494:                     // 'every' '#'
    case 15496:                     // 'except' '#'
    case 15497:                     // 'exit' '#'
    case 15498:                     // 'external' '#'
    case 15499:                     // 'first' '#'
    case 15500:                     // 'following' '#'
    case 15501:                     // 'following-sibling' '#'
    case 15502:                     // 'for' '#'
    case 15506:                     // 'ft-option' '#'
    case 15510:                     // 'function' '#'
    case 15511:                     // 'ge' '#'
    case 15513:                     // 'group' '#'
    case 15515:                     // 'gt' '#'
    case 15516:                     // 'idiv' '#'
    case 15517:                     // 'if' '#'
    case 15518:                     // 'import' '#'
    case 15519:                     // 'in' '#'
    case 15520:                     // 'index' '#'
    case 15524:                     // 'insert' '#'
    case 15525:                     // 'instance' '#'
    case 15526:                     // 'integrity' '#'
    case 15527:                     // 'intersect' '#'
    case 15528:                     // 'into' '#'
    case 15529:                     // 'is' '#'
    case 15530:                     // 'item' '#'
    case 15531:                     // 'json' '#'
    case 15532:                     // 'json-item' '#'
    case 15535:                     // 'last' '#'
    case 15536:                     // 'lax' '#'
    case 15537:                     // 'le' '#'
    case 15539:                     // 'let' '#'
    case 15541:                     // 'loop' '#'
    case 15543:                     // 'lt' '#'
    case 15544:                     // 'map' '#'
    case 15546:                     // 'mod' '#'
    case 15547:                     // 'modify' '#'
    case 15548:                     // 'module' '#'
    case 15550:                     // 'namespace' '#'
    case 15551:                     // 'namespace-node' '#'
    case 15552:                     // 'ne' '#'
    case 15557:                     // 'node' '#'
    case 15558:                     // 'nodes' '#'
    case 15560:                     // 'object' '#'
    case 15564:                     // 'only' '#'
    case 15565:                     // 'option' '#'
    case 15566:                     // 'or' '#'
    case 15567:                     // 'order' '#'
    case 15568:                     // 'ordered' '#'
    case 15569:                     // 'ordering' '#'
    case 15572:                     // 'parent' '#'
    case 15578:                     // 'preceding' '#'
    case 15579:                     // 'preceding-sibling' '#'
    case 15582:                     // 'processing-instruction' '#'
    case 15584:                     // 'rename' '#'
    case 15585:                     // 'replace' '#'
    case 15586:                     // 'return' '#'
    case 15587:                     // 'returning' '#'
    case 15588:                     // 'revalidation' '#'
    case 15590:                     // 'satisfies' '#'
    case 15591:                     // 'schema' '#'
    case 15592:                     // 'schema-attribute' '#'
    case 15593:                     // 'schema-element' '#'
    case 15594:                     // 'score' '#'
    case 15595:                     // 'self' '#'
    case 15600:                     // 'sliding' '#'
    case 15601:                     // 'some' '#'
    case 15602:                     // 'stable' '#'
    case 15603:                     // 'start' '#'
    case 15606:                     // 'strict' '#'
    case 15608:                     // 'structured-item' '#'
    case 15609:                     // 'switch' '#'
    case 15610:                     // 'text' '#'
    case 15614:                     // 'to' '#'
    case 15615:                     // 'treat' '#'
    case 15616:                     // 'try' '#'
    case 15617:                     // 'tumbling' '#'
    case 15618:                     // 'type' '#'
    case 15619:                     // 'typeswitch' '#'
    case 15620:                     // 'union' '#'
    case 15622:                     // 'unordered' '#'
    case 15623:                     // 'updating' '#'
    case 15626:                     // 'validate' '#'
    case 15627:                     // 'value' '#'
    case 15628:                     // 'variable' '#'
    case 15629:                     // 'version' '#'
    case 15632:                     // 'where' '#'
    case 15633:                     // 'while' '#'
    case 15636:                     // 'with' '#'
    case 15640:                     // 'xquery' '#'
    case 17926:                     // EQName^Token '('
    case 17995:                     // 'after' '('
    case 17997:                     // 'allowing' '('
    case 17998:                     // 'ancestor' '('
    case 17999:                     // 'ancestor-or-self' '('
    case 18000:                     // 'and' '('
    case 18002:                     // 'append' '('
    case 18004:                     // 'as' '('
    case 18005:                     // 'ascending' '('
    case 18006:                     // 'at' '('
    case 18008:                     // 'base-uri' '('
    case 18009:                     // 'before' '('
    case 18010:                     // 'boundary-space' '('
    case 18011:                     // 'break' '('
    case 18013:                     // 'case' '('
    case 18014:                     // 'cast' '('
    case 18015:                     // 'castable' '('
    case 18016:                     // 'catch' '('
    case 18018:                     // 'child' '('
    case 18019:                     // 'collation' '('
    case 18022:                     // 'constraint' '('
    case 18023:                     // 'construction' '('
    case 18026:                     // 'context' '('
    case 18027:                     // 'continue' '('
    case 18028:                     // 'copy' '('
    case 18029:                     // 'copy-namespaces' '('
    case 18030:                     // 'count' '('
    case 18031:                     // 'decimal-format' '('
    case 18033:                     // 'declare' '('
    case 18034:                     // 'default' '('
    case 18035:                     // 'delete' '('
    case 18036:                     // 'descendant' '('
    case 18037:                     // 'descendant-or-self' '('
    case 18038:                     // 'descending' '('
    case 18043:                     // 'div' '('
    case 18044:                     // 'document' '('
    case 18047:                     // 'else' '('
    case 18048:                     // 'empty' '('
    case 18050:                     // 'encoding' '('
    case 18051:                     // 'end' '('
    case 18053:                     // 'eq' '('
    case 18054:                     // 'every' '('
    case 18056:                     // 'except' '('
    case 18057:                     // 'exit' '('
    case 18058:                     // 'external' '('
    case 18059:                     // 'first' '('
    case 18060:                     // 'following' '('
    case 18061:                     // 'following-sibling' '('
    case 18062:                     // 'for' '('
    case 18066:                     // 'ft-option' '('
    case 18070:                     // 'function' '('
    case 18071:                     // 'ge' '('
    case 18073:                     // 'group' '('
    case 18075:                     // 'gt' '('
    case 18076:                     // 'idiv' '('
    case 18078:                     // 'import' '('
    case 18079:                     // 'in' '('
    case 18080:                     // 'index' '('
    case 18084:                     // 'insert' '('
    case 18085:                     // 'instance' '('
    case 18086:                     // 'integrity' '('
    case 18087:                     // 'intersect' '('
    case 18088:                     // 'into' '('
    case 18089:                     // 'is' '('
    case 18091:                     // 'json' '('
    case 18095:                     // 'last' '('
    case 18096:                     // 'lax' '('
    case 18097:                     // 'le' '('
    case 18099:                     // 'let' '('
    case 18101:                     // 'loop' '('
    case 18103:                     // 'lt' '('
    case 18104:                     // 'map' '('
    case 18106:                     // 'mod' '('
    case 18107:                     // 'modify' '('
    case 18108:                     // 'module' '('
    case 18110:                     // 'namespace' '('
    case 18112:                     // 'ne' '('
    case 18118:                     // 'nodes' '('
    case 18120:                     // 'object' '('
    case 18124:                     // 'only' '('
    case 18125:                     // 'option' '('
    case 18126:                     // 'or' '('
    case 18127:                     // 'order' '('
    case 18128:                     // 'ordered' '('
    case 18129:                     // 'ordering' '('
    case 18132:                     // 'parent' '('
    case 18138:                     // 'preceding' '('
    case 18139:                     // 'preceding-sibling' '('
    case 18144:                     // 'rename' '('
    case 18145:                     // 'replace' '('
    case 18146:                     // 'return' '('
    case 18147:                     // 'returning' '('
    case 18148:                     // 'revalidation' '('
    case 18150:                     // 'satisfies' '('
    case 18151:                     // 'schema' '('
    case 18154:                     // 'score' '('
    case 18155:                     // 'self' '('
    case 18160:                     // 'sliding' '('
    case 18161:                     // 'some' '('
    case 18162:                     // 'stable' '('
    case 18163:                     // 'start' '('
    case 18166:                     // 'strict' '('
    case 18174:                     // 'to' '('
    case 18175:                     // 'treat' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
    case 18200:                     // 'xquery' '('
    case 39511:                     // 'attribute' 'allowing'
    case 39550:                     // 'element' 'allowing'
    case 39614:                     // 'namespace' 'allowing'
    case 39646:                     // 'processing-instruction' 'allowing'
    case 40023:                     // 'attribute' 'ancestor'
    case 40062:                     // 'element' 'ancestor'
    case 40126:                     // 'namespace' 'ancestor'
    case 40158:                     // 'processing-instruction' 'ancestor'
    case 40535:                     // 'attribute' 'ancestor-or-self'
    case 40574:                     // 'element' 'ancestor-or-self'
    case 40638:                     // 'namespace' 'ancestor-or-self'
    case 40670:                     // 'processing-instruction' 'ancestor-or-self'
    case 42071:                     // 'attribute' 'append'
    case 42110:                     // 'element' 'append'
    case 42174:                     // 'namespace' 'append'
    case 42206:                     // 'processing-instruction' 'append'
    case 42583:                     // 'attribute' 'array'
    case 42622:                     // 'element' 'array'
    case 44631:                     // 'attribute' 'attribute'
    case 44670:                     // 'element' 'attribute'
    case 44734:                     // 'namespace' 'attribute'
    case 44766:                     // 'processing-instruction' 'attribute'
    case 45143:                     // 'attribute' 'base-uri'
    case 45182:                     // 'element' 'base-uri'
    case 45246:                     // 'namespace' 'base-uri'
    case 45278:                     // 'processing-instruction' 'base-uri'
    case 46167:                     // 'attribute' 'boundary-space'
    case 46206:                     // 'element' 'boundary-space'
    case 46270:                     // 'namespace' 'boundary-space'
    case 46302:                     // 'processing-instruction' 'boundary-space'
    case 46679:                     // 'attribute' 'break'
    case 46718:                     // 'element' 'break'
    case 46782:                     // 'namespace' 'break'
    case 46814:                     // 'processing-instruction' 'break'
    case 49239:                     // 'attribute' 'catch'
    case 49278:                     // 'element' 'catch'
    case 49342:                     // 'namespace' 'catch'
    case 49374:                     // 'processing-instruction' 'catch'
    case 50263:                     // 'attribute' 'child'
    case 50302:                     // 'element' 'child'
    case 50366:                     // 'namespace' 'child'
    case 50398:                     // 'processing-instruction' 'child'
    case 51799:                     // 'attribute' 'comment'
    case 51838:                     // 'element' 'comment'
    case 51902:                     // 'namespace' 'comment'
    case 51934:                     // 'processing-instruction' 'comment'
    case 52311:                     // 'attribute' 'constraint'
    case 52350:                     // 'element' 'constraint'
    case 52414:                     // 'namespace' 'constraint'
    case 52446:                     // 'processing-instruction' 'constraint'
    case 52823:                     // 'attribute' 'construction'
    case 52862:                     // 'element' 'construction'
    case 52926:                     // 'namespace' 'construction'
    case 52958:                     // 'processing-instruction' 'construction'
    case 54359:                     // 'attribute' 'context'
    case 54398:                     // 'element' 'context'
    case 54462:                     // 'namespace' 'context'
    case 54494:                     // 'processing-instruction' 'context'
    case 54871:                     // 'attribute' 'continue'
    case 54910:                     // 'element' 'continue'
    case 54974:                     // 'namespace' 'continue'
    case 55006:                     // 'processing-instruction' 'continue'
    case 55383:                     // 'attribute' 'copy'
    case 55422:                     // 'element' 'copy'
    case 55486:                     // 'namespace' 'copy'
    case 55518:                     // 'processing-instruction' 'copy'
    case 55895:                     // 'attribute' 'copy-namespaces'
    case 55934:                     // 'element' 'copy-namespaces'
    case 55998:                     // 'namespace' 'copy-namespaces'
    case 56030:                     // 'processing-instruction' 'copy-namespaces'
    case 56919:                     // 'attribute' 'decimal-format'
    case 56958:                     // 'element' 'decimal-format'
    case 57022:                     // 'namespace' 'decimal-format'
    case 57054:                     // 'processing-instruction' 'decimal-format'
    case 57943:                     // 'attribute' 'declare'
    case 57982:                     // 'element' 'declare'
    case 58046:                     // 'namespace' 'declare'
    case 58078:                     // 'processing-instruction' 'declare'
    case 58967:                     // 'attribute' 'delete'
    case 59006:                     // 'element' 'delete'
    case 59070:                     // 'namespace' 'delete'
    case 59102:                     // 'processing-instruction' 'delete'
    case 59479:                     // 'attribute' 'descendant'
    case 59518:                     // 'element' 'descendant'
    case 59582:                     // 'namespace' 'descendant'
    case 59614:                     // 'processing-instruction' 'descendant'
    case 59991:                     // 'attribute' 'descendant-or-self'
    case 60030:                     // 'element' 'descendant-or-self'
    case 60094:                     // 'namespace' 'descendant-or-self'
    case 60126:                     // 'processing-instruction' 'descendant-or-self'
    case 63575:                     // 'attribute' 'document'
    case 63614:                     // 'element' 'document'
    case 63678:                     // 'namespace' 'document'
    case 63710:                     // 'processing-instruction' 'document'
    case 64087:                     // 'attribute' 'document-node'
    case 64126:                     // 'element' 'document-node'
    case 64190:                     // 'namespace' 'document-node'
    case 64222:                     // 'processing-instruction' 'document-node'
    case 64599:                     // 'attribute' 'element'
    case 64638:                     // 'element' 'element'
    case 64702:                     // 'namespace' 'element'
    case 64734:                     // 'processing-instruction' 'element'
    case 66135:                     // 'attribute' 'empty-sequence'
    case 66174:                     // 'element' 'empty-sequence'
    case 66238:                     // 'namespace' 'empty-sequence'
    case 66270:                     // 'processing-instruction' 'empty-sequence'
    case 66647:                     // 'attribute' 'encoding'
    case 66686:                     // 'element' 'encoding'
    case 66750:                     // 'namespace' 'encoding'
    case 66782:                     // 'processing-instruction' 'encoding'
    case 68695:                     // 'attribute' 'every'
    case 68734:                     // 'element' 'every'
    case 68798:                     // 'namespace' 'every'
    case 68830:                     // 'processing-instruction' 'every'
    case 70231:                     // 'attribute' 'exit'
    case 70270:                     // 'element' 'exit'
    case 70334:                     // 'namespace' 'exit'
    case 70366:                     // 'processing-instruction' 'exit'
    case 70743:                     // 'attribute' 'external'
    case 70782:                     // 'element' 'external'
    case 70846:                     // 'namespace' 'external'
    case 70878:                     // 'processing-instruction' 'external'
    case 71255:                     // 'attribute' 'first'
    case 71294:                     // 'element' 'first'
    case 71358:                     // 'namespace' 'first'
    case 71390:                     // 'processing-instruction' 'first'
    case 71767:                     // 'attribute' 'following'
    case 71806:                     // 'element' 'following'
    case 71870:                     // 'namespace' 'following'
    case 71902:                     // 'processing-instruction' 'following'
    case 72279:                     // 'attribute' 'following-sibling'
    case 72318:                     // 'element' 'following-sibling'
    case 72382:                     // 'namespace' 'following-sibling'
    case 72414:                     // 'processing-instruction' 'following-sibling'
    case 74839:                     // 'attribute' 'ft-option'
    case 74878:                     // 'element' 'ft-option'
    case 74942:                     // 'namespace' 'ft-option'
    case 74974:                     // 'processing-instruction' 'ft-option'
    case 76887:                     // 'attribute' 'function'
    case 76926:                     // 'element' 'function'
    case 76990:                     // 'namespace' 'function'
    case 77022:                     // 'processing-instruction' 'function'
    case 80471:                     // 'attribute' 'if'
    case 80510:                     // 'element' 'if'
    case 80574:                     // 'namespace' 'if'
    case 80606:                     // 'processing-instruction' 'if'
    case 80983:                     // 'attribute' 'import'
    case 81022:                     // 'element' 'import'
    case 81086:                     // 'namespace' 'import'
    case 81118:                     // 'processing-instruction' 'import'
    case 81495:                     // 'attribute' 'in'
    case 81534:                     // 'element' 'in'
    case 81598:                     // 'namespace' 'in'
    case 81630:                     // 'processing-instruction' 'in'
    case 82007:                     // 'attribute' 'index'
    case 82046:                     // 'element' 'index'
    case 82110:                     // 'namespace' 'index'
    case 82142:                     // 'processing-instruction' 'index'
    case 84055:                     // 'attribute' 'insert'
    case 84094:                     // 'element' 'insert'
    case 84158:                     // 'namespace' 'insert'
    case 84190:                     // 'processing-instruction' 'insert'
    case 85079:                     // 'attribute' 'integrity'
    case 85118:                     // 'element' 'integrity'
    case 85182:                     // 'namespace' 'integrity'
    case 85214:                     // 'processing-instruction' 'integrity'
    case 87127:                     // 'attribute' 'item'
    case 87166:                     // 'element' 'item'
    case 87230:                     // 'namespace' 'item'
    case 87262:                     // 'processing-instruction' 'item'
    case 87639:                     // 'attribute' 'json'
    case 87678:                     // 'element' 'json'
    case 87742:                     // 'namespace' 'json'
    case 87774:                     // 'processing-instruction' 'json'
    case 88151:                     // 'attribute' 'json-item'
    case 88190:                     // 'element' 'json-item'
    case 89687:                     // 'attribute' 'last'
    case 89726:                     // 'element' 'last'
    case 89790:                     // 'namespace' 'last'
    case 89822:                     // 'processing-instruction' 'last'
    case 90199:                     // 'attribute' 'lax'
    case 90238:                     // 'element' 'lax'
    case 90302:                     // 'namespace' 'lax'
    case 90334:                     // 'processing-instruction' 'lax'
    case 92759:                     // 'attribute' 'loop'
    case 92798:                     // 'element' 'loop'
    case 92862:                     // 'namespace' 'loop'
    case 92894:                     // 'processing-instruction' 'loop'
    case 94295:                     // 'attribute' 'map'
    case 94334:                     // 'element' 'map'
    case 94398:                     // 'namespace' 'map'
    case 94430:                     // 'processing-instruction' 'map'
    case 96343:                     // 'attribute' 'module'
    case 96382:                     // 'element' 'module'
    case 96446:                     // 'namespace' 'module'
    case 96478:                     // 'processing-instruction' 'module'
    case 97367:                     // 'attribute' 'namespace'
    case 97406:                     // 'element' 'namespace'
    case 97470:                     // 'namespace' 'namespace'
    case 97502:                     // 'processing-instruction' 'namespace'
    case 97879:                     // 'attribute' 'namespace-node'
    case 97918:                     // 'element' 'namespace-node'
    case 97982:                     // 'namespace' 'namespace-node'
    case 98014:                     // 'processing-instruction' 'namespace-node'
    case 100951:                    // 'attribute' 'node'
    case 100990:                    // 'element' 'node'
    case 101054:                    // 'namespace' 'node'
    case 101086:                    // 'processing-instruction' 'node'
    case 101463:                    // 'attribute' 'nodes'
    case 101502:                    // 'element' 'nodes'
    case 101566:                    // 'namespace' 'nodes'
    case 101598:                    // 'processing-instruction' 'nodes'
    case 102487:                    // 'attribute' 'object'
    case 102526:                    // 'element' 'object'
    case 102590:                    // 'namespace' 'object'
    case 102622:                    // 'processing-instruction' 'object'
    case 105047:                    // 'attribute' 'option'
    case 105086:                    // 'element' 'option'
    case 105150:                    // 'namespace' 'option'
    case 105182:                    // 'processing-instruction' 'option'
    case 106583:                    // 'attribute' 'ordered'
    case 106622:                    // 'element' 'ordered'
    case 106686:                    // 'namespace' 'ordered'
    case 106718:                    // 'processing-instruction' 'ordered'
    case 107095:                    // 'attribute' 'ordering'
    case 107134:                    // 'element' 'ordering'
    case 107198:                    // 'namespace' 'ordering'
    case 107230:                    // 'processing-instruction' 'ordering'
    case 108631:                    // 'attribute' 'parent'
    case 108670:                    // 'element' 'parent'
    case 108734:                    // 'namespace' 'parent'
    case 108766:                    // 'processing-instruction' 'parent'
    case 111703:                    // 'attribute' 'preceding'
    case 111742:                    // 'element' 'preceding'
    case 111806:                    // 'namespace' 'preceding'
    case 111838:                    // 'processing-instruction' 'preceding'
    case 112215:                    // 'attribute' 'preceding-sibling'
    case 112254:                    // 'element' 'preceding-sibling'
    case 112318:                    // 'namespace' 'preceding-sibling'
    case 112350:                    // 'processing-instruction' 'preceding-sibling'
    case 113751:                    // 'attribute' 'processing-instruction'
    case 113790:                    // 'element' 'processing-instruction'
    case 113854:                    // 'namespace' 'processing-instruction'
    case 113886:                    // 'processing-instruction' 'processing-instruction'
    case 114775:                    // 'attribute' 'rename'
    case 114814:                    // 'element' 'rename'
    case 114878:                    // 'namespace' 'rename'
    case 114910:                    // 'processing-instruction' 'rename'
    case 115287:                    // 'attribute' 'replace'
    case 115326:                    // 'element' 'replace'
    case 115390:                    // 'namespace' 'replace'
    case 115422:                    // 'processing-instruction' 'replace'
    case 116311:                    // 'attribute' 'returning'
    case 116350:                    // 'element' 'returning'
    case 116414:                    // 'namespace' 'returning'
    case 116446:                    // 'processing-instruction' 'returning'
    case 116823:                    // 'attribute' 'revalidation'
    case 116862:                    // 'element' 'revalidation'
    case 116926:                    // 'namespace' 'revalidation'
    case 116958:                    // 'processing-instruction' 'revalidation'
    case 118359:                    // 'attribute' 'schema'
    case 118398:                    // 'element' 'schema'
    case 118462:                    // 'namespace' 'schema'
    case 118494:                    // 'processing-instruction' 'schema'
    case 118871:                    // 'attribute' 'schema-attribute'
    case 118910:                    // 'element' 'schema-attribute'
    case 118974:                    // 'namespace' 'schema-attribute'
    case 119006:                    // 'processing-instruction' 'schema-attribute'
    case 119383:                    // 'attribute' 'schema-element'
    case 119422:                    // 'element' 'schema-element'
    case 119486:                    // 'namespace' 'schema-element'
    case 119518:                    // 'processing-instruction' 'schema-element'
    case 119895:                    // 'attribute' 'score'
    case 119934:                    // 'element' 'score'
    case 119998:                    // 'namespace' 'score'
    case 120030:                    // 'processing-instruction' 'score'
    case 120407:                    // 'attribute' 'self'
    case 120446:                    // 'element' 'self'
    case 120510:                    // 'namespace' 'self'
    case 120542:                    // 'processing-instruction' 'self'
    case 122967:                    // 'attribute' 'sliding'
    case 123006:                    // 'element' 'sliding'
    case 123070:                    // 'namespace' 'sliding'
    case 123102:                    // 'processing-instruction' 'sliding'
    case 123479:                    // 'attribute' 'some'
    case 123518:                    // 'element' 'some'
    case 123582:                    // 'namespace' 'some'
    case 123614:                    // 'processing-instruction' 'some'
    case 126039:                    // 'attribute' 'strict'
    case 126078:                    // 'element' 'strict'
    case 126142:                    // 'namespace' 'strict'
    case 126174:                    // 'processing-instruction' 'strict'
    case 127063:                    // 'attribute' 'structured-item'
    case 127102:                    // 'element' 'structured-item'
    case 127575:                    // 'attribute' 'switch'
    case 127614:                    // 'element' 'switch'
    case 127678:                    // 'namespace' 'switch'
    case 127710:                    // 'processing-instruction' 'switch'
    case 128087:                    // 'attribute' 'text'
    case 128126:                    // 'element' 'text'
    case 128190:                    // 'namespace' 'text'
    case 128222:                    // 'processing-instruction' 'text'
    case 131159:                    // 'attribute' 'try'
    case 131198:                    // 'element' 'try'
    case 131262:                    // 'namespace' 'try'
    case 131294:                    // 'processing-instruction' 'try'
    case 131671:                    // 'attribute' 'tumbling'
    case 131710:                    // 'element' 'tumbling'
    case 131774:                    // 'namespace' 'tumbling'
    case 131806:                    // 'processing-instruction' 'tumbling'
    case 132183:                    // 'attribute' 'type'
    case 132222:                    // 'element' 'type'
    case 132286:                    // 'namespace' 'type'
    case 132318:                    // 'processing-instruction' 'type'
    case 132695:                    // 'attribute' 'typeswitch'
    case 132734:                    // 'element' 'typeswitch'
    case 132798:                    // 'namespace' 'typeswitch'
    case 132830:                    // 'processing-instruction' 'typeswitch'
    case 134231:                    // 'attribute' 'unordered'
    case 134270:                    // 'element' 'unordered'
    case 134334:                    // 'namespace' 'unordered'
    case 134366:                    // 'processing-instruction' 'unordered'
    case 134743:                    // 'attribute' 'updating'
    case 134782:                    // 'element' 'updating'
    case 134846:                    // 'namespace' 'updating'
    case 134878:                    // 'processing-instruction' 'updating'
    case 136279:                    // 'attribute' 'validate'
    case 136318:                    // 'element' 'validate'
    case 136382:                    // 'namespace' 'validate'
    case 136414:                    // 'processing-instruction' 'validate'
    case 136791:                    // 'attribute' 'value'
    case 136830:                    // 'element' 'value'
    case 136894:                    // 'namespace' 'value'
    case 136926:                    // 'processing-instruction' 'value'
    case 137303:                    // 'attribute' 'variable'
    case 137342:                    // 'element' 'variable'
    case 137406:                    // 'namespace' 'variable'
    case 137438:                    // 'processing-instruction' 'variable'
    case 137815:                    // 'attribute' 'version'
    case 137854:                    // 'element' 'version'
    case 137918:                    // 'namespace' 'version'
    case 137950:                    // 'processing-instruction' 'version'
    case 139863:                    // 'attribute' 'while'
    case 139902:                    // 'element' 'while'
    case 139966:                    // 'namespace' 'while'
    case 139998:                    // 'processing-instruction' 'while'
    case 143447:                    // 'attribute' 'xquery'
    case 143486:                    // 'element' 'xquery'
    case 143550:                    // 'namespace' 'xquery'
    case 143582:                    // 'processing-instruction' 'xquery'
    case 144467:                    // 'array' '{'
    case 144471:                    // 'attribute' '{'
    case 144485:                    // 'comment' '{'
    case 144508:                    // 'document' '{'
    case 144510:                    // 'element' '{'
    case 144568:                    // 'map' '{'
    case 144574:                    // 'namespace' '{'
    case 144592:                    // 'ordered' '{'
    case 144606:                    // 'processing-instruction' '{'
    case 144634:                    // 'text' '{'
    case 144646:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 83:                        // 'array'
      lookahead2W(247);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 87:                        // 'attribute'
      lookahead2W(292);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' |
                                    // '>' | '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 126:                       // 'element'
      lookahead2W(291);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 190:                       // 'namespace'
    case 222:                       // 'processing-instruction'
      lookahead2W(290);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' |
                                    // 'sentences' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' |
                                    // 'text' | 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' |
                                    // 'union' | 'unordered' | 'updating' | 'validate' | 'value' | 'variable' |
                                    // 'version' | 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    case 101:                       // 'comment'
    case 124:                       // 'document'
    case 184:                       // 'map'
    case 208:                       // 'ordered'
    case 250:                       // 'text'
    case 262:                       // 'unordered'
      lookahead2W(251);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}' | '}`'
      break;
    case 129:                       // 'empty-sequence'
    case 157:                       // 'if'
    case 170:                       // 'item'
    case 172:                       // 'json-item'
    case 248:                       // 'structured-item'
    case 249:                       // 'switch'
    case 259:                       // 'typeswitch'
      lookahead2W(243);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 98:                        // 'child'
    case 116:                       // 'descendant'
    case 117:                       // 'descendant-or-self'
    case 140:                       // 'following'
    case 141:                       // 'following-sibling'
    case 212:                       // 'parent'
    case 218:                       // 'preceding'
    case 219:                       // 'preceding-sibling'
    case 235:                       // 'self'
      lookahead2W(250);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    case 6:                         // EQName^Token
    case 75:                        // 'after'
    case 77:                        // 'allowing'
    case 80:                        // 'and'
    case 82:                        // 'append'
    case 84:                        // 'as'
    case 85:                        // 'ascending'
    case 86:                        // 'at'
    case 88:                        // 'base-uri'
    case 89:                        // 'before'
    case 90:                        // 'boundary-space'
    case 91:                        // 'break'
    case 93:                        // 'case'
    case 94:                        // 'cast'
    case 95:                        // 'castable'
    case 96:                        // 'catch'
    case 99:                        // 'collation'
    case 102:                       // 'constraint'
    case 103:                       // 'construction'
    case 106:                       // 'context'
    case 107:                       // 'continue'
    case 108:                       // 'copy'
    case 109:                       // 'copy-namespaces'
    case 110:                       // 'count'
    case 111:                       // 'decimal-format'
    case 113:                       // 'declare'
    case 114:                       // 'default'
    case 115:                       // 'delete'
    case 118:                       // 'descending'
    case 123:                       // 'div'
    case 125:                       // 'document-node'
    case 127:                       // 'else'
    case 128:                       // 'empty'
    case 130:                       // 'encoding'
    case 131:                       // 'end'
    case 133:                       // 'eq'
    case 134:                       // 'every'
    case 136:                       // 'except'
    case 137:                       // 'exit'
    case 138:                       // 'external'
    case 139:                       // 'first'
    case 142:                       // 'for'
    case 146:                       // 'ft-option'
    case 150:                       // 'function'
    case 151:                       // 'ge'
    case 153:                       // 'group'
    case 155:                       // 'gt'
    case 156:                       // 'idiv'
    case 158:                       // 'import'
    case 159:                       // 'in'
    case 160:                       // 'index'
    case 164:                       // 'insert'
    case 165:                       // 'instance'
    case 166:                       // 'integrity'
    case 167:                       // 'intersect'
    case 168:                       // 'into'
    case 169:                       // 'is'
    case 171:                       // 'json'
    case 175:                       // 'last'
    case 176:                       // 'lax'
    case 177:                       // 'le'
    case 179:                       // 'let'
    case 181:                       // 'loop'
    case 183:                       // 'lt'
    case 186:                       // 'mod'
    case 187:                       // 'modify'
    case 188:                       // 'module'
    case 191:                       // 'namespace-node'
    case 192:                       // 'ne'
    case 197:                       // 'node'
    case 198:                       // 'nodes'
    case 200:                       // 'object'
    case 204:                       // 'only'
    case 205:                       // 'option'
    case 206:                       // 'or'
    case 207:                       // 'order'
    case 209:                       // 'ordering'
    case 224:                       // 'rename'
    case 225:                       // 'replace'
    case 226:                       // 'return'
    case 227:                       // 'returning'
    case 228:                       // 'revalidation'
    case 230:                       // 'satisfies'
    case 231:                       // 'schema'
    case 232:                       // 'schema-attribute'
    case 233:                       // 'schema-element'
    case 234:                       // 'score'
    case 240:                       // 'sliding'
    case 241:                       // 'some'
    case 242:                       // 'stable'
    case 243:                       // 'start'
    case 246:                       // 'strict'
    case 254:                       // 'to'
    case 255:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
    case 280:                       // 'xquery'
      lookahead2W(246);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 38487                 // 'attribute' 'after'
     || lk == 38526                 // 'element' 'after'
     || lk == 38590                 // 'namespace' 'after'
     || lk == 38622                 // 'processing-instruction' 'after'
     || lk == 41047                 // 'attribute' 'and'
     || lk == 41086                 // 'element' 'and'
     || lk == 41150                 // 'namespace' 'and'
     || lk == 41182                 // 'processing-instruction' 'and'
     || lk == 43095                 // 'attribute' 'as'
     || lk == 43134                 // 'element' 'as'
     || lk == 43198                 // 'namespace' 'as'
     || lk == 43230                 // 'processing-instruction' 'as'
     || lk == 43607                 // 'attribute' 'ascending'
     || lk == 43646                 // 'element' 'ascending'
     || lk == 43710                 // 'namespace' 'ascending'
     || lk == 43742                 // 'processing-instruction' 'ascending'
     || lk == 44119                 // 'attribute' 'at'
     || lk == 44158                 // 'element' 'at'
     || lk == 44222                 // 'namespace' 'at'
     || lk == 44254                 // 'processing-instruction' 'at'
     || lk == 45655                 // 'attribute' 'before'
     || lk == 45694                 // 'element' 'before'
     || lk == 45758                 // 'namespace' 'before'
     || lk == 45790                 // 'processing-instruction' 'before'
     || lk == 47703                 // 'attribute' 'case'
     || lk == 47742                 // 'element' 'case'
     || lk == 47806                 // 'namespace' 'case'
     || lk == 47838                 // 'processing-instruction' 'case'
     || lk == 48215                 // 'attribute' 'cast'
     || lk == 48254                 // 'element' 'cast'
     || lk == 48318                 // 'namespace' 'cast'
     || lk == 48350                 // 'processing-instruction' 'cast'
     || lk == 48727                 // 'attribute' 'castable'
     || lk == 48766                 // 'element' 'castable'
     || lk == 48830                 // 'namespace' 'castable'
     || lk == 48862                 // 'processing-instruction' 'castable'
     || lk == 50775                 // 'attribute' 'collation'
     || lk == 50814                 // 'element' 'collation'
     || lk == 50878                 // 'namespace' 'collation'
     || lk == 50910                 // 'processing-instruction' 'collation'
     || lk == 56407                 // 'attribute' 'count'
     || lk == 56446                 // 'element' 'count'
     || lk == 56510                 // 'namespace' 'count'
     || lk == 56542                 // 'processing-instruction' 'count'
     || lk == 58455                 // 'attribute' 'default'
     || lk == 58494                 // 'element' 'default'
     || lk == 58558                 // 'namespace' 'default'
     || lk == 58590                 // 'processing-instruction' 'default'
     || lk == 60503                 // 'attribute' 'descending'
     || lk == 60542                 // 'element' 'descending'
     || lk == 60606                 // 'namespace' 'descending'
     || lk == 60638                 // 'processing-instruction' 'descending'
     || lk == 63063                 // 'attribute' 'div'
     || lk == 63102                 // 'element' 'div'
     || lk == 63166                 // 'namespace' 'div'
     || lk == 63198                 // 'processing-instruction' 'div'
     || lk == 65111                 // 'attribute' 'else'
     || lk == 65150                 // 'element' 'else'
     || lk == 65214                 // 'namespace' 'else'
     || lk == 65246                 // 'processing-instruction' 'else'
     || lk == 65623                 // 'attribute' 'empty'
     || lk == 65662                 // 'element' 'empty'
     || lk == 65726                 // 'namespace' 'empty'
     || lk == 65758                 // 'processing-instruction' 'empty'
     || lk == 67159                 // 'attribute' 'end'
     || lk == 67198                 // 'element' 'end'
     || lk == 67262                 // 'namespace' 'end'
     || lk == 67294                 // 'processing-instruction' 'end'
     || lk == 68183                 // 'attribute' 'eq'
     || lk == 68222                 // 'element' 'eq'
     || lk == 68286                 // 'namespace' 'eq'
     || lk == 68318                 // 'processing-instruction' 'eq'
     || lk == 69719                 // 'attribute' 'except'
     || lk == 69758                 // 'element' 'except'
     || lk == 69822                 // 'namespace' 'except'
     || lk == 69854                 // 'processing-instruction' 'except'
     || lk == 72791                 // 'attribute' 'for'
     || lk == 72830                 // 'element' 'for'
     || lk == 72894                 // 'namespace' 'for'
     || lk == 72926                 // 'processing-instruction' 'for'
     || lk == 77399                 // 'attribute' 'ge'
     || lk == 77438                 // 'element' 'ge'
     || lk == 77502                 // 'namespace' 'ge'
     || lk == 77534                 // 'processing-instruction' 'ge'
     || lk == 78423                 // 'attribute' 'group'
     || lk == 78462                 // 'element' 'group'
     || lk == 78526                 // 'namespace' 'group'
     || lk == 78558                 // 'processing-instruction' 'group'
     || lk == 79447                 // 'attribute' 'gt'
     || lk == 79486                 // 'element' 'gt'
     || lk == 79550                 // 'namespace' 'gt'
     || lk == 79582                 // 'processing-instruction' 'gt'
     || lk == 79959                 // 'attribute' 'idiv'
     || lk == 79998                 // 'element' 'idiv'
     || lk == 80062                 // 'namespace' 'idiv'
     || lk == 80094                 // 'processing-instruction' 'idiv'
     || lk == 84567                 // 'attribute' 'instance'
     || lk == 84606                 // 'element' 'instance'
     || lk == 84670                 // 'namespace' 'instance'
     || lk == 84702                 // 'processing-instruction' 'instance'
     || lk == 85591                 // 'attribute' 'intersect'
     || lk == 85630                 // 'element' 'intersect'
     || lk == 85694                 // 'namespace' 'intersect'
     || lk == 85726                 // 'processing-instruction' 'intersect'
     || lk == 86103                 // 'attribute' 'into'
     || lk == 86142                 // 'element' 'into'
     || lk == 86206                 // 'namespace' 'into'
     || lk == 86238                 // 'processing-instruction' 'into'
     || lk == 86615                 // 'attribute' 'is'
     || lk == 86654                 // 'element' 'is'
     || lk == 86718                 // 'namespace' 'is'
     || lk == 86750                 // 'processing-instruction' 'is'
     || lk == 90711                 // 'attribute' 'le'
     || lk == 90750                 // 'element' 'le'
     || lk == 90814                 // 'namespace' 'le'
     || lk == 90846                 // 'processing-instruction' 'le'
     || lk == 91735                 // 'attribute' 'let'
     || lk == 91774                 // 'element' 'let'
     || lk == 91838                 // 'namespace' 'let'
     || lk == 91870                 // 'processing-instruction' 'let'
     || lk == 93783                 // 'attribute' 'lt'
     || lk == 93822                 // 'element' 'lt'
     || lk == 93886                 // 'namespace' 'lt'
     || lk == 93918                 // 'processing-instruction' 'lt'
     || lk == 95319                 // 'attribute' 'mod'
     || lk == 95358                 // 'element' 'mod'
     || lk == 95422                 // 'namespace' 'mod'
     || lk == 95454                 // 'processing-instruction' 'mod'
     || lk == 95831                 // 'attribute' 'modify'
     || lk == 95870                 // 'element' 'modify'
     || lk == 95934                 // 'namespace' 'modify'
     || lk == 95966                 // 'processing-instruction' 'modify'
     || lk == 98391                 // 'attribute' 'ne'
     || lk == 98430                 // 'element' 'ne'
     || lk == 98494                 // 'namespace' 'ne'
     || lk == 98526                 // 'processing-instruction' 'ne'
     || lk == 104535                // 'attribute' 'only'
     || lk == 104574                // 'element' 'only'
     || lk == 104638                // 'namespace' 'only'
     || lk == 104670                // 'processing-instruction' 'only'
     || lk == 105559                // 'attribute' 'or'
     || lk == 105598                // 'element' 'or'
     || lk == 105662                // 'namespace' 'or'
     || lk == 105694                // 'processing-instruction' 'or'
     || lk == 106071                // 'attribute' 'order'
     || lk == 106110                // 'element' 'order'
     || lk == 106174                // 'namespace' 'order'
     || lk == 106206                // 'processing-instruction' 'order'
     || lk == 115799                // 'attribute' 'return'
     || lk == 115838                // 'element' 'return'
     || lk == 115902                // 'namespace' 'return'
     || lk == 115934                // 'processing-instruction' 'return'
     || lk == 117847                // 'attribute' 'satisfies'
     || lk == 117886                // 'element' 'satisfies'
     || lk == 117950                // 'namespace' 'satisfies'
     || lk == 117982                // 'processing-instruction' 'satisfies'
     || lk == 123991                // 'attribute' 'stable'
     || lk == 124030                // 'element' 'stable'
     || lk == 124094                // 'namespace' 'stable'
     || lk == 124126                // 'processing-instruction' 'stable'
     || lk == 124503                // 'attribute' 'start'
     || lk == 124542                // 'element' 'start'
     || lk == 124606                // 'namespace' 'start'
     || lk == 124638                // 'processing-instruction' 'start'
     || lk == 130135                // 'attribute' 'to'
     || lk == 130174                // 'element' 'to'
     || lk == 130238                // 'namespace' 'to'
     || lk == 130270                // 'processing-instruction' 'to'
     || lk == 130647                // 'attribute' 'treat'
     || lk == 130686                // 'element' 'treat'
     || lk == 130750                // 'namespace' 'treat'
     || lk == 130782                // 'processing-instruction' 'treat'
     || lk == 133207                // 'attribute' 'union'
     || lk == 133246                // 'element' 'union'
     || lk == 133310                // 'namespace' 'union'
     || lk == 133342                // 'processing-instruction' 'union'
     || lk == 139351                // 'attribute' 'where'
     || lk == 139390                // 'element' 'where'
     || lk == 139454                // 'namespace' 'where'
     || lk == 139486                // 'processing-instruction' 'where'
     || lk == 141399                // 'attribute' 'with'
     || lk == 141438                // 'element' 'with'
     || lk == 141502                // 'namespace' 'with'
     || lk == 141534)               // 'processing-instruction' 'with'
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(4, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 32:                        // '$'
    case 33:                        // '%'
    case 35:                        // '('
    case 45:                        // '.'
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
    case 66:                        // '?'
    case 70:                        // '['
    case 73:                        // '``['
    case 282:                       // '{'
    case 284:                       // '{|'
    case 3159:                      // 'attribute' EQName^Token
    case 3198:                      // 'element' EQName^Token
    case 9918:                      // 'namespace' NCName^Token
    case 9950:                      // 'processing-instruction' NCName^Token
    case 15366:                     // EQName^Token '#'
    case 15435:                     // 'after' '#'
    case 15437:                     // 'allowing' '#'
    case 15438:                     // 'ancestor' '#'
    case 15439:                     // 'ancestor-or-self' '#'
    case 15440:                     // 'and' '#'
    case 15442:                     // 'append' '#'
    case 15443:                     // 'array' '#'
    case 15444:                     // 'as' '#'
    case 15445:                     // 'ascending' '#'
    case 15446:                     // 'at' '#'
    case 15447:                     // 'attribute' '#'
    case 15448:                     // 'base-uri' '#'
    case 15449:                     // 'before' '#'
    case 15450:                     // 'boundary-space' '#'
    case 15451:                     // 'break' '#'
    case 15453:                     // 'case' '#'
    case 15454:                     // 'cast' '#'
    case 15455:                     // 'castable' '#'
    case 15456:                     // 'catch' '#'
    case 15458:                     // 'child' '#'
    case 15459:                     // 'collation' '#'
    case 15461:                     // 'comment' '#'
    case 15462:                     // 'constraint' '#'
    case 15463:                     // 'construction' '#'
    case 15466:                     // 'context' '#'
    case 15467:                     // 'continue' '#'
    case 15468:                     // 'copy' '#'
    case 15469:                     // 'copy-namespaces' '#'
    case 15470:                     // 'count' '#'
    case 15471:                     // 'decimal-format' '#'
    case 15473:                     // 'declare' '#'
    case 15474:                     // 'default' '#'
    case 15475:                     // 'delete' '#'
    case 15476:                     // 'descendant' '#'
    case 15477:                     // 'descendant-or-self' '#'
    case 15478:                     // 'descending' '#'
    case 15483:                     // 'div' '#'
    case 15484:                     // 'document' '#'
    case 15485:                     // 'document-node' '#'
    case 15486:                     // 'element' '#'
    case 15487:                     // 'else' '#'
    case 15488:                     // 'empty' '#'
    case 15489:                     // 'empty-sequence' '#'
    case 15490:                     // 'encoding' '#'
    case 15491:                     // 'end' '#'
    case 15493:                     // 'eq' '#'
    case 15494:                     // 'every' '#'
    case 15496:                     // 'except' '#'
    case 15497:                     // 'exit' '#'
    case 15498:                     // 'external' '#'
    case 15499:                     // 'first' '#'
    case 15500:                     // 'following' '#'
    case 15501:                     // 'following-sibling' '#'
    case 15502:                     // 'for' '#'
    case 15506:                     // 'ft-option' '#'
    case 15510:                     // 'function' '#'
    case 15511:                     // 'ge' '#'
    case 15513:                     // 'group' '#'
    case 15515:                     // 'gt' '#'
    case 15516:                     // 'idiv' '#'
    case 15517:                     // 'if' '#'
    case 15518:                     // 'import' '#'
    case 15519:                     // 'in' '#'
    case 15520:                     // 'index' '#'
    case 15524:                     // 'insert' '#'
    case 15525:                     // 'instance' '#'
    case 15526:                     // 'integrity' '#'
    case 15527:                     // 'intersect' '#'
    case 15528:                     // 'into' '#'
    case 15529:                     // 'is' '#'
    case 15530:                     // 'item' '#'
    case 15531:                     // 'json' '#'
    case 15532:                     // 'json-item' '#'
    case 15535:                     // 'last' '#'
    case 15536:                     // 'lax' '#'
    case 15537:                     // 'le' '#'
    case 15539:                     // 'let' '#'
    case 15541:                     // 'loop' '#'
    case 15543:                     // 'lt' '#'
    case 15544:                     // 'map' '#'
    case 15546:                     // 'mod' '#'
    case 15547:                     // 'modify' '#'
    case 15548:                     // 'module' '#'
    case 15550:                     // 'namespace' '#'
    case 15551:                     // 'namespace-node' '#'
    case 15552:                     // 'ne' '#'
    case 15557:                     // 'node' '#'
    case 15558:                     // 'nodes' '#'
    case 15560:                     // 'object' '#'
    case 15564:                     // 'only' '#'
    case 15565:                     // 'option' '#'
    case 15566:                     // 'or' '#'
    case 15567:                     // 'order' '#'
    case 15568:                     // 'ordered' '#'
    case 15569:                     // 'ordering' '#'
    case 15572:                     // 'parent' '#'
    case 15578:                     // 'preceding' '#'
    case 15579:                     // 'preceding-sibling' '#'
    case 15582:                     // 'processing-instruction' '#'
    case 15584:                     // 'rename' '#'
    case 15585:                     // 'replace' '#'
    case 15586:                     // 'return' '#'
    case 15587:                     // 'returning' '#'
    case 15588:                     // 'revalidation' '#'
    case 15590:                     // 'satisfies' '#'
    case 15591:                     // 'schema' '#'
    case 15592:                     // 'schema-attribute' '#'
    case 15593:                     // 'schema-element' '#'
    case 15594:                     // 'score' '#'
    case 15595:                     // 'self' '#'
    case 15600:                     // 'sliding' '#'
    case 15601:                     // 'some' '#'
    case 15602:                     // 'stable' '#'
    case 15603:                     // 'start' '#'
    case 15606:                     // 'strict' '#'
    case 15608:                     // 'structured-item' '#'
    case 15609:                     // 'switch' '#'
    case 15610:                     // 'text' '#'
    case 15614:                     // 'to' '#'
    case 15615:                     // 'treat' '#'
    case 15616:                     // 'try' '#'
    case 15617:                     // 'tumbling' '#'
    case 15618:                     // 'type' '#'
    case 15619:                     // 'typeswitch' '#'
    case 15620:                     // 'union' '#'
    case 15622:                     // 'unordered' '#'
    case 15623:                     // 'updating' '#'
    case 15626:                     // 'validate' '#'
    case 15627:                     // 'value' '#'
    case 15628:                     // 'variable' '#'
    case 15629:                     // 'version' '#'
    case 15632:                     // 'where' '#'
    case 15633:                     // 'while' '#'
    case 15636:                     // 'with' '#'
    case 15640:                     // 'xquery' '#'
    case 17926:                     // EQName^Token '('
    case 17995:                     // 'after' '('
    case 17997:                     // 'allowing' '('
    case 17998:                     // 'ancestor' '('
    case 17999:                     // 'ancestor-or-self' '('
    case 18000:                     // 'and' '('
    case 18002:                     // 'append' '('
    case 18004:                     // 'as' '('
    case 18005:                     // 'ascending' '('
    case 18006:                     // 'at' '('
    case 18008:                     // 'base-uri' '('
    case 18009:                     // 'before' '('
    case 18010:                     // 'boundary-space' '('
    case 18011:                     // 'break' '('
    case 18013:                     // 'case' '('
    case 18014:                     // 'cast' '('
    case 18015:                     // 'castable' '('
    case 18016:                     // 'catch' '('
    case 18018:                     // 'child' '('
    case 18019:                     // 'collation' '('
    case 18022:                     // 'constraint' '('
    case 18023:                     // 'construction' '('
    case 18026:                     // 'context' '('
    case 18027:                     // 'continue' '('
    case 18028:                     // 'copy' '('
    case 18029:                     // 'copy-namespaces' '('
    case 18030:                     // 'count' '('
    case 18031:                     // 'decimal-format' '('
    case 18033:                     // 'declare' '('
    case 18034:                     // 'default' '('
    case 18035:                     // 'delete' '('
    case 18036:                     // 'descendant' '('
    case 18037:                     // 'descendant-or-self' '('
    case 18038:                     // 'descending' '('
    case 18043:                     // 'div' '('
    case 18044:                     // 'document' '('
    case 18047:                     // 'else' '('
    case 18048:                     // 'empty' '('
    case 18050:                     // 'encoding' '('
    case 18051:                     // 'end' '('
    case 18053:                     // 'eq' '('
    case 18054:                     // 'every' '('
    case 18056:                     // 'except' '('
    case 18057:                     // 'exit' '('
    case 18058:                     // 'external' '('
    case 18059:                     // 'first' '('
    case 18060:                     // 'following' '('
    case 18061:                     // 'following-sibling' '('
    case 18062:                     // 'for' '('
    case 18066:                     // 'ft-option' '('
    case 18070:                     // 'function' '('
    case 18071:                     // 'ge' '('
    case 18073:                     // 'group' '('
    case 18075:                     // 'gt' '('
    case 18076:                     // 'idiv' '('
    case 18078:                     // 'import' '('
    case 18079:                     // 'in' '('
    case 18080:                     // 'index' '('
    case 18084:                     // 'insert' '('
    case 18085:                     // 'instance' '('
    case 18086:                     // 'integrity' '('
    case 18087:                     // 'intersect' '('
    case 18088:                     // 'into' '('
    case 18089:                     // 'is' '('
    case 18091:                     // 'json' '('
    case 18095:                     // 'last' '('
    case 18096:                     // 'lax' '('
    case 18097:                     // 'le' '('
    case 18099:                     // 'let' '('
    case 18101:                     // 'loop' '('
    case 18103:                     // 'lt' '('
    case 18104:                     // 'map' '('
    case 18106:                     // 'mod' '('
    case 18107:                     // 'modify' '('
    case 18108:                     // 'module' '('
    case 18110:                     // 'namespace' '('
    case 18112:                     // 'ne' '('
    case 18118:                     // 'nodes' '('
    case 18120:                     // 'object' '('
    case 18124:                     // 'only' '('
    case 18125:                     // 'option' '('
    case 18126:                     // 'or' '('
    case 18127:                     // 'order' '('
    case 18128:                     // 'ordered' '('
    case 18129:                     // 'ordering' '('
    case 18132:                     // 'parent' '('
    case 18138:                     // 'preceding' '('
    case 18139:                     // 'preceding-sibling' '('
    case 18144:                     // 'rename' '('
    case 18145:                     // 'replace' '('
    case 18146:                     // 'return' '('
    case 18147:                     // 'returning' '('
    case 18148:                     // 'revalidation' '('
    case 18150:                     // 'satisfies' '('
    case 18151:                     // 'schema' '('
    case 18154:                     // 'score' '('
    case 18155:                     // 'self' '('
    case 18160:                     // 'sliding' '('
    case 18161:                     // 'some' '('
    case 18162:                     // 'stable' '('
    case 18163:                     // 'start' '('
    case 18166:                     // 'strict' '('
    case 18174:                     // 'to' '('
    case 18175:                     // 'treat' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
    case 18200:                     // 'xquery' '('
    case 39511:                     // 'attribute' 'allowing'
    case 39550:                     // 'element' 'allowing'
    case 39614:                     // 'namespace' 'allowing'
    case 39646:                     // 'processing-instruction' 'allowing'
    case 40023:                     // 'attribute' 'ancestor'
    case 40062:                     // 'element' 'ancestor'
    case 40126:                     // 'namespace' 'ancestor'
    case 40158:                     // 'processing-instruction' 'ancestor'
    case 40535:                     // 'attribute' 'ancestor-or-self'
    case 40574:                     // 'element' 'ancestor-or-self'
    case 40638:                     // 'namespace' 'ancestor-or-self'
    case 40670:                     // 'processing-instruction' 'ancestor-or-self'
    case 42071:                     // 'attribute' 'append'
    case 42110:                     // 'element' 'append'
    case 42174:                     // 'namespace' 'append'
    case 42206:                     // 'processing-instruction' 'append'
    case 42583:                     // 'attribute' 'array'
    case 42622:                     // 'element' 'array'
    case 44631:                     // 'attribute' 'attribute'
    case 44670:                     // 'element' 'attribute'
    case 44734:                     // 'namespace' 'attribute'
    case 44766:                     // 'processing-instruction' 'attribute'
    case 45143:                     // 'attribute' 'base-uri'
    case 45182:                     // 'element' 'base-uri'
    case 45246:                     // 'namespace' 'base-uri'
    case 45278:                     // 'processing-instruction' 'base-uri'
    case 46167:                     // 'attribute' 'boundary-space'
    case 46206:                     // 'element' 'boundary-space'
    case 46270:                     // 'namespace' 'boundary-space'
    case 46302:                     // 'processing-instruction' 'boundary-space'
    case 46679:                     // 'attribute' 'break'
    case 46718:                     // 'element' 'break'
    case 46782:                     // 'namespace' 'break'
    case 46814:                     // 'processing-instruction' 'break'
    case 49239:                     // 'attribute' 'catch'
    case 49278:                     // 'element' 'catch'
    case 49342:                     // 'namespace' 'catch'
    case 49374:                     // 'processing-instruction' 'catch'
    case 50263:                     // 'attribute' 'child'
    case 50302:                     // 'element' 'child'
    case 50366:                     // 'namespace' 'child'
    case 50398:                     // 'processing-instruction' 'child'
    case 51799:                     // 'attribute' 'comment'
    case 51838:                     // 'element' 'comment'
    case 51902:                     // 'namespace' 'comment'
    case 51934:                     // 'processing-instruction' 'comment'
    case 52311:                     // 'attribute' 'constraint'
    case 52350:                     // 'element' 'constraint'
    case 52414:                     // 'namespace' 'constraint'
    case 52446:                     // 'processing-instruction' 'constraint'
    case 52823:                     // 'attribute' 'construction'
    case 52862:                     // 'element' 'construction'
    case 52926:                     // 'namespace' 'construction'
    case 52958:                     // 'processing-instruction' 'construction'
    case 54359:                     // 'attribute' 'context'
    case 54398:                     // 'element' 'context'
    case 54462:                     // 'namespace' 'context'
    case 54494:                     // 'processing-instruction' 'context'
    case 54871:                     // 'attribute' 'continue'
    case 54910:                     // 'element' 'continue'
    case 54974:                     // 'namespace' 'continue'
    case 55006:                     // 'processing-instruction' 'continue'
    case 55383:                     // 'attribute' 'copy'
    case 55422:                     // 'element' 'copy'
    case 55486:                     // 'namespace' 'copy'
    case 55518:                     // 'processing-instruction' 'copy'
    case 55895:                     // 'attribute' 'copy-namespaces'
    case 55934:                     // 'element' 'copy-namespaces'
    case 55998:                     // 'namespace' 'copy-namespaces'
    case 56030:                     // 'processing-instruction' 'copy-namespaces'
    case 56919:                     // 'attribute' 'decimal-format'
    case 56958:                     // 'element' 'decimal-format'
    case 57022:                     // 'namespace' 'decimal-format'
    case 57054:                     // 'processing-instruction' 'decimal-format'
    case 57943:                     // 'attribute' 'declare'
    case 57982:                     // 'element' 'declare'
    case 58046:                     // 'namespace' 'declare'
    case 58078:                     // 'processing-instruction' 'declare'
    case 58967:                     // 'attribute' 'delete'
    case 59006:                     // 'element' 'delete'
    case 59070:                     // 'namespace' 'delete'
    case 59102:                     // 'processing-instruction' 'delete'
    case 59479:                     // 'attribute' 'descendant'
    case 59518:                     // 'element' 'descendant'
    case 59582:                     // 'namespace' 'descendant'
    case 59614:                     // 'processing-instruction' 'descendant'
    case 59991:                     // 'attribute' 'descendant-or-self'
    case 60030:                     // 'element' 'descendant-or-self'
    case 60094:                     // 'namespace' 'descendant-or-self'
    case 60126:                     // 'processing-instruction' 'descendant-or-self'
    case 63575:                     // 'attribute' 'document'
    case 63614:                     // 'element' 'document'
    case 63678:                     // 'namespace' 'document'
    case 63710:                     // 'processing-instruction' 'document'
    case 64087:                     // 'attribute' 'document-node'
    case 64126:                     // 'element' 'document-node'
    case 64190:                     // 'namespace' 'document-node'
    case 64222:                     // 'processing-instruction' 'document-node'
    case 64599:                     // 'attribute' 'element'
    case 64638:                     // 'element' 'element'
    case 64702:                     // 'namespace' 'element'
    case 64734:                     // 'processing-instruction' 'element'
    case 66135:                     // 'attribute' 'empty-sequence'
    case 66174:                     // 'element' 'empty-sequence'
    case 66238:                     // 'namespace' 'empty-sequence'
    case 66270:                     // 'processing-instruction' 'empty-sequence'
    case 66647:                     // 'attribute' 'encoding'
    case 66686:                     // 'element' 'encoding'
    case 66750:                     // 'namespace' 'encoding'
    case 66782:                     // 'processing-instruction' 'encoding'
    case 68695:                     // 'attribute' 'every'
    case 68734:                     // 'element' 'every'
    case 68798:                     // 'namespace' 'every'
    case 68830:                     // 'processing-instruction' 'every'
    case 70231:                     // 'attribute' 'exit'
    case 70270:                     // 'element' 'exit'
    case 70334:                     // 'namespace' 'exit'
    case 70366:                     // 'processing-instruction' 'exit'
    case 70743:                     // 'attribute' 'external'
    case 70782:                     // 'element' 'external'
    case 70846:                     // 'namespace' 'external'
    case 70878:                     // 'processing-instruction' 'external'
    case 71255:                     // 'attribute' 'first'
    case 71294:                     // 'element' 'first'
    case 71358:                     // 'namespace' 'first'
    case 71390:                     // 'processing-instruction' 'first'
    case 71767:                     // 'attribute' 'following'
    case 71806:                     // 'element' 'following'
    case 71870:                     // 'namespace' 'following'
    case 71902:                     // 'processing-instruction' 'following'
    case 72279:                     // 'attribute' 'following-sibling'
    case 72318:                     // 'element' 'following-sibling'
    case 72382:                     // 'namespace' 'following-sibling'
    case 72414:                     // 'processing-instruction' 'following-sibling'
    case 74839:                     // 'attribute' 'ft-option'
    case 74878:                     // 'element' 'ft-option'
    case 74942:                     // 'namespace' 'ft-option'
    case 74974:                     // 'processing-instruction' 'ft-option'
    case 76887:                     // 'attribute' 'function'
    case 76926:                     // 'element' 'function'
    case 76990:                     // 'namespace' 'function'
    case 77022:                     // 'processing-instruction' 'function'
    case 80471:                     // 'attribute' 'if'
    case 80510:                     // 'element' 'if'
    case 80574:                     // 'namespace' 'if'
    case 80606:                     // 'processing-instruction' 'if'
    case 80983:                     // 'attribute' 'import'
    case 81022:                     // 'element' 'import'
    case 81086:                     // 'namespace' 'import'
    case 81118:                     // 'processing-instruction' 'import'
    case 81495:                     // 'attribute' 'in'
    case 81534:                     // 'element' 'in'
    case 81598:                     // 'namespace' 'in'
    case 81630:                     // 'processing-instruction' 'in'
    case 82007:                     // 'attribute' 'index'
    case 82046:                     // 'element' 'index'
    case 82110:                     // 'namespace' 'index'
    case 82142:                     // 'processing-instruction' 'index'
    case 84055:                     // 'attribute' 'insert'
    case 84094:                     // 'element' 'insert'
    case 84158:                     // 'namespace' 'insert'
    case 84190:                     // 'processing-instruction' 'insert'
    case 85079:                     // 'attribute' 'integrity'
    case 85118:                     // 'element' 'integrity'
    case 85182:                     // 'namespace' 'integrity'
    case 85214:                     // 'processing-instruction' 'integrity'
    case 87127:                     // 'attribute' 'item'
    case 87166:                     // 'element' 'item'
    case 87230:                     // 'namespace' 'item'
    case 87262:                     // 'processing-instruction' 'item'
    case 87639:                     // 'attribute' 'json'
    case 87678:                     // 'element' 'json'
    case 87742:                     // 'namespace' 'json'
    case 87774:                     // 'processing-instruction' 'json'
    case 88151:                     // 'attribute' 'json-item'
    case 88190:                     // 'element' 'json-item'
    case 89687:                     // 'attribute' 'last'
    case 89726:                     // 'element' 'last'
    case 89790:                     // 'namespace' 'last'
    case 89822:                     // 'processing-instruction' 'last'
    case 90199:                     // 'attribute' 'lax'
    case 90238:                     // 'element' 'lax'
    case 90302:                     // 'namespace' 'lax'
    case 90334:                     // 'processing-instruction' 'lax'
    case 92759:                     // 'attribute' 'loop'
    case 92798:                     // 'element' 'loop'
    case 92862:                     // 'namespace' 'loop'
    case 92894:                     // 'processing-instruction' 'loop'
    case 94295:                     // 'attribute' 'map'
    case 94334:                     // 'element' 'map'
    case 94398:                     // 'namespace' 'map'
    case 94430:                     // 'processing-instruction' 'map'
    case 96343:                     // 'attribute' 'module'
    case 96382:                     // 'element' 'module'
    case 96446:                     // 'namespace' 'module'
    case 96478:                     // 'processing-instruction' 'module'
    case 97367:                     // 'attribute' 'namespace'
    case 97406:                     // 'element' 'namespace'
    case 97470:                     // 'namespace' 'namespace'
    case 97502:                     // 'processing-instruction' 'namespace'
    case 97879:                     // 'attribute' 'namespace-node'
    case 97918:                     // 'element' 'namespace-node'
    case 97982:                     // 'namespace' 'namespace-node'
    case 98014:                     // 'processing-instruction' 'namespace-node'
    case 100951:                    // 'attribute' 'node'
    case 100990:                    // 'element' 'node'
    case 101054:                    // 'namespace' 'node'
    case 101086:                    // 'processing-instruction' 'node'
    case 101463:                    // 'attribute' 'nodes'
    case 101502:                    // 'element' 'nodes'
    case 101566:                    // 'namespace' 'nodes'
    case 101598:                    // 'processing-instruction' 'nodes'
    case 102487:                    // 'attribute' 'object'
    case 102526:                    // 'element' 'object'
    case 102590:                    // 'namespace' 'object'
    case 102622:                    // 'processing-instruction' 'object'
    case 105047:                    // 'attribute' 'option'
    case 105086:                    // 'element' 'option'
    case 105150:                    // 'namespace' 'option'
    case 105182:                    // 'processing-instruction' 'option'
    case 106583:                    // 'attribute' 'ordered'
    case 106622:                    // 'element' 'ordered'
    case 106686:                    // 'namespace' 'ordered'
    case 106718:                    // 'processing-instruction' 'ordered'
    case 107095:                    // 'attribute' 'ordering'
    case 107134:                    // 'element' 'ordering'
    case 107198:                    // 'namespace' 'ordering'
    case 107230:                    // 'processing-instruction' 'ordering'
    case 108631:                    // 'attribute' 'parent'
    case 108670:                    // 'element' 'parent'
    case 108734:                    // 'namespace' 'parent'
    case 108766:                    // 'processing-instruction' 'parent'
    case 111703:                    // 'attribute' 'preceding'
    case 111742:                    // 'element' 'preceding'
    case 111806:                    // 'namespace' 'preceding'
    case 111838:                    // 'processing-instruction' 'preceding'
    case 112215:                    // 'attribute' 'preceding-sibling'
    case 112254:                    // 'element' 'preceding-sibling'
    case 112318:                    // 'namespace' 'preceding-sibling'
    case 112350:                    // 'processing-instruction' 'preceding-sibling'
    case 113751:                    // 'attribute' 'processing-instruction'
    case 113790:                    // 'element' 'processing-instruction'
    case 113854:                    // 'namespace' 'processing-instruction'
    case 113886:                    // 'processing-instruction' 'processing-instruction'
    case 114775:                    // 'attribute' 'rename'
    case 114814:                    // 'element' 'rename'
    case 114878:                    // 'namespace' 'rename'
    case 114910:                    // 'processing-instruction' 'rename'
    case 115287:                    // 'attribute' 'replace'
    case 115326:                    // 'element' 'replace'
    case 115390:                    // 'namespace' 'replace'
    case 115422:                    // 'processing-instruction' 'replace'
    case 116311:                    // 'attribute' 'returning'
    case 116350:                    // 'element' 'returning'
    case 116414:                    // 'namespace' 'returning'
    case 116446:                    // 'processing-instruction' 'returning'
    case 116823:                    // 'attribute' 'revalidation'
    case 116862:                    // 'element' 'revalidation'
    case 116926:                    // 'namespace' 'revalidation'
    case 116958:                    // 'processing-instruction' 'revalidation'
    case 118359:                    // 'attribute' 'schema'
    case 118398:                    // 'element' 'schema'
    case 118462:                    // 'namespace' 'schema'
    case 118494:                    // 'processing-instruction' 'schema'
    case 118871:                    // 'attribute' 'schema-attribute'
    case 118910:                    // 'element' 'schema-attribute'
    case 118974:                    // 'namespace' 'schema-attribute'
    case 119006:                    // 'processing-instruction' 'schema-attribute'
    case 119383:                    // 'attribute' 'schema-element'
    case 119422:                    // 'element' 'schema-element'
    case 119486:                    // 'namespace' 'schema-element'
    case 119518:                    // 'processing-instruction' 'schema-element'
    case 119895:                    // 'attribute' 'score'
    case 119934:                    // 'element' 'score'
    case 119998:                    // 'namespace' 'score'
    case 120030:                    // 'processing-instruction' 'score'
    case 120407:                    // 'attribute' 'self'
    case 120446:                    // 'element' 'self'
    case 120510:                    // 'namespace' 'self'
    case 120542:                    // 'processing-instruction' 'self'
    case 122967:                    // 'attribute' 'sliding'
    case 123006:                    // 'element' 'sliding'
    case 123070:                    // 'namespace' 'sliding'
    case 123102:                    // 'processing-instruction' 'sliding'
    case 123479:                    // 'attribute' 'some'
    case 123518:                    // 'element' 'some'
    case 123582:                    // 'namespace' 'some'
    case 123614:                    // 'processing-instruction' 'some'
    case 126039:                    // 'attribute' 'strict'
    case 126078:                    // 'element' 'strict'
    case 126142:                    // 'namespace' 'strict'
    case 126174:                    // 'processing-instruction' 'strict'
    case 127063:                    // 'attribute' 'structured-item'
    case 127102:                    // 'element' 'structured-item'
    case 127575:                    // 'attribute' 'switch'
    case 127614:                    // 'element' 'switch'
    case 127678:                    // 'namespace' 'switch'
    case 127710:                    // 'processing-instruction' 'switch'
    case 128087:                    // 'attribute' 'text'
    case 128126:                    // 'element' 'text'
    case 128190:                    // 'namespace' 'text'
    case 128222:                    // 'processing-instruction' 'text'
    case 131159:                    // 'attribute' 'try'
    case 131198:                    // 'element' 'try'
    case 131262:                    // 'namespace' 'try'
    case 131294:                    // 'processing-instruction' 'try'
    case 131671:                    // 'attribute' 'tumbling'
    case 131710:                    // 'element' 'tumbling'
    case 131774:                    // 'namespace' 'tumbling'
    case 131806:                    // 'processing-instruction' 'tumbling'
    case 132183:                    // 'attribute' 'type'
    case 132222:                    // 'element' 'type'
    case 132286:                    // 'namespace' 'type'
    case 132318:                    // 'processing-instruction' 'type'
    case 132695:                    // 'attribute' 'typeswitch'
    case 132734:                    // 'element' 'typeswitch'
    case 132798:                    // 'namespace' 'typeswitch'
    case 132830:                    // 'processing-instruction' 'typeswitch'
    case 134231:                    // 'attribute' 'unordered'
    case 134270:                    // 'element' 'unordered'
    case 134334:                    // 'namespace' 'unordered'
    case 134366:                    // 'processing-instruction' 'unordered'
    case 134743:                    // 'attribute' 'updating'
    case 134782:                    // 'element' 'updating'
    case 134846:                    // 'namespace' 'updating'
    case 134878:                    // 'processing-instruction' 'updating'
    case 136279:                    // 'attribute' 'validate'
    case 136318:                    // 'element' 'validate'
    case 136382:                    // 'namespace' 'validate'
    case 136414:                    // 'processing-instruction' 'validate'
    case 136791:                    // 'attribute' 'value'
    case 136830:                    // 'element' 'value'
    case 136894:                    // 'namespace' 'value'
    case 136926:                    // 'processing-instruction' 'value'
    case 137303:                    // 'attribute' 'variable'
    case 137342:                    // 'element' 'variable'
    case 137406:                    // 'namespace' 'variable'
    case 137438:                    // 'processing-instruction' 'variable'
    case 137815:                    // 'attribute' 'version'
    case 137854:                    // 'element' 'version'
    case 137918:                    // 'namespace' 'version'
    case 137950:                    // 'processing-instruction' 'version'
    case 139863:                    // 'attribute' 'while'
    case 139902:                    // 'element' 'while'
    case 139966:                    // 'namespace' 'while'
    case 139998:                    // 'processing-instruction' 'while'
    case 143447:                    // 'attribute' 'xquery'
    case 143486:                    // 'element' 'xquery'
    case 143550:                    // 'namespace' 'xquery'
    case 143582:                    // 'processing-instruction' 'xquery'
    case 144467:                    // 'array' '{'
    case 144471:                    // 'attribute' '{'
    case 144485:                    // 'comment' '{'
    case 144508:                    // 'document' '{'
    case 144510:                    // 'element' '{'
    case 144568:                    // 'map' '{'
    case 144574:                    // 'namespace' '{'
    case 144592:                    // 'ordered' '{'
    case 144606:                    // 'processing-instruction' '{'
    case 144634:                    // 'text' '{'
    case 144646:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 212:                       // 'parent'
    case 218:                       // 'preceding'
    case 219:                       // 'preceding-sibling'
      lookahead2W(245);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 46:                        // '..'
    case 26702:                     // 'ancestor' '::'
    case 26703:                     // 'ancestor-or-self' '::'
    case 26836:                     // 'parent' '::'
    case 26842:                     // 'preceding' '::'
    case 26843:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(241);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 212:                       // 'parent'
    case 218:                       // 'preceding'
    case 219:                       // 'preceding-sibling'
      lookahead2W(245);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 46:                        // '..'
    case 26702:                     // 'ancestor' '::'
    case 26703:                     // 'ancestor-or-self' '::'
    case 26836:                     // 'parent' '::'
    case 26842:                     // 'preceding' '::'
    case 26843:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(241);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 87:                        // 'attribute'
      lookahead2W(248);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    case 98:                        // 'child'
    case 116:                       // 'descendant'
    case 117:                       // 'descendant-or-self'
    case 140:                       // 'following'
    case 141:                       // 'following-sibling'
    case 235:                       // 'self'
      lookahead2W(245);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26711:                     // 'attribute' '::'
    case 26722:                     // 'child' '::'
    case 26740:                     // 'descendant' '::'
    case 26741:                     // 'descendant-or-self' '::'
    case 26764:                     // 'following' '::'
    case 26765:                     // 'following-sibling' '::'
    case 26859:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(262);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 87:                        // 'attribute'
      lookahead2W(248);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    case 98:                        // 'child'
    case 116:                       // 'descendant'
    case 117:                       // 'descendant-or-self'
    case 140:                       // 'following'
    case 141:                       // 'following-sibling'
    case 235:                       // 'self'
      lookahead2W(245);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26711:                     // 'attribute' '::'
    case 26722:                     // 'child' '::'
    case 26740:                     // 'descendant' '::'
    case 26741:                     // 'descendant-or-self' '::'
    case 26764:                     // 'following' '::'
    case 26765:                     // 'following-sibling' '::'
    case 26859:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(262);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 98:                        // 'child'
      consume(98);                  // 'child'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    case 116:                       // 'descendant'
      consume(116);                 // 'descendant'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    case 87:                        // 'attribute'
      consume(87);                  // 'attribute'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    case 235:                       // 'self'
      consume(235);                 // 'self'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    case 117:                       // 'descendant-or-self'
      consume(117);                 // 'descendant-or-self'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    case 141:                       // 'following-sibling'
      consume(141);                 // 'following-sibling'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    default:
      consume(140);                 // 'following'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 98:                        // 'child'
      consumeT(98);                 // 'child'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    case 116:                       // 'descendant'
      consumeT(116);                // 'descendant'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    case 87:                        // 'attribute'
      consumeT(87);                 // 'attribute'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    case 235:                       // 'self'
      consumeT(235);                // 'self'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    case 117:                       // 'descendant-or-self'
      consumeT(117);                // 'descendant-or-self'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    case 141:                       // 'following-sibling'
      consumeT(141);                // 'following-sibling'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    default:
      consumeT(140);                // 'following'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 68)                   // '@'
    {
      consume(68);                  // '@'
    }
    lookahead1W(262);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 68)                   // '@'
    {
      consumeT(68);                 // '@'
    }
    lookahead1W(262);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 46:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(262);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 46:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(262);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 212:                       // 'parent'
      consume(212);                 // 'parent'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    case 219:                       // 'preceding-sibling'
      consume(219);                 // 'preceding-sibling'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    case 218:                       // 'preceding'
      consume(218);                 // 'preceding'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
      break;
    default:
      consume(79);                  // 'ancestor-or-self'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consume(52);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 212:                       // 'parent'
      consumeT(212);                // 'parent'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    case 219:                       // 'preceding-sibling'
      consumeT(219);                // 'preceding-sibling'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    case 218:                       // 'preceding'
      consumeT(218);                // 'preceding'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
      break;
    default:
      consumeT(79);                 // 'ancestor-or-self'
      lookahead1W(28);              // S^WS | '(:' | '::'
      consumeT(52);                 // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(46);                    // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    consumeT(46);                   // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 87:                        // 'attribute'
    case 101:                       // 'comment'
    case 125:                       // 'document-node'
    case 126:                       // 'element'
    case 191:                       // 'namespace-node'
    case 197:                       // 'node'
    case 222:                       // 'processing-instruction'
    case 232:                       // 'schema-attribute'
    case 233:                       // 'schema-element'
    case 250:                       // 'text'
      lookahead2W(244);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18007:                     // 'attribute' '('
    case 18021:                     // 'comment' '('
    case 18045:                     // 'document-node' '('
    case 18046:                     // 'element' '('
    case 18111:                     // 'namespace-node' '('
    case 18117:                     // 'node' '('
    case 18142:                     // 'processing-instruction' '('
    case 18152:                     // 'schema-attribute' '('
    case 18153:                     // 'schema-element' '('
    case 18170:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 87:                        // 'attribute'
    case 101:                       // 'comment'
    case 125:                       // 'document-node'
    case 126:                       // 'element'
    case 191:                       // 'namespace-node'
    case 197:                       // 'node'
    case 222:                       // 'processing-instruction'
    case 232:                       // 'schema-attribute'
    case 233:                       // 'schema-element'
    case 250:                       // 'text'
      lookahead2W(244);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18007:                     // 'attribute' '('
    case 18021:                     // 'comment' '('
    case 18045:                     // 'document-node' '('
    case 18046:                     // 'element' '('
    case 18111:                     // 'namespace-node' '('
    case 18117:                     // 'node' '('
    case 18142:                     // 'processing-instruction' '('
    case 18152:                     // 'schema-attribute' '('
    case 18153:                     // 'schema-element' '('
    case 18170:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 5:                         // Wildcard
      consume(5);                   // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 5:                         // Wildcard
      consumeT(5);                  // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(249);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      if (l1 != 35                  // '('
       && l1 != 66                  // '?'
       && l1 != 70)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 70:                      // '['
        whitespace();
        parse_Predicate();
        break;
      case 35:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      default:
        whitespace();
        parse_Lookup();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(249);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      if (l1 != 35                  // '('
       && l1 != 66                  // '?'
       && l1 != 70)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 70:                      // '['
        try_Predicate();
        break;
      case 35:                      // '('
        try_ArgumentList();
        break;
      default:
        try_Lookup();
      }
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(35);                    // '('
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        consume(42);                // ','
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        whitespace();
        parse_Argument();
      }
    }
    consume(38);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    consumeT(35);                   // '('
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 38)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        consumeT(42);               // ','
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        try_Argument();
      }
    }
    consumeT(38);                   // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(241);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      if (l1 != 70)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(241);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}' | '}`'
      if (l1 != 70)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(70);                    // '['
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Expr();
    consume(71);                    // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    consumeT(70);                   // '['
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Expr();
    consumeT(71);                   // ']'
  }

  function parse_Lookup()
  {
    eventHandler.startNonterminal("Lookup", e0);
    consume(66);                    // '?'
    lookahead1W(260);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("Lookup", e0);
  }

  function try_Lookup()
  {
    consumeT(66);                   // '?'
    lookahead1W(260);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_KeySpecifier();
  }

  function parse_UnaryLookup()
  {
    eventHandler.startNonterminal("UnaryLookup", e0);
    consume(66);                    // '?'
    lookahead1W(260);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("UnaryLookup", e0);
  }

  function try_UnaryLookup()
  {
    consumeT(66);                   // '?'
    lookahead1W(260);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_KeySpecifier();
  }

  function parse_KeySpecifier()
  {
    eventHandler.startNonterminal("KeySpecifier", e0);
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consume(8);                   // IntegerLiteral
      break;
    case 35:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      parse_NCName();
    }
    eventHandler.endNonterminal("KeySpecifier", e0);
  }

  function try_KeySpecifier()
  {
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consumeT(8);                  // IntegerLiteral
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      try_NCName();
    }
  }

  function parse_ArrowFunctionSpecifier()
  {
    eventHandler.startNonterminal("ArrowFunctionSpecifier", e0);
    switch (l1)
    {
    case 32:                        // '$'
      parse_VarRef();
      break;
    case 35:                        // '('
      parse_ParenthesizedExpr();
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("ArrowFunctionSpecifier", e0);
  }

  function try_ArrowFunctionSpecifier()
  {
    switch (l1)
    {
    case 32:                        // '$'
      try_VarRef();
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    default:
      try_EQName();
    }
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      consume(11);                  // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      consumeT(11);                 // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consume(8);                   // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      consume(9);                   // DecimalLiteral
      break;
    default:
      consume(10);                  // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consumeT(8);                  // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      consumeT(9);                  // DecimalLiteral
      break;
    default:
      consumeT(10);                 // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(32);                    // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    consumeT(32);                   // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(35);                    // '('
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(38);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    consumeT(35);                   // '('
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 38)                   // ')'
    {
      try_Expr();
    }
    consumeT(38);                   // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(45);                    // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    consumeT(45);                   // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(208);                   // 'ordered'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consume(282);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Expr();
    consume(288);                   // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    consumeT(208);                  // 'ordered'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consumeT(282);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Expr();
    consumeT(288);                  // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(262);                   // 'unordered'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consume(282);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Expr();
    consume(288);                   // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    consumeT(262);                  // 'unordered'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consumeT(282);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Expr();
    consumeT(288);                  // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 66:                        // '?'
      lookahead2W(269);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19522:                     // '?' ')'
    case 21570:                     // '?' ','
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 66:                        // '?'
      lookahead2W(269);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19522:                     // '?' ')'
    case 21570:                     // '?' ','
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(66);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    consumeT(66);                   // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 55:                        // '<'
      parse_DirElemConstructor();
      break;
    case 56:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 55:                        // '<'
      try_DirElemConstructor();
      break;
    case 56:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(55);                    // '<'
    lookahead1(4);                  // QName
    consume(20);                    // QName
    parse_DirAttributeList();
    switch (l1)
    {
    case 49:                        // '/>'
      consume(49);                  // '/>'
      break;
    default:
      consume(63);                  // '>'
      for (;;)
      {
        lookahead1(176);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 57)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(57);                  // '</'
      lookahead1(4);                // QName
      consume(20);                  // QName
      lookahead1(13);               // S | '>'
      if (l1 == 22)                 // S
      {
        consume(22);                // S
      }
      lookahead1(9);                // '>'
      consume(63);                  // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    consumeT(55);                   // '<'
    lookahead1(4);                  // QName
    consumeT(20);                   // QName
    try_DirAttributeList();
    switch (l1)
    {
    case 49:                        // '/>'
      consumeT(49);                 // '/>'
      break;
    default:
      consumeT(63);                 // '>'
      for (;;)
      {
        lookahead1(176);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 57)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(57);                 // '</'
      lookahead1(4);                // QName
      consumeT(20);                 // QName
      lookahead1(13);               // S | '>'
      if (l1 == 22)                 // S
      {
        consumeT(22);               // S
      }
      lookahead1(9);                // '>'
      consumeT(63);                 // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 22)                 // S
      {
        break;
      }
      consume(22);                  // S
      lookahead1(93);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        consume(20);                // QName
        lookahead1(12);             // S | '='
        if (l1 == 22)               // S
        {
          consume(22);              // S
        }
        lookahead1(8);              // '='
        consume(61);                // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 22)               // S
        {
          consume(22);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(21);               // S | '/>' | '>'
      if (l1 != 22)                 // S
      {
        break;
      }
      consumeT(22);                 // S
      lookahead1(93);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        consumeT(20);               // QName
        lookahead1(12);             // S | '='
        if (l1 == 22)               // S
        {
          consumeT(22);             // S
        }
        lookahead1(8);              // '='
        consumeT(61);               // '='
        lookahead1(20);             // S | '"' | "'"
        if (l1 == 22)               // S
        {
          consumeT(22);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(15);                 // '"' | "'"
    switch (l1)
    {
    case 29:                        // '"'
      consume(29);                  // '"'
      for (;;)
      {
        lookahead1(169);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 29)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          consume(13);              // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(29);                  // '"'
      break;
    default:
      consume(34);                  // "'"
      for (;;)
      {
        lookahead1(170);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 34)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          consume(14);              // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(34);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(15);                 // '"' | "'"
    switch (l1)
    {
    case 29:                        // '"'
      consumeT(29);                 // '"'
      for (;;)
      {
        lookahead1(169);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 29)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          consumeT(13);             // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(29);                 // '"'
      break;
    default:
      consumeT(34);                 // "'"
      for (;;)
      {
        lookahead1(170);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 34)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          consumeT(14);             // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(34);                 // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      consume(16);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      consumeT(16);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      consume(17);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      consumeT(17);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      parse_DirectConstructor();
      break;
    case 4:                         // CDataSection
      consume(4);                   // CDataSection
      break;
    case 15:                        // ElementContentChar
      consume(15);                  // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 55:                        // '<'
    case 56:                        // '<!--'
    case 60:                        // '<?'
      try_DirectConstructor();
      break;
    case 4:                         // CDataSection
      consumeT(4);                  // CDataSection
      break;
    case 15:                        // ElementContentChar
      consumeT(15);                 // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(56);                    // '<!--'
    lookahead1(1);                  // DirCommentContents
    consume(2);                     // DirCommentContents
    lookahead1(7);                  // '-->'
    consume(44);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    consumeT(56);                   // '<!--'
    lookahead1(1);                  // DirCommentContents
    consumeT(2);                    // DirCommentContents
    lookahead1(7);                  // '-->'
    consumeT(44);                   // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(60);                    // '<?'
    lookahead1(3);                  // PITarget
    consume(18);                    // PITarget
    lookahead1(14);                 // S | '?>'
    if (l1 == 22)                   // S
    {
      consume(22);                  // S
      lookahead1(2);                // DirPIContents
      consume(3);                   // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consume(67);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    consumeT(60);                   // '<?'
    lookahead1(3);                  // PITarget
    consumeT(18);                   // PITarget
    lookahead1(14);                 // S | '?>'
    if (l1 == 22)                   // S
    {
      consumeT(22);                 // S
      lookahead1(2);                // DirPIContents
      consumeT(3);                  // DirPIContents
    }
    lookahead1(10);                 // '?>'
    consumeT(67);                   // '?>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 124:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 126:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 87:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 190:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 250:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 101:                       // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 124:                       // 'document'
      try_CompDocConstructor();
      break;
    case 126:                       // 'element'
      try_CompElemConstructor();
      break;
    case 87:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 190:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 250:                       // 'text'
      try_CompTextConstructor();
      break;
    case 101:                       // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(126);                   // 'element'
    lookahead1W(264);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      consume(282);                 // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_Expr();
      consume(288);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    consume(282);                   // '{'
    lookahead1W(285);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
    if (l1 != 288)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    consume(288);                   // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    consumeT(126);                  // 'element'
    lookahead1W(264);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      consumeT(282);                // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_Expr();
      consumeT(288);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    consumeT(282);                  // '{'
    lookahead1W(285);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
    if (l1 != 288)                  // '}'
    {
      try_ContentExpr();
    }
    consumeT(288);                  // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(190);                   // 'namespace'
    lookahead1W(255);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      consume(282);                 // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_PrefixExpr();
      consume(288);                 // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    consume(282);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_URIExpr();
    consume(288);                   // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    consumeT(190);                  // 'namespace'
    lookahead1W(255);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      consumeT(282);                // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_PrefixExpr();
      consumeT(288);                // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    consumeT(282);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_URIExpr();
    consumeT(288);                  // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 150:                       // 'function'
      lookahead2W(94);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 33:                        // '%'
    case 18070:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 150:                       // 'function'
      lookahead2W(94);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 33:                        // '%'
    case 18070:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consume(30);                    // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consume(8);                     // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(22);                // S^WS | '#' | '(:'
    consumeT(30);                   // '#'
    lookahead1W(18);                // IntegerLiteral | S^WS | '(:'
    consumeT(8);                    // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(99);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(150);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(96);                // S^WS | '$' | '(:' | ')'
    if (l1 == 32)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(38);                    // ')'
    lookahead1W(113);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 84)                   // 'as'
    {
      consume(84);                  // 'as'
      lookahead1W(267);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(99);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(150);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(96);                // S^WS | '$' | '(:' | ')'
    if (l1 == 32)                   // '$'
    {
      try_ParamList();
    }
    consumeT(38);                   // ')'
    lookahead1W(113);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 84)                   // 'as'
    {
      consumeT(84);                 // 'as'
      lookahead1W(267);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(229);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}' | '}`'
    if (l1 == 66)                   // '?'
    {
      consume(66);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(229);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}' | '}`'
    if (l1 == 66)                   // '?'
    {
      consumeT(66);                 // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(84);                    // 'as'
    lookahead1W(267);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    consumeT(84);                   // 'as'
    lookahead1W(267);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 129:                       // 'empty-sequence'
      lookahead2W(242);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18049:                     // 'empty-sequence' '('
      consume(129);                 // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(35);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(38);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(238);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}' | '}`'
      switch (l1)
      {
      case 40:                      // '*'
      case 41:                      // '+'
      case 66:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 129:                       // 'empty-sequence'
      lookahead2W(242);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 18049:                     // 'empty-sequence' '('
      consumeT(129);                // 'empty-sequence'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(35);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(38);                 // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(238);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}' | '}`'
      switch (l1)
      {
      case 40:                      // '*'
      case 41:                      // '+'
      case 66:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 66:                        // '?'
      consume(66);                  // '?'
      break;
    case 40:                        // '*'
      consume(40);                  // '*'
      break;
    default:
      consume(41);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 66:                        // '?'
      consumeT(66);                 // '?'
      break;
    case 40:                        // '*'
      consumeT(40);                 // '*'
      break;
    default:
      consumeT(41);                 // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 83:                        // 'array'
    case 87:                        // 'attribute'
    case 101:                       // 'comment'
    case 125:                       // 'document-node'
    case 126:                       // 'element'
    case 150:                       // 'function'
    case 170:                       // 'item'
    case 172:                       // 'json-item'
    case 184:                       // 'map'
    case 191:                       // 'namespace-node'
    case 197:                       // 'node'
    case 200:                       // 'object'
    case 222:                       // 'processing-instruction'
    case 232:                       // 'schema-attribute'
    case 233:                       // 'schema-element'
    case 248:                       // 'structured-item'
    case 250:                       // 'text'
      lookahead2W(242);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 18003)                // 'array' '('
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ArrayTest();
          lk = -6;
        }
        catch (p6A)
        {
          lk = -7;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0, lk);
      }
    }
    switch (lk)
    {
    case 18007:                     // 'attribute' '('
    case 18021:                     // 'comment' '('
    case 18045:                     // 'document-node' '('
    case 18046:                     // 'element' '('
    case 18111:                     // 'namespace-node' '('
    case 18117:                     // 'node' '('
    case 18142:                     // 'processing-instruction' '('
    case 18152:                     // 'schema-attribute' '('
    case 18153:                     // 'schema-element' '('
    case 18170:                     // 'text' '('
      parse_KindTest();
      break;
    case 18090:                     // 'item' '('
      consume(170);                 // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consume(35);                  // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consume(38);                  // ')'
      break;
    case 33:                        // '%'
    case 18070:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 35:                        // '('
      parse_ParenthesizedItemType();
      break;
    case -6:
      parse_ArrayTest();
      break;
    case -7:
    case 18092:                     // 'json-item' '('
    case 18120:                     // 'object' '('
      parse_JSONTest();
      break;
    case 18104:                     // 'map' '('
      parse_MapType();
      break;
    case 18168:                     // 'structured-item' '('
      parse_StructuredItemTest();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 83:                        // 'array'
    case 87:                        // 'attribute'
    case 101:                       // 'comment'
    case 125:                       // 'document-node'
    case 126:                       // 'element'
    case 150:                       // 'function'
    case 170:                       // 'item'
    case 172:                       // 'json-item'
    case 184:                       // 'map'
    case 191:                       // 'namespace-node'
    case 197:                       // 'node'
    case 200:                       // 'object'
    case 222:                       // 'processing-instruction'
    case 232:                       // 'schema-attribute'
    case 233:                       // 'schema-element'
    case 248:                       // 'structured-item'
    case 250:                       // 'text'
      lookahead2W(242);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 18003)                // 'array' '('
    {
      lk = memoized(5, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ArrayTest();
          memoize(5, e0A, -6);
          lk = -10;
        }
        catch (p6A)
        {
          lk = -7;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(5, e0A, -7);
        }
      }
    }
    switch (lk)
    {
    case 18007:                     // 'attribute' '('
    case 18021:                     // 'comment' '('
    case 18045:                     // 'document-node' '('
    case 18046:                     // 'element' '('
    case 18111:                     // 'namespace-node' '('
    case 18117:                     // 'node' '('
    case 18142:                     // 'processing-instruction' '('
    case 18152:                     // 'schema-attribute' '('
    case 18153:                     // 'schema-element' '('
    case 18170:                     // 'text' '('
      try_KindTest();
      break;
    case 18090:                     // 'item' '('
      consumeT(170);                // 'item'
      lookahead1W(24);              // S^WS | '(' | '(:'
      consumeT(35);                 // '('
      lookahead1W(25);              // S^WS | '(:' | ')'
      consumeT(38);                 // ')'
      break;
    case 33:                        // '%'
    case 18070:                     // 'function' '('
      try_FunctionTest();
      break;
    case 35:                        // '('
      try_ParenthesizedItemType();
      break;
    case -6:
      try_ArrayTest();
      break;
    case -7:
    case 18092:                     // 'json-item' '('
    case 18120:                     // 'object' '('
      try_JSONTest();
      break;
    case 18104:                     // 'map' '('
      try_MapType();
      break;
    case 18168:                     // 'structured-item' '('
      try_StructuredItemTest();
      break;
    case -10:
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_ArrayTest()
  {
    eventHandler.startNonterminal("ArrayTest", e0);
    switch (l1)
    {
    case 83:                        // 'array'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(6, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyArrayTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(6, e0, lk);
    }
    switch (lk)
    {
    case -1:
      parse_AnyArrayTest();
      break;
    default:
      parse_TypedArrayTest();
    }
    eventHandler.endNonterminal("ArrayTest", e0);
  }

  function try_ArrayTest()
  {
    switch (l1)
    {
    case 83:                        // 'array'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(6, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyArrayTest();
        memoize(6, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(6, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyArrayTest();
      break;
    case -3:
      break;
    default:
      try_TypedArrayTest();
    }
  }

  function parse_AnyArrayTest()
  {
    eventHandler.startNonterminal("AnyArrayTest", e0);
    consume(83);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(39);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("AnyArrayTest", e0);
  }

  function try_AnyArrayTest()
  {
    consumeT(83);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(39);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_TypedArrayTest()
  {
    eventHandler.startNonterminal("TypedArrayTest", e0);
    consume(83);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(267);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("TypedArrayTest", e0);
  }

  function try_TypedArrayTest()
  {
    consumeT(83);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(267);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_MapType()
  {
    eventHandler.startNonterminal("MapType", e0);
    consume(184);                   // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(263);               // EQName^Token | S^WS | '(:' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      whitespace();
      parse_AtomicOrUnionType();
      lookahead1W(27);              // S^WS | '(:' | ','
      consume(42);                  // ','
      lookahead1W(267);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("MapType", e0);
  }

  function try_MapType()
  {
    consumeT(184);                  // 'map'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(263);               // EQName^Token | S^WS | '(:' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      try_AtomicOrUnionType();
      lookahead1W(27);              // S^WS | '(:' | ','
      consumeT(42);                 // ','
      lookahead1W(267);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_MapConstructor()
  {
    eventHandler.startNonterminal("MapConstructor", e0);
    consume(184);                   // 'map'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consume(282);                   // '{'
    lookahead1W(282);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
    if (l1 != 288)                  // '}'
    {
      whitespace();
      parse_MapConstructorEntry();
      for (;;)
      {
        if (l1 != 42)               // ','
        {
          break;
        }
        consume(42);                // ','
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        whitespace();
        parse_MapConstructorEntry();
      }
    }
    consume(288);                   // '}'
    eventHandler.endNonterminal("MapConstructor", e0);
  }

  function try_MapConstructor()
  {
    consumeT(184);                  // 'map'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consumeT(282);                  // '{'
    lookahead1W(282);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
    if (l1 != 288)                  // '}'
    {
      try_MapConstructorEntry();
      for (;;)
      {
        if (l1 != 42)               // ','
        {
          break;
        }
        consumeT(42);               // ','
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        try_MapConstructorEntry();
      }
    }
    consumeT(288);                  // '}'
  }

  function parse_MapConstructorEntry()
  {
    eventHandler.startNonterminal("MapConstructorEntry", e0);
    parse_ExprSingle();
    consume(50);                    // ':'
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '=' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 == 61)                   // '='
    {
      consume(61);                  // '='
    }
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("MapConstructorEntry", e0);
  }

  function try_MapConstructorEntry()
  {
    try_ExprSingle();
    consumeT(50);                   // ':'
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '=' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 == 61)                   // '='
    {
      consumeT(61);                 // '='
    }
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_JSONTest()
  {
    eventHandler.startNonterminal("JSONTest", e0);
    switch (l1)
    {
    case 172:                       // 'json-item'
      parse_JSONItemTest();
      break;
    case 200:                       // 'object'
      parse_JSONObjectTest();
      break;
    default:
      parse_JSONArrayTest();
    }
    eventHandler.endNonterminal("JSONTest", e0);
  }

  function try_JSONTest()
  {
    switch (l1)
    {
    case 172:                       // 'json-item'
      try_JSONItemTest();
      break;
    case 200:                       // 'object'
      try_JSONObjectTest();
      break;
    default:
      try_JSONArrayTest();
    }
  }

  function parse_StructuredItemTest()
  {
    eventHandler.startNonterminal("StructuredItemTest", e0);
    consume(248);                   // 'structured-item'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("StructuredItemTest", e0);
  }

  function try_StructuredItemTest()
  {
    consumeT(248);                  // 'structured-item'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_JSONItemTest()
  {
    eventHandler.startNonterminal("JSONItemTest", e0);
    consume(172);                   // 'json-item'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("JSONItemTest", e0);
  }

  function try_JSONItemTest()
  {
    consumeT(172);                  // 'json-item'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_JSONObjectTest()
  {
    eventHandler.startNonterminal("JSONObjectTest", e0);
    consume(200);                   // 'object'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("JSONObjectTest", e0);
  }

  function try_JSONObjectTest()
  {
    consumeT(200);                  // 'object'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_JSONArrayTest()
  {
    eventHandler.startNonterminal("JSONArrayTest", e0);
    consume(83);                    // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("JSONArrayTest", e0);
  }

  function try_JSONArrayTest()
  {
    consumeT(83);                   // 'array'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 125:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 126:                       // 'element'
      parse_ElementTest();
      break;
    case 87:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 233:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 232:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 222:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 101:                       // 'comment'
      parse_CommentTest();
      break;
    case 250:                       // 'text'
      parse_TextTest();
      break;
    case 191:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 125:                       // 'document-node'
      try_DocumentTest();
      break;
    case 126:                       // 'element'
      try_ElementTest();
      break;
    case 87:                        // 'attribute'
      try_AttributeTest();
      break;
    case 233:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 232:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 222:                       // 'processing-instruction'
      try_PITest();
      break;
    case 101:                       // 'comment'
      try_CommentTest();
      break;
    case 250:                       // 'text'
      try_TextTest();
      break;
    case 191:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(197);                   // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    consumeT(197);                  // 'node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(125);                   // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(146);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 126:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    consumeT(125);                  // 'document-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(146);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 126:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(250);                   // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    consumeT(250);                  // 'text'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(101);                   // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    consumeT(101);                  // 'comment'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(191);                   // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    consumeT(191);                  // 'namespace-node'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(222);                   // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(257);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        consume(11);                // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    consumeT(222);                  // 'processing-instruction'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(257);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 38)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        consumeT(11);               // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(87);                    // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(268);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(103);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        consume(42);                // ','
        lookahead1W(259);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    consumeT(87);                   // 'attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(268);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(103);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        consumeT(42);               // ','
        lookahead1W(259);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(232);                   // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    consumeT(232);                  // 'schema-attribute'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_AttributeDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(126);                   // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(268);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(103);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        consume(42);                // ','
        lookahead1W(259);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(104);           // S^WS | '(:' | ')' | '?'
        if (l1 == 66)               // '?'
        {
          consume(66);              // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    consumeT(126);                  // 'element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(268);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(103);             // S^WS | '(:' | ')' | ','
      if (l1 == 42)                 // ','
      {
        consumeT(42);               // ','
        lookahead1W(259);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        try_TypeName();
        lookahead1W(104);           // S^WS | '(:' | ')' | '?'
        if (l1 == 66)               // '?'
        {
          consumeT(66);             // '?'
        }
      }
    }
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(233);                   // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    consumeT(233);                  // 'schema-element'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_ElementDeclaration();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(99);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 150:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(7, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(7, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(99);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 150:                       // 'function'
      lookahead2W(24);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(7, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(7, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(7, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(150);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consume(39);                    // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    consumeT(150);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(26);                // S^WS | '(:' | '*'
    consumeT(39);                   // '*'
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(150);                   // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(271);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        consume(42);                // ','
        lookahead1W(267);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(38);                    // ')'
    lookahead1W(32);                // S^WS | '(:' | 'as'
    consume(84);                    // 'as'
    lookahead1W(267);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    consumeT(150);                  // 'function'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(271);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 38)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        consumeT(42);               // ','
        lookahead1W(267);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        try_SequenceType();
      }
    }
    consumeT(38);                   // ')'
    lookahead1W(32);                // S^WS | '(:' | 'as'
    consumeT(84);                   // 'as'
    lookahead1W(267);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(35);                    // '('
    lookahead1W(267);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consume(38);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    consumeT(35);                   // '('
    lookahead1W(267);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_ItemType();
    lookahead1W(25);                // S^WS | '(:' | ')'
    consumeT(38);                   // ')'
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(113);                   // 'declare'
    lookahead1W(74);                // S^WS | '(:' | 'revalidation'
    consume(228);                   // 'revalidation'
    lookahead1W(154);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 246:                       // 'strict'
      consume(246);                 // 'strict'
      break;
    case 176:                       // 'lax'
      consume(176);                 // 'lax'
      break;
    default:
      consume(239);                 // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 75:                        // 'after'
      consume(75);                  // 'after'
      break;
    case 89:                        // 'before'
      consume(89);                  // 'before'
      break;
    default:
      if (l1 == 84)                 // 'as'
      {
        consume(84);                // 'as'
        lookahead1W(121);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 139:                   // 'first'
          consume(139);             // 'first'
          break;
        default:
          consume(175);             // 'last'
        }
      }
      lookahead1W(56);              // S^WS | '(:' | 'into'
      consume(168);                 // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 75:                        // 'after'
      consumeT(75);                 // 'after'
      break;
    case 89:                        // 'before'
      consumeT(89);                 // 'before'
      break;
    default:
      if (l1 == 84)                 // 'as'
      {
        consumeT(84);               // 'as'
        lookahead1W(121);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 139:                   // 'first'
          consumeT(139);            // 'first'
          break;
        default:
          consumeT(175);            // 'last'
        }
      }
      lookahead1W(56);              // S^WS | '(:' | 'into'
      consumeT(168);                // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(164);                   // 'insert'
    lookahead1W(131);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 197:                       // 'node'
      consume(197);                 // 'node'
      break;
    default:
      consume(198);                 // 'nodes'
    }
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_SourceExpr();
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    consumeT(164);                  // 'insert'
    lookahead1W(131);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 197:                       // 'node'
      consumeT(197);                // 'node'
      break;
    default:
      consumeT(198);                // 'nodes'
    }
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_SourceExpr();
    try_InsertExprTargetChoice();
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(115);                   // 'delete'
    lookahead1W(131);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 197:                       // 'node'
      consume(197);                 // 'node'
      break;
    default:
      consume(198);                 // 'nodes'
    }
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    consumeT(115);                  // 'delete'
    lookahead1W(131);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 197:                       // 'node'
      consumeT(197);                // 'node'
      break;
    default:
      consumeT(198);                // 'nodes'
    }
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(225);                   // 'replace'
    lookahead1W(132);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 267)                  // 'value'
    {
      consume(267);                 // 'value'
      lookahead1W(66);              // S^WS | '(:' | 'of'
      consume(202);                 // 'of'
    }
    lookahead1W(64);                // S^WS | '(:' | 'node'
    consume(197);                   // 'node'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_TargetExpr();
    consume(276);                   // 'with'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    consumeT(225);                  // 'replace'
    lookahead1W(132);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 267)                  // 'value'
    {
      consumeT(267);                // 'value'
      lookahead1W(66);              // S^WS | '(:' | 'of'
      consumeT(202);                // 'of'
    }
    lookahead1W(64);                // S^WS | '(:' | 'node'
    consumeT(197);                  // 'node'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_TargetExpr();
    consumeT(276);                  // 'with'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(224);                   // 'rename'
    lookahead1W(64);                // S^WS | '(:' | 'node'
    consume(197);                   // 'node'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_TargetExpr();
    consume(84);                    // 'as'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    consumeT(224);                  // 'rename'
    lookahead1W(64);                // S^WS | '(:' | 'node'
    consumeT(197);                  // 'node'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_TargetExpr();
    consumeT(84);                   // 'as'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_TransformExpr()
  {
    eventHandler.startNonterminal("TransformExpr", e0);
    consume(108);                   // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_TransformSpec();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      whitespace();
      parse_TransformSpec();
    }
    consume(187);                   // 'modify'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    consume(226);                   // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformExpr", e0);
  }

  function try_TransformExpr()
  {
    consumeT(108);                  // 'copy'
    lookahead1W(23);                // S^WS | '$' | '(:'
    try_TransformSpec();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      try_TransformSpec();
    }
    consumeT(187);                  // 'modify'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
    consumeT(226);                  // 'return'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_TransformSpec()
  {
    eventHandler.startNonterminal("TransformSpec", e0);
    consume(32);                    // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(29);                // S^WS | '(:' | ':='
    consume(53);                    // ':='
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformSpec", e0);
  }

  function try_TransformSpec()
  {
    consumeT(32);                   // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(29);                // S^WS | '(:' | ':='
    consumeT(53);                   // ':='
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
      switch (l1)
      {
      case 86:                      // 'at'
        lookahead2W(153);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 120                 // 'different'
       && lk != 122                 // 'distance'
       && lk != 132                 // 'entire'
       && lk != 208                 // 'ordered'
       && lk != 229                 // 'same'
       && lk != 275                 // 'window'
       && lk != 67158               // 'at' 'end'
       && lk != 124502)             // 'at' 'start'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
      switch (l1)
      {
      case 86:                      // 'at'
        lookahead2W(153);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 120                 // 'different'
       && lk != 122                 // 'distance'
       && lk != 132                 // 'entire'
       && lk != 208                 // 'ordered'
       && lk != 229                 // 'same'
       && lk != 275                 // 'window'
       && lk != 67158               // 'at' 'end'
       && lk != 124502)             // 'at' 'start'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    consume(270);                   // 'weight'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consume(282);                   // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Expr();
    consume(288);                   // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    consumeT(270);                  // 'weight'
    lookahead1W(89);                // S^WS | '(:' | '{'
    consumeT(282);                  // '{'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Expr();
    consumeT(288);                  // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 149)                // 'ftor'
      {
        break;
      }
      consume(149);                 // 'ftor'
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 149)                // 'ftor'
      {
        break;
      }
      consumeT(149);                // 'ftor'
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 147)                // 'ftand'
      {
        break;
      }
      consume(147);                 // 'ftand'
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 147)                // 'ftand'
      {
        break;
      }
      consumeT(147);                // 'ftand'
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}' | '}`'
      if (l1 != 199)                // 'not'
      {
        break;
      }
      consume(199);                 // 'not'
      lookahead1W(55);              // S^WS | '(:' | 'in'
      consume(159);                 // 'in'
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}' | '}`'
      if (l1 != 199)                // 'not'
      {
        break;
      }
      consumeT(199);                // 'not'
      lookahead1W(55);              // S^WS | '(:' | 'in'
      consumeT(159);                // 'in'
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 148)                  // 'ftnot'
    {
      consume(148);                 // 'ftnot'
    }
    lookahead1W(157);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 148)                  // 'ftnot'
    {
      consumeT(148);                // 'ftnot'
    }
    lookahead1W(157);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(217);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}' | '}`'
    if (l1 == 265)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 270)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(217);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}' | '}`'
    if (l1 == 265)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 270)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 35:                        // '('
      consume(35);                  // '('
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      consume(38);                  // ')'
      break;
    case 36:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(218);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
      if (l1 == 201)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 35:                        // '('
      consumeT(35);                 // '('
      lookahead1W(164);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      consumeT(38);                 // ')'
      break;
    case 36:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(218);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
      if (l1 == 201)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
    if (l1 == 76                    // 'all'
     || l1 == 81                    // 'any'
     || l1 == 216)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
    if (l1 == 76                    // 'all'
     || l1 == 81                    // 'any'
     || l1 == 216)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      consume(11);                  // StringLiteral
      break;
    default:
      consume(282);                 // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_Expr();
      consume(288);                 // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      consumeT(11);                 // StringLiteral
      break;
    default:
      consumeT(282);                // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_Expr();
      consumeT(288);                // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(102);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    consume(282);                   // '{'
    lookahead1W(168);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 288)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    consume(288);                   // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(102);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 36)                 // '(#'
      {
        break;
      }
    }
    consumeT(282);                  // '{'
    lookahead1W(168);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 288)                  // '}'
    {
      try_FTSelection();
    }
    consumeT(288);                  // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 81:                        // 'any'
      consume(81);                  // 'any'
      lookahead1W(221);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}' | '}`'
      if (l1 == 278)                // 'word'
      {
        consume(278);               // 'word'
      }
      break;
    case 76:                        // 'all'
      consume(76);                  // 'all'
      lookahead1W(222);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}' | '}`'
      if (l1 == 279)                // 'words'
      {
        consume(279);               // 'words'
      }
      break;
    default:
      consume(216);                 // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 81:                        // 'any'
      consumeT(81);                 // 'any'
      lookahead1W(221);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}' | '}`'
      if (l1 == 278)                // 'word'
      {
        consumeT(278);              // 'word'
      }
      break;
    case 76:                        // 'all'
      consumeT(76);                 // 'all'
      lookahead1W(222);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}' | '}`'
      if (l1 == 279)                // 'words'
      {
        consumeT(279);              // 'words'
      }
      break;
    default:
      consumeT(216);                // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    consume(201);                   // 'occurs'
    lookahead1W(151);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    consume(253);                   // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    consumeT(201);                  // 'occurs'
    lookahead1W(151);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    consumeT(253);                  // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 135:                       // 'exactly'
      consume(135);                 // 'exactly'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 86:                        // 'at'
      consume(86);                  // 'at'
      lookahead1W(127);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 178:                     // 'least'
        consume(178);               // 'least'
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        consume(189);               // 'most'
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      consume(145);                 // 'from'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_AdditiveExpr();
      consume(254);                 // 'to'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 135:                       // 'exactly'
      consumeT(135);                // 'exactly'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_AdditiveExpr();
      break;
    case 86:                        // 'at'
      consumeT(86);                 // 'at'
      lookahead1W(127);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 178:                     // 'least'
        consumeT(178);              // 'least'
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        try_AdditiveExpr();
        break;
      default:
        consumeT(189);              // 'most'
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        try_AdditiveExpr();
      }
      break;
    default:
      consumeT(145);                // 'from'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_AdditiveExpr();
      consumeT(254);                // 'to'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 208:                       // 'ordered'
      parse_FTOrder();
      break;
    case 275:                       // 'window'
      parse_FTWindow();
      break;
    case 122:                       // 'distance'
      parse_FTDistance();
      break;
    case 120:                       // 'different'
    case 229:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 208:                       // 'ordered'
      try_FTOrder();
      break;
    case 275:                       // 'window'
      try_FTWindow();
      break;
    case 122:                       // 'distance'
      try_FTDistance();
      break;
    case 120:                       // 'different'
    case 229:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    consume(208);                   // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    consumeT(208);                  // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    consume(275);                   // 'window'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    consumeT(275);                  // 'window'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    consume(122);                   // 'distance'
    lookahead1W(151);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    consumeT(122);                  // 'distance'
    lookahead1W(151);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 279:                       // 'words'
      consume(279);                 // 'words'
      break;
    case 238:                       // 'sentences'
      consume(238);                 // 'sentences'
      break;
    default:
      consume(211);                 // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 279:                       // 'words'
      consumeT(279);                // 'words'
      break;
    case 238:                       // 'sentences'
      consumeT(238);                // 'sentences'
      break;
    default:
      consumeT(211);                // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 229:                       // 'same'
      consume(229);                 // 'same'
      break;
    default:
      consume(120);                 // 'different'
    }
    lookahead1W(134);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 229:                       // 'same'
      consumeT(229);                // 'same'
      break;
    default:
      consumeT(120);                // 'different'
    }
    lookahead1W(134);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 237:                       // 'sentence'
      consume(237);                 // 'sentence'
      break;
    default:
      consume(210);                 // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 237:                       // 'sentence'
      consumeT(237);                // 'sentence'
      break;
    default:
      consumeT(210);                // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 86:                        // 'at'
      consume(86);                  // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 243:                     // 'start'
        consume(243);               // 'start'
        break;
      default:
        consume(131);               // 'end'
      }
      break;
    default:
      consume(132);                 // 'entire'
      lookahead1W(44);              // S^WS | '(:' | 'content'
      consume(105);                 // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 86:                        // 'at'
      consumeT(86);                 // 'at'
      lookahead1W(119);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 243:                     // 'start'
        consumeT(243);              // 'start'
        break;
      default:
        consumeT(131);              // 'end'
      }
      break;
    default:
      consumeT(132);                // 'entire'
      lookahead1W(44);              // S^WS | '(:' | 'content'
      consumeT(105);                // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      consume(265);                 // 'using'
      lookahead1W(183);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(217);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}' | '}`'
      if (l1 != 265)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      consumeT(265);                // 'using'
      lookahead1W(183);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(217);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}' | '}`'
      if (l1 != 265)                // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 194:                       // 'no'
      lookahead2W(163);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 174:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 274:                       // 'wildcards'
    case 140482:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 252:                       // 'thesaurus'
    case 129218:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 244:                       // 'stemming'
    case 125122:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 119:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 245:                       // 'stop'
    case 125634:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 205:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    switch (l1)
    {
    case 194:                       // 'no'
      lookahead2W(163);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 174:                       // 'language'
      try_FTLanguageOption();
      break;
    case 274:                       // 'wildcards'
    case 140482:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 252:                       // 'thesaurus'
    case 129218:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 244:                       // 'stemming'
    case 125122:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 119:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 245:                       // 'stop'
    case 125634:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 205:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 93:                        // 'case'
      consume(93);                  // 'case'
      lookahead1W(126);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 163:                     // 'insensitive'
        consume(163);               // 'insensitive'
        break;
      default:
        consume(236);               // 'sensitive'
      }
      break;
    case 182:                       // 'lowercase'
      consume(182);                 // 'lowercase'
      break;
    default:
      consume(264);                 // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 93:                        // 'case'
      consumeT(93);                 // 'case'
      lookahead1W(126);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 163:                     // 'insensitive'
        consumeT(163);              // 'insensitive'
        break;
      default:
        consumeT(236);              // 'sensitive'
      }
      break;
    case 182:                       // 'lowercase'
      consumeT(182);                // 'lowercase'
      break;
    default:
      consumeT(264);                // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    consume(119);                   // 'diacritics'
    lookahead1W(126);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 163:                       // 'insensitive'
      consume(163);                 // 'insensitive'
      break;
    default:
      consume(236);                 // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    consumeT(119);                  // 'diacritics'
    lookahead1W(126);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 163:                       // 'insensitive'
      consumeT(163);                // 'insensitive'
      break;
    default:
      consumeT(236);                // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 244:                       // 'stemming'
      consume(244);                 // 'stemming'
      break;
    default:
      consume(194);                 // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'stemming'
      consume(244);                 // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 244:                       // 'stemming'
      consumeT(244);                // 'stemming'
      break;
    default:
      consumeT(194);                // 'no'
      lookahead1W(76);              // S^WS | '(:' | 'stemming'
      consumeT(244);                // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 252:                       // 'thesaurus'
      consume(252);                 // 'thesaurus'
      lookahead1W(144);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 86:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 114:                     // 'default'
        consume(114);               // 'default'
        break;
      default:
        consume(35);                // '('
        lookahead1W(114);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 86:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          consume(114);             // 'default'
        }
        for (;;)
        {
          lookahead1W(103);         // S^WS | '(:' | ')' | ','
          if (l1 != 42)             // ','
          {
            break;
          }
          consume(42);              // ','
          lookahead1W(33);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        consume(38);                // ')'
      }
      break;
    default:
      consume(194);                 // 'no'
      lookahead1W(80);              // S^WS | '(:' | 'thesaurus'
      consume(252);                 // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 252:                       // 'thesaurus'
      consumeT(252);                // 'thesaurus'
      lookahead1W(144);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 86:                      // 'at'
        try_FTThesaurusID();
        break;
      case 114:                     // 'default'
        consumeT(114);              // 'default'
        break;
      default:
        consumeT(35);               // '('
        lookahead1W(114);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 86:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          consumeT(114);            // 'default'
        }
        for (;;)
        {
          lookahead1W(103);         // S^WS | '(:' | ')' | ','
          if (l1 != 42)             // ','
          {
            break;
          }
          consumeT(42);             // ','
          lookahead1W(33);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        consumeT(38);               // ')'
      }
      break;
    default:
      consumeT(194);                // 'no'
      lookahead1W(80);              // S^WS | '(:' | 'thesaurus'
      consumeT(252);                // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    consume(86);                    // 'at'
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}' | '}`'
    if (l1 == 223)                  // 'relationship'
    {
      consume(223);                 // 'relationship'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
    }
    lookahead1W(219);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
    switch (l1)
    {
    case 86:                        // 'at'
      lookahead2W(167);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 135                   // 'exactly'
     || lk == 145                   // 'from'
     || lk == 91222                 // 'at' 'least'
     || lk == 96854)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(60);              // S^WS | '(:' | 'levels'
      consume(180);                 // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    consumeT(86);                   // 'at'
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}' | '}`'
    if (l1 == 223)                  // 'relationship'
    {
      consumeT(223);                // 'relationship'
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(11);                 // StringLiteral
    }
    lookahead1W(219);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
    switch (l1)
    {
    case 86:                        // 'at'
      lookahead2W(167);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 135                   // 'exactly'
     || lk == 145                   // 'from'
     || lk == 91222                 // 'at' 'least'
     || lk == 96854)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(60);              // S^WS | '(:' | 'levels'
      consumeT(180);                // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 135:                       // 'exactly'
      consume(135);                 // 'exactly'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
      break;
    case 86:                        // 'at'
      consume(86);                  // 'at'
      lookahead1W(127);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 178:                     // 'least'
        consume(178);               // 'least'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consume(8);                 // IntegerLiteral
        break;
      default:
        consume(189);               // 'most'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consume(8);                 // IntegerLiteral
      }
      break;
    default:
      consume(145);                 // 'from'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
      lookahead1W(81);              // S^WS | '(:' | 'to'
      consume(254);                 // 'to'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 135:                       // 'exactly'
      consumeT(135);                // 'exactly'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
      break;
    case 86:                        // 'at'
      consumeT(86);                 // 'at'
      lookahead1W(127);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 178:                     // 'least'
        consumeT(178);              // 'least'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consumeT(8);                // IntegerLiteral
        break;
      default:
        consumeT(189);              // 'most'
        lookahead1W(18);            // IntegerLiteral | S^WS | '(:'
        consumeT(8);                // IntegerLiteral
      }
      break;
    default:
      consumeT(145);                // 'from'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
      lookahead1W(81);              // S^WS | '(:' | 'to'
      consumeT(254);                // 'to'
      lookahead1W(18);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 245:                       // 'stop'
      consume(245);                 // 'stop'
      lookahead1W(88);              // S^WS | '(:' | 'words'
      consume(279);                 // 'words'
      lookahead1W(144);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 114:                     // 'default'
        consume(114);               // 'default'
        for (;;)
        {
          lookahead1W(220);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
          if (l1 != 136             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(220);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
          if (l1 != 136             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consume(194);                 // 'no'
      lookahead1W(77);              // S^WS | '(:' | 'stop'
      consume(245);                 // 'stop'
      lookahead1W(88);              // S^WS | '(:' | 'words'
      consume(279);                 // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 245:                       // 'stop'
      consumeT(245);                // 'stop'
      lookahead1W(88);              // S^WS | '(:' | 'words'
      consumeT(279);                // 'words'
      lookahead1W(144);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 114:                     // 'default'
        consumeT(114);              // 'default'
        for (;;)
        {
          lookahead1W(220);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
          if (l1 != 136             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(220);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}' | '}`'
          if (l1 != 136             // 'except'
           && l1 != 260)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consumeT(194);                // 'no'
      lookahead1W(77);              // S^WS | '(:' | 'stop'
      consumeT(245);                // 'stop'
      lookahead1W(88);              // S^WS | '(:' | 'words'
      consumeT(279);                // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 86:                        // 'at'
      consume(86);                  // 'at'
      lookahead1W(17);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      break;
    default:
      consume(35);                  // '('
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        consume(42);                // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consume(11);                // StringLiteral
      }
      consume(38);                  // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 86:                        // 'at'
      consumeT(86);                 // 'at'
      lookahead1W(17);              // URILiteral | S^WS | '(:'
      consumeT(7);                  // URILiteral
      break;
    default:
      consumeT(35);                 // '('
      lookahead1W(19);              // StringLiteral | S^WS | '(:'
      consumeT(11);                 // StringLiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ')' | ','
        if (l1 != 42)               // ','
        {
          break;
        }
        consumeT(42);               // ','
        lookahead1W(19);            // StringLiteral | S^WS | '(:'
        consumeT(11);               // StringLiteral
      }
      consumeT(38);                 // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 260:                       // 'union'
      consume(260);                 // 'union'
      break;
    default:
      consume(136);                 // 'except'
    }
    lookahead1W(101);               // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 260:                       // 'union'
      consumeT(260);                // 'union'
      break;
    default:
      consumeT(136);                // 'except'
    }
    lookahead1W(101);               // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    consume(174);                   // 'language'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    consumeT(174);                  // 'language'
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(11);                   // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 274:                       // 'wildcards'
      consume(274);                 // 'wildcards'
      break;
    default:
      consume(194);                 // 'no'
      lookahead1W(86);              // S^WS | '(:' | 'wildcards'
      consume(274);                 // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 274:                       // 'wildcards'
      consumeT(274);                // 'wildcards'
      break;
    default:
      consumeT(194);                // 'no'
      lookahead1W(86);              // S^WS | '(:' | 'wildcards'
      consumeT(274);                // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    consume(205);                   // 'option'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    consumeT(205);                  // 'option'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(19);                // StringLiteral | S^WS | '(:'
    consumeT(11);                   // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    consume(277);                   // 'without'
    lookahead1W(44);                // S^WS | '(:' | 'content'
    consume(105);                   // 'content'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    consumeT(277);                  // 'without'
    lookahead1W(44);                // S^WS | '(:' | 'content'
    consumeT(105);                  // 'content'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_UnionExpr();
  }

  function parse_CollectionDecl()
  {
    eventHandler.startNonterminal("CollectionDecl", e0);
    consume(100);                   // 'collection'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(109);               // S^WS | '(:' | ';' | 'as'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_CollectionTypeDecl();
    }
    eventHandler.endNonterminal("CollectionDecl", e0);
  }

  function parse_CollectionTypeDecl()
  {
    eventHandler.startNonterminal("CollectionTypeDecl", e0);
    consume(84);                    // 'as'
    lookahead1W(267);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(158);               // S^WS | '(:' | '*' | '+' | ';' | '?'
    if (l1 != 54)                   // ';'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("CollectionTypeDecl", e0);
  }

  function parse_IndexName()
  {
    eventHandler.startNonterminal("IndexName", e0);
    parse_EQName();
    eventHandler.endNonterminal("IndexName", e0);
  }

  function parse_IndexDomainExpr()
  {
    eventHandler.startNonterminal("IndexDomainExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexDomainExpr", e0);
  }

  function parse_IndexKeySpec()
  {
    eventHandler.startNonterminal("IndexKeySpec", e0);
    parse_IndexKeyExpr();
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_IndexKeyTypeDecl();
    }
    lookahead1W(148);               // S^WS | '(:' | ',' | ';' | 'collation'
    if (l1 == 99)                   // 'collation'
    {
      whitespace();
      parse_IndexKeyCollation();
    }
    eventHandler.endNonterminal("IndexKeySpec", e0);
  }

  function parse_IndexKeyExpr()
  {
    eventHandler.startNonterminal("IndexKeyExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexKeyExpr", e0);
  }

  function parse_IndexKeyTypeDecl()
  {
    eventHandler.startNonterminal("IndexKeyTypeDecl", e0);
    consume(84);                    // 'as'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_AtomicType();
    lookahead1W(171);               // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
    if (l1 == 40                    // '*'
     || l1 == 41                    // '+'
     || l1 == 66)                   // '?'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("IndexKeyTypeDecl", e0);
  }

  function parse_AtomicType()
  {
    eventHandler.startNonterminal("AtomicType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicType", e0);
  }

  function parse_IndexKeyCollation()
  {
    eventHandler.startNonterminal("IndexKeyCollation", e0);
    consume(99);                    // 'collation'
    lookahead1W(17);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("IndexKeyCollation", e0);
  }

  function parse_IndexDecl()
  {
    eventHandler.startNonterminal("IndexDecl", e0);
    consume(160);                   // 'index'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_IndexName();
    lookahead1W(67);                // S^WS | '(:' | 'on'
    consume(203);                   // 'on'
    lookahead1W(65);                // S^WS | '(:' | 'nodes'
    consume(198);                   // 'nodes'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexDomainExpr();
    consume(92);                    // 'by'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexKeySpec();
    for (;;)
    {
      lookahead1W(105);             // S^WS | '(:' | ',' | ';'
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(274);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_IndexKeySpec();
    }
    eventHandler.endNonterminal("IndexDecl", e0);
  }

  function parse_ICDecl()
  {
    eventHandler.startNonterminal("ICDecl", e0);
    consume(166);                   // 'integrity'
    lookahead1W(42);                // S^WS | '(:' | 'constraint'
    consume(102);                   // 'constraint'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(122);               // S^WS | '(:' | 'foreign' | 'on'
    switch (l1)
    {
    case 203:                       // 'on'
      whitespace();
      parse_ICCollection();
      break;
    default:
      whitespace();
      parse_ICForeignKey();
    }
    eventHandler.endNonterminal("ICDecl", e0);
  }

  function parse_ICCollection()
  {
    eventHandler.startNonterminal("ICCollection", e0);
    consume(203);                   // 'on'
    lookahead1W(41);                // S^WS | '(:' | 'collection'
    consume(100);                   // 'collection'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(142);               // S^WS | '$' | '(:' | 'foreach' | 'node'
    switch (l1)
    {
    case 32:                        // '$'
      whitespace();
      parse_ICCollSequence();
      break;
    case 197:                       // 'node'
      whitespace();
      parse_ICCollSequenceUnique();
      break;
    default:
      whitespace();
      parse_ICCollNode();
    }
    eventHandler.endNonterminal("ICCollection", e0);
  }

  function parse_ICCollSequence()
  {
    eventHandler.startNonterminal("ICCollSequence", e0);
    parse_VarRef();
    lookahead1W(39);                // S^WS | '(:' | 'check'
    consume(97);                    // 'check'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollSequence", e0);
  }

  function parse_ICCollSequenceUnique()
  {
    eventHandler.startNonterminal("ICCollSequenceUnique", e0);
    consume(197);                   // 'node'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(39);                // S^WS | '(:' | 'check'
    consume(97);                    // 'check'
    lookahead1W(82);                // S^WS | '(:' | 'unique'
    consume(261);                   // 'unique'
    lookahead1W(59);                // S^WS | '(:' | 'key'
    consume(173);                   // 'key'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICCollSequenceUnique", e0);
  }

  function parse_ICCollNode()
  {
    eventHandler.startNonterminal("ICCollNode", e0);
    consume(143);                   // 'foreach'
    lookahead1W(64);                // S^WS | '(:' | 'node'
    consume(197);                   // 'node'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(39);                // S^WS | '(:' | 'check'
    consume(97);                    // 'check'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollNode", e0);
  }

  function parse_ICForeignKey()
  {
    eventHandler.startNonterminal("ICForeignKey", e0);
    consume(144);                   // 'foreign'
    lookahead1W(59);                // S^WS | '(:' | 'key'
    consume(173);                   // 'key'
    lookahead1W(53);                // S^WS | '(:' | 'from'
    whitespace();
    parse_ICForeignKeySource();
    whitespace();
    parse_ICForeignKeyTarget();
    eventHandler.endNonterminal("ICForeignKey", e0);
  }

  function parse_ICForeignKeySource()
  {
    eventHandler.startNonterminal("ICForeignKeySource", e0);
    consume(145);                   // 'from'
    lookahead1W(41);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeySource", e0);
  }

  function parse_ICForeignKeyTarget()
  {
    eventHandler.startNonterminal("ICForeignKeyTarget", e0);
    consume(254);                   // 'to'
    lookahead1W(41);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeyTarget", e0);
  }

  function parse_ICForeignKeyValues()
  {
    eventHandler.startNonterminal("ICForeignKeyValues", e0);
    consume(100);                   // 'collection'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(64);                // S^WS | '(:' | 'node'
    consume(197);                   // 'node'
    lookahead1W(23);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(59);                // S^WS | '(:' | 'key'
    consume(173);                   // 'key'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICForeignKeyValues", e0);
  }

  function try_Comment()
  {
    consumeT(37);                   // '(:'
    for (;;)
    {
      lookahead1(91);               // CommentContents | '(:' | ':)'
      if (l1 == 51)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 25:                      // CommentContents
        consumeT(25);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(51);                   // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 23:                        // S^WS
      consumeT(23);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(254);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 87:                        // 'attribute'
      consume(87);                  // 'attribute'
      break;
    case 101:                       // 'comment'
      consume(101);                 // 'comment'
      break;
    case 125:                       // 'document-node'
      consume(125);                 // 'document-node'
      break;
    case 126:                       // 'element'
      consume(126);                 // 'element'
      break;
    case 129:                       // 'empty-sequence'
      consume(129);                 // 'empty-sequence'
      break;
    case 150:                       // 'function'
      consume(150);                 // 'function'
      break;
    case 157:                       // 'if'
      consume(157);                 // 'if'
      break;
    case 170:                       // 'item'
      consume(170);                 // 'item'
      break;
    case 191:                       // 'namespace-node'
      consume(191);                 // 'namespace-node'
      break;
    case 197:                       // 'node'
      consume(197);                 // 'node'
      break;
    case 222:                       // 'processing-instruction'
      consume(222);                 // 'processing-instruction'
      break;
    case 232:                       // 'schema-attribute'
      consume(232);                 // 'schema-attribute'
      break;
    case 233:                       // 'schema-element'
      consume(233);                 // 'schema-element'
      break;
    case 249:                       // 'switch'
      consume(249);                 // 'switch'
      break;
    case 250:                       // 'text'
      consume(250);                 // 'text'
      break;
    case 259:                       // 'typeswitch'
      consume(259);                 // 'typeswitch'
      break;
    case 83:                        // 'array'
      consume(83);                  // 'array'
      break;
    case 172:                       // 'json-item'
      consume(172);                 // 'json-item'
      break;
    case 248:                       // 'structured-item'
      consume(248);                 // 'structured-item'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(254);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 87:                        // 'attribute'
      consumeT(87);                 // 'attribute'
      break;
    case 101:                       // 'comment'
      consumeT(101);                // 'comment'
      break;
    case 125:                       // 'document-node'
      consumeT(125);                // 'document-node'
      break;
    case 126:                       // 'element'
      consumeT(126);                // 'element'
      break;
    case 129:                       // 'empty-sequence'
      consumeT(129);                // 'empty-sequence'
      break;
    case 150:                       // 'function'
      consumeT(150);                // 'function'
      break;
    case 157:                       // 'if'
      consumeT(157);                // 'if'
      break;
    case 170:                       // 'item'
      consumeT(170);                // 'item'
      break;
    case 191:                       // 'namespace-node'
      consumeT(191);                // 'namespace-node'
      break;
    case 197:                       // 'node'
      consumeT(197);                // 'node'
      break;
    case 222:                       // 'processing-instruction'
      consumeT(222);                // 'processing-instruction'
      break;
    case 232:                       // 'schema-attribute'
      consumeT(232);                // 'schema-attribute'
      break;
    case 233:                       // 'schema-element'
      consumeT(233);                // 'schema-element'
      break;
    case 249:                       // 'switch'
      consumeT(249);                // 'switch'
      break;
    case 250:                       // 'text'
      consumeT(250);                // 'text'
      break;
    case 259:                       // 'typeswitch'
      consumeT(259);                // 'typeswitch'
      break;
    case 83:                        // 'array'
      consumeT(83);                 // 'array'
      break;
    case 172:                       // 'json-item'
      consumeT(172);                // 'json-item'
      break;
    case 248:                       // 'structured-item'
      consumeT(248);                // 'structured-item'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 6:                         // EQName^Token
      consume(6);                   // EQName^Token
      break;
    case 75:                        // 'after'
      consume(75);                  // 'after'
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consume(79);                  // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 84:                        // 'as'
      consume(84);                  // 'as'
      break;
    case 85:                        // 'ascending'
      consume(85);                  // 'ascending'
      break;
    case 89:                        // 'before'
      consume(89);                  // 'before'
      break;
    case 93:                        // 'case'
      consume(93);                  // 'case'
      break;
    case 94:                        // 'cast'
      consume(94);                  // 'cast'
      break;
    case 95:                        // 'castable'
      consume(95);                  // 'castable'
      break;
    case 98:                        // 'child'
      consume(98);                  // 'child'
      break;
    case 99:                        // 'collation'
      consume(99);                  // 'collation'
      break;
    case 108:                       // 'copy'
      consume(108);                 // 'copy'
      break;
    case 110:                       // 'count'
      consume(110);                 // 'count'
      break;
    case 113:                       // 'declare'
      consume(113);                 // 'declare'
      break;
    case 114:                       // 'default'
      consume(114);                 // 'default'
      break;
    case 115:                       // 'delete'
      consume(115);                 // 'delete'
      break;
    case 116:                       // 'descendant'
      consume(116);                 // 'descendant'
      break;
    case 117:                       // 'descendant-or-self'
      consume(117);                 // 'descendant-or-self'
      break;
    case 118:                       // 'descending'
      consume(118);                 // 'descending'
      break;
    case 123:                       // 'div'
      consume(123);                 // 'div'
      break;
    case 124:                       // 'document'
      consume(124);                 // 'document'
      break;
    case 127:                       // 'else'
      consume(127);                 // 'else'
      break;
    case 128:                       // 'empty'
      consume(128);                 // 'empty'
      break;
    case 131:                       // 'end'
      consume(131);                 // 'end'
      break;
    case 133:                       // 'eq'
      consume(133);                 // 'eq'
      break;
    case 134:                       // 'every'
      consume(134);                 // 'every'
      break;
    case 136:                       // 'except'
      consume(136);                 // 'except'
      break;
    case 139:                       // 'first'
      consume(139);                 // 'first'
      break;
    case 140:                       // 'following'
      consume(140);                 // 'following'
      break;
    case 141:                       // 'following-sibling'
      consume(141);                 // 'following-sibling'
      break;
    case 142:                       // 'for'
      consume(142);                 // 'for'
      break;
    case 151:                       // 'ge'
      consume(151);                 // 'ge'
      break;
    case 153:                       // 'group'
      consume(153);                 // 'group'
      break;
    case 155:                       // 'gt'
      consume(155);                 // 'gt'
      break;
    case 156:                       // 'idiv'
      consume(156);                 // 'idiv'
      break;
    case 158:                       // 'import'
      consume(158);                 // 'import'
      break;
    case 164:                       // 'insert'
      consume(164);                 // 'insert'
      break;
    case 165:                       // 'instance'
      consume(165);                 // 'instance'
      break;
    case 167:                       // 'intersect'
      consume(167);                 // 'intersect'
      break;
    case 168:                       // 'into'
      consume(168);                 // 'into'
      break;
    case 169:                       // 'is'
      consume(169);                 // 'is'
      break;
    case 175:                       // 'last'
      consume(175);                 // 'last'
      break;
    case 177:                       // 'le'
      consume(177);                 // 'le'
      break;
    case 179:                       // 'let'
      consume(179);                 // 'let'
      break;
    case 183:                       // 'lt'
      consume(183);                 // 'lt'
      break;
    case 184:                       // 'map'
      consume(184);                 // 'map'
      break;
    case 186:                       // 'mod'
      consume(186);                 // 'mod'
      break;
    case 187:                       // 'modify'
      consume(187);                 // 'modify'
      break;
    case 188:                       // 'module'
      consume(188);                 // 'module'
      break;
    case 190:                       // 'namespace'
      consume(190);                 // 'namespace'
      break;
    case 192:                       // 'ne'
      consume(192);                 // 'ne'
      break;
    case 204:                       // 'only'
      consume(204);                 // 'only'
      break;
    case 206:                       // 'or'
      consume(206);                 // 'or'
      break;
    case 207:                       // 'order'
      consume(207);                 // 'order'
      break;
    case 208:                       // 'ordered'
      consume(208);                 // 'ordered'
      break;
    case 212:                       // 'parent'
      consume(212);                 // 'parent'
      break;
    case 218:                       // 'preceding'
      consume(218);                 // 'preceding'
      break;
    case 219:                       // 'preceding-sibling'
      consume(219);                 // 'preceding-sibling'
      break;
    case 224:                       // 'rename'
      consume(224);                 // 'rename'
      break;
    case 225:                       // 'replace'
      consume(225);                 // 'replace'
      break;
    case 226:                       // 'return'
      consume(226);                 // 'return'
      break;
    case 230:                       // 'satisfies'
      consume(230);                 // 'satisfies'
      break;
    case 235:                       // 'self'
      consume(235);                 // 'self'
      break;
    case 241:                       // 'some'
      consume(241);                 // 'some'
      break;
    case 242:                       // 'stable'
      consume(242);                 // 'stable'
      break;
    case 243:                       // 'start'
      consume(243);                 // 'start'
      break;
    case 254:                       // 'to'
      consume(254);                 // 'to'
      break;
    case 255:                       // 'treat'
      consume(255);                 // 'treat'
      break;
    case 256:                       // 'try'
      consume(256);                 // 'try'
      break;
    case 260:                       // 'union'
      consume(260);                 // 'union'
      break;
    case 262:                       // 'unordered'
      consume(262);                 // 'unordered'
      break;
    case 266:                       // 'validate'
      consume(266);                 // 'validate'
      break;
    case 272:                       // 'where'
      consume(272);                 // 'where'
      break;
    case 276:                       // 'with'
      consume(276);                 // 'with'
      break;
    case 280:                       // 'xquery'
      consume(280);                 // 'xquery'
      break;
    case 77:                        // 'allowing'
      consume(77);                  // 'allowing'
      break;
    case 86:                        // 'at'
      consume(86);                  // 'at'
      break;
    case 88:                        // 'base-uri'
      consume(88);                  // 'base-uri'
      break;
    case 90:                        // 'boundary-space'
      consume(90);                  // 'boundary-space'
      break;
    case 91:                        // 'break'
      consume(91);                  // 'break'
      break;
    case 96:                        // 'catch'
      consume(96);                  // 'catch'
      break;
    case 103:                       // 'construction'
      consume(103);                 // 'construction'
      break;
    case 106:                       // 'context'
      consume(106);                 // 'context'
      break;
    case 107:                       // 'continue'
      consume(107);                 // 'continue'
      break;
    case 109:                       // 'copy-namespaces'
      consume(109);                 // 'copy-namespaces'
      break;
    case 111:                       // 'decimal-format'
      consume(111);                 // 'decimal-format'
      break;
    case 130:                       // 'encoding'
      consume(130);                 // 'encoding'
      break;
    case 137:                       // 'exit'
      consume(137);                 // 'exit'
      break;
    case 138:                       // 'external'
      consume(138);                 // 'external'
      break;
    case 146:                       // 'ft-option'
      consume(146);                 // 'ft-option'
      break;
    case 159:                       // 'in'
      consume(159);                 // 'in'
      break;
    case 160:                       // 'index'
      consume(160);                 // 'index'
      break;
    case 166:                       // 'integrity'
      consume(166);                 // 'integrity'
      break;
    case 176:                       // 'lax'
      consume(176);                 // 'lax'
      break;
    case 198:                       // 'nodes'
      consume(198);                 // 'nodes'
      break;
    case 205:                       // 'option'
      consume(205);                 // 'option'
      break;
    case 209:                       // 'ordering'
      consume(209);                 // 'ordering'
      break;
    case 228:                       // 'revalidation'
      consume(228);                 // 'revalidation'
      break;
    case 231:                       // 'schema'
      consume(231);                 // 'schema'
      break;
    case 234:                       // 'score'
      consume(234);                 // 'score'
      break;
    case 240:                       // 'sliding'
      consume(240);                 // 'sliding'
      break;
    case 246:                       // 'strict'
      consume(246);                 // 'strict'
      break;
    case 257:                       // 'tumbling'
      consume(257);                 // 'tumbling'
      break;
    case 258:                       // 'type'
      consume(258);                 // 'type'
      break;
    case 263:                       // 'updating'
      consume(263);                 // 'updating'
      break;
    case 267:                       // 'value'
      consume(267);                 // 'value'
      break;
    case 268:                       // 'variable'
      consume(268);                 // 'variable'
      break;
    case 269:                       // 'version'
      consume(269);                 // 'version'
      break;
    case 273:                       // 'while'
      consume(273);                 // 'while'
      break;
    case 102:                       // 'constraint'
      consume(102);                 // 'constraint'
      break;
    case 181:                       // 'loop'
      consume(181);                 // 'loop'
      break;
    case 227:                       // 'returning'
      consume(227);                 // 'returning'
      break;
    case 82:                        // 'append'
      consume(82);                  // 'append'
      break;
    case 171:                       // 'json'
      consume(171);                 // 'json'
      break;
    default:
      consume(200);                 // 'object'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 6:                         // EQName^Token
      consumeT(6);                  // EQName^Token
      break;
    case 75:                        // 'after'
      consumeT(75);                 // 'after'
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consumeT(79);                 // 'ancestor-or-self'
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 84:                        // 'as'
      consumeT(84);                 // 'as'
      break;
    case 85:                        // 'ascending'
      consumeT(85);                 // 'ascending'
      break;
    case 89:                        // 'before'
      consumeT(89);                 // 'before'
      break;
    case 93:                        // 'case'
      consumeT(93);                 // 'case'
      break;
    case 94:                        // 'cast'
      consumeT(94);                 // 'cast'
      break;
    case 95:                        // 'castable'
      consumeT(95);                 // 'castable'
      break;
    case 98:                        // 'child'
      consumeT(98);                 // 'child'
      break;
    case 99:                        // 'collation'
      consumeT(99);                 // 'collation'
      break;
    case 108:                       // 'copy'
      consumeT(108);                // 'copy'
      break;
    case 110:                       // 'count'
      consumeT(110);                // 'count'
      break;
    case 113:                       // 'declare'
      consumeT(113);                // 'declare'
      break;
    case 114:                       // 'default'
      consumeT(114);                // 'default'
      break;
    case 115:                       // 'delete'
      consumeT(115);                // 'delete'
      break;
    case 116:                       // 'descendant'
      consumeT(116);                // 'descendant'
      break;
    case 117:                       // 'descendant-or-self'
      consumeT(117);                // 'descendant-or-self'
      break;
    case 118:                       // 'descending'
      consumeT(118);                // 'descending'
      break;
    case 123:                       // 'div'
      consumeT(123);                // 'div'
      break;
    case 124:                       // 'document'
      consumeT(124);                // 'document'
      break;
    case 127:                       // 'else'
      consumeT(127);                // 'else'
      break;
    case 128:                       // 'empty'
      consumeT(128);                // 'empty'
      break;
    case 131:                       // 'end'
      consumeT(131);                // 'end'
      break;
    case 133:                       // 'eq'
      consumeT(133);                // 'eq'
      break;
    case 134:                       // 'every'
      consumeT(134);                // 'every'
      break;
    case 136:                       // 'except'
      consumeT(136);                // 'except'
      break;
    case 139:                       // 'first'
      consumeT(139);                // 'first'
      break;
    case 140:                       // 'following'
      consumeT(140);                // 'following'
      break;
    case 141:                       // 'following-sibling'
      consumeT(141);                // 'following-sibling'
      break;
    case 142:                       // 'for'
      consumeT(142);                // 'for'
      break;
    case 151:                       // 'ge'
      consumeT(151);                // 'ge'
      break;
    case 153:                       // 'group'
      consumeT(153);                // 'group'
      break;
    case 155:                       // 'gt'
      consumeT(155);                // 'gt'
      break;
    case 156:                       // 'idiv'
      consumeT(156);                // 'idiv'
      break;
    case 158:                       // 'import'
      consumeT(158);                // 'import'
      break;
    case 164:                       // 'insert'
      consumeT(164);                // 'insert'
      break;
    case 165:                       // 'instance'
      consumeT(165);                // 'instance'
      break;
    case 167:                       // 'intersect'
      consumeT(167);                // 'intersect'
      break;
    case 168:                       // 'into'
      consumeT(168);                // 'into'
      break;
    case 169:                       // 'is'
      consumeT(169);                // 'is'
      break;
    case 175:                       // 'last'
      consumeT(175);                // 'last'
      break;
    case 177:                       // 'le'
      consumeT(177);                // 'le'
      break;
    case 179:                       // 'let'
      consumeT(179);                // 'let'
      break;
    case 183:                       // 'lt'
      consumeT(183);                // 'lt'
      break;
    case 184:                       // 'map'
      consumeT(184);                // 'map'
      break;
    case 186:                       // 'mod'
      consumeT(186);                // 'mod'
      break;
    case 187:                       // 'modify'
      consumeT(187);                // 'modify'
      break;
    case 188:                       // 'module'
      consumeT(188);                // 'module'
      break;
    case 190:                       // 'namespace'
      consumeT(190);                // 'namespace'
      break;
    case 192:                       // 'ne'
      consumeT(192);                // 'ne'
      break;
    case 204:                       // 'only'
      consumeT(204);                // 'only'
      break;
    case 206:                       // 'or'
      consumeT(206);                // 'or'
      break;
    case 207:                       // 'order'
      consumeT(207);                // 'order'
      break;
    case 208:                       // 'ordered'
      consumeT(208);                // 'ordered'
      break;
    case 212:                       // 'parent'
      consumeT(212);                // 'parent'
      break;
    case 218:                       // 'preceding'
      consumeT(218);                // 'preceding'
      break;
    case 219:                       // 'preceding-sibling'
      consumeT(219);                // 'preceding-sibling'
      break;
    case 224:                       // 'rename'
      consumeT(224);                // 'rename'
      break;
    case 225:                       // 'replace'
      consumeT(225);                // 'replace'
      break;
    case 226:                       // 'return'
      consumeT(226);                // 'return'
      break;
    case 230:                       // 'satisfies'
      consumeT(230);                // 'satisfies'
      break;
    case 235:                       // 'self'
      consumeT(235);                // 'self'
      break;
    case 241:                       // 'some'
      consumeT(241);                // 'some'
      break;
    case 242:                       // 'stable'
      consumeT(242);                // 'stable'
      break;
    case 243:                       // 'start'
      consumeT(243);                // 'start'
      break;
    case 254:                       // 'to'
      consumeT(254);                // 'to'
      break;
    case 255:                       // 'treat'
      consumeT(255);                // 'treat'
      break;
    case 256:                       // 'try'
      consumeT(256);                // 'try'
      break;
    case 260:                       // 'union'
      consumeT(260);                // 'union'
      break;
    case 262:                       // 'unordered'
      consumeT(262);                // 'unordered'
      break;
    case 266:                       // 'validate'
      consumeT(266);                // 'validate'
      break;
    case 272:                       // 'where'
      consumeT(272);                // 'where'
      break;
    case 276:                       // 'with'
      consumeT(276);                // 'with'
      break;
    case 280:                       // 'xquery'
      consumeT(280);                // 'xquery'
      break;
    case 77:                        // 'allowing'
      consumeT(77);                 // 'allowing'
      break;
    case 86:                        // 'at'
      consumeT(86);                 // 'at'
      break;
    case 88:                        // 'base-uri'
      consumeT(88);                 // 'base-uri'
      break;
    case 90:                        // 'boundary-space'
      consumeT(90);                 // 'boundary-space'
      break;
    case 91:                        // 'break'
      consumeT(91);                 // 'break'
      break;
    case 96:                        // 'catch'
      consumeT(96);                 // 'catch'
      break;
    case 103:                       // 'construction'
      consumeT(103);                // 'construction'
      break;
    case 106:                       // 'context'
      consumeT(106);                // 'context'
      break;
    case 107:                       // 'continue'
      consumeT(107);                // 'continue'
      break;
    case 109:                       // 'copy-namespaces'
      consumeT(109);                // 'copy-namespaces'
      break;
    case 111:                       // 'decimal-format'
      consumeT(111);                // 'decimal-format'
      break;
    case 130:                       // 'encoding'
      consumeT(130);                // 'encoding'
      break;
    case 137:                       // 'exit'
      consumeT(137);                // 'exit'
      break;
    case 138:                       // 'external'
      consumeT(138);                // 'external'
      break;
    case 146:                       // 'ft-option'
      consumeT(146);                // 'ft-option'
      break;
    case 159:                       // 'in'
      consumeT(159);                // 'in'
      break;
    case 160:                       // 'index'
      consumeT(160);                // 'index'
      break;
    case 166:                       // 'integrity'
      consumeT(166);                // 'integrity'
      break;
    case 176:                       // 'lax'
      consumeT(176);                // 'lax'
      break;
    case 198:                       // 'nodes'
      consumeT(198);                // 'nodes'
      break;
    case 205:                       // 'option'
      consumeT(205);                // 'option'
      break;
    case 209:                       // 'ordering'
      consumeT(209);                // 'ordering'
      break;
    case 228:                       // 'revalidation'
      consumeT(228);                // 'revalidation'
      break;
    case 231:                       // 'schema'
      consumeT(231);                // 'schema'
      break;
    case 234:                       // 'score'
      consumeT(234);                // 'score'
      break;
    case 240:                       // 'sliding'
      consumeT(240);                // 'sliding'
      break;
    case 246:                       // 'strict'
      consumeT(246);                // 'strict'
      break;
    case 257:                       // 'tumbling'
      consumeT(257);                // 'tumbling'
      break;
    case 258:                       // 'type'
      consumeT(258);                // 'type'
      break;
    case 263:                       // 'updating'
      consumeT(263);                // 'updating'
      break;
    case 267:                       // 'value'
      consumeT(267);                // 'value'
      break;
    case 268:                       // 'variable'
      consumeT(268);                // 'variable'
      break;
    case 269:                       // 'version'
      consumeT(269);                // 'version'
      break;
    case 273:                       // 'while'
      consumeT(273);                // 'while'
      break;
    case 102:                       // 'constraint'
      consumeT(102);                // 'constraint'
      break;
    case 181:                       // 'loop'
      consumeT(181);                // 'loop'
      break;
    case 227:                       // 'returning'
      consumeT(227);                // 'returning'
      break;
    case 82:                        // 'append'
      consumeT(82);                 // 'append'
      break;
    case 171:                       // 'json'
      consumeT(171);                // 'json'
      break;
    default:
      consumeT(200);                // 'object'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 19:                        // NCName^Token
      consume(19);                  // NCName^Token
      break;
    case 75:                        // 'after'
      consume(75);                  // 'after'
      break;
    case 80:                        // 'and'
      consume(80);                  // 'and'
      break;
    case 84:                        // 'as'
      consume(84);                  // 'as'
      break;
    case 85:                        // 'ascending'
      consume(85);                  // 'ascending'
      break;
    case 89:                        // 'before'
      consume(89);                  // 'before'
      break;
    case 93:                        // 'case'
      consume(93);                  // 'case'
      break;
    case 94:                        // 'cast'
      consume(94);                  // 'cast'
      break;
    case 95:                        // 'castable'
      consume(95);                  // 'castable'
      break;
    case 99:                        // 'collation'
      consume(99);                  // 'collation'
      break;
    case 110:                       // 'count'
      consume(110);                 // 'count'
      break;
    case 114:                       // 'default'
      consume(114);                 // 'default'
      break;
    case 118:                       // 'descending'
      consume(118);                 // 'descending'
      break;
    case 123:                       // 'div'
      consume(123);                 // 'div'
      break;
    case 127:                       // 'else'
      consume(127);                 // 'else'
      break;
    case 128:                       // 'empty'
      consume(128);                 // 'empty'
      break;
    case 131:                       // 'end'
      consume(131);                 // 'end'
      break;
    case 133:                       // 'eq'
      consume(133);                 // 'eq'
      break;
    case 136:                       // 'except'
      consume(136);                 // 'except'
      break;
    case 142:                       // 'for'
      consume(142);                 // 'for'
      break;
    case 151:                       // 'ge'
      consume(151);                 // 'ge'
      break;
    case 153:                       // 'group'
      consume(153);                 // 'group'
      break;
    case 155:                       // 'gt'
      consume(155);                 // 'gt'
      break;
    case 156:                       // 'idiv'
      consume(156);                 // 'idiv'
      break;
    case 165:                       // 'instance'
      consume(165);                 // 'instance'
      break;
    case 167:                       // 'intersect'
      consume(167);                 // 'intersect'
      break;
    case 168:                       // 'into'
      consume(168);                 // 'into'
      break;
    case 169:                       // 'is'
      consume(169);                 // 'is'
      break;
    case 177:                       // 'le'
      consume(177);                 // 'le'
      break;
    case 179:                       // 'let'
      consume(179);                 // 'let'
      break;
    case 183:                       // 'lt'
      consume(183);                 // 'lt'
      break;
    case 184:                       // 'map'
      consume(184);                 // 'map'
      break;
    case 186:                       // 'mod'
      consume(186);                 // 'mod'
      break;
    case 187:                       // 'modify'
      consume(187);                 // 'modify'
      break;
    case 192:                       // 'ne'
      consume(192);                 // 'ne'
      break;
    case 204:                       // 'only'
      consume(204);                 // 'only'
      break;
    case 206:                       // 'or'
      consume(206);                 // 'or'
      break;
    case 207:                       // 'order'
      consume(207);                 // 'order'
      break;
    case 226:                       // 'return'
      consume(226);                 // 'return'
      break;
    case 230:                       // 'satisfies'
      consume(230);                 // 'satisfies'
      break;
    case 242:                       // 'stable'
      consume(242);                 // 'stable'
      break;
    case 243:                       // 'start'
      consume(243);                 // 'start'
      break;
    case 254:                       // 'to'
      consume(254);                 // 'to'
      break;
    case 255:                       // 'treat'
      consume(255);                 // 'treat'
      break;
    case 260:                       // 'union'
      consume(260);                 // 'union'
      break;
    case 272:                       // 'where'
      consume(272);                 // 'where'
      break;
    case 276:                       // 'with'
      consume(276);                 // 'with'
      break;
    case 78:                        // 'ancestor'
      consume(78);                  // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consume(79);                  // 'ancestor-or-self'
      break;
    case 87:                        // 'attribute'
      consume(87);                  // 'attribute'
      break;
    case 98:                        // 'child'
      consume(98);                  // 'child'
      break;
    case 101:                       // 'comment'
      consume(101);                 // 'comment'
      break;
    case 108:                       // 'copy'
      consume(108);                 // 'copy'
      break;
    case 113:                       // 'declare'
      consume(113);                 // 'declare'
      break;
    case 115:                       // 'delete'
      consume(115);                 // 'delete'
      break;
    case 116:                       // 'descendant'
      consume(116);                 // 'descendant'
      break;
    case 117:                       // 'descendant-or-self'
      consume(117);                 // 'descendant-or-self'
      break;
    case 124:                       // 'document'
      consume(124);                 // 'document'
      break;
    case 125:                       // 'document-node'
      consume(125);                 // 'document-node'
      break;
    case 126:                       // 'element'
      consume(126);                 // 'element'
      break;
    case 129:                       // 'empty-sequence'
      consume(129);                 // 'empty-sequence'
      break;
    case 134:                       // 'every'
      consume(134);                 // 'every'
      break;
    case 139:                       // 'first'
      consume(139);                 // 'first'
      break;
    case 140:                       // 'following'
      consume(140);                 // 'following'
      break;
    case 141:                       // 'following-sibling'
      consume(141);                 // 'following-sibling'
      break;
    case 150:                       // 'function'
      consume(150);                 // 'function'
      break;
    case 157:                       // 'if'
      consume(157);                 // 'if'
      break;
    case 158:                       // 'import'
      consume(158);                 // 'import'
      break;
    case 164:                       // 'insert'
      consume(164);                 // 'insert'
      break;
    case 170:                       // 'item'
      consume(170);                 // 'item'
      break;
    case 175:                       // 'last'
      consume(175);                 // 'last'
      break;
    case 188:                       // 'module'
      consume(188);                 // 'module'
      break;
    case 190:                       // 'namespace'
      consume(190);                 // 'namespace'
      break;
    case 191:                       // 'namespace-node'
      consume(191);                 // 'namespace-node'
      break;
    case 197:                       // 'node'
      consume(197);                 // 'node'
      break;
    case 208:                       // 'ordered'
      consume(208);                 // 'ordered'
      break;
    case 212:                       // 'parent'
      consume(212);                 // 'parent'
      break;
    case 218:                       // 'preceding'
      consume(218);                 // 'preceding'
      break;
    case 219:                       // 'preceding-sibling'
      consume(219);                 // 'preceding-sibling'
      break;
    case 222:                       // 'processing-instruction'
      consume(222);                 // 'processing-instruction'
      break;
    case 224:                       // 'rename'
      consume(224);                 // 'rename'
      break;
    case 225:                       // 'replace'
      consume(225);                 // 'replace'
      break;
    case 232:                       // 'schema-attribute'
      consume(232);                 // 'schema-attribute'
      break;
    case 233:                       // 'schema-element'
      consume(233);                 // 'schema-element'
      break;
    case 235:                       // 'self'
      consume(235);                 // 'self'
      break;
    case 241:                       // 'some'
      consume(241);                 // 'some'
      break;
    case 249:                       // 'switch'
      consume(249);                 // 'switch'
      break;
    case 250:                       // 'text'
      consume(250);                 // 'text'
      break;
    case 256:                       // 'try'
      consume(256);                 // 'try'
      break;
    case 259:                       // 'typeswitch'
      consume(259);                 // 'typeswitch'
      break;
    case 262:                       // 'unordered'
      consume(262);                 // 'unordered'
      break;
    case 266:                       // 'validate'
      consume(266);                 // 'validate'
      break;
    case 268:                       // 'variable'
      consume(268);                 // 'variable'
      break;
    case 280:                       // 'xquery'
      consume(280);                 // 'xquery'
      break;
    case 77:                        // 'allowing'
      consume(77);                  // 'allowing'
      break;
    case 86:                        // 'at'
      consume(86);                  // 'at'
      break;
    case 88:                        // 'base-uri'
      consume(88);                  // 'base-uri'
      break;
    case 90:                        // 'boundary-space'
      consume(90);                  // 'boundary-space'
      break;
    case 91:                        // 'break'
      consume(91);                  // 'break'
      break;
    case 96:                        // 'catch'
      consume(96);                  // 'catch'
      break;
    case 103:                       // 'construction'
      consume(103);                 // 'construction'
      break;
    case 106:                       // 'context'
      consume(106);                 // 'context'
      break;
    case 107:                       // 'continue'
      consume(107);                 // 'continue'
      break;
    case 109:                       // 'copy-namespaces'
      consume(109);                 // 'copy-namespaces'
      break;
    case 111:                       // 'decimal-format'
      consume(111);                 // 'decimal-format'
      break;
    case 130:                       // 'encoding'
      consume(130);                 // 'encoding'
      break;
    case 137:                       // 'exit'
      consume(137);                 // 'exit'
      break;
    case 138:                       // 'external'
      consume(138);                 // 'external'
      break;
    case 146:                       // 'ft-option'
      consume(146);                 // 'ft-option'
      break;
    case 159:                       // 'in'
      consume(159);                 // 'in'
      break;
    case 160:                       // 'index'
      consume(160);                 // 'index'
      break;
    case 166:                       // 'integrity'
      consume(166);                 // 'integrity'
      break;
    case 176:                       // 'lax'
      consume(176);                 // 'lax'
      break;
    case 198:                       // 'nodes'
      consume(198);                 // 'nodes'
      break;
    case 205:                       // 'option'
      consume(205);                 // 'option'
      break;
    case 209:                       // 'ordering'
      consume(209);                 // 'ordering'
      break;
    case 228:                       // 'revalidation'
      consume(228);                 // 'revalidation'
      break;
    case 231:                       // 'schema'
      consume(231);                 // 'schema'
      break;
    case 234:                       // 'score'
      consume(234);                 // 'score'
      break;
    case 240:                       // 'sliding'
      consume(240);                 // 'sliding'
      break;
    case 246:                       // 'strict'
      consume(246);                 // 'strict'
      break;
    case 257:                       // 'tumbling'
      consume(257);                 // 'tumbling'
      break;
    case 258:                       // 'type'
      consume(258);                 // 'type'
      break;
    case 263:                       // 'updating'
      consume(263);                 // 'updating'
      break;
    case 267:                       // 'value'
      consume(267);                 // 'value'
      break;
    case 269:                       // 'version'
      consume(269);                 // 'version'
      break;
    case 273:                       // 'while'
      consume(273);                 // 'while'
      break;
    case 102:                       // 'constraint'
      consume(102);                 // 'constraint'
      break;
    case 181:                       // 'loop'
      consume(181);                 // 'loop'
      break;
    case 227:                       // 'returning'
      consume(227);                 // 'returning'
      break;
    case 82:                        // 'append'
      consume(82);                  // 'append'
      break;
    case 171:                       // 'json'
      consume(171);                 // 'json'
      break;
    default:
      consume(200);                 // 'object'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 19:                        // NCName^Token
      consumeT(19);                 // NCName^Token
      break;
    case 75:                        // 'after'
      consumeT(75);                 // 'after'
      break;
    case 80:                        // 'and'
      consumeT(80);                 // 'and'
      break;
    case 84:                        // 'as'
      consumeT(84);                 // 'as'
      break;
    case 85:                        // 'ascending'
      consumeT(85);                 // 'ascending'
      break;
    case 89:                        // 'before'
      consumeT(89);                 // 'before'
      break;
    case 93:                        // 'case'
      consumeT(93);                 // 'case'
      break;
    case 94:                        // 'cast'
      consumeT(94);                 // 'cast'
      break;
    case 95:                        // 'castable'
      consumeT(95);                 // 'castable'
      break;
    case 99:                        // 'collation'
      consumeT(99);                 // 'collation'
      break;
    case 110:                       // 'count'
      consumeT(110);                // 'count'
      break;
    case 114:                       // 'default'
      consumeT(114);                // 'default'
      break;
    case 118:                       // 'descending'
      consumeT(118);                // 'descending'
      break;
    case 123:                       // 'div'
      consumeT(123);                // 'div'
      break;
    case 127:                       // 'else'
      consumeT(127);                // 'else'
      break;
    case 128:                       // 'empty'
      consumeT(128);                // 'empty'
      break;
    case 131:                       // 'end'
      consumeT(131);                // 'end'
      break;
    case 133:                       // 'eq'
      consumeT(133);                // 'eq'
      break;
    case 136:                       // 'except'
      consumeT(136);                // 'except'
      break;
    case 142:                       // 'for'
      consumeT(142);                // 'for'
      break;
    case 151:                       // 'ge'
      consumeT(151);                // 'ge'
      break;
    case 153:                       // 'group'
      consumeT(153);                // 'group'
      break;
    case 155:                       // 'gt'
      consumeT(155);                // 'gt'
      break;
    case 156:                       // 'idiv'
      consumeT(156);                // 'idiv'
      break;
    case 165:                       // 'instance'
      consumeT(165);                // 'instance'
      break;
    case 167:                       // 'intersect'
      consumeT(167);                // 'intersect'
      break;
    case 168:                       // 'into'
      consumeT(168);                // 'into'
      break;
    case 169:                       // 'is'
      consumeT(169);                // 'is'
      break;
    case 177:                       // 'le'
      consumeT(177);                // 'le'
      break;
    case 179:                       // 'let'
      consumeT(179);                // 'let'
      break;
    case 183:                       // 'lt'
      consumeT(183);                // 'lt'
      break;
    case 184:                       // 'map'
      consumeT(184);                // 'map'
      break;
    case 186:                       // 'mod'
      consumeT(186);                // 'mod'
      break;
    case 187:                       // 'modify'
      consumeT(187);                // 'modify'
      break;
    case 192:                       // 'ne'
      consumeT(192);                // 'ne'
      break;
    case 204:                       // 'only'
      consumeT(204);                // 'only'
      break;
    case 206:                       // 'or'
      consumeT(206);                // 'or'
      break;
    case 207:                       // 'order'
      consumeT(207);                // 'order'
      break;
    case 226:                       // 'return'
      consumeT(226);                // 'return'
      break;
    case 230:                       // 'satisfies'
      consumeT(230);                // 'satisfies'
      break;
    case 242:                       // 'stable'
      consumeT(242);                // 'stable'
      break;
    case 243:                       // 'start'
      consumeT(243);                // 'start'
      break;
    case 254:                       // 'to'
      consumeT(254);                // 'to'
      break;
    case 255:                       // 'treat'
      consumeT(255);                // 'treat'
      break;
    case 260:                       // 'union'
      consumeT(260);                // 'union'
      break;
    case 272:                       // 'where'
      consumeT(272);                // 'where'
      break;
    case 276:                       // 'with'
      consumeT(276);                // 'with'
      break;
    case 78:                        // 'ancestor'
      consumeT(78);                 // 'ancestor'
      break;
    case 79:                        // 'ancestor-or-self'
      consumeT(79);                 // 'ancestor-or-self'
      break;
    case 87:                        // 'attribute'
      consumeT(87);                 // 'attribute'
      break;
    case 98:                        // 'child'
      consumeT(98);                 // 'child'
      break;
    case 101:                       // 'comment'
      consumeT(101);                // 'comment'
      break;
    case 108:                       // 'copy'
      consumeT(108);                // 'copy'
      break;
    case 113:                       // 'declare'
      consumeT(113);                // 'declare'
      break;
    case 115:                       // 'delete'
      consumeT(115);                // 'delete'
      break;
    case 116:                       // 'descendant'
      consumeT(116);                // 'descendant'
      break;
    case 117:                       // 'descendant-or-self'
      consumeT(117);                // 'descendant-or-self'
      break;
    case 124:                       // 'document'
      consumeT(124);                // 'document'
      break;
    case 125:                       // 'document-node'
      consumeT(125);                // 'document-node'
      break;
    case 126:                       // 'element'
      consumeT(126);                // 'element'
      break;
    case 129:                       // 'empty-sequence'
      consumeT(129);                // 'empty-sequence'
      break;
    case 134:                       // 'every'
      consumeT(134);                // 'every'
      break;
    case 139:                       // 'first'
      consumeT(139);                // 'first'
      break;
    case 140:                       // 'following'
      consumeT(140);                // 'following'
      break;
    case 141:                       // 'following-sibling'
      consumeT(141);                // 'following-sibling'
      break;
    case 150:                       // 'function'
      consumeT(150);                // 'function'
      break;
    case 157:                       // 'if'
      consumeT(157);                // 'if'
      break;
    case 158:                       // 'import'
      consumeT(158);                // 'import'
      break;
    case 164:                       // 'insert'
      consumeT(164);                // 'insert'
      break;
    case 170:                       // 'item'
      consumeT(170);                // 'item'
      break;
    case 175:                       // 'last'
      consumeT(175);                // 'last'
      break;
    case 188:                       // 'module'
      consumeT(188);                // 'module'
      break;
    case 190:                       // 'namespace'
      consumeT(190);                // 'namespace'
      break;
    case 191:                       // 'namespace-node'
      consumeT(191);                // 'namespace-node'
      break;
    case 197:                       // 'node'
      consumeT(197);                // 'node'
      break;
    case 208:                       // 'ordered'
      consumeT(208);                // 'ordered'
      break;
    case 212:                       // 'parent'
      consumeT(212);                // 'parent'
      break;
    case 218:                       // 'preceding'
      consumeT(218);                // 'preceding'
      break;
    case 219:                       // 'preceding-sibling'
      consumeT(219);                // 'preceding-sibling'
      break;
    case 222:                       // 'processing-instruction'
      consumeT(222);                // 'processing-instruction'
      break;
    case 224:                       // 'rename'
      consumeT(224);                // 'rename'
      break;
    case 225:                       // 'replace'
      consumeT(225);                // 'replace'
      break;
    case 232:                       // 'schema-attribute'
      consumeT(232);                // 'schema-attribute'
      break;
    case 233:                       // 'schema-element'
      consumeT(233);                // 'schema-element'
      break;
    case 235:                       // 'self'
      consumeT(235);                // 'self'
      break;
    case 241:                       // 'some'
      consumeT(241);                // 'some'
      break;
    case 249:                       // 'switch'
      consumeT(249);                // 'switch'
      break;
    case 250:                       // 'text'
      consumeT(250);                // 'text'
      break;
    case 256:                       // 'try'
      consumeT(256);                // 'try'
      break;
    case 259:                       // 'typeswitch'
      consumeT(259);                // 'typeswitch'
      break;
    case 262:                       // 'unordered'
      consumeT(262);                // 'unordered'
      break;
    case 266:                       // 'validate'
      consumeT(266);                // 'validate'
      break;
    case 268:                       // 'variable'
      consumeT(268);                // 'variable'
      break;
    case 280:                       // 'xquery'
      consumeT(280);                // 'xquery'
      break;
    case 77:                        // 'allowing'
      consumeT(77);                 // 'allowing'
      break;
    case 86:                        // 'at'
      consumeT(86);                 // 'at'
      break;
    case 88:                        // 'base-uri'
      consumeT(88);                 // 'base-uri'
      break;
    case 90:                        // 'boundary-space'
      consumeT(90);                 // 'boundary-space'
      break;
    case 91:                        // 'break'
      consumeT(91);                 // 'break'
      break;
    case 96:                        // 'catch'
      consumeT(96);                 // 'catch'
      break;
    case 103:                       // 'construction'
      consumeT(103);                // 'construction'
      break;
    case 106:                       // 'context'
      consumeT(106);                // 'context'
      break;
    case 107:                       // 'continue'
      consumeT(107);                // 'continue'
      break;
    case 109:                       // 'copy-namespaces'
      consumeT(109);                // 'copy-namespaces'
      break;
    case 111:                       // 'decimal-format'
      consumeT(111);                // 'decimal-format'
      break;
    case 130:                       // 'encoding'
      consumeT(130);                // 'encoding'
      break;
    case 137:                       // 'exit'
      consumeT(137);                // 'exit'
      break;
    case 138:                       // 'external'
      consumeT(138);                // 'external'
      break;
    case 146:                       // 'ft-option'
      consumeT(146);                // 'ft-option'
      break;
    case 159:                       // 'in'
      consumeT(159);                // 'in'
      break;
    case 160:                       // 'index'
      consumeT(160);                // 'index'
      break;
    case 166:                       // 'integrity'
      consumeT(166);                // 'integrity'
      break;
    case 176:                       // 'lax'
      consumeT(176);                // 'lax'
      break;
    case 198:                       // 'nodes'
      consumeT(198);                // 'nodes'
      break;
    case 205:                       // 'option'
      consumeT(205);                // 'option'
      break;
    case 209:                       // 'ordering'
      consumeT(209);                // 'ordering'
      break;
    case 228:                       // 'revalidation'
      consumeT(228);                // 'revalidation'
      break;
    case 231:                       // 'schema'
      consumeT(231);                // 'schema'
      break;
    case 234:                       // 'score'
      consumeT(234);                // 'score'
      break;
    case 240:                       // 'sliding'
      consumeT(240);                // 'sliding'
      break;
    case 246:                       // 'strict'
      consumeT(246);                // 'strict'
      break;
    case 257:                       // 'tumbling'
      consumeT(257);                // 'tumbling'
      break;
    case 258:                       // 'type'
      consumeT(258);                // 'type'
      break;
    case 263:                       // 'updating'
      consumeT(263);                // 'updating'
      break;
    case 267:                       // 'value'
      consumeT(267);                // 'value'
      break;
    case 269:                       // 'version'
      consumeT(269);                // 'version'
      break;
    case 273:                       // 'while'
      consumeT(273);                // 'while'
      break;
    case 102:                       // 'constraint'
      consumeT(102);                // 'constraint'
      break;
    case 181:                       // 'loop'
      consumeT(181);                // 'loop'
      break;
    case 227:                       // 'returning'
      consumeT(227);                // 'returning'
      break;
    case 82:                        // 'append'
      consumeT(82);                 // 'append'
      break;
    case 171:                       // 'json'
      consumeT(171);                // 'json'
      break;
    default:
      consumeT(200);                // 'object'
    }
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_Program();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_Program()
  {
    eventHandler.startNonterminal("Program", e0);
    parse_StatementsAndOptionalExpr();
    eventHandler.endNonterminal("Program", e0);
  }

  function parse_Statements()
  {
    eventHandler.startNonterminal("Statements", e0);
    for (;;)
    {
      lookahead1W(288);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 35:                      // '('
        lookahead2W(277);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        break;
      case 36:                      // '(#'
        lookahead2(256);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        break;
      case 47:                      // '/'
        lookahead2W(293);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' |
                                    // '>' | '>=' | '>>' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|' | '||' | '}'
        break;
      case 48:                      // '//'
        lookahead2W(273);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 55:                      // '<'
        lookahead2(4);              // QName
        break;
      case 56:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 60:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 66:                      // '?'
        lookahead2W(260);           // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 68:                      // '@'
        lookahead2W(262);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        break;
      case 70:                      // '['
        lookahead2W(280);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        break;
      case 73:                      // '``['
        lookahead2(5);              // StringConstructorChars
        break;
      case 82:                      // 'append'
        lookahead2W(202);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 83:                      // 'array'
        lookahead2W(196);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 87:                      // 'attribute'
        lookahead2W(289);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 126:                     // 'element'
        lookahead2W(287);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 137:                     // 'exit'
        lookahead2W(205);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 142:                     // 'for'
        lookahead2W(210);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'sliding' | 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
        break;
      case 179:                     // 'let'
        lookahead2W(207);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'score' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 224:                     // 'rename'
        lookahead2W(208);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 225:                     // 'replace'
        lookahead2W(209);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'node' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
        break;
      case 266:                     // 'validate'
        lookahead2W(212);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 282:                     // '{'
        lookahead2W(285);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
        break;
      case 284:                     // '{|'
        lookahead2W(281);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '|}'
        break;
      case 5:                       // Wildcard
      case 46:                      // '..'
        lookahead2W(187);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 32:                      // '$'
      case 33:                      // '%'
        lookahead2W(259);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        break;
      case 41:                      // '+'
      case 43:                      // '-'
        lookahead2W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        break;
      case 91:                      // 'break'
      case 107:                     // 'continue'
        lookahead2W(203);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 115:                     // 'delete'
      case 164:                     // 'insert'
        lookahead2W(211);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'nodes' | 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 190:                     // 'namespace'
      case 222:                     // 'processing-instruction'
        lookahead2W(275);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 108:                     // 'copy'
      case 134:                     // 'every'
      case 241:                     // 'some'
      case 268:                     // 'variable'
        lookahead2W(199);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 129:                     // 'empty-sequence'
      case 170:                     // 'item'
      case 172:                     // 'json-item'
      case 248:                     // 'structured-item'
        lookahead2W(192);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 45:                      // '.'
        lookahead2W(197);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 101:                     // 'comment'
      case 124:                     // 'document'
      case 184:                     // 'map'
      case 208:                     // 'ordered'
      case 250:                     // 'text'
      case 256:                     // 'try'
      case 262:                     // 'unordered'
        lookahead2W(206);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 78:                      // 'ancestor'
      case 79:                      // 'ancestor-or-self'
      case 98:                      // 'child'
      case 116:                     // 'descendant'
      case 117:                     // 'descendant-or-self'
      case 140:                     // 'following'
      case 141:                     // 'following-sibling'
      case 212:                     // 'parent'
      case 218:                     // 'preceding'
      case 219:                     // 'preceding-sibling'
      case 235:                     // 'self'
        lookahead2W(200);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 75:                      // 'after'
      case 77:                      // 'allowing'
      case 80:                      // 'and'
      case 84:                      // 'as'
      case 85:                      // 'ascending'
      case 86:                      // 'at'
      case 88:                      // 'base-uri'
      case 89:                      // 'before'
      case 90:                      // 'boundary-space'
      case 93:                      // 'case'
      case 94:                      // 'cast'
      case 95:                      // 'castable'
      case 96:                      // 'catch'
      case 99:                      // 'collation'
      case 102:                     // 'constraint'
      case 103:                     // 'construction'
      case 106:                     // 'context'
      case 109:                     // 'copy-namespaces'
      case 110:                     // 'count'
      case 111:                     // 'decimal-format'
      case 113:                     // 'declare'
      case 114:                     // 'default'
      case 118:                     // 'descending'
      case 123:                     // 'div'
      case 125:                     // 'document-node'
      case 127:                     // 'else'
      case 128:                     // 'empty'
      case 130:                     // 'encoding'
      case 131:                     // 'end'
      case 133:                     // 'eq'
      case 136:                     // 'except'
      case 138:                     // 'external'
      case 139:                     // 'first'
      case 146:                     // 'ft-option'
      case 150:                     // 'function'
      case 151:                     // 'ge'
      case 153:                     // 'group'
      case 155:                     // 'gt'
      case 156:                     // 'idiv'
      case 157:                     // 'if'
      case 158:                     // 'import'
      case 159:                     // 'in'
      case 160:                     // 'index'
      case 165:                     // 'instance'
      case 166:                     // 'integrity'
      case 167:                     // 'intersect'
      case 168:                     // 'into'
      case 169:                     // 'is'
      case 171:                     // 'json'
      case 175:                     // 'last'
      case 176:                     // 'lax'
      case 177:                     // 'le'
      case 181:                     // 'loop'
      case 183:                     // 'lt'
      case 186:                     // 'mod'
      case 187:                     // 'modify'
      case 188:                     // 'module'
      case 191:                     // 'namespace-node'
      case 192:                     // 'ne'
      case 197:                     // 'node'
      case 198:                     // 'nodes'
      case 200:                     // 'object'
      case 204:                     // 'only'
      case 205:                     // 'option'
      case 206:                     // 'or'
      case 207:                     // 'order'
      case 209:                     // 'ordering'
      case 226:                     // 'return'
      case 227:                     // 'returning'
      case 228:                     // 'revalidation'
      case 230:                     // 'satisfies'
      case 231:                     // 'schema'
      case 232:                     // 'schema-attribute'
      case 233:                     // 'schema-element'
      case 234:                     // 'score'
      case 240:                     // 'sliding'
      case 242:                     // 'stable'
      case 243:                     // 'start'
      case 246:                     // 'strict'
      case 249:                     // 'switch'
      case 254:                     // 'to'
      case 255:                     // 'treat'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 259:                     // 'typeswitch'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 267:                     // 'value'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
      case 280:                     // 'xquery'
        lookahead2W(195);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 26                  // EOF
       && lk != 54                  // ';'
       && lk != 288                 // '}'
       && lk != 13317               // Wildcard EOF
       && lk != 13318               // EQName^Token EOF
       && lk != 13320               // IntegerLiteral EOF
       && lk != 13321               // DecimalLiteral EOF
       && lk != 13322               // DoubleLiteral EOF
       && lk != 13323               // StringLiteral EOF
       && lk != 13357               // '.' EOF
       && lk != 13358               // '..' EOF
       && lk != 13359               // '/' EOF
       && lk != 13387               // 'after' EOF
       && lk != 13389               // 'allowing' EOF
       && lk != 13390               // 'ancestor' EOF
       && lk != 13391               // 'ancestor-or-self' EOF
       && lk != 13392               // 'and' EOF
       && lk != 13394               // 'append' EOF
       && lk != 13395               // 'array' EOF
       && lk != 13396               // 'as' EOF
       && lk != 13397               // 'ascending' EOF
       && lk != 13398               // 'at' EOF
       && lk != 13399               // 'attribute' EOF
       && lk != 13400               // 'base-uri' EOF
       && lk != 13401               // 'before' EOF
       && lk != 13402               // 'boundary-space' EOF
       && lk != 13403               // 'break' EOF
       && lk != 13405               // 'case' EOF
       && lk != 13406               // 'cast' EOF
       && lk != 13407               // 'castable' EOF
       && lk != 13408               // 'catch' EOF
       && lk != 13410               // 'child' EOF
       && lk != 13411               // 'collation' EOF
       && lk != 13413               // 'comment' EOF
       && lk != 13414               // 'constraint' EOF
       && lk != 13415               // 'construction' EOF
       && lk != 13418               // 'context' EOF
       && lk != 13419               // 'continue' EOF
       && lk != 13420               // 'copy' EOF
       && lk != 13421               // 'copy-namespaces' EOF
       && lk != 13422               // 'count' EOF
       && lk != 13423               // 'decimal-format' EOF
       && lk != 13425               // 'declare' EOF
       && lk != 13426               // 'default' EOF
       && lk != 13427               // 'delete' EOF
       && lk != 13428               // 'descendant' EOF
       && lk != 13429               // 'descendant-or-self' EOF
       && lk != 13430               // 'descending' EOF
       && lk != 13435               // 'div' EOF
       && lk != 13436               // 'document' EOF
       && lk != 13437               // 'document-node' EOF
       && lk != 13438               // 'element' EOF
       && lk != 13439               // 'else' EOF
       && lk != 13440               // 'empty' EOF
       && lk != 13441               // 'empty-sequence' EOF
       && lk != 13442               // 'encoding' EOF
       && lk != 13443               // 'end' EOF
       && lk != 13445               // 'eq' EOF
       && lk != 13446               // 'every' EOF
       && lk != 13448               // 'except' EOF
       && lk != 13449               // 'exit' EOF
       && lk != 13450               // 'external' EOF
       && lk != 13451               // 'first' EOF
       && lk != 13452               // 'following' EOF
       && lk != 13453               // 'following-sibling' EOF
       && lk != 13454               // 'for' EOF
       && lk != 13458               // 'ft-option' EOF
       && lk != 13462               // 'function' EOF
       && lk != 13463               // 'ge' EOF
       && lk != 13465               // 'group' EOF
       && lk != 13467               // 'gt' EOF
       && lk != 13468               // 'idiv' EOF
       && lk != 13469               // 'if' EOF
       && lk != 13470               // 'import' EOF
       && lk != 13471               // 'in' EOF
       && lk != 13472               // 'index' EOF
       && lk != 13476               // 'insert' EOF
       && lk != 13477               // 'instance' EOF
       && lk != 13478               // 'integrity' EOF
       && lk != 13479               // 'intersect' EOF
       && lk != 13480               // 'into' EOF
       && lk != 13481               // 'is' EOF
       && lk != 13482               // 'item' EOF
       && lk != 13483               // 'json' EOF
       && lk != 13484               // 'json-item' EOF
       && lk != 13487               // 'last' EOF
       && lk != 13488               // 'lax' EOF
       && lk != 13489               // 'le' EOF
       && lk != 13491               // 'let' EOF
       && lk != 13493               // 'loop' EOF
       && lk != 13495               // 'lt' EOF
       && lk != 13496               // 'map' EOF
       && lk != 13498               // 'mod' EOF
       && lk != 13499               // 'modify' EOF
       && lk != 13500               // 'module' EOF
       && lk != 13502               // 'namespace' EOF
       && lk != 13503               // 'namespace-node' EOF
       && lk != 13504               // 'ne' EOF
       && lk != 13509               // 'node' EOF
       && lk != 13510               // 'nodes' EOF
       && lk != 13512               // 'object' EOF
       && lk != 13516               // 'only' EOF
       && lk != 13517               // 'option' EOF
       && lk != 13518               // 'or' EOF
       && lk != 13519               // 'order' EOF
       && lk != 13520               // 'ordered' EOF
       && lk != 13521               // 'ordering' EOF
       && lk != 13524               // 'parent' EOF
       && lk != 13530               // 'preceding' EOF
       && lk != 13531               // 'preceding-sibling' EOF
       && lk != 13534               // 'processing-instruction' EOF
       && lk != 13536               // 'rename' EOF
       && lk != 13537               // 'replace' EOF
       && lk != 13538               // 'return' EOF
       && lk != 13539               // 'returning' EOF
       && lk != 13540               // 'revalidation' EOF
       && lk != 13542               // 'satisfies' EOF
       && lk != 13543               // 'schema' EOF
       && lk != 13544               // 'schema-attribute' EOF
       && lk != 13545               // 'schema-element' EOF
       && lk != 13546               // 'score' EOF
       && lk != 13547               // 'self' EOF
       && lk != 13552               // 'sliding' EOF
       && lk != 13553               // 'some' EOF
       && lk != 13554               // 'stable' EOF
       && lk != 13555               // 'start' EOF
       && lk != 13558               // 'strict' EOF
       && lk != 13560               // 'structured-item' EOF
       && lk != 13561               // 'switch' EOF
       && lk != 13562               // 'text' EOF
       && lk != 13566               // 'to' EOF
       && lk != 13567               // 'treat' EOF
       && lk != 13568               // 'try' EOF
       && lk != 13569               // 'tumbling' EOF
       && lk != 13570               // 'type' EOF
       && lk != 13571               // 'typeswitch' EOF
       && lk != 13572               // 'union' EOF
       && lk != 13574               // 'unordered' EOF
       && lk != 13575               // 'updating' EOF
       && lk != 13578               // 'validate' EOF
       && lk != 13579               // 'value' EOF
       && lk != 13580               // 'variable' EOF
       && lk != 13581               // 'version' EOF
       && lk != 13584               // 'where' EOF
       && lk != 13585               // 'while' EOF
       && lk != 13588               // 'with' EOF
       && lk != 13592               // 'xquery' EOF
       && lk != 16652               // 'variable' '$'
       && lk != 21509               // Wildcard ','
       && lk != 21510               // EQName^Token ','
       && lk != 21512               // IntegerLiteral ','
       && lk != 21513               // DecimalLiteral ','
       && lk != 21514               // DoubleLiteral ','
       && lk != 21515               // StringLiteral ','
       && lk != 21549               // '.' ','
       && lk != 21550               // '..' ','
       && lk != 21551               // '/' ','
       && lk != 21579               // 'after' ','
       && lk != 21581               // 'allowing' ','
       && lk != 21582               // 'ancestor' ','
       && lk != 21583               // 'ancestor-or-self' ','
       && lk != 21584               // 'and' ','
       && lk != 21586               // 'append' ','
       && lk != 21587               // 'array' ','
       && lk != 21588               // 'as' ','
       && lk != 21589               // 'ascending' ','
       && lk != 21590               // 'at' ','
       && lk != 21591               // 'attribute' ','
       && lk != 21592               // 'base-uri' ','
       && lk != 21593               // 'before' ','
       && lk != 21594               // 'boundary-space' ','
       && lk != 21595               // 'break' ','
       && lk != 21597               // 'case' ','
       && lk != 21598               // 'cast' ','
       && lk != 21599               // 'castable' ','
       && lk != 21600               // 'catch' ','
       && lk != 21602               // 'child' ','
       && lk != 21603               // 'collation' ','
       && lk != 21605               // 'comment' ','
       && lk != 21606               // 'constraint' ','
       && lk != 21607               // 'construction' ','
       && lk != 21610               // 'context' ','
       && lk != 21611               // 'continue' ','
       && lk != 21612               // 'copy' ','
       && lk != 21613               // 'copy-namespaces' ','
       && lk != 21614               // 'count' ','
       && lk != 21615               // 'decimal-format' ','
       && lk != 21617               // 'declare' ','
       && lk != 21618               // 'default' ','
       && lk != 21619               // 'delete' ','
       && lk != 21620               // 'descendant' ','
       && lk != 21621               // 'descendant-or-self' ','
       && lk != 21622               // 'descending' ','
       && lk != 21627               // 'div' ','
       && lk != 21628               // 'document' ','
       && lk != 21629               // 'document-node' ','
       && lk != 21630               // 'element' ','
       && lk != 21631               // 'else' ','
       && lk != 21632               // 'empty' ','
       && lk != 21633               // 'empty-sequence' ','
       && lk != 21634               // 'encoding' ','
       && lk != 21635               // 'end' ','
       && lk != 21637               // 'eq' ','
       && lk != 21638               // 'every' ','
       && lk != 21640               // 'except' ','
       && lk != 21641               // 'exit' ','
       && lk != 21642               // 'external' ','
       && lk != 21643               // 'first' ','
       && lk != 21644               // 'following' ','
       && lk != 21645               // 'following-sibling' ','
       && lk != 21646               // 'for' ','
       && lk != 21650               // 'ft-option' ','
       && lk != 21654               // 'function' ','
       && lk != 21655               // 'ge' ','
       && lk != 21657               // 'group' ','
       && lk != 21659               // 'gt' ','
       && lk != 21660               // 'idiv' ','
       && lk != 21661               // 'if' ','
       && lk != 21662               // 'import' ','
       && lk != 21663               // 'in' ','
       && lk != 21664               // 'index' ','
       && lk != 21668               // 'insert' ','
       && lk != 21669               // 'instance' ','
       && lk != 21670               // 'integrity' ','
       && lk != 21671               // 'intersect' ','
       && lk != 21672               // 'into' ','
       && lk != 21673               // 'is' ','
       && lk != 21674               // 'item' ','
       && lk != 21675               // 'json' ','
       && lk != 21676               // 'json-item' ','
       && lk != 21679               // 'last' ','
       && lk != 21680               // 'lax' ','
       && lk != 21681               // 'le' ','
       && lk != 21683               // 'let' ','
       && lk != 21685               // 'loop' ','
       && lk != 21687               // 'lt' ','
       && lk != 21688               // 'map' ','
       && lk != 21690               // 'mod' ','
       && lk != 21691               // 'modify' ','
       && lk != 21692               // 'module' ','
       && lk != 21694               // 'namespace' ','
       && lk != 21695               // 'namespace-node' ','
       && lk != 21696               // 'ne' ','
       && lk != 21701               // 'node' ','
       && lk != 21702               // 'nodes' ','
       && lk != 21704               // 'object' ','
       && lk != 21708               // 'only' ','
       && lk != 21709               // 'option' ','
       && lk != 21710               // 'or' ','
       && lk != 21711               // 'order' ','
       && lk != 21712               // 'ordered' ','
       && lk != 21713               // 'ordering' ','
       && lk != 21716               // 'parent' ','
       && lk != 21722               // 'preceding' ','
       && lk != 21723               // 'preceding-sibling' ','
       && lk != 21726               // 'processing-instruction' ','
       && lk != 21728               // 'rename' ','
       && lk != 21729               // 'replace' ','
       && lk != 21730               // 'return' ','
       && lk != 21731               // 'returning' ','
       && lk != 21732               // 'revalidation' ','
       && lk != 21734               // 'satisfies' ','
       && lk != 21735               // 'schema' ','
       && lk != 21736               // 'schema-attribute' ','
       && lk != 21737               // 'schema-element' ','
       && lk != 21738               // 'score' ','
       && lk != 21739               // 'self' ','
       && lk != 21744               // 'sliding' ','
       && lk != 21745               // 'some' ','
       && lk != 21746               // 'stable' ','
       && lk != 21747               // 'start' ','
       && lk != 21750               // 'strict' ','
       && lk != 21752               // 'structured-item' ','
       && lk != 21753               // 'switch' ','
       && lk != 21754               // 'text' ','
       && lk != 21758               // 'to' ','
       && lk != 21759               // 'treat' ','
       && lk != 21760               // 'try' ','
       && lk != 21761               // 'tumbling' ','
       && lk != 21762               // 'type' ','
       && lk != 21763               // 'typeswitch' ','
       && lk != 21764               // 'union' ','
       && lk != 21766               // 'unordered' ','
       && lk != 21767               // 'updating' ','
       && lk != 21770               // 'validate' ','
       && lk != 21771               // 'value' ','
       && lk != 21772               // 'variable' ','
       && lk != 21773               // 'version' ','
       && lk != 21776               // 'where' ','
       && lk != 21777               // 'while' ','
       && lk != 21780               // 'with' ','
       && lk != 21784               // 'xquery' ','
       && lk != 27653               // Wildcard ';'
       && lk != 27654               // EQName^Token ';'
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27693               // '.' ';'
       && lk != 27694               // '..' ';'
       && lk != 27695               // '/' ';'
       && lk != 27723               // 'after' ';'
       && lk != 27725               // 'allowing' ';'
       && lk != 27726               // 'ancestor' ';'
       && lk != 27727               // 'ancestor-or-self' ';'
       && lk != 27728               // 'and' ';'
       && lk != 27730               // 'append' ';'
       && lk != 27731               // 'array' ';'
       && lk != 27732               // 'as' ';'
       && lk != 27733               // 'ascending' ';'
       && lk != 27734               // 'at' ';'
       && lk != 27735               // 'attribute' ';'
       && lk != 27736               // 'base-uri' ';'
       && lk != 27737               // 'before' ';'
       && lk != 27738               // 'boundary-space' ';'
       && lk != 27739               // 'break' ';'
       && lk != 27741               // 'case' ';'
       && lk != 27742               // 'cast' ';'
       && lk != 27743               // 'castable' ';'
       && lk != 27744               // 'catch' ';'
       && lk != 27746               // 'child' ';'
       && lk != 27747               // 'collation' ';'
       && lk != 27749               // 'comment' ';'
       && lk != 27750               // 'constraint' ';'
       && lk != 27751               // 'construction' ';'
       && lk != 27754               // 'context' ';'
       && lk != 27755               // 'continue' ';'
       && lk != 27756               // 'copy' ';'
       && lk != 27757               // 'copy-namespaces' ';'
       && lk != 27758               // 'count' ';'
       && lk != 27759               // 'decimal-format' ';'
       && lk != 27761               // 'declare' ';'
       && lk != 27762               // 'default' ';'
       && lk != 27763               // 'delete' ';'
       && lk != 27764               // 'descendant' ';'
       && lk != 27765               // 'descendant-or-self' ';'
       && lk != 27766               // 'descending' ';'
       && lk != 27771               // 'div' ';'
       && lk != 27772               // 'document' ';'
       && lk != 27773               // 'document-node' ';'
       && lk != 27774               // 'element' ';'
       && lk != 27775               // 'else' ';'
       && lk != 27776               // 'empty' ';'
       && lk != 27777               // 'empty-sequence' ';'
       && lk != 27778               // 'encoding' ';'
       && lk != 27779               // 'end' ';'
       && lk != 27781               // 'eq' ';'
       && lk != 27782               // 'every' ';'
       && lk != 27784               // 'except' ';'
       && lk != 27785               // 'exit' ';'
       && lk != 27786               // 'external' ';'
       && lk != 27787               // 'first' ';'
       && lk != 27788               // 'following' ';'
       && lk != 27789               // 'following-sibling' ';'
       && lk != 27790               // 'for' ';'
       && lk != 27794               // 'ft-option' ';'
       && lk != 27798               // 'function' ';'
       && lk != 27799               // 'ge' ';'
       && lk != 27801               // 'group' ';'
       && lk != 27803               // 'gt' ';'
       && lk != 27804               // 'idiv' ';'
       && lk != 27805               // 'if' ';'
       && lk != 27806               // 'import' ';'
       && lk != 27807               // 'in' ';'
       && lk != 27808               // 'index' ';'
       && lk != 27812               // 'insert' ';'
       && lk != 27813               // 'instance' ';'
       && lk != 27814               // 'integrity' ';'
       && lk != 27815               // 'intersect' ';'
       && lk != 27816               // 'into' ';'
       && lk != 27817               // 'is' ';'
       && lk != 27818               // 'item' ';'
       && lk != 27819               // 'json' ';'
       && lk != 27820               // 'json-item' ';'
       && lk != 27823               // 'last' ';'
       && lk != 27824               // 'lax' ';'
       && lk != 27825               // 'le' ';'
       && lk != 27827               // 'let' ';'
       && lk != 27829               // 'loop' ';'
       && lk != 27831               // 'lt' ';'
       && lk != 27832               // 'map' ';'
       && lk != 27834               // 'mod' ';'
       && lk != 27835               // 'modify' ';'
       && lk != 27836               // 'module' ';'
       && lk != 27838               // 'namespace' ';'
       && lk != 27839               // 'namespace-node' ';'
       && lk != 27840               // 'ne' ';'
       && lk != 27845               // 'node' ';'
       && lk != 27846               // 'nodes' ';'
       && lk != 27848               // 'object' ';'
       && lk != 27852               // 'only' ';'
       && lk != 27853               // 'option' ';'
       && lk != 27854               // 'or' ';'
       && lk != 27855               // 'order' ';'
       && lk != 27856               // 'ordered' ';'
       && lk != 27857               // 'ordering' ';'
       && lk != 27860               // 'parent' ';'
       && lk != 27866               // 'preceding' ';'
       && lk != 27867               // 'preceding-sibling' ';'
       && lk != 27870               // 'processing-instruction' ';'
       && lk != 27872               // 'rename' ';'
       && lk != 27873               // 'replace' ';'
       && lk != 27874               // 'return' ';'
       && lk != 27875               // 'returning' ';'
       && lk != 27876               // 'revalidation' ';'
       && lk != 27878               // 'satisfies' ';'
       && lk != 27879               // 'schema' ';'
       && lk != 27880               // 'schema-attribute' ';'
       && lk != 27881               // 'schema-element' ';'
       && lk != 27882               // 'score' ';'
       && lk != 27883               // 'self' ';'
       && lk != 27888               // 'sliding' ';'
       && lk != 27889               // 'some' ';'
       && lk != 27890               // 'stable' ';'
       && lk != 27891               // 'start' ';'
       && lk != 27894               // 'strict' ';'
       && lk != 27896               // 'structured-item' ';'
       && lk != 27897               // 'switch' ';'
       && lk != 27898               // 'text' ';'
       && lk != 27902               // 'to' ';'
       && lk != 27903               // 'treat' ';'
       && lk != 27904               // 'try' ';'
       && lk != 27905               // 'tumbling' ';'
       && lk != 27906               // 'type' ';'
       && lk != 27907               // 'typeswitch' ';'
       && lk != 27908               // 'union' ';'
       && lk != 27910               // 'unordered' ';'
       && lk != 27911               // 'updating' ';'
       && lk != 27914               // 'validate' ';'
       && lk != 27915               // 'value' ';'
       && lk != 27916               // 'variable' ';'
       && lk != 27917               // 'version' ';'
       && lk != 27920               // 'where' ';'
       && lk != 27921               // 'while' ';'
       && lk != 27924               // 'with' ';'
       && lk != 27928               // 'xquery' ';'
       && lk != 92763               // 'break' 'loop'
       && lk != 92779               // 'continue' 'loop'
       && lk != 116361              // 'exit' 'returning'
       && lk != 147461              // Wildcard '}'
       && lk != 147462              // EQName^Token '}'
       && lk != 147464              // IntegerLiteral '}'
       && lk != 147465              // DecimalLiteral '}'
       && lk != 147466              // DoubleLiteral '}'
       && lk != 147467              // StringLiteral '}'
       && lk != 147501              // '.' '}'
       && lk != 147502              // '..' '}'
       && lk != 147503              // '/' '}'
       && lk != 147531              // 'after' '}'
       && lk != 147533              // 'allowing' '}'
       && lk != 147534              // 'ancestor' '}'
       && lk != 147535              // 'ancestor-or-self' '}'
       && lk != 147536              // 'and' '}'
       && lk != 147538              // 'append' '}'
       && lk != 147539              // 'array' '}'
       && lk != 147540              // 'as' '}'
       && lk != 147541              // 'ascending' '}'
       && lk != 147542              // 'at' '}'
       && lk != 147543              // 'attribute' '}'
       && lk != 147544              // 'base-uri' '}'
       && lk != 147545              // 'before' '}'
       && lk != 147546              // 'boundary-space' '}'
       && lk != 147547              // 'break' '}'
       && lk != 147549              // 'case' '}'
       && lk != 147550              // 'cast' '}'
       && lk != 147551              // 'castable' '}'
       && lk != 147552              // 'catch' '}'
       && lk != 147554              // 'child' '}'
       && lk != 147555              // 'collation' '}'
       && lk != 147557              // 'comment' '}'
       && lk != 147558              // 'constraint' '}'
       && lk != 147559              // 'construction' '}'
       && lk != 147562              // 'context' '}'
       && lk != 147563              // 'continue' '}'
       && lk != 147564              // 'copy' '}'
       && lk != 147565              // 'copy-namespaces' '}'
       && lk != 147566              // 'count' '}'
       && lk != 147567              // 'decimal-format' '}'
       && lk != 147569              // 'declare' '}'
       && lk != 147570              // 'default' '}'
       && lk != 147571              // 'delete' '}'
       && lk != 147572              // 'descendant' '}'
       && lk != 147573              // 'descendant-or-self' '}'
       && lk != 147574              // 'descending' '}'
       && lk != 147579              // 'div' '}'
       && lk != 147580              // 'document' '}'
       && lk != 147581              // 'document-node' '}'
       && lk != 147582              // 'element' '}'
       && lk != 147583              // 'else' '}'
       && lk != 147584              // 'empty' '}'
       && lk != 147585              // 'empty-sequence' '}'
       && lk != 147586              // 'encoding' '}'
       && lk != 147587              // 'end' '}'
       && lk != 147589              // 'eq' '}'
       && lk != 147590              // 'every' '}'
       && lk != 147592              // 'except' '}'
       && lk != 147593              // 'exit' '}'
       && lk != 147594              // 'external' '}'
       && lk != 147595              // 'first' '}'
       && lk != 147596              // 'following' '}'
       && lk != 147597              // 'following-sibling' '}'
       && lk != 147598              // 'for' '}'
       && lk != 147602              // 'ft-option' '}'
       && lk != 147606              // 'function' '}'
       && lk != 147607              // 'ge' '}'
       && lk != 147609              // 'group' '}'
       && lk != 147611              // 'gt' '}'
       && lk != 147612              // 'idiv' '}'
       && lk != 147613              // 'if' '}'
       && lk != 147614              // 'import' '}'
       && lk != 147615              // 'in' '}'
       && lk != 147616              // 'index' '}'
       && lk != 147620              // 'insert' '}'
       && lk != 147621              // 'instance' '}'
       && lk != 147622              // 'integrity' '}'
       && lk != 147623              // 'intersect' '}'
       && lk != 147624              // 'into' '}'
       && lk != 147625              // 'is' '}'
       && lk != 147626              // 'item' '}'
       && lk != 147627              // 'json' '}'
       && lk != 147628              // 'json-item' '}'
       && lk != 147631              // 'last' '}'
       && lk != 147632              // 'lax' '}'
       && lk != 147633              // 'le' '}'
       && lk != 147635              // 'let' '}'
       && lk != 147637              // 'loop' '}'
       && lk != 147639              // 'lt' '}'
       && lk != 147640              // 'map' '}'
       && lk != 147642              // 'mod' '}'
       && lk != 147643              // 'modify' '}'
       && lk != 147644              // 'module' '}'
       && lk != 147646              // 'namespace' '}'
       && lk != 147647              // 'namespace-node' '}'
       && lk != 147648              // 'ne' '}'
       && lk != 147653              // 'node' '}'
       && lk != 147654              // 'nodes' '}'
       && lk != 147656              // 'object' '}'
       && lk != 147660              // 'only' '}'
       && lk != 147661              // 'option' '}'
       && lk != 147662              // 'or' '}'
       && lk != 147663              // 'order' '}'
       && lk != 147664              // 'ordered' '}'
       && lk != 147665              // 'ordering' '}'
       && lk != 147668              // 'parent' '}'
       && lk != 147674              // 'preceding' '}'
       && lk != 147675              // 'preceding-sibling' '}'
       && lk != 147678              // 'processing-instruction' '}'
       && lk != 147680              // 'rename' '}'
       && lk != 147681              // 'replace' '}'
       && lk != 147682              // 'return' '}'
       && lk != 147683              // 'returning' '}'
       && lk != 147684              // 'revalidation' '}'
       && lk != 147686              // 'satisfies' '}'
       && lk != 147687              // 'schema' '}'
       && lk != 147688              // 'schema-attribute' '}'
       && lk != 147689              // 'schema-element' '}'
       && lk != 147690              // 'score' '}'
       && lk != 147691              // 'self' '}'
       && lk != 147696              // 'sliding' '}'
       && lk != 147697              // 'some' '}'
       && lk != 147698              // 'stable' '}'
       && lk != 147699              // 'start' '}'
       && lk != 147702              // 'strict' '}'
       && lk != 147704              // 'structured-item' '}'
       && lk != 147705              // 'switch' '}'
       && lk != 147706              // 'text' '}'
       && lk != 147710              // 'to' '}'
       && lk != 147711              // 'treat' '}'
       && lk != 147712              // 'try' '}'
       && lk != 147713              // 'tumbling' '}'
       && lk != 147714              // 'type' '}'
       && lk != 147715              // 'typeswitch' '}'
       && lk != 147716              // 'union' '}'
       && lk != 147718              // 'unordered' '}'
       && lk != 147719              // 'updating' '}'
       && lk != 147722              // 'validate' '}'
       && lk != 147723              // 'value' '}'
       && lk != 147724              // 'variable' '}'
       && lk != 147725              // 'version' '}'
       && lk != 147728              // 'where' '}'
       && lk != 147729              // 'while' '}'
       && lk != 147732              // 'with' '}'
       && lk != 147736)             // 'xquery' '}'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(8, e0, lk);
        }
      }
      if (lk != -1
       && lk != 54                  // ';'
       && lk != 16652               // 'variable' '$'
       && lk != 27653               // Wildcard ';'
       && lk != 27654               // EQName^Token ';'
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27693               // '.' ';'
       && lk != 27694               // '..' ';'
       && lk != 27695               // '/' ';'
       && lk != 27723               // 'after' ';'
       && lk != 27725               // 'allowing' ';'
       && lk != 27726               // 'ancestor' ';'
       && lk != 27727               // 'ancestor-or-self' ';'
       && lk != 27728               // 'and' ';'
       && lk != 27730               // 'append' ';'
       && lk != 27731               // 'array' ';'
       && lk != 27732               // 'as' ';'
       && lk != 27733               // 'ascending' ';'
       && lk != 27734               // 'at' ';'
       && lk != 27735               // 'attribute' ';'
       && lk != 27736               // 'base-uri' ';'
       && lk != 27737               // 'before' ';'
       && lk != 27738               // 'boundary-space' ';'
       && lk != 27739               // 'break' ';'
       && lk != 27741               // 'case' ';'
       && lk != 27742               // 'cast' ';'
       && lk != 27743               // 'castable' ';'
       && lk != 27744               // 'catch' ';'
       && lk != 27746               // 'child' ';'
       && lk != 27747               // 'collation' ';'
       && lk != 27749               // 'comment' ';'
       && lk != 27750               // 'constraint' ';'
       && lk != 27751               // 'construction' ';'
       && lk != 27754               // 'context' ';'
       && lk != 27755               // 'continue' ';'
       && lk != 27756               // 'copy' ';'
       && lk != 27757               // 'copy-namespaces' ';'
       && lk != 27758               // 'count' ';'
       && lk != 27759               // 'decimal-format' ';'
       && lk != 27761               // 'declare' ';'
       && lk != 27762               // 'default' ';'
       && lk != 27763               // 'delete' ';'
       && lk != 27764               // 'descendant' ';'
       && lk != 27765               // 'descendant-or-self' ';'
       && lk != 27766               // 'descending' ';'
       && lk != 27771               // 'div' ';'
       && lk != 27772               // 'document' ';'
       && lk != 27773               // 'document-node' ';'
       && lk != 27774               // 'element' ';'
       && lk != 27775               // 'else' ';'
       && lk != 27776               // 'empty' ';'
       && lk != 27777               // 'empty-sequence' ';'
       && lk != 27778               // 'encoding' ';'
       && lk != 27779               // 'end' ';'
       && lk != 27781               // 'eq' ';'
       && lk != 27782               // 'every' ';'
       && lk != 27784               // 'except' ';'
       && lk != 27785               // 'exit' ';'
       && lk != 27786               // 'external' ';'
       && lk != 27787               // 'first' ';'
       && lk != 27788               // 'following' ';'
       && lk != 27789               // 'following-sibling' ';'
       && lk != 27790               // 'for' ';'
       && lk != 27794               // 'ft-option' ';'
       && lk != 27798               // 'function' ';'
       && lk != 27799               // 'ge' ';'
       && lk != 27801               // 'group' ';'
       && lk != 27803               // 'gt' ';'
       && lk != 27804               // 'idiv' ';'
       && lk != 27805               // 'if' ';'
       && lk != 27806               // 'import' ';'
       && lk != 27807               // 'in' ';'
       && lk != 27808               // 'index' ';'
       && lk != 27812               // 'insert' ';'
       && lk != 27813               // 'instance' ';'
       && lk != 27814               // 'integrity' ';'
       && lk != 27815               // 'intersect' ';'
       && lk != 27816               // 'into' ';'
       && lk != 27817               // 'is' ';'
       && lk != 27818               // 'item' ';'
       && lk != 27819               // 'json' ';'
       && lk != 27820               // 'json-item' ';'
       && lk != 27823               // 'last' ';'
       && lk != 27824               // 'lax' ';'
       && lk != 27825               // 'le' ';'
       && lk != 27827               // 'let' ';'
       && lk != 27829               // 'loop' ';'
       && lk != 27831               // 'lt' ';'
       && lk != 27832               // 'map' ';'
       && lk != 27834               // 'mod' ';'
       && lk != 27835               // 'modify' ';'
       && lk != 27836               // 'module' ';'
       && lk != 27838               // 'namespace' ';'
       && lk != 27839               // 'namespace-node' ';'
       && lk != 27840               // 'ne' ';'
       && lk != 27845               // 'node' ';'
       && lk != 27846               // 'nodes' ';'
       && lk != 27848               // 'object' ';'
       && lk != 27852               // 'only' ';'
       && lk != 27853               // 'option' ';'
       && lk != 27854               // 'or' ';'
       && lk != 27855               // 'order' ';'
       && lk != 27856               // 'ordered' ';'
       && lk != 27857               // 'ordering' ';'
       && lk != 27860               // 'parent' ';'
       && lk != 27866               // 'preceding' ';'
       && lk != 27867               // 'preceding-sibling' ';'
       && lk != 27870               // 'processing-instruction' ';'
       && lk != 27872               // 'rename' ';'
       && lk != 27873               // 'replace' ';'
       && lk != 27874               // 'return' ';'
       && lk != 27875               // 'returning' ';'
       && lk != 27876               // 'revalidation' ';'
       && lk != 27878               // 'satisfies' ';'
       && lk != 27879               // 'schema' ';'
       && lk != 27880               // 'schema-attribute' ';'
       && lk != 27881               // 'schema-element' ';'
       && lk != 27882               // 'score' ';'
       && lk != 27883               // 'self' ';'
       && lk != 27888               // 'sliding' ';'
       && lk != 27889               // 'some' ';'
       && lk != 27890               // 'stable' ';'
       && lk != 27891               // 'start' ';'
       && lk != 27894               // 'strict' ';'
       && lk != 27896               // 'structured-item' ';'
       && lk != 27897               // 'switch' ';'
       && lk != 27898               // 'text' ';'
       && lk != 27902               // 'to' ';'
       && lk != 27903               // 'treat' ';'
       && lk != 27904               // 'try' ';'
       && lk != 27905               // 'tumbling' ';'
       && lk != 27906               // 'type' ';'
       && lk != 27907               // 'typeswitch' ';'
       && lk != 27908               // 'union' ';'
       && lk != 27910               // 'unordered' ';'
       && lk != 27911               // 'updating' ';'
       && lk != 27914               // 'validate' ';'
       && lk != 27915               // 'value' ';'
       && lk != 27916               // 'variable' ';'
       && lk != 27917               // 'version' ';'
       && lk != 27920               // 'where' ';'
       && lk != 27921               // 'while' ';'
       && lk != 27924               // 'with' ';'
       && lk != 27928               // 'xquery' ';'
       && lk != 92763               // 'break' 'loop'
       && lk != 92779               // 'continue' 'loop'
       && lk != 116361)             // 'exit' 'returning'
      {
        break;
      }
      whitespace();
      parse_Statement();
    }
    eventHandler.endNonterminal("Statements", e0);
  }

  function try_Statements()
  {
    for (;;)
    {
      lookahead1W(288);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 35:                      // '('
        lookahead2W(277);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        break;
      case 36:                      // '(#'
        lookahead2(256);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        break;
      case 47:                      // '/'
        lookahead2W(293);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '=>' |
                                    // '>' | '>=' | '>>' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|' | '||' | '}'
        break;
      case 48:                      // '//'
        lookahead2W(273);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | '``[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 55:                      // '<'
        lookahead2(4);              // QName
        break;
      case 56:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 60:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 66:                      // '?'
        lookahead2W(260);           // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 68:                      // '@'
        lookahead2W(262);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        break;
      case 70:                      // '['
        lookahead2W(280);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        break;
      case 73:                      // '``['
        lookahead2(5);              // StringConstructorChars
        break;
      case 82:                      // 'append'
        lookahead2W(202);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 83:                      // 'array'
        lookahead2W(196);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 87:                      // 'attribute'
        lookahead2W(289);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 126:                     // 'element'
        lookahead2W(287);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 137:                     // 'exit'
        lookahead2W(205);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 142:                     // 'for'
        lookahead2W(210);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'sliding' | 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
        break;
      case 179:                     // 'let'
        lookahead2W(207);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'score' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 224:                     // 'rename'
        lookahead2W(208);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 225:                     // 'replace'
        lookahead2W(209);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'node' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
        break;
      case 266:                     // 'validate'
        lookahead2W(212);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 282:                     // '{'
        lookahead2W(285);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
        break;
      case 284:                     // '{|'
        lookahead2W(281);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '|}'
        break;
      case 5:                       // Wildcard
      case 46:                      // '..'
        lookahead2W(187);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 32:                      // '$'
      case 33:                      // '%'
        lookahead2W(259);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        break;
      case 41:                      // '+'
      case 43:                      // '-'
        lookahead2W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        break;
      case 91:                      // 'break'
      case 107:                     // 'continue'
        lookahead2W(203);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 115:                     // 'delete'
      case 164:                     // 'insert'
        lookahead2W(211);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'nodes' | 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 190:                     // 'namespace'
      case 222:                     // 'processing-instruction'
        lookahead2W(275);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 108:                     // 'copy'
      case 134:                     // 'every'
      case 241:                     // 'some'
      case 268:                     // 'variable'
        lookahead2W(199);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 129:                     // 'empty-sequence'
      case 170:                     // 'item'
      case 172:                     // 'json-item'
      case 248:                     // 'structured-item'
        lookahead2W(192);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 45:                      // '.'
        lookahead2W(197);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '?' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 101:                     // 'comment'
      case 124:                     // 'document'
      case 184:                     // 'map'
      case 208:                     // 'ordered'
      case 250:                     // 'text'
      case 256:                     // 'try'
      case 262:                     // 'unordered'
        lookahead2W(206);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 78:                      // 'ancestor'
      case 79:                      // 'ancestor-or-self'
      case 98:                      // 'child'
      case 116:                     // 'descendant'
      case 117:                     // 'descendant-or-self'
      case 140:                     // 'following'
      case 141:                     // 'following-sibling'
      case 212:                     // 'parent'
      case 218:                     // 'preceding'
      case 219:                     // 'preceding-sibling'
      case 235:                     // 'self'
        lookahead2W(200);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'cast' | 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 75:                      // 'after'
      case 77:                      // 'allowing'
      case 80:                      // 'and'
      case 84:                      // 'as'
      case 85:                      // 'ascending'
      case 86:                      // 'at'
      case 88:                      // 'base-uri'
      case 89:                      // 'before'
      case 90:                      // 'boundary-space'
      case 93:                      // 'case'
      case 94:                      // 'cast'
      case 95:                      // 'castable'
      case 96:                      // 'catch'
      case 99:                      // 'collation'
      case 102:                     // 'constraint'
      case 103:                     // 'construction'
      case 106:                     // 'context'
      case 109:                     // 'copy-namespaces'
      case 110:                     // 'count'
      case 111:                     // 'decimal-format'
      case 113:                     // 'declare'
      case 114:                     // 'default'
      case 118:                     // 'descending'
      case 123:                     // 'div'
      case 125:                     // 'document-node'
      case 127:                     // 'else'
      case 128:                     // 'empty'
      case 130:                     // 'encoding'
      case 131:                     // 'end'
      case 133:                     // 'eq'
      case 136:                     // 'except'
      case 138:                     // 'external'
      case 139:                     // 'first'
      case 146:                     // 'ft-option'
      case 150:                     // 'function'
      case 151:                     // 'ge'
      case 153:                     // 'group'
      case 155:                     // 'gt'
      case 156:                     // 'idiv'
      case 157:                     // 'if'
      case 158:                     // 'import'
      case 159:                     // 'in'
      case 160:                     // 'index'
      case 165:                     // 'instance'
      case 166:                     // 'integrity'
      case 167:                     // 'intersect'
      case 168:                     // 'into'
      case 169:                     // 'is'
      case 171:                     // 'json'
      case 175:                     // 'last'
      case 176:                     // 'lax'
      case 177:                     // 'le'
      case 181:                     // 'loop'
      case 183:                     // 'lt'
      case 186:                     // 'mod'
      case 187:                     // 'modify'
      case 188:                     // 'module'
      case 191:                     // 'namespace-node'
      case 192:                     // 'ne'
      case 197:                     // 'node'
      case 198:                     // 'nodes'
      case 200:                     // 'object'
      case 204:                     // 'only'
      case 205:                     // 'option'
      case 206:                     // 'or'
      case 207:                     // 'order'
      case 209:                     // 'ordering'
      case 226:                     // 'return'
      case 227:                     // 'returning'
      case 228:                     // 'revalidation'
      case 230:                     // 'satisfies'
      case 231:                     // 'schema'
      case 232:                     // 'schema-attribute'
      case 233:                     // 'schema-element'
      case 234:                     // 'score'
      case 240:                     // 'sliding'
      case 242:                     // 'stable'
      case 243:                     // 'start'
      case 246:                     // 'strict'
      case 249:                     // 'switch'
      case 254:                     // 'to'
      case 255:                     // 'treat'
      case 257:                     // 'tumbling'
      case 258:                     // 'type'
      case 259:                     // 'typeswitch'
      case 260:                     // 'union'
      case 263:                     // 'updating'
      case 267:                     // 'value'
      case 269:                     // 'version'
      case 272:                     // 'where'
      case 273:                     // 'while'
      case 276:                     // 'with'
      case 280:                     // 'xquery'
        lookahead2W(195);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 26                  // EOF
       && lk != 54                  // ';'
       && lk != 288                 // '}'
       && lk != 13317               // Wildcard EOF
       && lk != 13318               // EQName^Token EOF
       && lk != 13320               // IntegerLiteral EOF
       && lk != 13321               // DecimalLiteral EOF
       && lk != 13322               // DoubleLiteral EOF
       && lk != 13323               // StringLiteral EOF
       && lk != 13357               // '.' EOF
       && lk != 13358               // '..' EOF
       && lk != 13359               // '/' EOF
       && lk != 13387               // 'after' EOF
       && lk != 13389               // 'allowing' EOF
       && lk != 13390               // 'ancestor' EOF
       && lk != 13391               // 'ancestor-or-self' EOF
       && lk != 13392               // 'and' EOF
       && lk != 13394               // 'append' EOF
       && lk != 13395               // 'array' EOF
       && lk != 13396               // 'as' EOF
       && lk != 13397               // 'ascending' EOF
       && lk != 13398               // 'at' EOF
       && lk != 13399               // 'attribute' EOF
       && lk != 13400               // 'base-uri' EOF
       && lk != 13401               // 'before' EOF
       && lk != 13402               // 'boundary-space' EOF
       && lk != 13403               // 'break' EOF
       && lk != 13405               // 'case' EOF
       && lk != 13406               // 'cast' EOF
       && lk != 13407               // 'castable' EOF
       && lk != 13408               // 'catch' EOF
       && lk != 13410               // 'child' EOF
       && lk != 13411               // 'collation' EOF
       && lk != 13413               // 'comment' EOF
       && lk != 13414               // 'constraint' EOF
       && lk != 13415               // 'construction' EOF
       && lk != 13418               // 'context' EOF
       && lk != 13419               // 'continue' EOF
       && lk != 13420               // 'copy' EOF
       && lk != 13421               // 'copy-namespaces' EOF
       && lk != 13422               // 'count' EOF
       && lk != 13423               // 'decimal-format' EOF
       && lk != 13425               // 'declare' EOF
       && lk != 13426               // 'default' EOF
       && lk != 13427               // 'delete' EOF
       && lk != 13428               // 'descendant' EOF
       && lk != 13429               // 'descendant-or-self' EOF
       && lk != 13430               // 'descending' EOF
       && lk != 13435               // 'div' EOF
       && lk != 13436               // 'document' EOF
       && lk != 13437               // 'document-node' EOF
       && lk != 13438               // 'element' EOF
       && lk != 13439               // 'else' EOF
       && lk != 13440               // 'empty' EOF
       && lk != 13441               // 'empty-sequence' EOF
       && lk != 13442               // 'encoding' EOF
       && lk != 13443               // 'end' EOF
       && lk != 13445               // 'eq' EOF
       && lk != 13446               // 'every' EOF
       && lk != 13448               // 'except' EOF
       && lk != 13449               // 'exit' EOF
       && lk != 13450               // 'external' EOF
       && lk != 13451               // 'first' EOF
       && lk != 13452               // 'following' EOF
       && lk != 13453               // 'following-sibling' EOF
       && lk != 13454               // 'for' EOF
       && lk != 13458               // 'ft-option' EOF
       && lk != 13462               // 'function' EOF
       && lk != 13463               // 'ge' EOF
       && lk != 13465               // 'group' EOF
       && lk != 13467               // 'gt' EOF
       && lk != 13468               // 'idiv' EOF
       && lk != 13469               // 'if' EOF
       && lk != 13470               // 'import' EOF
       && lk != 13471               // 'in' EOF
       && lk != 13472               // 'index' EOF
       && lk != 13476               // 'insert' EOF
       && lk != 13477               // 'instance' EOF
       && lk != 13478               // 'integrity' EOF
       && lk != 13479               // 'intersect' EOF
       && lk != 13480               // 'into' EOF
       && lk != 13481               // 'is' EOF
       && lk != 13482               // 'item' EOF
       && lk != 13483               // 'json' EOF
       && lk != 13484               // 'json-item' EOF
       && lk != 13487               // 'last' EOF
       && lk != 13488               // 'lax' EOF
       && lk != 13489               // 'le' EOF
       && lk != 13491               // 'let' EOF
       && lk != 13493               // 'loop' EOF
       && lk != 13495               // 'lt' EOF
       && lk != 13496               // 'map' EOF
       && lk != 13498               // 'mod' EOF
       && lk != 13499               // 'modify' EOF
       && lk != 13500               // 'module' EOF
       && lk != 13502               // 'namespace' EOF
       && lk != 13503               // 'namespace-node' EOF
       && lk != 13504               // 'ne' EOF
       && lk != 13509               // 'node' EOF
       && lk != 13510               // 'nodes' EOF
       && lk != 13512               // 'object' EOF
       && lk != 13516               // 'only' EOF
       && lk != 13517               // 'option' EOF
       && lk != 13518               // 'or' EOF
       && lk != 13519               // 'order' EOF
       && lk != 13520               // 'ordered' EOF
       && lk != 13521               // 'ordering' EOF
       && lk != 13524               // 'parent' EOF
       && lk != 13530               // 'preceding' EOF
       && lk != 13531               // 'preceding-sibling' EOF
       && lk != 13534               // 'processing-instruction' EOF
       && lk != 13536               // 'rename' EOF
       && lk != 13537               // 'replace' EOF
       && lk != 13538               // 'return' EOF
       && lk != 13539               // 'returning' EOF
       && lk != 13540               // 'revalidation' EOF
       && lk != 13542               // 'satisfies' EOF
       && lk != 13543               // 'schema' EOF
       && lk != 13544               // 'schema-attribute' EOF
       && lk != 13545               // 'schema-element' EOF
       && lk != 13546               // 'score' EOF
       && lk != 13547               // 'self' EOF
       && lk != 13552               // 'sliding' EOF
       && lk != 13553               // 'some' EOF
       && lk != 13554               // 'stable' EOF
       && lk != 13555               // 'start' EOF
       && lk != 13558               // 'strict' EOF
       && lk != 13560               // 'structured-item' EOF
       && lk != 13561               // 'switch' EOF
       && lk != 13562               // 'text' EOF
       && lk != 13566               // 'to' EOF
       && lk != 13567               // 'treat' EOF
       && lk != 13568               // 'try' EOF
       && lk != 13569               // 'tumbling' EOF
       && lk != 13570               // 'type' EOF
       && lk != 13571               // 'typeswitch' EOF
       && lk != 13572               // 'union' EOF
       && lk != 13574               // 'unordered' EOF
       && lk != 13575               // 'updating' EOF
       && lk != 13578               // 'validate' EOF
       && lk != 13579               // 'value' EOF
       && lk != 13580               // 'variable' EOF
       && lk != 13581               // 'version' EOF
       && lk != 13584               // 'where' EOF
       && lk != 13585               // 'while' EOF
       && lk != 13588               // 'with' EOF
       && lk != 13592               // 'xquery' EOF
       && lk != 16652               // 'variable' '$'
       && lk != 21509               // Wildcard ','
       && lk != 21510               // EQName^Token ','
       && lk != 21512               // IntegerLiteral ','
       && lk != 21513               // DecimalLiteral ','
       && lk != 21514               // DoubleLiteral ','
       && lk != 21515               // StringLiteral ','
       && lk != 21549               // '.' ','
       && lk != 21550               // '..' ','
       && lk != 21551               // '/' ','
       && lk != 21579               // 'after' ','
       && lk != 21581               // 'allowing' ','
       && lk != 21582               // 'ancestor' ','
       && lk != 21583               // 'ancestor-or-self' ','
       && lk != 21584               // 'and' ','
       && lk != 21586               // 'append' ','
       && lk != 21587               // 'array' ','
       && lk != 21588               // 'as' ','
       && lk != 21589               // 'ascending' ','
       && lk != 21590               // 'at' ','
       && lk != 21591               // 'attribute' ','
       && lk != 21592               // 'base-uri' ','
       && lk != 21593               // 'before' ','
       && lk != 21594               // 'boundary-space' ','
       && lk != 21595               // 'break' ','
       && lk != 21597               // 'case' ','
       && lk != 21598               // 'cast' ','
       && lk != 21599               // 'castable' ','
       && lk != 21600               // 'catch' ','
       && lk != 21602               // 'child' ','
       && lk != 21603               // 'collation' ','
       && lk != 21605               // 'comment' ','
       && lk != 21606               // 'constraint' ','
       && lk != 21607               // 'construction' ','
       && lk != 21610               // 'context' ','
       && lk != 21611               // 'continue' ','
       && lk != 21612               // 'copy' ','
       && lk != 21613               // 'copy-namespaces' ','
       && lk != 21614               // 'count' ','
       && lk != 21615               // 'decimal-format' ','
       && lk != 21617               // 'declare' ','
       && lk != 21618               // 'default' ','
       && lk != 21619               // 'delete' ','
       && lk != 21620               // 'descendant' ','
       && lk != 21621               // 'descendant-or-self' ','
       && lk != 21622               // 'descending' ','
       && lk != 21627               // 'div' ','
       && lk != 21628               // 'document' ','
       && lk != 21629               // 'document-node' ','
       && lk != 21630               // 'element' ','
       && lk != 21631               // 'else' ','
       && lk != 21632               // 'empty' ','
       && lk != 21633               // 'empty-sequence' ','
       && lk != 21634               // 'encoding' ','
       && lk != 21635               // 'end' ','
       && lk != 21637               // 'eq' ','
       && lk != 21638               // 'every' ','
       && lk != 21640               // 'except' ','
       && lk != 21641               // 'exit' ','
       && lk != 21642               // 'external' ','
       && lk != 21643               // 'first' ','
       && lk != 21644               // 'following' ','
       && lk != 21645               // 'following-sibling' ','
       && lk != 21646               // 'for' ','
       && lk != 21650               // 'ft-option' ','
       && lk != 21654               // 'function' ','
       && lk != 21655               // 'ge' ','
       && lk != 21657               // 'group' ','
       && lk != 21659               // 'gt' ','
       && lk != 21660               // 'idiv' ','
       && lk != 21661               // 'if' ','
       && lk != 21662               // 'import' ','
       && lk != 21663               // 'in' ','
       && lk != 21664               // 'index' ','
       && lk != 21668               // 'insert' ','
       && lk != 21669               // 'instance' ','
       && lk != 21670               // 'integrity' ','
       && lk != 21671               // 'intersect' ','
       && lk != 21672               // 'into' ','
       && lk != 21673               // 'is' ','
       && lk != 21674               // 'item' ','
       && lk != 21675               // 'json' ','
       && lk != 21676               // 'json-item' ','
       && lk != 21679               // 'last' ','
       && lk != 21680               // 'lax' ','
       && lk != 21681               // 'le' ','
       && lk != 21683               // 'let' ','
       && lk != 21685               // 'loop' ','
       && lk != 21687               // 'lt' ','
       && lk != 21688               // 'map' ','
       && lk != 21690               // 'mod' ','
       && lk != 21691               // 'modify' ','
       && lk != 21692               // 'module' ','
       && lk != 21694               // 'namespace' ','
       && lk != 21695               // 'namespace-node' ','
       && lk != 21696               // 'ne' ','
       && lk != 21701               // 'node' ','
       && lk != 21702               // 'nodes' ','
       && lk != 21704               // 'object' ','
       && lk != 21708               // 'only' ','
       && lk != 21709               // 'option' ','
       && lk != 21710               // 'or' ','
       && lk != 21711               // 'order' ','
       && lk != 21712               // 'ordered' ','
       && lk != 21713               // 'ordering' ','
       && lk != 21716               // 'parent' ','
       && lk != 21722               // 'preceding' ','
       && lk != 21723               // 'preceding-sibling' ','
       && lk != 21726               // 'processing-instruction' ','
       && lk != 21728               // 'rename' ','
       && lk != 21729               // 'replace' ','
       && lk != 21730               // 'return' ','
       && lk != 21731               // 'returning' ','
       && lk != 21732               // 'revalidation' ','
       && lk != 21734               // 'satisfies' ','
       && lk != 21735               // 'schema' ','
       && lk != 21736               // 'schema-attribute' ','
       && lk != 21737               // 'schema-element' ','
       && lk != 21738               // 'score' ','
       && lk != 21739               // 'self' ','
       && lk != 21744               // 'sliding' ','
       && lk != 21745               // 'some' ','
       && lk != 21746               // 'stable' ','
       && lk != 21747               // 'start' ','
       && lk != 21750               // 'strict' ','
       && lk != 21752               // 'structured-item' ','
       && lk != 21753               // 'switch' ','
       && lk != 21754               // 'text' ','
       && lk != 21758               // 'to' ','
       && lk != 21759               // 'treat' ','
       && lk != 21760               // 'try' ','
       && lk != 21761               // 'tumbling' ','
       && lk != 21762               // 'type' ','
       && lk != 21763               // 'typeswitch' ','
       && lk != 21764               // 'union' ','
       && lk != 21766               // 'unordered' ','
       && lk != 21767               // 'updating' ','
       && lk != 21770               // 'validate' ','
       && lk != 21771               // 'value' ','
       && lk != 21772               // 'variable' ','
       && lk != 21773               // 'version' ','
       && lk != 21776               // 'where' ','
       && lk != 21777               // 'while' ','
       && lk != 21780               // 'with' ','
       && lk != 21784               // 'xquery' ','
       && lk != 27653               // Wildcard ';'
       && lk != 27654               // EQName^Token ';'
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27693               // '.' ';'
       && lk != 27694               // '..' ';'
       && lk != 27695               // '/' ';'
       && lk != 27723               // 'after' ';'
       && lk != 27725               // 'allowing' ';'
       && lk != 27726               // 'ancestor' ';'
       && lk != 27727               // 'ancestor-or-self' ';'
       && lk != 27728               // 'and' ';'
       && lk != 27730               // 'append' ';'
       && lk != 27731               // 'array' ';'
       && lk != 27732               // 'as' ';'
       && lk != 27733               // 'ascending' ';'
       && lk != 27734               // 'at' ';'
       && lk != 27735               // 'attribute' ';'
       && lk != 27736               // 'base-uri' ';'
       && lk != 27737               // 'before' ';'
       && lk != 27738               // 'boundary-space' ';'
       && lk != 27739               // 'break' ';'
       && lk != 27741               // 'case' ';'
       && lk != 27742               // 'cast' ';'
       && lk != 27743               // 'castable' ';'
       && lk != 27744               // 'catch' ';'
       && lk != 27746               // 'child' ';'
       && lk != 27747               // 'collation' ';'
       && lk != 27749               // 'comment' ';'
       && lk != 27750               // 'constraint' ';'
       && lk != 27751               // 'construction' ';'
       && lk != 27754               // 'context' ';'
       && lk != 27755               // 'continue' ';'
       && lk != 27756               // 'copy' ';'
       && lk != 27757               // 'copy-namespaces' ';'
       && lk != 27758               // 'count' ';'
       && lk != 27759               // 'decimal-format' ';'
       && lk != 27761               // 'declare' ';'
       && lk != 27762               // 'default' ';'
       && lk != 27763               // 'delete' ';'
       && lk != 27764               // 'descendant' ';'
       && lk != 27765               // 'descendant-or-self' ';'
       && lk != 27766               // 'descending' ';'
       && lk != 27771               // 'div' ';'
       && lk != 27772               // 'document' ';'
       && lk != 27773               // 'document-node' ';'
       && lk != 27774               // 'element' ';'
       && lk != 27775               // 'else' ';'
       && lk != 27776               // 'empty' ';'
       && lk != 27777               // 'empty-sequence' ';'
       && lk != 27778               // 'encoding' ';'
       && lk != 27779               // 'end' ';'
       && lk != 27781               // 'eq' ';'
       && lk != 27782               // 'every' ';'
       && lk != 27784               // 'except' ';'
       && lk != 27785               // 'exit' ';'
       && lk != 27786               // 'external' ';'
       && lk != 27787               // 'first' ';'
       && lk != 27788               // 'following' ';'
       && lk != 27789               // 'following-sibling' ';'
       && lk != 27790               // 'for' ';'
       && lk != 27794               // 'ft-option' ';'
       && lk != 27798               // 'function' ';'
       && lk != 27799               // 'ge' ';'
       && lk != 27801               // 'group' ';'
       && lk != 27803               // 'gt' ';'
       && lk != 27804               // 'idiv' ';'
       && lk != 27805               // 'if' ';'
       && lk != 27806               // 'import' ';'
       && lk != 27807               // 'in' ';'
       && lk != 27808               // 'index' ';'
       && lk != 27812               // 'insert' ';'
       && lk != 27813               // 'instance' ';'
       && lk != 27814               // 'integrity' ';'
       && lk != 27815               // 'intersect' ';'
       && lk != 27816               // 'into' ';'
       && lk != 27817               // 'is' ';'
       && lk != 27818               // 'item' ';'
       && lk != 27819               // 'json' ';'
       && lk != 27820               // 'json-item' ';'
       && lk != 27823               // 'last' ';'
       && lk != 27824               // 'lax' ';'
       && lk != 27825               // 'le' ';'
       && lk != 27827               // 'let' ';'
       && lk != 27829               // 'loop' ';'
       && lk != 27831               // 'lt' ';'
       && lk != 27832               // 'map' ';'
       && lk != 27834               // 'mod' ';'
       && lk != 27835               // 'modify' ';'
       && lk != 27836               // 'module' ';'
       && lk != 27838               // 'namespace' ';'
       && lk != 27839               // 'namespace-node' ';'
       && lk != 27840               // 'ne' ';'
       && lk != 27845               // 'node' ';'
       && lk != 27846               // 'nodes' ';'
       && lk != 27848               // 'object' ';'
       && lk != 27852               // 'only' ';'
       && lk != 27853               // 'option' ';'
       && lk != 27854               // 'or' ';'
       && lk != 27855               // 'order' ';'
       && lk != 27856               // 'ordered' ';'
       && lk != 27857               // 'ordering' ';'
       && lk != 27860               // 'parent' ';'
       && lk != 27866               // 'preceding' ';'
       && lk != 27867               // 'preceding-sibling' ';'
       && lk != 27870               // 'processing-instruction' ';'
       && lk != 27872               // 'rename' ';'
       && lk != 27873               // 'replace' ';'
       && lk != 27874               // 'return' ';'
       && lk != 27875               // 'returning' ';'
       && lk != 27876               // 'revalidation' ';'
       && lk != 27878               // 'satisfies' ';'
       && lk != 27879               // 'schema' ';'
       && lk != 27880               // 'schema-attribute' ';'
       && lk != 27881               // 'schema-element' ';'
       && lk != 27882               // 'score' ';'
       && lk != 27883               // 'self' ';'
       && lk != 27888               // 'sliding' ';'
       && lk != 27889               // 'some' ';'
       && lk != 27890               // 'stable' ';'
       && lk != 27891               // 'start' ';'
       && lk != 27894               // 'strict' ';'
       && lk != 27896               // 'structured-item' ';'
       && lk != 27897               // 'switch' ';'
       && lk != 27898               // 'text' ';'
       && lk != 27902               // 'to' ';'
       && lk != 27903               // 'treat' ';'
       && lk != 27904               // 'try' ';'
       && lk != 27905               // 'tumbling' ';'
       && lk != 27906               // 'type' ';'
       && lk != 27907               // 'typeswitch' ';'
       && lk != 27908               // 'union' ';'
       && lk != 27910               // 'unordered' ';'
       && lk != 27911               // 'updating' ';'
       && lk != 27914               // 'validate' ';'
       && lk != 27915               // 'value' ';'
       && lk != 27916               // 'variable' ';'
       && lk != 27917               // 'version' ';'
       && lk != 27920               // 'where' ';'
       && lk != 27921               // 'while' ';'
       && lk != 27924               // 'with' ';'
       && lk != 27928               // 'xquery' ';'
       && lk != 92763               // 'break' 'loop'
       && lk != 92779               // 'continue' 'loop'
       && lk != 116361              // 'exit' 'returning'
       && lk != 147461              // Wildcard '}'
       && lk != 147462              // EQName^Token '}'
       && lk != 147464              // IntegerLiteral '}'
       && lk != 147465              // DecimalLiteral '}'
       && lk != 147466              // DoubleLiteral '}'
       && lk != 147467              // StringLiteral '}'
       && lk != 147501              // '.' '}'
       && lk != 147502              // '..' '}'
       && lk != 147503              // '/' '}'
       && lk != 147531              // 'after' '}'
       && lk != 147533              // 'allowing' '}'
       && lk != 147534              // 'ancestor' '}'
       && lk != 147535              // 'ancestor-or-self' '}'
       && lk != 147536              // 'and' '}'
       && lk != 147538              // 'append' '}'
       && lk != 147539              // 'array' '}'
       && lk != 147540              // 'as' '}'
       && lk != 147541              // 'ascending' '}'
       && lk != 147542              // 'at' '}'
       && lk != 147543              // 'attribute' '}'
       && lk != 147544              // 'base-uri' '}'
       && lk != 147545              // 'before' '}'
       && lk != 147546              // 'boundary-space' '}'
       && lk != 147547              // 'break' '}'
       && lk != 147549              // 'case' '}'
       && lk != 147550              // 'cast' '}'
       && lk != 147551              // 'castable' '}'
       && lk != 147552              // 'catch' '}'
       && lk != 147554              // 'child' '}'
       && lk != 147555              // 'collation' '}'
       && lk != 147557              // 'comment' '}'
       && lk != 147558              // 'constraint' '}'
       && lk != 147559              // 'construction' '}'
       && lk != 147562              // 'context' '}'
       && lk != 147563              // 'continue' '}'
       && lk != 147564              // 'copy' '}'
       && lk != 147565              // 'copy-namespaces' '}'
       && lk != 147566              // 'count' '}'
       && lk != 147567              // 'decimal-format' '}'
       && lk != 147569              // 'declare' '}'
       && lk != 147570              // 'default' '}'
       && lk != 147571              // 'delete' '}'
       && lk != 147572              // 'descendant' '}'
       && lk != 147573              // 'descendant-or-self' '}'
       && lk != 147574              // 'descending' '}'
       && lk != 147579              // 'div' '}'
       && lk != 147580              // 'document' '}'
       && lk != 147581              // 'document-node' '}'
       && lk != 147582              // 'element' '}'
       && lk != 147583              // 'else' '}'
       && lk != 147584              // 'empty' '}'
       && lk != 147585              // 'empty-sequence' '}'
       && lk != 147586              // 'encoding' '}'
       && lk != 147587              // 'end' '}'
       && lk != 147589              // 'eq' '}'
       && lk != 147590              // 'every' '}'
       && lk != 147592              // 'except' '}'
       && lk != 147593              // 'exit' '}'
       && lk != 147594              // 'external' '}'
       && lk != 147595              // 'first' '}'
       && lk != 147596              // 'following' '}'
       && lk != 147597              // 'following-sibling' '}'
       && lk != 147598              // 'for' '}'
       && lk != 147602              // 'ft-option' '}'
       && lk != 147606              // 'function' '}'
       && lk != 147607              // 'ge' '}'
       && lk != 147609              // 'group' '}'
       && lk != 147611              // 'gt' '}'
       && lk != 147612              // 'idiv' '}'
       && lk != 147613              // 'if' '}'
       && lk != 147614              // 'import' '}'
       && lk != 147615              // 'in' '}'
       && lk != 147616              // 'index' '}'
       && lk != 147620              // 'insert' '}'
       && lk != 147621              // 'instance' '}'
       && lk != 147622              // 'integrity' '}'
       && lk != 147623              // 'intersect' '}'
       && lk != 147624              // 'into' '}'
       && lk != 147625              // 'is' '}'
       && lk != 147626              // 'item' '}'
       && lk != 147627              // 'json' '}'
       && lk != 147628              // 'json-item' '}'
       && lk != 147631              // 'last' '}'
       && lk != 147632              // 'lax' '}'
       && lk != 147633              // 'le' '}'
       && lk != 147635              // 'let' '}'
       && lk != 147637              // 'loop' '}'
       && lk != 147639              // 'lt' '}'
       && lk != 147640              // 'map' '}'
       && lk != 147642              // 'mod' '}'
       && lk != 147643              // 'modify' '}'
       && lk != 147644              // 'module' '}'
       && lk != 147646              // 'namespace' '}'
       && lk != 147647              // 'namespace-node' '}'
       && lk != 147648              // 'ne' '}'
       && lk != 147653              // 'node' '}'
       && lk != 147654              // 'nodes' '}'
       && lk != 147656              // 'object' '}'
       && lk != 147660              // 'only' '}'
       && lk != 147661              // 'option' '}'
       && lk != 147662              // 'or' '}'
       && lk != 147663              // 'order' '}'
       && lk != 147664              // 'ordered' '}'
       && lk != 147665              // 'ordering' '}'
       && lk != 147668              // 'parent' '}'
       && lk != 147674              // 'preceding' '}'
       && lk != 147675              // 'preceding-sibling' '}'
       && lk != 147678              // 'processing-instruction' '}'
       && lk != 147680              // 'rename' '}'
       && lk != 147681              // 'replace' '}'
       && lk != 147682              // 'return' '}'
       && lk != 147683              // 'returning' '}'
       && lk != 147684              // 'revalidation' '}'
       && lk != 147686              // 'satisfies' '}'
       && lk != 147687              // 'schema' '}'
       && lk != 147688              // 'schema-attribute' '}'
       && lk != 147689              // 'schema-element' '}'
       && lk != 147690              // 'score' '}'
       && lk != 147691              // 'self' '}'
       && lk != 147696              // 'sliding' '}'
       && lk != 147697              // 'some' '}'
       && lk != 147698              // 'stable' '}'
       && lk != 147699              // 'start' '}'
       && lk != 147702              // 'strict' '}'
       && lk != 147704              // 'structured-item' '}'
       && lk != 147705              // 'switch' '}'
       && lk != 147706              // 'text' '}'
       && lk != 147710              // 'to' '}'
       && lk != 147711              // 'treat' '}'
       && lk != 147712              // 'try' '}'
       && lk != 147713              // 'tumbling' '}'
       && lk != 147714              // 'type' '}'
       && lk != 147715              // 'typeswitch' '}'
       && lk != 147716              // 'union' '}'
       && lk != 147718              // 'unordered' '}'
       && lk != 147719              // 'updating' '}'
       && lk != 147722              // 'validate' '}'
       && lk != 147723              // 'value' '}'
       && lk != 147724              // 'variable' '}'
       && lk != 147725              // 'version' '}'
       && lk != 147728              // 'where' '}'
       && lk != 147729              // 'while' '}'
       && lk != 147732              // 'with' '}'
       && lk != 147736)             // 'xquery' '}'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            memoize(8, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(8, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 54                  // ';'
       && lk != 16652               // 'variable' '$'
       && lk != 27653               // Wildcard ';'
       && lk != 27654               // EQName^Token ';'
       && lk != 27656               // IntegerLiteral ';'
       && lk != 27657               // DecimalLiteral ';'
       && lk != 27658               // DoubleLiteral ';'
       && lk != 27659               // StringLiteral ';'
       && lk != 27693               // '.' ';'
       && lk != 27694               // '..' ';'
       && lk != 27695               // '/' ';'
       && lk != 27723               // 'after' ';'
       && lk != 27725               // 'allowing' ';'
       && lk != 27726               // 'ancestor' ';'
       && lk != 27727               // 'ancestor-or-self' ';'
       && lk != 27728               // 'and' ';'
       && lk != 27730               // 'append' ';'
       && lk != 27731               // 'array' ';'
       && lk != 27732               // 'as' ';'
       && lk != 27733               // 'ascending' ';'
       && lk != 27734               // 'at' ';'
       && lk != 27735               // 'attribute' ';'
       && lk != 27736               // 'base-uri' ';'
       && lk != 27737               // 'before' ';'
       && lk != 27738               // 'boundary-space' ';'
       && lk != 27739               // 'break' ';'
       && lk != 27741               // 'case' ';'
       && lk != 27742               // 'cast' ';'
       && lk != 27743               // 'castable' ';'
       && lk != 27744               // 'catch' ';'
       && lk != 27746               // 'child' ';'
       && lk != 27747               // 'collation' ';'
       && lk != 27749               // 'comment' ';'
       && lk != 27750               // 'constraint' ';'
       && lk != 27751               // 'construction' ';'
       && lk != 27754               // 'context' ';'
       && lk != 27755               // 'continue' ';'
       && lk != 27756               // 'copy' ';'
       && lk != 27757               // 'copy-namespaces' ';'
       && lk != 27758               // 'count' ';'
       && lk != 27759               // 'decimal-format' ';'
       && lk != 27761               // 'declare' ';'
       && lk != 27762               // 'default' ';'
       && lk != 27763               // 'delete' ';'
       && lk != 27764               // 'descendant' ';'
       && lk != 27765               // 'descendant-or-self' ';'
       && lk != 27766               // 'descending' ';'
       && lk != 27771               // 'div' ';'
       && lk != 27772               // 'document' ';'
       && lk != 27773               // 'document-node' ';'
       && lk != 27774               // 'element' ';'
       && lk != 27775               // 'else' ';'
       && lk != 27776               // 'empty' ';'
       && lk != 27777               // 'empty-sequence' ';'
       && lk != 27778               // 'encoding' ';'
       && lk != 27779               // 'end' ';'
       && lk != 27781               // 'eq' ';'
       && lk != 27782               // 'every' ';'
       && lk != 27784               // 'except' ';'
       && lk != 27785               // 'exit' ';'
       && lk != 27786               // 'external' ';'
       && lk != 27787               // 'first' ';'
       && lk != 27788               // 'following' ';'
       && lk != 27789               // 'following-sibling' ';'
       && lk != 27790               // 'for' ';'
       && lk != 27794               // 'ft-option' ';'
       && lk != 27798               // 'function' ';'
       && lk != 27799               // 'ge' ';'
       && lk != 27801               // 'group' ';'
       && lk != 27803               // 'gt' ';'
       && lk != 27804               // 'idiv' ';'
       && lk != 27805               // 'if' ';'
       && lk != 27806               // 'import' ';'
       && lk != 27807               // 'in' ';'
       && lk != 27808               // 'index' ';'
       && lk != 27812               // 'insert' ';'
       && lk != 27813               // 'instance' ';'
       && lk != 27814               // 'integrity' ';'
       && lk != 27815               // 'intersect' ';'
       && lk != 27816               // 'into' ';'
       && lk != 27817               // 'is' ';'
       && lk != 27818               // 'item' ';'
       && lk != 27819               // 'json' ';'
       && lk != 27820               // 'json-item' ';'
       && lk != 27823               // 'last' ';'
       && lk != 27824               // 'lax' ';'
       && lk != 27825               // 'le' ';'
       && lk != 27827               // 'let' ';'
       && lk != 27829               // 'loop' ';'
       && lk != 27831               // 'lt' ';'
       && lk != 27832               // 'map' ';'
       && lk != 27834               // 'mod' ';'
       && lk != 27835               // 'modify' ';'
       && lk != 27836               // 'module' ';'
       && lk != 27838               // 'namespace' ';'
       && lk != 27839               // 'namespace-node' ';'
       && lk != 27840               // 'ne' ';'
       && lk != 27845               // 'node' ';'
       && lk != 27846               // 'nodes' ';'
       && lk != 27848               // 'object' ';'
       && lk != 27852               // 'only' ';'
       && lk != 27853               // 'option' ';'
       && lk != 27854               // 'or' ';'
       && lk != 27855               // 'order' ';'
       && lk != 27856               // 'ordered' ';'
       && lk != 27857               // 'ordering' ';'
       && lk != 27860               // 'parent' ';'
       && lk != 27866               // 'preceding' ';'
       && lk != 27867               // 'preceding-sibling' ';'
       && lk != 27870               // 'processing-instruction' ';'
       && lk != 27872               // 'rename' ';'
       && lk != 27873               // 'replace' ';'
       && lk != 27874               // 'return' ';'
       && lk != 27875               // 'returning' ';'
       && lk != 27876               // 'revalidation' ';'
       && lk != 27878               // 'satisfies' ';'
       && lk != 27879               // 'schema' ';'
       && lk != 27880               // 'schema-attribute' ';'
       && lk != 27881               // 'schema-element' ';'
       && lk != 27882               // 'score' ';'
       && lk != 27883               // 'self' ';'
       && lk != 27888               // 'sliding' ';'
       && lk != 27889               // 'some' ';'
       && lk != 27890               // 'stable' ';'
       && lk != 27891               // 'start' ';'
       && lk != 27894               // 'strict' ';'
       && lk != 27896               // 'structured-item' ';'
       && lk != 27897               // 'switch' ';'
       && lk != 27898               // 'text' ';'
       && lk != 27902               // 'to' ';'
       && lk != 27903               // 'treat' ';'
       && lk != 27904               // 'try' ';'
       && lk != 27905               // 'tumbling' ';'
       && lk != 27906               // 'type' ';'
       && lk != 27907               // 'typeswitch' ';'
       && lk != 27908               // 'union' ';'
       && lk != 27910               // 'unordered' ';'
       && lk != 27911               // 'updating' ';'
       && lk != 27914               // 'validate' ';'
       && lk != 27915               // 'value' ';'
       && lk != 27916               // 'variable' ';'
       && lk != 27917               // 'version' ';'
       && lk != 27920               // 'where' ';'
       && lk != 27921               // 'while' ';'
       && lk != 27924               // 'with' ';'
       && lk != 27928               // 'xquery' ';'
       && lk != 92763               // 'break' 'loop'
       && lk != 92779               // 'continue' 'loop'
       && lk != 116361)             // 'exit' 'returning'
      {
        break;
      }
      try_Statement();
    }
  }

  function parse_StatementsAndExpr()
  {
    eventHandler.startNonterminal("StatementsAndExpr", e0);
    parse_Statements();
    whitespace();
    parse_Expr();
    eventHandler.endNonterminal("StatementsAndExpr", e0);
  }

  function try_StatementsAndExpr()
  {
    try_Statements();
    try_Expr();
  }

  function parse_StatementsAndOptionalExpr()
  {
    eventHandler.startNonterminal("StatementsAndOptionalExpr", e0);
    parse_Statements();
    if (l1 != 26                    // EOF
     && l1 != 288)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    eventHandler.endNonterminal("StatementsAndOptionalExpr", e0);
  }

  function try_StatementsAndOptionalExpr()
  {
    try_Statements();
    if (l1 != 26                    // EOF
     && l1 != 288)                  // '}'
    {
      try_Expr();
    }
  }

  function parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    switch (l1)
    {
    case 137:                       // 'exit'
      lookahead2W(190);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||'
      break;
    case 142:                       // 'for'
      lookahead2W(198);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||'
      break;
    case 179:                       // 'let'
      lookahead2W(193);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||'
      break;
    case 256:                       // 'try'
      lookahead2W(191);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||'
      break;
    case 268:                       // 'variable'
      lookahead2W(188);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 282:                       // '{'
      lookahead2W(285);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      break;
    case 32:                        // '$'
    case 33:                        // '%'
      lookahead2W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      break;
    case 91:                        // 'break'
    case 107:                       // 'continue'
      lookahead2W(189);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||'
      break;
    case 157:                       // 'if'
    case 249:                       // 'switch'
    case 259:                       // 'typeswitch'
    case 273:                       // 'while'
      lookahead2W(186);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 2842                  // '{' Wildcard
     || lk == 3104                  // '$' EQName^Token
     || lk == 3105                  // '%' EQName^Token
     || lk == 3354                  // '{' EQName^Token
     || lk == 4378                  // '{' IntegerLiteral
     || lk == 4890                  // '{' DecimalLiteral
     || lk == 5402                  // '{' DoubleLiteral
     || lk == 5914                  // '{' StringLiteral
     || lk == 16666                 // '{' '$'
     || lk == 17178                 // '{' '%'
     || lk == 18193                 // 'while' '('
     || lk == 18202                 // '{' '('
     || lk == 18714                 // '{' '(#'
     || lk == 21274                 // '{' '+'
     || lk == 22298                 // '{' '-'
     || lk == 23322                 // '{' '.'
     || lk == 23834                 // '{' '..'
     || lk == 24346                 // '{' '/'
     || lk == 24858                 // '{' '//'
     || lk == 27930                 // '{' ';'
     || lk == 28442                 // '{' '<'
     || lk == 28954                 // '{' '<!--'
     || lk == 31002                 // '{' '<?'
     || lk == 34074                 // '{' '?'
     || lk == 35098                 // '{' '@'
     || lk == 36122                 // '{' '['
     || lk == 37658                 // '{' '``['
     || lk == 38432                 // '$' 'after'
     || lk == 38433                 // '%' 'after'
     || lk == 38682                 // '{' 'after'
     || lk == 39456                 // '$' 'allowing'
     || lk == 39457                 // '%' 'allowing'
     || lk == 39706                 // '{' 'allowing'
     || lk == 39968                 // '$' 'ancestor'
     || lk == 39969                 // '%' 'ancestor'
     || lk == 40218                 // '{' 'ancestor'
     || lk == 40480                 // '$' 'ancestor-or-self'
     || lk == 40481                 // '%' 'ancestor-or-self'
     || lk == 40730                 // '{' 'ancestor-or-self'
     || lk == 40992                 // '$' 'and'
     || lk == 40993                 // '%' 'and'
     || lk == 41242                 // '{' 'and'
     || lk == 42016                 // '$' 'append'
     || lk == 42017                 // '%' 'append'
     || lk == 42266                 // '{' 'append'
     || lk == 42528                 // '$' 'array'
     || lk == 42529                 // '%' 'array'
     || lk == 42778                 // '{' 'array'
     || lk == 43040                 // '$' 'as'
     || lk == 43041                 // '%' 'as'
     || lk == 43290                 // '{' 'as'
     || lk == 43552                 // '$' 'ascending'
     || lk == 43553                 // '%' 'ascending'
     || lk == 43802                 // '{' 'ascending'
     || lk == 44064                 // '$' 'at'
     || lk == 44065                 // '%' 'at'
     || lk == 44314                 // '{' 'at'
     || lk == 44576                 // '$' 'attribute'
     || lk == 44577                 // '%' 'attribute'
     || lk == 44826                 // '{' 'attribute'
     || lk == 45088                 // '$' 'base-uri'
     || lk == 45089                 // '%' 'base-uri'
     || lk == 45338                 // '{' 'base-uri'
     || lk == 45600                 // '$' 'before'
     || lk == 45601                 // '%' 'before'
     || lk == 45850                 // '{' 'before'
     || lk == 46112                 // '$' 'boundary-space'
     || lk == 46113                 // '%' 'boundary-space'
     || lk == 46362                 // '{' 'boundary-space'
     || lk == 46624                 // '$' 'break'
     || lk == 46625                 // '%' 'break'
     || lk == 46874                 // '{' 'break'
     || lk == 47648                 // '$' 'case'
     || lk == 47649                 // '%' 'case'
     || lk == 47898                 // '{' 'case'
     || lk == 48160                 // '$' 'cast'
     || lk == 48161                 // '%' 'cast'
     || lk == 48410                 // '{' 'cast'
     || lk == 48672                 // '$' 'castable'
     || lk == 48673                 // '%' 'castable'
     || lk == 48922                 // '{' 'castable'
     || lk == 49184                 // '$' 'catch'
     || lk == 49185                 // '%' 'catch'
     || lk == 49434                 // '{' 'catch'
     || lk == 50208                 // '$' 'child'
     || lk == 50209                 // '%' 'child'
     || lk == 50458                 // '{' 'child'
     || lk == 50720                 // '$' 'collation'
     || lk == 50721                 // '%' 'collation'
     || lk == 50970                 // '{' 'collation'
     || lk == 51744                 // '$' 'comment'
     || lk == 51745                 // '%' 'comment'
     || lk == 51994                 // '{' 'comment'
     || lk == 52256                 // '$' 'constraint'
     || lk == 52257                 // '%' 'constraint'
     || lk == 52506                 // '{' 'constraint'
     || lk == 52768                 // '$' 'construction'
     || lk == 52769                 // '%' 'construction'
     || lk == 53018                 // '{' 'construction'
     || lk == 54304                 // '$' 'context'
     || lk == 54305                 // '%' 'context'
     || lk == 54554                 // '{' 'context'
     || lk == 54816                 // '$' 'continue'
     || lk == 54817                 // '%' 'continue'
     || lk == 55066                 // '{' 'continue'
     || lk == 55328                 // '$' 'copy'
     || lk == 55329                 // '%' 'copy'
     || lk == 55578                 // '{' 'copy'
     || lk == 55840                 // '$' 'copy-namespaces'
     || lk == 55841                 // '%' 'copy-namespaces'
     || lk == 56090                 // '{' 'copy-namespaces'
     || lk == 56352                 // '$' 'count'
     || lk == 56353                 // '%' 'count'
     || lk == 56602                 // '{' 'count'
     || lk == 56864                 // '$' 'decimal-format'
     || lk == 56865                 // '%' 'decimal-format'
     || lk == 57114                 // '{' 'decimal-format'
     || lk == 57888                 // '$' 'declare'
     || lk == 57889                 // '%' 'declare'
     || lk == 58138                 // '{' 'declare'
     || lk == 58400                 // '$' 'default'
     || lk == 58401                 // '%' 'default'
     || lk == 58650                 // '{' 'default'
     || lk == 58912                 // '$' 'delete'
     || lk == 58913                 // '%' 'delete'
     || lk == 59162                 // '{' 'delete'
     || lk == 59424                 // '$' 'descendant'
     || lk == 59425                 // '%' 'descendant'
     || lk == 59674                 // '{' 'descendant'
     || lk == 59936                 // '$' 'descendant-or-self'
     || lk == 59937                 // '%' 'descendant-or-self'
     || lk == 60186                 // '{' 'descendant-or-self'
     || lk == 60448                 // '$' 'descending'
     || lk == 60449                 // '%' 'descending'
     || lk == 60698                 // '{' 'descending'
     || lk == 63008                 // '$' 'div'
     || lk == 63009                 // '%' 'div'
     || lk == 63258                 // '{' 'div'
     || lk == 63520                 // '$' 'document'
     || lk == 63521                 // '%' 'document'
     || lk == 63770                 // '{' 'document'
     || lk == 64032                 // '$' 'document-node'
     || lk == 64033                 // '%' 'document-node'
     || lk == 64282                 // '{' 'document-node'
     || lk == 64544                 // '$' 'element'
     || lk == 64545                 // '%' 'element'
     || lk == 64794                 // '{' 'element'
     || lk == 65056                 // '$' 'else'
     || lk == 65057                 // '%' 'else'
     || lk == 65306                 // '{' 'else'
     || lk == 65568                 // '$' 'empty'
     || lk == 65569                 // '%' 'empty'
     || lk == 65818                 // '{' 'empty'
     || lk == 66080                 // '$' 'empty-sequence'
     || lk == 66081                 // '%' 'empty-sequence'
     || lk == 66330                 // '{' 'empty-sequence'
     || lk == 66592                 // '$' 'encoding'
     || lk == 66593                 // '%' 'encoding'
     || lk == 66842                 // '{' 'encoding'
     || lk == 67104                 // '$' 'end'
     || lk == 67105                 // '%' 'end'
     || lk == 67354                 // '{' 'end'
     || lk == 68128                 // '$' 'eq'
     || lk == 68129                 // '%' 'eq'
     || lk == 68378                 // '{' 'eq'
     || lk == 68640                 // '$' 'every'
     || lk == 68641                 // '%' 'every'
     || lk == 68890                 // '{' 'every'
     || lk == 69664                 // '$' 'except'
     || lk == 69665                 // '%' 'except'
     || lk == 69914                 // '{' 'except'
     || lk == 70176                 // '$' 'exit'
     || lk == 70177                 // '%' 'exit'
     || lk == 70426                 // '{' 'exit'
     || lk == 70688                 // '$' 'external'
     || lk == 70689                 // '%' 'external'
     || lk == 70938                 // '{' 'external'
     || lk == 71200                 // '$' 'first'
     || lk == 71201                 // '%' 'first'
     || lk == 71450                 // '{' 'first'
     || lk == 71712                 // '$' 'following'
     || lk == 71713                 // '%' 'following'
     || lk == 71962                 // '{' 'following'
     || lk == 72224                 // '$' 'following-sibling'
     || lk == 72225                 // '%' 'following-sibling'
     || lk == 72474                 // '{' 'following-sibling'
     || lk == 72736                 // '$' 'for'
     || lk == 72737                 // '%' 'for'
     || lk == 72986                 // '{' 'for'
     || lk == 74784                 // '$' 'ft-option'
     || lk == 74785                 // '%' 'ft-option'
     || lk == 75034                 // '{' 'ft-option'
     || lk == 76832                 // '$' 'function'
     || lk == 76833                 // '%' 'function'
     || lk == 77082                 // '{' 'function'
     || lk == 77344                 // '$' 'ge'
     || lk == 77345                 // '%' 'ge'
     || lk == 77594                 // '{' 'ge'
     || lk == 78368                 // '$' 'group'
     || lk == 78369                 // '%' 'group'
     || lk == 78618                 // '{' 'group'
     || lk == 79392                 // '$' 'gt'
     || lk == 79393                 // '%' 'gt'
     || lk == 79642                 // '{' 'gt'
     || lk == 79904                 // '$' 'idiv'
     || lk == 79905                 // '%' 'idiv'
     || lk == 80154                 // '{' 'idiv'
     || lk == 80416                 // '$' 'if'
     || lk == 80417                 // '%' 'if'
     || lk == 80666                 // '{' 'if'
     || lk == 80928                 // '$' 'import'
     || lk == 80929                 // '%' 'import'
     || lk == 81178                 // '{' 'import'
     || lk == 81440                 // '$' 'in'
     || lk == 81441                 // '%' 'in'
     || lk == 81690                 // '{' 'in'
     || lk == 81952                 // '$' 'index'
     || lk == 81953                 // '%' 'index'
     || lk == 82202                 // '{' 'index'
     || lk == 84000                 // '$' 'insert'
     || lk == 84001                 // '%' 'insert'
     || lk == 84250                 // '{' 'insert'
     || lk == 84512                 // '$' 'instance'
     || lk == 84513                 // '%' 'instance'
     || lk == 84762                 // '{' 'instance'
     || lk == 85024                 // '$' 'integrity'
     || lk == 85025                 // '%' 'integrity'
     || lk == 85274                 // '{' 'integrity'
     || lk == 85536                 // '$' 'intersect'
     || lk == 85537                 // '%' 'intersect'
     || lk == 85786                 // '{' 'intersect'
     || lk == 86048                 // '$' 'into'
     || lk == 86049                 // '%' 'into'
     || lk == 86298                 // '{' 'into'
     || lk == 86560                 // '$' 'is'
     || lk == 86561                 // '%' 'is'
     || lk == 86810                 // '{' 'is'
     || lk == 87072                 // '$' 'item'
     || lk == 87073                 // '%' 'item'
     || lk == 87322                 // '{' 'item'
     || lk == 87584                 // '$' 'json'
     || lk == 87585                 // '%' 'json'
     || lk == 87834                 // '{' 'json'
     || lk == 88096                 // '$' 'json-item'
     || lk == 88097                 // '%' 'json-item'
     || lk == 88346                 // '{' 'json-item'
     || lk == 89632                 // '$' 'last'
     || lk == 89633                 // '%' 'last'
     || lk == 89882                 // '{' 'last'
     || lk == 90144                 // '$' 'lax'
     || lk == 90145                 // '%' 'lax'
     || lk == 90394                 // '{' 'lax'
     || lk == 90656                 // '$' 'le'
     || lk == 90657                 // '%' 'le'
     || lk == 90906                 // '{' 'le'
     || lk == 91680                 // '$' 'let'
     || lk == 91681                 // '%' 'let'
     || lk == 91930                 // '{' 'let'
     || lk == 92704                 // '$' 'loop'
     || lk == 92705                 // '%' 'loop'
     || lk == 92954                 // '{' 'loop'
     || lk == 93728                 // '$' 'lt'
     || lk == 93729                 // '%' 'lt'
     || lk == 93978                 // '{' 'lt'
     || lk == 94240                 // '$' 'map'
     || lk == 94241                 // '%' 'map'
     || lk == 94490                 // '{' 'map'
     || lk == 95264                 // '$' 'mod'
     || lk == 95265                 // '%' 'mod'
     || lk == 95514                 // '{' 'mod'
     || lk == 95776                 // '$' 'modify'
     || lk == 95777                 // '%' 'modify'
     || lk == 96026                 // '{' 'modify'
     || lk == 96288                 // '$' 'module'
     || lk == 96289                 // '%' 'module'
     || lk == 96538                 // '{' 'module'
     || lk == 97312                 // '$' 'namespace'
     || lk == 97313                 // '%' 'namespace'
     || lk == 97562                 // '{' 'namespace'
     || lk == 97824                 // '$' 'namespace-node'
     || lk == 97825                 // '%' 'namespace-node'
     || lk == 98074                 // '{' 'namespace-node'
     || lk == 98336                 // '$' 'ne'
     || lk == 98337                 // '%' 'ne'
     || lk == 98586                 // '{' 'ne'
     || lk == 100896                // '$' 'node'
     || lk == 100897                // '%' 'node'
     || lk == 101146                // '{' 'node'
     || lk == 101408                // '$' 'nodes'
     || lk == 101409                // '%' 'nodes'
     || lk == 101658                // '{' 'nodes'
     || lk == 102432                // '$' 'object'
     || lk == 102433                // '%' 'object'
     || lk == 102682                // '{' 'object'
     || lk == 104480                // '$' 'only'
     || lk == 104481                // '%' 'only'
     || lk == 104730                // '{' 'only'
     || lk == 104992                // '$' 'option'
     || lk == 104993                // '%' 'option'
     || lk == 105242                // '{' 'option'
     || lk == 105504                // '$' 'or'
     || lk == 105505                // '%' 'or'
     || lk == 105754                // '{' 'or'
     || lk == 106016                // '$' 'order'
     || lk == 106017                // '%' 'order'
     || lk == 106266                // '{' 'order'
     || lk == 106528                // '$' 'ordered'
     || lk == 106529                // '%' 'ordered'
     || lk == 106778                // '{' 'ordered'
     || lk == 107040                // '$' 'ordering'
     || lk == 107041                // '%' 'ordering'
     || lk == 107290                // '{' 'ordering'
     || lk == 108576                // '$' 'parent'
     || lk == 108577                // '%' 'parent'
     || lk == 108826                // '{' 'parent'
     || lk == 111648                // '$' 'preceding'
     || lk == 111649                // '%' 'preceding'
     || lk == 111898                // '{' 'preceding'
     || lk == 112160                // '$' 'preceding-sibling'
     || lk == 112161                // '%' 'preceding-sibling'
     || lk == 112410                // '{' 'preceding-sibling'
     || lk == 113696                // '$' 'processing-instruction'
     || lk == 113697                // '%' 'processing-instruction'
     || lk == 113946                // '{' 'processing-instruction'
     || lk == 114720                // '$' 'rename'
     || lk == 114721                // '%' 'rename'
     || lk == 114970                // '{' 'rename'
     || lk == 115232                // '$' 'replace'
     || lk == 115233                // '%' 'replace'
     || lk == 115482                // '{' 'replace'
     || lk == 115744                // '$' 'return'
     || lk == 115745                // '%' 'return'
     || lk == 115994                // '{' 'return'
     || lk == 116256                // '$' 'returning'
     || lk == 116257                // '%' 'returning'
     || lk == 116506                // '{' 'returning'
     || lk == 116768                // '$' 'revalidation'
     || lk == 116769                // '%' 'revalidation'
     || lk == 117018                // '{' 'revalidation'
     || lk == 117792                // '$' 'satisfies'
     || lk == 117793                // '%' 'satisfies'
     || lk == 118042                // '{' 'satisfies'
     || lk == 118304                // '$' 'schema'
     || lk == 118305                // '%' 'schema'
     || lk == 118554                // '{' 'schema'
     || lk == 118816                // '$' 'schema-attribute'
     || lk == 118817                // '%' 'schema-attribute'
     || lk == 119066                // '{' 'schema-attribute'
     || lk == 119328                // '$' 'schema-element'
     || lk == 119329                // '%' 'schema-element'
     || lk == 119578                // '{' 'schema-element'
     || lk == 119840                // '$' 'score'
     || lk == 119841                // '%' 'score'
     || lk == 120090                // '{' 'score'
     || lk == 120352                // '$' 'self'
     || lk == 120353                // '%' 'self'
     || lk == 120602                // '{' 'self'
     || lk == 122912                // '$' 'sliding'
     || lk == 122913                // '%' 'sliding'
     || lk == 123162                // '{' 'sliding'
     || lk == 123424                // '$' 'some'
     || lk == 123425                // '%' 'some'
     || lk == 123674                // '{' 'some'
     || lk == 123936                // '$' 'stable'
     || lk == 123937                // '%' 'stable'
     || lk == 124186                // '{' 'stable'
     || lk == 124448                // '$' 'start'
     || lk == 124449                // '%' 'start'
     || lk == 124698                // '{' 'start'
     || lk == 125984                // '$' 'strict'
     || lk == 125985                // '%' 'strict'
     || lk == 126234                // '{' 'strict'
     || lk == 127008                // '$' 'structured-item'
     || lk == 127009                // '%' 'structured-item'
     || lk == 127258                // '{' 'structured-item'
     || lk == 127520                // '$' 'switch'
     || lk == 127521                // '%' 'switch'
     || lk == 127770                // '{' 'switch'
     || lk == 128032                // '$' 'text'
     || lk == 128033                // '%' 'text'
     || lk == 128282                // '{' 'text'
     || lk == 130080                // '$' 'to'
     || lk == 130081                // '%' 'to'
     || lk == 130330                // '{' 'to'
     || lk == 130592                // '$' 'treat'
     || lk == 130593                // '%' 'treat'
     || lk == 130842                // '{' 'treat'
     || lk == 131104                // '$' 'try'
     || lk == 131105                // '%' 'try'
     || lk == 131354                // '{' 'try'
     || lk == 131616                // '$' 'tumbling'
     || lk == 131617                // '%' 'tumbling'
     || lk == 131866                // '{' 'tumbling'
     || lk == 132128                // '$' 'type'
     || lk == 132129                // '%' 'type'
     || lk == 132378                // '{' 'type'
     || lk == 132640                // '$' 'typeswitch'
     || lk == 132641                // '%' 'typeswitch'
     || lk == 132890                // '{' 'typeswitch'
     || lk == 133152                // '$' 'union'
     || lk == 133153                // '%' 'union'
     || lk == 133402                // '{' 'union'
     || lk == 134176                // '$' 'unordered'
     || lk == 134177                // '%' 'unordered'
     || lk == 134426                // '{' 'unordered'
     || lk == 134688                // '$' 'updating'
     || lk == 134689                // '%' 'updating'
     || lk == 134938                // '{' 'updating'
     || lk == 136224                // '$' 'validate'
     || lk == 136225                // '%' 'validate'
     || lk == 136474                // '{' 'validate'
     || lk == 136736                // '$' 'value'
     || lk == 136737                // '%' 'value'
     || lk == 136986                // '{' 'value'
     || lk == 137248                // '$' 'variable'
     || lk == 137249                // '%' 'variable'
     || lk == 137498                // '{' 'variable'
     || lk == 137760                // '$' 'version'
     || lk == 137761                // '%' 'version'
     || lk == 138010                // '{' 'version'
     || lk == 139296                // '$' 'where'
     || lk == 139297                // '%' 'where'
     || lk == 139546                // '{' 'where'
     || lk == 139808                // '$' 'while'
     || lk == 139809                // '%' 'while'
     || lk == 140058                // '{' 'while'
     || lk == 141344                // '$' 'with'
     || lk == 141345                // '%' 'with'
     || lk == 141594                // '{' 'with'
     || lk == 143392                // '$' 'xquery'
     || lk == 143393                // '%' 'xquery'
     || lk == 143642                // '{' 'xquery'
     || lk == 144666                // '{' '{'
     || lk == 145690                // '{' '{|'
     || lk == 147738)               // '{' '}'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                lk = -12;
              }
              catch (p12A)
              {
                lk = -13;
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      parse_AssignStatement();
      break;
    case -3:
      parse_BlockStatement();
      break;
    case 92763:                     // 'break' 'loop'
      parse_BreakStatement();
      break;
    case 92779:                     // 'continue' 'loop'
      parse_ContinueStatement();
      break;
    case 116361:                    // 'exit' 'returning'
      parse_ExitStatement();
      break;
    case 16526:                     // 'for' '$'
    case 16563:                     // 'let' '$'
    case 119987:                    // 'let' 'score'
    case 123022:                    // 'for' 'sliding'
    case 131726:                    // 'for' 'tumbling'
      parse_FLWORStatement();
      break;
    case 18077:                     // 'if' '('
      parse_IfStatement();
      break;
    case 18169:                     // 'switch' '('
      parse_SwitchStatement();
      break;
    case 144640:                    // 'try' '{'
      parse_TryCatchStatement();
      break;
    case 18179:                     // 'typeswitch' '('
      parse_TypeswitchStatement();
      break;
    case -12:
    case 16652:                     // 'variable' '$'
      parse_VarDeclStatement();
      break;
    case -13:
      parse_WhileStatement();
      break;
    case 54:                        // ';'
      parse_VoidStatement();
      break;
    default:
      parse_ApplyStatement();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  function try_Statement()
  {
    switch (l1)
    {
    case 137:                       // 'exit'
      lookahead2W(190);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||'
      break;
    case 142:                       // 'for'
      lookahead2W(198);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||'
      break;
    case 179:                       // 'let'
      lookahead2W(193);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||'
      break;
    case 256:                       // 'try'
      lookahead2W(191);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||'
      break;
    case 268:                       // 'variable'
      lookahead2W(188);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 282:                       // '{'
      lookahead2W(285);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      break;
    case 32:                        // '$'
    case 33:                        // '%'
      lookahead2W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      break;
    case 91:                        // 'break'
    case 107:                       // 'continue'
      lookahead2W(189);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||'
      break;
    case 157:                       // 'if'
    case 249:                       // 'switch'
    case 259:                       // 'typeswitch'
    case 273:                       // 'while'
      lookahead2W(186);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 2842                  // '{' Wildcard
     || lk == 3104                  // '$' EQName^Token
     || lk == 3105                  // '%' EQName^Token
     || lk == 3354                  // '{' EQName^Token
     || lk == 4378                  // '{' IntegerLiteral
     || lk == 4890                  // '{' DecimalLiteral
     || lk == 5402                  // '{' DoubleLiteral
     || lk == 5914                  // '{' StringLiteral
     || lk == 16666                 // '{' '$'
     || lk == 17178                 // '{' '%'
     || lk == 18193                 // 'while' '('
     || lk == 18202                 // '{' '('
     || lk == 18714                 // '{' '(#'
     || lk == 21274                 // '{' '+'
     || lk == 22298                 // '{' '-'
     || lk == 23322                 // '{' '.'
     || lk == 23834                 // '{' '..'
     || lk == 24346                 // '{' '/'
     || lk == 24858                 // '{' '//'
     || lk == 27930                 // '{' ';'
     || lk == 28442                 // '{' '<'
     || lk == 28954                 // '{' '<!--'
     || lk == 31002                 // '{' '<?'
     || lk == 34074                 // '{' '?'
     || lk == 35098                 // '{' '@'
     || lk == 36122                 // '{' '['
     || lk == 37658                 // '{' '``['
     || lk == 38432                 // '$' 'after'
     || lk == 38433                 // '%' 'after'
     || lk == 38682                 // '{' 'after'
     || lk == 39456                 // '$' 'allowing'
     || lk == 39457                 // '%' 'allowing'
     || lk == 39706                 // '{' 'allowing'
     || lk == 39968                 // '$' 'ancestor'
     || lk == 39969                 // '%' 'ancestor'
     || lk == 40218                 // '{' 'ancestor'
     || lk == 40480                 // '$' 'ancestor-or-self'
     || lk == 40481                 // '%' 'ancestor-or-self'
     || lk == 40730                 // '{' 'ancestor-or-self'
     || lk == 40992                 // '$' 'and'
     || lk == 40993                 // '%' 'and'
     || lk == 41242                 // '{' 'and'
     || lk == 42016                 // '$' 'append'
     || lk == 42017                 // '%' 'append'
     || lk == 42266                 // '{' 'append'
     || lk == 42528                 // '$' 'array'
     || lk == 42529                 // '%' 'array'
     || lk == 42778                 // '{' 'array'
     || lk == 43040                 // '$' 'as'
     || lk == 43041                 // '%' 'as'
     || lk == 43290                 // '{' 'as'
     || lk == 43552                 // '$' 'ascending'
     || lk == 43553                 // '%' 'ascending'
     || lk == 43802                 // '{' 'ascending'
     || lk == 44064                 // '$' 'at'
     || lk == 44065                 // '%' 'at'
     || lk == 44314                 // '{' 'at'
     || lk == 44576                 // '$' 'attribute'
     || lk == 44577                 // '%' 'attribute'
     || lk == 44826                 // '{' 'attribute'
     || lk == 45088                 // '$' 'base-uri'
     || lk == 45089                 // '%' 'base-uri'
     || lk == 45338                 // '{' 'base-uri'
     || lk == 45600                 // '$' 'before'
     || lk == 45601                 // '%' 'before'
     || lk == 45850                 // '{' 'before'
     || lk == 46112                 // '$' 'boundary-space'
     || lk == 46113                 // '%' 'boundary-space'
     || lk == 46362                 // '{' 'boundary-space'
     || lk == 46624                 // '$' 'break'
     || lk == 46625                 // '%' 'break'
     || lk == 46874                 // '{' 'break'
     || lk == 47648                 // '$' 'case'
     || lk == 47649                 // '%' 'case'
     || lk == 47898                 // '{' 'case'
     || lk == 48160                 // '$' 'cast'
     || lk == 48161                 // '%' 'cast'
     || lk == 48410                 // '{' 'cast'
     || lk == 48672                 // '$' 'castable'
     || lk == 48673                 // '%' 'castable'
     || lk == 48922                 // '{' 'castable'
     || lk == 49184                 // '$' 'catch'
     || lk == 49185                 // '%' 'catch'
     || lk == 49434                 // '{' 'catch'
     || lk == 50208                 // '$' 'child'
     || lk == 50209                 // '%' 'child'
     || lk == 50458                 // '{' 'child'
     || lk == 50720                 // '$' 'collation'
     || lk == 50721                 // '%' 'collation'
     || lk == 50970                 // '{' 'collation'
     || lk == 51744                 // '$' 'comment'
     || lk == 51745                 // '%' 'comment'
     || lk == 51994                 // '{' 'comment'
     || lk == 52256                 // '$' 'constraint'
     || lk == 52257                 // '%' 'constraint'
     || lk == 52506                 // '{' 'constraint'
     || lk == 52768                 // '$' 'construction'
     || lk == 52769                 // '%' 'construction'
     || lk == 53018                 // '{' 'construction'
     || lk == 54304                 // '$' 'context'
     || lk == 54305                 // '%' 'context'
     || lk == 54554                 // '{' 'context'
     || lk == 54816                 // '$' 'continue'
     || lk == 54817                 // '%' 'continue'
     || lk == 55066                 // '{' 'continue'
     || lk == 55328                 // '$' 'copy'
     || lk == 55329                 // '%' 'copy'
     || lk == 55578                 // '{' 'copy'
     || lk == 55840                 // '$' 'copy-namespaces'
     || lk == 55841                 // '%' 'copy-namespaces'
     || lk == 56090                 // '{' 'copy-namespaces'
     || lk == 56352                 // '$' 'count'
     || lk == 56353                 // '%' 'count'
     || lk == 56602                 // '{' 'count'
     || lk == 56864                 // '$' 'decimal-format'
     || lk == 56865                 // '%' 'decimal-format'
     || lk == 57114                 // '{' 'decimal-format'
     || lk == 57888                 // '$' 'declare'
     || lk == 57889                 // '%' 'declare'
     || lk == 58138                 // '{' 'declare'
     || lk == 58400                 // '$' 'default'
     || lk == 58401                 // '%' 'default'
     || lk == 58650                 // '{' 'default'
     || lk == 58912                 // '$' 'delete'
     || lk == 58913                 // '%' 'delete'
     || lk == 59162                 // '{' 'delete'
     || lk == 59424                 // '$' 'descendant'
     || lk == 59425                 // '%' 'descendant'
     || lk == 59674                 // '{' 'descendant'
     || lk == 59936                 // '$' 'descendant-or-self'
     || lk == 59937                 // '%' 'descendant-or-self'
     || lk == 60186                 // '{' 'descendant-or-self'
     || lk == 60448                 // '$' 'descending'
     || lk == 60449                 // '%' 'descending'
     || lk == 60698                 // '{' 'descending'
     || lk == 63008                 // '$' 'div'
     || lk == 63009                 // '%' 'div'
     || lk == 63258                 // '{' 'div'
     || lk == 63520                 // '$' 'document'
     || lk == 63521                 // '%' 'document'
     || lk == 63770                 // '{' 'document'
     || lk == 64032                 // '$' 'document-node'
     || lk == 64033                 // '%' 'document-node'
     || lk == 64282                 // '{' 'document-node'
     || lk == 64544                 // '$' 'element'
     || lk == 64545                 // '%' 'element'
     || lk == 64794                 // '{' 'element'
     || lk == 65056                 // '$' 'else'
     || lk == 65057                 // '%' 'else'
     || lk == 65306                 // '{' 'else'
     || lk == 65568                 // '$' 'empty'
     || lk == 65569                 // '%' 'empty'
     || lk == 65818                 // '{' 'empty'
     || lk == 66080                 // '$' 'empty-sequence'
     || lk == 66081                 // '%' 'empty-sequence'
     || lk == 66330                 // '{' 'empty-sequence'
     || lk == 66592                 // '$' 'encoding'
     || lk == 66593                 // '%' 'encoding'
     || lk == 66842                 // '{' 'encoding'
     || lk == 67104                 // '$' 'end'
     || lk == 67105                 // '%' 'end'
     || lk == 67354                 // '{' 'end'
     || lk == 68128                 // '$' 'eq'
     || lk == 68129                 // '%' 'eq'
     || lk == 68378                 // '{' 'eq'
     || lk == 68640                 // '$' 'every'
     || lk == 68641                 // '%' 'every'
     || lk == 68890                 // '{' 'every'
     || lk == 69664                 // '$' 'except'
     || lk == 69665                 // '%' 'except'
     || lk == 69914                 // '{' 'except'
     || lk == 70176                 // '$' 'exit'
     || lk == 70177                 // '%' 'exit'
     || lk == 70426                 // '{' 'exit'
     || lk == 70688                 // '$' 'external'
     || lk == 70689                 // '%' 'external'
     || lk == 70938                 // '{' 'external'
     || lk == 71200                 // '$' 'first'
     || lk == 71201                 // '%' 'first'
     || lk == 71450                 // '{' 'first'
     || lk == 71712                 // '$' 'following'
     || lk == 71713                 // '%' 'following'
     || lk == 71962                 // '{' 'following'
     || lk == 72224                 // '$' 'following-sibling'
     || lk == 72225                 // '%' 'following-sibling'
     || lk == 72474                 // '{' 'following-sibling'
     || lk == 72736                 // '$' 'for'
     || lk == 72737                 // '%' 'for'
     || lk == 72986                 // '{' 'for'
     || lk == 74784                 // '$' 'ft-option'
     || lk == 74785                 // '%' 'ft-option'
     || lk == 75034                 // '{' 'ft-option'
     || lk == 76832                 // '$' 'function'
     || lk == 76833                 // '%' 'function'
     || lk == 77082                 // '{' 'function'
     || lk == 77344                 // '$' 'ge'
     || lk == 77345                 // '%' 'ge'
     || lk == 77594                 // '{' 'ge'
     || lk == 78368                 // '$' 'group'
     || lk == 78369                 // '%' 'group'
     || lk == 78618                 // '{' 'group'
     || lk == 79392                 // '$' 'gt'
     || lk == 79393                 // '%' 'gt'
     || lk == 79642                 // '{' 'gt'
     || lk == 79904                 // '$' 'idiv'
     || lk == 79905                 // '%' 'idiv'
     || lk == 80154                 // '{' 'idiv'
     || lk == 80416                 // '$' 'if'
     || lk == 80417                 // '%' 'if'
     || lk == 80666                 // '{' 'if'
     || lk == 80928                 // '$' 'import'
     || lk == 80929                 // '%' 'import'
     || lk == 81178                 // '{' 'import'
     || lk == 81440                 // '$' 'in'
     || lk == 81441                 // '%' 'in'
     || lk == 81690                 // '{' 'in'
     || lk == 81952                 // '$' 'index'
     || lk == 81953                 // '%' 'index'
     || lk == 82202                 // '{' 'index'
     || lk == 84000                 // '$' 'insert'
     || lk == 84001                 // '%' 'insert'
     || lk == 84250                 // '{' 'insert'
     || lk == 84512                 // '$' 'instance'
     || lk == 84513                 // '%' 'instance'
     || lk == 84762                 // '{' 'instance'
     || lk == 85024                 // '$' 'integrity'
     || lk == 85025                 // '%' 'integrity'
     || lk == 85274                 // '{' 'integrity'
     || lk == 85536                 // '$' 'intersect'
     || lk == 85537                 // '%' 'intersect'
     || lk == 85786                 // '{' 'intersect'
     || lk == 86048                 // '$' 'into'
     || lk == 86049                 // '%' 'into'
     || lk == 86298                 // '{' 'into'
     || lk == 86560                 // '$' 'is'
     || lk == 86561                 // '%' 'is'
     || lk == 86810                 // '{' 'is'
     || lk == 87072                 // '$' 'item'
     || lk == 87073                 // '%' 'item'
     || lk == 87322                 // '{' 'item'
     || lk == 87584                 // '$' 'json'
     || lk == 87585                 // '%' 'json'
     || lk == 87834                 // '{' 'json'
     || lk == 88096                 // '$' 'json-item'
     || lk == 88097                 // '%' 'json-item'
     || lk == 88346                 // '{' 'json-item'
     || lk == 89632                 // '$' 'last'
     || lk == 89633                 // '%' 'last'
     || lk == 89882                 // '{' 'last'
     || lk == 90144                 // '$' 'lax'
     || lk == 90145                 // '%' 'lax'
     || lk == 90394                 // '{' 'lax'
     || lk == 90656                 // '$' 'le'
     || lk == 90657                 // '%' 'le'
     || lk == 90906                 // '{' 'le'
     || lk == 91680                 // '$' 'let'
     || lk == 91681                 // '%' 'let'
     || lk == 91930                 // '{' 'let'
     || lk == 92704                 // '$' 'loop'
     || lk == 92705                 // '%' 'loop'
     || lk == 92954                 // '{' 'loop'
     || lk == 93728                 // '$' 'lt'
     || lk == 93729                 // '%' 'lt'
     || lk == 93978                 // '{' 'lt'
     || lk == 94240                 // '$' 'map'
     || lk == 94241                 // '%' 'map'
     || lk == 94490                 // '{' 'map'
     || lk == 95264                 // '$' 'mod'
     || lk == 95265                 // '%' 'mod'
     || lk == 95514                 // '{' 'mod'
     || lk == 95776                 // '$' 'modify'
     || lk == 95777                 // '%' 'modify'
     || lk == 96026                 // '{' 'modify'
     || lk == 96288                 // '$' 'module'
     || lk == 96289                 // '%' 'module'
     || lk == 96538                 // '{' 'module'
     || lk == 97312                 // '$' 'namespace'
     || lk == 97313                 // '%' 'namespace'
     || lk == 97562                 // '{' 'namespace'
     || lk == 97824                 // '$' 'namespace-node'
     || lk == 97825                 // '%' 'namespace-node'
     || lk == 98074                 // '{' 'namespace-node'
     || lk == 98336                 // '$' 'ne'
     || lk == 98337                 // '%' 'ne'
     || lk == 98586                 // '{' 'ne'
     || lk == 100896                // '$' 'node'
     || lk == 100897                // '%' 'node'
     || lk == 101146                // '{' 'node'
     || lk == 101408                // '$' 'nodes'
     || lk == 101409                // '%' 'nodes'
     || lk == 101658                // '{' 'nodes'
     || lk == 102432                // '$' 'object'
     || lk == 102433                // '%' 'object'
     || lk == 102682                // '{' 'object'
     || lk == 104480                // '$' 'only'
     || lk == 104481                // '%' 'only'
     || lk == 104730                // '{' 'only'
     || lk == 104992                // '$' 'option'
     || lk == 104993                // '%' 'option'
     || lk == 105242                // '{' 'option'
     || lk == 105504                // '$' 'or'
     || lk == 105505                // '%' 'or'
     || lk == 105754                // '{' 'or'
     || lk == 106016                // '$' 'order'
     || lk == 106017                // '%' 'order'
     || lk == 106266                // '{' 'order'
     || lk == 106528                // '$' 'ordered'
     || lk == 106529                // '%' 'ordered'
     || lk == 106778                // '{' 'ordered'
     || lk == 107040                // '$' 'ordering'
     || lk == 107041                // '%' 'ordering'
     || lk == 107290                // '{' 'ordering'
     || lk == 108576                // '$' 'parent'
     || lk == 108577                // '%' 'parent'
     || lk == 108826                // '{' 'parent'
     || lk == 111648                // '$' 'preceding'
     || lk == 111649                // '%' 'preceding'
     || lk == 111898                // '{' 'preceding'
     || lk == 112160                // '$' 'preceding-sibling'
     || lk == 112161                // '%' 'preceding-sibling'
     || lk == 112410                // '{' 'preceding-sibling'
     || lk == 113696                // '$' 'processing-instruction'
     || lk == 113697                // '%' 'processing-instruction'
     || lk == 113946                // '{' 'processing-instruction'
     || lk == 114720                // '$' 'rename'
     || lk == 114721                // '%' 'rename'
     || lk == 114970                // '{' 'rename'
     || lk == 115232                // '$' 'replace'
     || lk == 115233                // '%' 'replace'
     || lk == 115482                // '{' 'replace'
     || lk == 115744                // '$' 'return'
     || lk == 115745                // '%' 'return'
     || lk == 115994                // '{' 'return'
     || lk == 116256                // '$' 'returning'
     || lk == 116257                // '%' 'returning'
     || lk == 116506                // '{' 'returning'
     || lk == 116768                // '$' 'revalidation'
     || lk == 116769                // '%' 'revalidation'
     || lk == 117018                // '{' 'revalidation'
     || lk == 117792                // '$' 'satisfies'
     || lk == 117793                // '%' 'satisfies'
     || lk == 118042                // '{' 'satisfies'
     || lk == 118304                // '$' 'schema'
     || lk == 118305                // '%' 'schema'
     || lk == 118554                // '{' 'schema'
     || lk == 118816                // '$' 'schema-attribute'
     || lk == 118817                // '%' 'schema-attribute'
     || lk == 119066                // '{' 'schema-attribute'
     || lk == 119328                // '$' 'schema-element'
     || lk == 119329                // '%' 'schema-element'
     || lk == 119578                // '{' 'schema-element'
     || lk == 119840                // '$' 'score'
     || lk == 119841                // '%' 'score'
     || lk == 120090                // '{' 'score'
     || lk == 120352                // '$' 'self'
     || lk == 120353                // '%' 'self'
     || lk == 120602                // '{' 'self'
     || lk == 122912                // '$' 'sliding'
     || lk == 122913                // '%' 'sliding'
     || lk == 123162                // '{' 'sliding'
     || lk == 123424                // '$' 'some'
     || lk == 123425                // '%' 'some'
     || lk == 123674                // '{' 'some'
     || lk == 123936                // '$' 'stable'
     || lk == 123937                // '%' 'stable'
     || lk == 124186                // '{' 'stable'
     || lk == 124448                // '$' 'start'
     || lk == 124449                // '%' 'start'
     || lk == 124698                // '{' 'start'
     || lk == 125984                // '$' 'strict'
     || lk == 125985                // '%' 'strict'
     || lk == 126234                // '{' 'strict'
     || lk == 127008                // '$' 'structured-item'
     || lk == 127009                // '%' 'structured-item'
     || lk == 127258                // '{' 'structured-item'
     || lk == 127520                // '$' 'switch'
     || lk == 127521                // '%' 'switch'
     || lk == 127770                // '{' 'switch'
     || lk == 128032                // '$' 'text'
     || lk == 128033                // '%' 'text'
     || lk == 128282                // '{' 'text'
     || lk == 130080                // '$' 'to'
     || lk == 130081                // '%' 'to'
     || lk == 130330                // '{' 'to'
     || lk == 130592                // '$' 'treat'
     || lk == 130593                // '%' 'treat'
     || lk == 130842                // '{' 'treat'
     || lk == 131104                // '$' 'try'
     || lk == 131105                // '%' 'try'
     || lk == 131354                // '{' 'try'
     || lk == 131616                // '$' 'tumbling'
     || lk == 131617                // '%' 'tumbling'
     || lk == 131866                // '{' 'tumbling'
     || lk == 132128                // '$' 'type'
     || lk == 132129                // '%' 'type'
     || lk == 132378                // '{' 'type'
     || lk == 132640                // '$' 'typeswitch'
     || lk == 132641                // '%' 'typeswitch'
     || lk == 132890                // '{' 'typeswitch'
     || lk == 133152                // '$' 'union'
     || lk == 133153                // '%' 'union'
     || lk == 133402                // '{' 'union'
     || lk == 134176                // '$' 'unordered'
     || lk == 134177                // '%' 'unordered'
     || lk == 134426                // '{' 'unordered'
     || lk == 134688                // '$' 'updating'
     || lk == 134689                // '%' 'updating'
     || lk == 134938                // '{' 'updating'
     || lk == 136224                // '$' 'validate'
     || lk == 136225                // '%' 'validate'
     || lk == 136474                // '{' 'validate'
     || lk == 136736                // '$' 'value'
     || lk == 136737                // '%' 'value'
     || lk == 136986                // '{' 'value'
     || lk == 137248                // '$' 'variable'
     || lk == 137249                // '%' 'variable'
     || lk == 137498                // '{' 'variable'
     || lk == 137760                // '$' 'version'
     || lk == 137761                // '%' 'version'
     || lk == 138010                // '{' 'version'
     || lk == 139296                // '$' 'where'
     || lk == 139297                // '%' 'where'
     || lk == 139546                // '{' 'where'
     || lk == 139808                // '$' 'while'
     || lk == 139809                // '%' 'while'
     || lk == 140058                // '{' 'while'
     || lk == 141344                // '$' 'with'
     || lk == 141345                // '%' 'with'
     || lk == 141594                // '{' 'with'
     || lk == 143392                // '$' 'xquery'
     || lk == 143393                // '%' 'xquery'
     || lk == 143642                // '{' 'xquery'
     || lk == 144666                // '{' '{'
     || lk == 145690                // '{' '{|'
     || lk == 147738)               // '{' '}'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          memoize(9, e0A, -1);
          lk = -15;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            memoize(9, e0A, -2);
            lk = -15;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              memoize(9, e0A, -3);
              lk = -15;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                memoize(9, e0A, -12);
                lk = -15;
              }
              catch (p12A)
              {
                lk = -13;
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(9, e0A, -13);
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -2:
      try_AssignStatement();
      break;
    case -3:
      try_BlockStatement();
      break;
    case 92763:                     // 'break' 'loop'
      try_BreakStatement();
      break;
    case 92779:                     // 'continue' 'loop'
      try_ContinueStatement();
      break;
    case 116361:                    // 'exit' 'returning'
      try_ExitStatement();
      break;
    case 16526:                     // 'for' '$'
    case 16563:                     // 'let' '$'
    case 119987:                    // 'let' 'score'
    case 123022:                    // 'for' 'sliding'
    case 131726:                    // 'for' 'tumbling'
      try_FLWORStatement();
      break;
    case 18077:                     // 'if' '('
      try_IfStatement();
      break;
    case 18169:                     // 'switch' '('
      try_SwitchStatement();
      break;
    case 144640:                    // 'try' '{'
      try_TryCatchStatement();
      break;
    case 18179:                     // 'typeswitch' '('
      try_TypeswitchStatement();
      break;
    case -12:
    case 16652:                     // 'variable' '$'
      try_VarDeclStatement();
      break;
    case -13:
      try_WhileStatement();
      break;
    case 54:                        // ';'
      try_VoidStatement();
      break;
    case -15:
      break;
    default:
      try_ApplyStatement();
    }
  }

  function parse_ApplyStatement()
  {
    eventHandler.startNonterminal("ApplyStatement", e0);
    parse_ExprSimple();
    consume(54);                    // ';'
    eventHandler.endNonterminal("ApplyStatement", e0);
  }

  function try_ApplyStatement()
  {
    try_ExprSimple();
    consumeT(54);                   // ';'
  }

  function parse_AssignStatement()
  {
    eventHandler.startNonterminal("AssignStatement", e0);
    consume(32);                    // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(29);                // S^WS | '(:' | ':='
    consume(53);                    // ':='
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    consume(54);                    // ';'
    eventHandler.endNonterminal("AssignStatement", e0);
  }

  function try_AssignStatement()
  {
    consumeT(32);                   // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(29);                // S^WS | '(:' | ':='
    consumeT(53);                   // ':='
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
    consumeT(54);                   // ';'
  }

  function parse_BlockStatement()
  {
    eventHandler.startNonterminal("BlockStatement", e0);
    consume(282);                   // '{'
    lookahead1W(285);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
    whitespace();
    parse_Statements();
    consume(288);                   // '}'
    eventHandler.endNonterminal("BlockStatement", e0);
  }

  function try_BlockStatement()
  {
    consumeT(282);                  // '{'
    lookahead1W(285);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
    try_Statements();
    consumeT(288);                  // '}'
  }

  function parse_BreakStatement()
  {
    eventHandler.startNonterminal("BreakStatement", e0);
    consume(91);                    // 'break'
    lookahead1W(61);                // S^WS | '(:' | 'loop'
    consume(181);                   // 'loop'
    lookahead1W(30);                // S^WS | '(:' | ';'
    consume(54);                    // ';'
    eventHandler.endNonterminal("BreakStatement", e0);
  }

  function try_BreakStatement()
  {
    consumeT(91);                   // 'break'
    lookahead1W(61);                // S^WS | '(:' | 'loop'
    consumeT(181);                  // 'loop'
    lookahead1W(30);                // S^WS | '(:' | ';'
    consumeT(54);                   // ';'
  }

  function parse_ContinueStatement()
  {
    eventHandler.startNonterminal("ContinueStatement", e0);
    consume(107);                   // 'continue'
    lookahead1W(61);                // S^WS | '(:' | 'loop'
    consume(181);                   // 'loop'
    lookahead1W(30);                // S^WS | '(:' | ';'
    consume(54);                    // ';'
    eventHandler.endNonterminal("ContinueStatement", e0);
  }

  function try_ContinueStatement()
  {
    consumeT(107);                  // 'continue'
    lookahead1W(61);                // S^WS | '(:' | 'loop'
    consumeT(181);                  // 'loop'
    lookahead1W(30);                // S^WS | '(:' | ';'
    consumeT(54);                   // ';'
  }

  function parse_ExitStatement()
  {
    eventHandler.startNonterminal("ExitStatement", e0);
    consume(137);                   // 'exit'
    lookahead1W(73);                // S^WS | '(:' | 'returning'
    consume(227);                   // 'returning'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    consume(54);                    // ';'
    eventHandler.endNonterminal("ExitStatement", e0);
  }

  function try_ExitStatement()
  {
    consumeT(137);                  // 'exit'
    lookahead1W(73);                // S^WS | '(:' | 'returning'
    consumeT(227);                  // 'returning'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
    consumeT(54);                   // ';'
  }

  function parse_FLWORStatement()
  {
    eventHandler.startNonterminal("FLWORStatement", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(175);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 226)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnStatement();
    eventHandler.endNonterminal("FLWORStatement", e0);
  }

  function try_FLWORStatement()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(175);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 226)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnStatement();
  }

  function parse_ReturnStatement()
  {
    eventHandler.startNonterminal("ReturnStatement", e0);
    consume(226);                   // 'return'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("ReturnStatement", e0);
  }

  function try_ReturnStatement()
  {
    consumeT(226);                  // 'return'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Statement();
  }

  function parse_IfStatement()
  {
    eventHandler.startNonterminal("IfStatement", e0);
    consume(157);                   // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    lookahead1W(79);                // S^WS | '(:' | 'then'
    consume(251);                   // 'then'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Statement();
    lookahead1W(50);                // S^WS | '(:' | 'else'
    consume(127);                   // 'else'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("IfStatement", e0);
  }

  function try_IfStatement()
  {
    consumeT(157);                  // 'if'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Expr();
    consumeT(38);                   // ')'
    lookahead1W(79);                // S^WS | '(:' | 'then'
    consumeT(251);                  // 'then'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Statement();
    lookahead1W(50);                // S^WS | '(:' | 'else'
    consumeT(127);                  // 'else'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Statement();
  }

  function parse_SwitchStatement()
  {
    eventHandler.startNonterminal("SwitchStatement", e0);
    consume(249);                   // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseStatement();
      lookahead1W(115);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consume(114);                   // 'default'
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consume(226);                   // 'return'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchStatement", e0);
  }

  function try_SwitchStatement()
  {
    consumeT(249);                  // 'switch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Expr();
    consumeT(38);                   // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      try_SwitchCaseStatement();
      lookahead1W(115);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consumeT(114);                  // 'default'
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consumeT(226);                  // 'return'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Statement();
  }

  function parse_SwitchCaseStatement()
  {
    eventHandler.startNonterminal("SwitchCaseStatement", e0);
    for (;;)
    {
      consume(93);                  // 'case'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consume(226);                   // 'return'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchCaseStatement", e0);
  }

  function try_SwitchCaseStatement()
  {
    for (;;)
    {
      consumeT(93);                 // 'case'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_SwitchCaseOperand();
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consumeT(226);                  // 'return'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Statement();
  }

  function parse_TryCatchStatement()
  {
    eventHandler.startNonterminal("TryCatchStatement", e0);
    consume(256);                   // 'try'
    lookahead1W(89);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockStatement();
    for (;;)
    {
      lookahead1W(38);              // S^WS | '(:' | 'catch'
      consume(96);                  // 'catch'
      lookahead1W(262);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_CatchErrorList();
      whitespace();
      parse_BlockStatement();
      lookahead1W(288);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 96:                      // 'catch'
        lookahead2W(286);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 41056               // 'catch' 'and'
       || lk == 48224               // 'catch' 'cast'
       || lk == 48736               // 'catch' 'castable'
       || lk == 63072               // 'catch' 'div'
       || lk == 68192               // 'catch' 'eq'
       || lk == 69728               // 'catch' 'except'
       || lk == 77408               // 'catch' 'ge'
       || lk == 79456               // 'catch' 'gt'
       || lk == 79968               // 'catch' 'idiv'
       || lk == 84576               // 'catch' 'instance'
       || lk == 85600               // 'catch' 'intersect'
       || lk == 86624               // 'catch' 'is'
       || lk == 90720               // 'catch' 'le'
       || lk == 93792               // 'catch' 'lt'
       || lk == 95328               // 'catch' 'mod'
       || lk == 98400               // 'catch' 'ne'
       || lk == 105568              // 'catch' 'or'
       || lk == 130144              // 'catch' 'to'
       || lk == 130656              // 'catch' 'treat'
       || lk == 133216)             // 'catch' 'union'
      {
        lk = memoized(10, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(38);        // S^WS | '(:' | 'catch'
            consumeT(96);           // 'catch'
            lookahead1W(262);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(10, e0, lk);
        }
      }
      if (lk != -1
       && lk != 2656                // 'catch' Wildcard
       && lk != 3168                // 'catch' EQName^Token
       && lk != 38496               // 'catch' 'after'
       && lk != 39520               // 'catch' 'allowing'
       && lk != 40032               // 'catch' 'ancestor'
       && lk != 40544               // 'catch' 'ancestor-or-self'
       && lk != 42080               // 'catch' 'append'
       && lk != 42592               // 'catch' 'array'
       && lk != 43104               // 'catch' 'as'
       && lk != 43616               // 'catch' 'ascending'
       && lk != 44128               // 'catch' 'at'
       && lk != 44640               // 'catch' 'attribute'
       && lk != 45152               // 'catch' 'base-uri'
       && lk != 45664               // 'catch' 'before'
       && lk != 46176               // 'catch' 'boundary-space'
       && lk != 46688               // 'catch' 'break'
       && lk != 47712               // 'catch' 'case'
       && lk != 49248               // 'catch' 'catch'
       && lk != 50272               // 'catch' 'child'
       && lk != 50784               // 'catch' 'collation'
       && lk != 51808               // 'catch' 'comment'
       && lk != 52320               // 'catch' 'constraint'
       && lk != 52832               // 'catch' 'construction'
       && lk != 54368               // 'catch' 'context'
       && lk != 54880               // 'catch' 'continue'
       && lk != 55392               // 'catch' 'copy'
       && lk != 55904               // 'catch' 'copy-namespaces'
       && lk != 56416               // 'catch' 'count'
       && lk != 56928               // 'catch' 'decimal-format'
       && lk != 57952               // 'catch' 'declare'
       && lk != 58464               // 'catch' 'default'
       && lk != 58976               // 'catch' 'delete'
       && lk != 59488               // 'catch' 'descendant'
       && lk != 60000               // 'catch' 'descendant-or-self'
       && lk != 60512               // 'catch' 'descending'
       && lk != 63584               // 'catch' 'document'
       && lk != 64096               // 'catch' 'document-node'
       && lk != 64608               // 'catch' 'element'
       && lk != 65120               // 'catch' 'else'
       && lk != 65632               // 'catch' 'empty'
       && lk != 66144               // 'catch' 'empty-sequence'
       && lk != 66656               // 'catch' 'encoding'
       && lk != 67168               // 'catch' 'end'
       && lk != 68704               // 'catch' 'every'
       && lk != 70240               // 'catch' 'exit'
       && lk != 70752               // 'catch' 'external'
       && lk != 71264               // 'catch' 'first'
       && lk != 71776               // 'catch' 'following'
       && lk != 72288               // 'catch' 'following-sibling'
       && lk != 72800               // 'catch' 'for'
       && lk != 74848               // 'catch' 'ft-option'
       && lk != 76896               // 'catch' 'function'
       && lk != 78432               // 'catch' 'group'
       && lk != 80480               // 'catch' 'if'
       && lk != 80992               // 'catch' 'import'
       && lk != 81504               // 'catch' 'in'
       && lk != 82016               // 'catch' 'index'
       && lk != 84064               // 'catch' 'insert'
       && lk != 85088               // 'catch' 'integrity'
       && lk != 86112               // 'catch' 'into'
       && lk != 87136               // 'catch' 'item'
       && lk != 87648               // 'catch' 'json'
       && lk != 88160               // 'catch' 'json-item'
       && lk != 89696               // 'catch' 'last'
       && lk != 90208               // 'catch' 'lax'
       && lk != 91744               // 'catch' 'let'
       && lk != 92768               // 'catch' 'loop'
       && lk != 94304               // 'catch' 'map'
       && lk != 95840               // 'catch' 'modify'
       && lk != 96352               // 'catch' 'module'
       && lk != 97376               // 'catch' 'namespace'
       && lk != 97888               // 'catch' 'namespace-node'
       && lk != 100960              // 'catch' 'node'
       && lk != 101472              // 'catch' 'nodes'
       && lk != 102496              // 'catch' 'object'
       && lk != 104544              // 'catch' 'only'
       && lk != 105056              // 'catch' 'option'
       && lk != 106080              // 'catch' 'order'
       && lk != 106592              // 'catch' 'ordered'
       && lk != 107104              // 'catch' 'ordering'
       && lk != 108640              // 'catch' 'parent'
       && lk != 111712              // 'catch' 'preceding'
       && lk != 112224              // 'catch' 'preceding-sibling'
       && lk != 113760              // 'catch' 'processing-instruction'
       && lk != 114784              // 'catch' 'rename'
       && lk != 115296              // 'catch' 'replace'
       && lk != 115808              // 'catch' 'return'
       && lk != 116320              // 'catch' 'returning'
       && lk != 116832              // 'catch' 'revalidation'
       && lk != 117856              // 'catch' 'satisfies'
       && lk != 118368              // 'catch' 'schema'
       && lk != 118880              // 'catch' 'schema-attribute'
       && lk != 119392              // 'catch' 'schema-element'
       && lk != 119904              // 'catch' 'score'
       && lk != 120416              // 'catch' 'self'
       && lk != 122976              // 'catch' 'sliding'
       && lk != 123488              // 'catch' 'some'
       && lk != 124000              // 'catch' 'stable'
       && lk != 124512              // 'catch' 'start'
       && lk != 126048              // 'catch' 'strict'
       && lk != 127072              // 'catch' 'structured-item'
       && lk != 127584              // 'catch' 'switch'
       && lk != 128096              // 'catch' 'text'
       && lk != 131168              // 'catch' 'try'
       && lk != 131680              // 'catch' 'tumbling'
       && lk != 132192              // 'catch' 'type'
       && lk != 132704              // 'catch' 'typeswitch'
       && lk != 134240              // 'catch' 'unordered'
       && lk != 134752              // 'catch' 'updating'
       && lk != 136288              // 'catch' 'validate'
       && lk != 136800              // 'catch' 'value'
       && lk != 137312              // 'catch' 'variable'
       && lk != 137824              // 'catch' 'version'
       && lk != 139360              // 'catch' 'where'
       && lk != 139872              // 'catch' 'while'
       && lk != 141408              // 'catch' 'with'
       && lk != 143456)             // 'catch' 'xquery'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchStatement", e0);
  }

  function try_TryCatchStatement()
  {
    consumeT(256);                  // 'try'
    lookahead1W(89);                // S^WS | '(:' | '{'
    try_BlockStatement();
    lookahead1W(38);                // S^WS | '(:' | 'catch'
    consumeT(96);                   // 'catch'
    lookahead1W(262);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_CatchErrorList();
    try_BlockStatement();
    for (;;)
    {
      lookahead1W(288);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 96:                      // 'catch'
        lookahead2W(286);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' |
                                    // '>=' | '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 41056               // 'catch' 'and'
       || lk == 48224               // 'catch' 'cast'
       || lk == 48736               // 'catch' 'castable'
       || lk == 63072               // 'catch' 'div'
       || lk == 68192               // 'catch' 'eq'
       || lk == 69728               // 'catch' 'except'
       || lk == 77408               // 'catch' 'ge'
       || lk == 79456               // 'catch' 'gt'
       || lk == 79968               // 'catch' 'idiv'
       || lk == 84576               // 'catch' 'instance'
       || lk == 85600               // 'catch' 'intersect'
       || lk == 86624               // 'catch' 'is'
       || lk == 90720               // 'catch' 'le'
       || lk == 93792               // 'catch' 'lt'
       || lk == 95328               // 'catch' 'mod'
       || lk == 98400               // 'catch' 'ne'
       || lk == 105568              // 'catch' 'or'
       || lk == 130144              // 'catch' 'to'
       || lk == 130656              // 'catch' 'treat'
       || lk == 133216)             // 'catch' 'union'
      {
        lk = memoized(10, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(38);        // S^WS | '(:' | 'catch'
            consumeT(96);           // 'catch'
            lookahead1W(262);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            memoize(10, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(10, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 2656                // 'catch' Wildcard
       && lk != 3168                // 'catch' EQName^Token
       && lk != 38496               // 'catch' 'after'
       && lk != 39520               // 'catch' 'allowing'
       && lk != 40032               // 'catch' 'ancestor'
       && lk != 40544               // 'catch' 'ancestor-or-self'
       && lk != 42080               // 'catch' 'append'
       && lk != 42592               // 'catch' 'array'
       && lk != 43104               // 'catch' 'as'
       && lk != 43616               // 'catch' 'ascending'
       && lk != 44128               // 'catch' 'at'
       && lk != 44640               // 'catch' 'attribute'
       && lk != 45152               // 'catch' 'base-uri'
       && lk != 45664               // 'catch' 'before'
       && lk != 46176               // 'catch' 'boundary-space'
       && lk != 46688               // 'catch' 'break'
       && lk != 47712               // 'catch' 'case'
       && lk != 49248               // 'catch' 'catch'
       && lk != 50272               // 'catch' 'child'
       && lk != 50784               // 'catch' 'collation'
       && lk != 51808               // 'catch' 'comment'
       && lk != 52320               // 'catch' 'constraint'
       && lk != 52832               // 'catch' 'construction'
       && lk != 54368               // 'catch' 'context'
       && lk != 54880               // 'catch' 'continue'
       && lk != 55392               // 'catch' 'copy'
       && lk != 55904               // 'catch' 'copy-namespaces'
       && lk != 56416               // 'catch' 'count'
       && lk != 56928               // 'catch' 'decimal-format'
       && lk != 57952               // 'catch' 'declare'
       && lk != 58464               // 'catch' 'default'
       && lk != 58976               // 'catch' 'delete'
       && lk != 59488               // 'catch' 'descendant'
       && lk != 60000               // 'catch' 'descendant-or-self'
       && lk != 60512               // 'catch' 'descending'
       && lk != 63584               // 'catch' 'document'
       && lk != 64096               // 'catch' 'document-node'
       && lk != 64608               // 'catch' 'element'
       && lk != 65120               // 'catch' 'else'
       && lk != 65632               // 'catch' 'empty'
       && lk != 66144               // 'catch' 'empty-sequence'
       && lk != 66656               // 'catch' 'encoding'
       && lk != 67168               // 'catch' 'end'
       && lk != 68704               // 'catch' 'every'
       && lk != 70240               // 'catch' 'exit'
       && lk != 70752               // 'catch' 'external'
       && lk != 71264               // 'catch' 'first'
       && lk != 71776               // 'catch' 'following'
       && lk != 72288               // 'catch' 'following-sibling'
       && lk != 72800               // 'catch' 'for'
       && lk != 74848               // 'catch' 'ft-option'
       && lk != 76896               // 'catch' 'function'
       && lk != 78432               // 'catch' 'group'
       && lk != 80480               // 'catch' 'if'
       && lk != 80992               // 'catch' 'import'
       && lk != 81504               // 'catch' 'in'
       && lk != 82016               // 'catch' 'index'
       && lk != 84064               // 'catch' 'insert'
       && lk != 85088               // 'catch' 'integrity'
       && lk != 86112               // 'catch' 'into'
       && lk != 87136               // 'catch' 'item'
       && lk != 87648               // 'catch' 'json'
       && lk != 88160               // 'catch' 'json-item'
       && lk != 89696               // 'catch' 'last'
       && lk != 90208               // 'catch' 'lax'
       && lk != 91744               // 'catch' 'let'
       && lk != 92768               // 'catch' 'loop'
       && lk != 94304               // 'catch' 'map'
       && lk != 95840               // 'catch' 'modify'
       && lk != 96352               // 'catch' 'module'
       && lk != 97376               // 'catch' 'namespace'
       && lk != 97888               // 'catch' 'namespace-node'
       && lk != 100960              // 'catch' 'node'
       && lk != 101472              // 'catch' 'nodes'
       && lk != 102496              // 'catch' 'object'
       && lk != 104544              // 'catch' 'only'
       && lk != 105056              // 'catch' 'option'
       && lk != 106080              // 'catch' 'order'
       && lk != 106592              // 'catch' 'ordered'
       && lk != 107104              // 'catch' 'ordering'
       && lk != 108640              // 'catch' 'parent'
       && lk != 111712              // 'catch' 'preceding'
       && lk != 112224              // 'catch' 'preceding-sibling'
       && lk != 113760              // 'catch' 'processing-instruction'
       && lk != 114784              // 'catch' 'rename'
       && lk != 115296              // 'catch' 'replace'
       && lk != 115808              // 'catch' 'return'
       && lk != 116320              // 'catch' 'returning'
       && lk != 116832              // 'catch' 'revalidation'
       && lk != 117856              // 'catch' 'satisfies'
       && lk != 118368              // 'catch' 'schema'
       && lk != 118880              // 'catch' 'schema-attribute'
       && lk != 119392              // 'catch' 'schema-element'
       && lk != 119904              // 'catch' 'score'
       && lk != 120416              // 'catch' 'self'
       && lk != 122976              // 'catch' 'sliding'
       && lk != 123488              // 'catch' 'some'
       && lk != 124000              // 'catch' 'stable'
       && lk != 124512              // 'catch' 'start'
       && lk != 126048              // 'catch' 'strict'
       && lk != 127072              // 'catch' 'structured-item'
       && lk != 127584              // 'catch' 'switch'
       && lk != 128096              // 'catch' 'text'
       && lk != 131168              // 'catch' 'try'
       && lk != 131680              // 'catch' 'tumbling'
       && lk != 132192              // 'catch' 'type'
       && lk != 132704              // 'catch' 'typeswitch'
       && lk != 134240              // 'catch' 'unordered'
       && lk != 134752              // 'catch' 'updating'
       && lk != 136288              // 'catch' 'validate'
       && lk != 136800              // 'catch' 'value'
       && lk != 137312              // 'catch' 'variable'
       && lk != 137824              // 'catch' 'version'
       && lk != 139360              // 'catch' 'where'
       && lk != 139872              // 'catch' 'while'
       && lk != 141408              // 'catch' 'with'
       && lk != 143456)             // 'catch' 'xquery'
      {
        break;
      }
      lookahead1W(38);              // S^WS | '(:' | 'catch'
      consumeT(96);                 // 'catch'
      lookahead1W(262);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_CatchErrorList();
      try_BlockStatement();
    }
  }

  function parse_TypeswitchStatement()
  {
    eventHandler.startNonterminal("TypeswitchStatement", e0);
    consume(259);                   // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseStatement();
      lookahead1W(115);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consume(114);                   // 'default'
    lookahead1W(97);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 32)                   // '$'
    {
      consume(32);                  // '$'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consume(226);                   // 'return'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("TypeswitchStatement", e0);
  }

  function try_TypeswitchStatement()
  {
    consumeT(259);                  // 'typeswitch'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Expr();
    consumeT(38);                   // ')'
    for (;;)
    {
      lookahead1W(37);              // S^WS | '(:' | 'case'
      try_CaseStatement();
      lookahead1W(115);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 93)                 // 'case'
      {
        break;
      }
    }
    consumeT(114);                  // 'default'
    lookahead1W(97);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 32)                   // '$'
    {
      consumeT(32);                 // '$'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consumeT(226);                  // 'return'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Statement();
  }

  function parse_CaseStatement()
  {
    eventHandler.startNonterminal("CaseStatement", e0);
    consume(93);                    // 'case'
    lookahead1W(270);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 32)                   // '$'
    {
      consume(32);                  // '$'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consume(84);                  // 'as'
    }
    lookahead1W(267);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consume(226);                   // 'return'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("CaseStatement", e0);
  }

  function try_CaseStatement()
  {
    consumeT(93);                   // 'case'
    lookahead1W(270);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 32)                   // '$'
    {
      consumeT(32);                 // '$'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(32);              // S^WS | '(:' | 'as'
      consumeT(84);                 // 'as'
    }
    lookahead1W(267);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceType();
    lookahead1W(72);                // S^WS | '(:' | 'return'
    consumeT(226);                  // 'return'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Statement();
  }

  function parse_VarDeclStatement()
  {
    eventHandler.startNonterminal("VarDeclStatement", e0);
    for (;;)
    {
      lookahead1W(100);             // S^WS | '%' | '(:' | 'variable'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(268);                   // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consume(32);                    // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(159);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(147);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 53)                   // ':='
    {
      consume(53);                  // ':='
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consume(32);                  // '$'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(159);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 84)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(147);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        consume(53);                // ':='
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(54);                    // ';'
    eventHandler.endNonterminal("VarDeclStatement", e0);
  }

  function try_VarDeclStatement()
  {
    for (;;)
    {
      lookahead1W(100);             // S^WS | '%' | '(:' | 'variable'
      if (l1 != 33)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(268);                  // 'variable'
    lookahead1W(23);                // S^WS | '$' | '(:'
    consumeT(32);                   // '$'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(159);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 84)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(147);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 53)                   // ':='
    {
      consumeT(53);                 // ':='
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(23);              // S^WS | '$' | '(:'
      consumeT(32);                 // '$'
      lookahead1W(259);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(159);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 84)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(147);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 53)                 // ':='
      {
        consumeT(53);               // ':='
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        try_ExprSingle();
      }
    }
    consumeT(54);                   // ';'
  }

  function parse_WhileStatement()
  {
    eventHandler.startNonterminal("WhileStatement", e0);
    consume(273);                   // 'while'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Expr();
    consume(38);                    // ')'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("WhileStatement", e0);
  }

  function try_WhileStatement()
  {
    consumeT(273);                  // 'while'
    lookahead1W(24);                // S^WS | '(' | '(:'
    consumeT(35);                   // '('
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Expr();
    consumeT(38);                   // ')'
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_Statement();
  }

  function parse_VoidStatement()
  {
    eventHandler.startNonterminal("VoidStatement", e0);
    consume(54);                    // ';'
    eventHandler.endNonterminal("VoidStatement", e0);
  }

  function try_VoidStatement()
  {
    consumeT(54);                   // ';'
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 142:                       // 'for'
      lookahead2W(239);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'sliding' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'tumbling' | 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 179:                       // 'let'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'score' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 256:                       // 'try'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '|}' | '}' | '}`'
      break;
    case 157:                       // 'if'
    case 249:                       // 'switch'
    case 259:                       // 'typeswitch'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16526:                     // 'for' '$'
    case 16563:                     // 'let' '$'
    case 119987:                    // 'let' 'score'
    case 123022:                    // 'for' 'sliding'
    case 131726:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 18077:                     // 'if' '('
      parse_IfExpr();
      break;
    case 18169:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 144640:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 18179:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    default:
      parse_ExprSimple();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 142:                       // 'for'
      lookahead2W(239);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'sliding' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'tumbling' | 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 179:                       // 'let'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'score' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 256:                       // 'try'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '|}' | '}' | '}`'
      break;
    case 157:                       // 'if'
    case 249:                       // 'switch'
    case 259:                       // 'typeswitch'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16526:                     // 'for' '$'
    case 16563:                     // 'let' '$'
    case 119987:                    // 'let' 'score'
    case 123022:                    // 'for' 'sliding'
    case 131726:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 18077:                     // 'if' '('
      try_IfExpr();
      break;
    case 18169:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 144640:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 18179:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    default:
      try_ExprSimple();
    }
  }

  function parse_ExprSimple()
  {
    eventHandler.startNonterminal("ExprSimple", e0);
    switch (l1)
    {
    case 82:                        // 'append'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}' | '}`'
      break;
    case 224:                       // 'rename'
      lookahead2W(236);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 225:                       // 'replace'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'value' | 'where' |
                                    // 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 115:                       // 'delete'
    case 164:                       // 'insert'
      lookahead2W(240);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 108:                       // 'copy'
    case 134:                       // 'every'
    case 241:                       // 'some'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 136929)               // 'replace' 'value'
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ReplaceExpr();
          lk = -6;
        }
        catch (p6A)
        {
          lk = -11;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(11, e0, lk);
      }
    }
    switch (lk)
    {
    case 16518:                     // 'every' '$'
    case 16625:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 101028:                    // 'insert' 'node'
    case 101540:                    // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 100979:                    // 'delete' 'node'
    case 101491:                    // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 101088:                    // 'rename' 'node'
      parse_RenameExpr();
      break;
    case -6:
    case 101089:                    // 'replace' 'node'
      parse_ReplaceExpr();
      break;
    case 16492:                     // 'copy' '$'
      parse_TransformExpr();
      break;
    case 87667:                     // 'delete' 'json'
      parse_JSONDeleteExpr();
      break;
    case 87716:                     // 'insert' 'json'
      parse_JSONInsertExpr();
      break;
    case 87776:                     // 'rename' 'json'
      parse_JSONRenameExpr();
      break;
    case -11:
      parse_JSONReplaceExpr();
      break;
    case 87634:                     // 'append' 'json'
      parse_JSONAppendExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSimple", e0);
  }

  function try_ExprSimple()
  {
    switch (l1)
    {
    case 82:                        // 'append'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}' | '}`'
      break;
    case 224:                       // 'rename'
      lookahead2W(236);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 225:                       // 'replace'
      lookahead2W(237);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'value' | 'where' |
                                    // 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 115:                       // 'delete'
    case 164:                       // 'insert'
      lookahead2W(240);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    case 108:                       // 'copy'
    case 134:                       // 'every'
    case 241:                       // 'some'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '=>' | '>' | '>=' | '>>' |
                                    // '[' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}' | '}`'
      break;
    default:
      lk = l1;
    }
    if (lk == 136929)               // 'replace' 'value'
    {
      lk = memoized(11, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ReplaceExpr();
          memoize(11, e0A, -6);
          lk = -13;
        }
        catch (p6A)
        {
          lk = -11;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(11, e0A, -11);
        }
      }
    }
    switch (lk)
    {
    case 16518:                     // 'every' '$'
    case 16625:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 101028:                    // 'insert' 'node'
    case 101540:                    // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 100979:                    // 'delete' 'node'
    case 101491:                    // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 101088:                    // 'rename' 'node'
      try_RenameExpr();
      break;
    case -6:
    case 101089:                    // 'replace' 'node'
      try_ReplaceExpr();
      break;
    case 16492:                     // 'copy' '$'
      try_TransformExpr();
      break;
    case 87667:                     // 'delete' 'json'
      try_JSONDeleteExpr();
      break;
    case 87716:                     // 'insert' 'json'
      try_JSONInsertExpr();
      break;
    case 87776:                     // 'rename' 'json'
      try_JSONRenameExpr();
      break;
    case -11:
      try_JSONReplaceExpr();
      break;
    case 87634:                     // 'append' 'json'
      try_JSONAppendExpr();
      break;
    case -13:
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_JSONDeleteExpr()
  {
    eventHandler.startNonterminal("JSONDeleteExpr", e0);
    consume(115);                   // 'delete'
    lookahead1W(58);                // S^WS | '(:' | 'json'
    consume(171);                   // 'json'
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_PostfixExpr();
    eventHandler.endNonterminal("JSONDeleteExpr", e0);
  }

  function try_JSONDeleteExpr()
  {
    consumeT(115);                  // 'delete'
    lookahead1W(58);                // S^WS | '(:' | 'json'
    consumeT(171);                  // 'json'
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_PostfixExpr();
  }

  function parse_JSONInsertExpr()
  {
    eventHandler.startNonterminal("JSONInsertExpr", e0);
    switch (l1)
    {
    case 164:                       // 'insert'
      lookahead2W(58);              // S^WS | '(:' | 'json'
      break;
    default:
      lk = l1;
    }
    lk = memoized(12, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        consumeT(164);              // 'insert'
        lookahead1W(58);            // S^WS | '(:' | 'json'
        consumeT(171);              // 'json'
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        try_ExprSingle();
        consumeT(168);              // 'into'
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        try_ExprSingle();
        switch (l1)
        {
        case 86:                    // 'at'
          lookahead2W(71);          // S^WS | '(:' | 'position'
          break;
        default:
          lk = l1;
        }
        if (lk == 111190)           // 'at' 'position'
        {
          lk = memoized(13, e0);
          if (lk == 0)
          {
            var b0B = b0; var e0B = e0; var l1B = l1;
            var b1B = b1; var e1B = e1; var l2B = l2;
            var b2B = b2; var e2B = e2;
            try
            {
              consumeT(86);         // 'at'
              lookahead1W(71);      // S^WS | '(:' | 'position'
              consumeT(217);        // 'position'
              lookahead1W(276);     // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
              try_ExprSingle();
              memoize(13, e0B, -1);
            }
            catch (p1B)
            {
              b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
              b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
              b2 = b2B; e2 = e2B; end = e2B; }}
              memoize(13, e0B, -2);
            }
            lk = -2;
          }
        }
        if (lk == -1)
        {
          consumeT(86);             // 'at'
          lookahead1W(71);          // S^WS | '(:' | 'position'
          consumeT(217);            // 'position'
          lookahead1W(276);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
          try_ExprSingle();
        }
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(12, e0, lk);
    }
    switch (lk)
    {
    case -1:
      consume(164);                 // 'insert'
      lookahead1W(58);              // S^WS | '(:' | 'json'
      consume(171);                 // 'json'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_ExprSingle();
      consume(168);                 // 'into'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_ExprSingle();
      switch (l1)
      {
      case 86:                      // 'at'
        lookahead2W(71);            // S^WS | '(:' | 'position'
        break;
      default:
        lk = l1;
      }
      if (lk == 111190)             // 'at' 'position'
      {
        lk = memoized(13, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            consumeT(86);           // 'at'
            lookahead1W(71);        // S^WS | '(:' | 'position'
            consumeT(217);          // 'position'
            lookahead1W(276);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
            try_ExprSingle();
            lk = -1;
          }
          catch (p1B)
          {
            lk = -2;
          }
          b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
          b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
          b2 = b2B; e2 = e2B; end = e2B; }}
          memoize(13, e0, lk);
        }
      }
      if (lk == -1)
      {
        consume(86);                // 'at'
        lookahead1W(71);            // S^WS | '(:' | 'position'
        consume(217);               // 'position'
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        whitespace();
        parse_ExprSingle();
      }
      break;
    default:
      consume(164);                 // 'insert'
      lookahead1W(58);              // S^WS | '(:' | 'json'
      consume(171);                 // 'json'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_PairConstructorList();
      consume(168);                 // 'into'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("JSONInsertExpr", e0);
  }

  function try_JSONInsertExpr()
  {
    switch (l1)
    {
    case 164:                       // 'insert'
      lookahead2W(58);              // S^WS | '(:' | 'json'
      break;
    default:
      lk = l1;
    }
    lk = memoized(12, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        consumeT(164);              // 'insert'
        lookahead1W(58);            // S^WS | '(:' | 'json'
        consumeT(171);              // 'json'
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        try_ExprSingle();
        consumeT(168);              // 'into'
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        try_ExprSingle();
        switch (l1)
        {
        case 86:                    // 'at'
          lookahead2W(71);          // S^WS | '(:' | 'position'
          break;
        default:
          lk = l1;
        }
        if (lk == 111190)           // 'at' 'position'
        {
          lk = memoized(13, e0);
          if (lk == 0)
          {
            var b0B = b0; var e0B = e0; var l1B = l1;
            var b1B = b1; var e1B = e1; var l2B = l2;
            var b2B = b2; var e2B = e2;
            try
            {
              consumeT(86);         // 'at'
              lookahead1W(71);      // S^WS | '(:' | 'position'
              consumeT(217);        // 'position'
              lookahead1W(276);     // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
              try_ExprSingle();
              memoize(13, e0B, -1);
            }
            catch (p1B)
            {
              b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
              b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
              b2 = b2B; e2 = e2B; end = e2B; }}
              memoize(13, e0B, -2);
            }
            lk = -2;
          }
        }
        if (lk == -1)
        {
          consumeT(86);             // 'at'
          lookahead1W(71);          // S^WS | '(:' | 'position'
          consumeT(217);            // 'position'
          lookahead1W(276);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
          try_ExprSingle();
        }
        memoize(12, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(12, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(164);                // 'insert'
      lookahead1W(58);              // S^WS | '(:' | 'json'
      consumeT(171);                // 'json'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_ExprSingle();
      consumeT(168);                // 'into'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_ExprSingle();
      switch (l1)
      {
      case 86:                      // 'at'
        lookahead2W(71);            // S^WS | '(:' | 'position'
        break;
      default:
        lk = l1;
      }
      if (lk == 111190)             // 'at' 'position'
      {
        lk = memoized(13, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            consumeT(86);           // 'at'
            lookahead1W(71);        // S^WS | '(:' | 'position'
            consumeT(217);          // 'position'
            lookahead1W(276);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
            try_ExprSingle();
            memoize(13, e0B, -1);
          }
          catch (p1B)
          {
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; end = e2B; }}
            memoize(13, e0B, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1)
      {
        consumeT(86);               // 'at'
        lookahead1W(71);            // S^WS | '(:' | 'position'
        consumeT(217);              // 'position'
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        try_ExprSingle();
      }
      break;
    case -3:
      break;
    default:
      consumeT(164);                // 'insert'
      lookahead1W(58);              // S^WS | '(:' | 'json'
      consumeT(171);                // 'json'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_PairConstructorList();
      consumeT(168);                // 'into'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_ExprSingle();
    }
  }

  function parse_JSONRenameExpr()
  {
    eventHandler.startNonterminal("JSONRenameExpr", e0);
    consume(224);                   // 'rename'
    lookahead1W(58);                // S^WS | '(:' | 'json'
    consume(171);                   // 'json'
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_PostfixExpr();
    consume(84);                    // 'as'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONRenameExpr", e0);
  }

  function try_JSONRenameExpr()
  {
    consumeT(224);                  // 'rename'
    lookahead1W(58);                // S^WS | '(:' | 'json'
    consumeT(171);                  // 'json'
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_PostfixExpr();
    consumeT(84);                   // 'as'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_JSONReplaceExpr()
  {
    eventHandler.startNonterminal("JSONReplaceExpr", e0);
    consume(225);                   // 'replace'
    lookahead1W(84);                // S^WS | '(:' | 'value'
    consume(267);                   // 'value'
    lookahead1W(66);                // S^WS | '(:' | 'of'
    consume(202);                   // 'of'
    lookahead1W(58);                // S^WS | '(:' | 'json'
    consume(171);                   // 'json'
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_PostfixExpr();
    consume(276);                   // 'with'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONReplaceExpr", e0);
  }

  function try_JSONReplaceExpr()
  {
    consumeT(225);                  // 'replace'
    lookahead1W(84);                // S^WS | '(:' | 'value'
    consumeT(267);                  // 'value'
    lookahead1W(66);                // S^WS | '(:' | 'of'
    consumeT(202);                  // 'of'
    lookahead1W(58);                // S^WS | '(:' | 'json'
    consumeT(171);                  // 'json'
    lookahead1W(272);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | '``[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_PostfixExpr();
    consumeT(276);                  // 'with'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_JSONAppendExpr()
  {
    eventHandler.startNonterminal("JSONAppendExpr", e0);
    consume(82);                    // 'append'
    lookahead1W(58);                // S^WS | '(:' | 'json'
    consume(171);                   // 'json'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    consume(168);                   // 'into'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONAppendExpr", e0);
  }

  function try_JSONAppendExpr()
  {
    consumeT(82);                   // 'append'
    lookahead1W(58);                // S^WS | '(:' | 'json'
    consumeT(171);                  // 'json'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
    consumeT(168);                  // 'into'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      consume(12);                  // PredefinedEntityRef
      break;
    case 24:                        // CharRef
      consume(24);                  // CharRef
      break;
    case 283:                       // '{{'
      consume(283);                 // '{{'
      break;
    case 290:                       // '}}'
      consume(290);                 // '}}'
      break;
    default:
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      consumeT(12);                 // PredefinedEntityRef
      break;
    case 24:                        // CharRef
      consumeT(24);                 // CharRef
      break;
    case 283:                       // '{{'
      consumeT(283);                // '{{'
      break;
    case 290:                       // '}}'
      consumeT(290);                // '}}'
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_StatementsAndExpr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  function try_ContentExpr()
  {
    try_StatementsAndExpr();
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(124);                   // 'document'
    lookahead1W(89);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    consumeT(124);                  // 'document'
    lookahead1W(89);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(87);                    // 'attribute'
    lookahead1W(264);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      consume(282);                 // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_Expr();
      consume(288);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      lookahead2W(285);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 147738)               // '{' '}'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(282);            // '{'
          lookahead1W(90);          // S^WS | '(:' | '}'
          consumeT(288);            // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(14, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      consume(282);                 // '{'
      lookahead1W(90);              // S^WS | '(:' | '}'
      consume(288);                 // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    consumeT(87);                   // 'attribute'
    lookahead1W(264);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      consumeT(282);                // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_Expr();
      consumeT(288);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      lookahead2W(285);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 147738)               // '{' '}'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(282);            // '{'
          lookahead1W(90);          // S^WS | '(:' | '}'
          consumeT(288);            // '}'
          memoize(14, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(14, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(282);                // '{'
      lookahead1W(90);              // S^WS | '(:' | '}'
      consumeT(288);                // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(222);                   // 'processing-instruction'
    lookahead1W(255);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      consume(282);                 // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_Expr();
      consume(288);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      lookahead2W(285);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 147738)               // '{' '}'
    {
      lk = memoized(15, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(282);            // '{'
          lookahead1W(90);          // S^WS | '(:' | '}'
          consumeT(288);            // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(15, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      consume(282);                 // '{'
      lookahead1W(90);              // S^WS | '(:' | '}'
      consume(288);                 // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    consumeT(222);                  // 'processing-instruction'
    lookahead1W(255);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      consumeT(282);                // '{'
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_Expr();
      consumeT(288);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(89);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      lookahead2W(285);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 147738)               // '{' '}'
    {
      lk = memoized(15, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(282);            // '{'
          lookahead1W(90);          // S^WS | '(:' | '}'
          consumeT(288);            // '}'
          memoize(15, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(15, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(282);                // '{'
      lookahead1W(90);              // S^WS | '(:' | '}'
      consumeT(288);                // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(101);                   // 'comment'
    lookahead1W(89);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    consumeT(101);                  // 'comment'
    lookahead1W(89);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(250);                   // 'text'
    lookahead1W(89);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    consumeT(250);                  // 'text'
    lookahead1W(89);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 190:                       // 'namespace'
      lookahead2W(261);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 222:                       // 'processing-instruction'
      lookahead2W(258);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 282:                       // '{'
      lookahead2W(285);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      break;
    case 87:                        // 'attribute'
    case 126:                       // 'element'
      lookahead2W(265);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 83:                        // 'array'
    case 101:                       // 'comment'
    case 250:                       // 'text'
      lookahead2W(95);              // S^WS | '#' | '(:' | '{'
      break;
    case 124:                       // 'document'
    case 184:                       // 'map'
    case 208:                       // 'ordered'
    case 262:                       // 'unordered'
      lookahead2W(141);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 75:                        // 'after'
    case 77:                        // 'allowing'
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 82:                        // 'append'
    case 84:                        // 'as'
    case 85:                        // 'ascending'
    case 86:                        // 'at'
    case 88:                        // 'base-uri'
    case 89:                        // 'before'
    case 90:                        // 'boundary-space'
    case 91:                        // 'break'
    case 93:                        // 'case'
    case 94:                        // 'cast'
    case 95:                        // 'castable'
    case 96:                        // 'catch'
    case 98:                        // 'child'
    case 99:                        // 'collation'
    case 102:                       // 'constraint'
    case 103:                       // 'construction'
    case 106:                       // 'context'
    case 107:                       // 'continue'
    case 108:                       // 'copy'
    case 109:                       // 'copy-namespaces'
    case 110:                       // 'count'
    case 111:                       // 'decimal-format'
    case 113:                       // 'declare'
    case 114:                       // 'default'
    case 115:                       // 'delete'
    case 116:                       // 'descendant'
    case 117:                       // 'descendant-or-self'
    case 118:                       // 'descending'
    case 123:                       // 'div'
    case 127:                       // 'else'
    case 128:                       // 'empty'
    case 130:                       // 'encoding'
    case 131:                       // 'end'
    case 133:                       // 'eq'
    case 134:                       // 'every'
    case 136:                       // 'except'
    case 137:                       // 'exit'
    case 138:                       // 'external'
    case 139:                       // 'first'
    case 140:                       // 'following'
    case 141:                       // 'following-sibling'
    case 142:                       // 'for'
    case 146:                       // 'ft-option'
    case 151:                       // 'ge'
    case 153:                       // 'group'
    case 155:                       // 'gt'
    case 156:                       // 'idiv'
    case 158:                       // 'import'
    case 159:                       // 'in'
    case 160:                       // 'index'
    case 164:                       // 'insert'
    case 165:                       // 'instance'
    case 166:                       // 'integrity'
    case 167:                       // 'intersect'
    case 168:                       // 'into'
    case 169:                       // 'is'
    case 171:                       // 'json'
    case 175:                       // 'last'
    case 176:                       // 'lax'
    case 177:                       // 'le'
    case 179:                       // 'let'
    case 181:                       // 'loop'
    case 183:                       // 'lt'
    case 186:                       // 'mod'
    case 187:                       // 'modify'
    case 188:                       // 'module'
    case 192:                       // 'ne'
    case 198:                       // 'nodes'
    case 200:                       // 'object'
    case 204:                       // 'only'
    case 205:                       // 'option'
    case 206:                       // 'or'
    case 207:                       // 'order'
    case 209:                       // 'ordering'
    case 212:                       // 'parent'
    case 218:                       // 'preceding'
    case 219:                       // 'preceding-sibling'
    case 224:                       // 'rename'
    case 225:                       // 'replace'
    case 226:                       // 'return'
    case 227:                       // 'returning'
    case 228:                       // 'revalidation'
    case 230:                       // 'satisfies'
    case 231:                       // 'schema'
    case 234:                       // 'score'
    case 235:                       // 'self'
    case 240:                       // 'sliding'
    case 241:                       // 'some'
    case 242:                       // 'stable'
    case 243:                       // 'start'
    case 246:                       // 'strict'
    case 254:                       // 'to'
    case 255:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
    case 280:                       // 'xquery'
      lookahead2W(94);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 2842                  // '{' Wildcard
     || lk == 3354                  // '{' EQName^Token
     || lk == 4378                  // '{' IntegerLiteral
     || lk == 4890                  // '{' DecimalLiteral
     || lk == 5402                  // '{' DoubleLiteral
     || lk == 5914                  // '{' StringLiteral
     || lk == 16666                 // '{' '$'
     || lk == 17178                 // '{' '%'
     || lk == 18202                 // '{' '('
     || lk == 18714                 // '{' '(#'
     || lk == 21274                 // '{' '+'
     || lk == 22298                 // '{' '-'
     || lk == 23322                 // '{' '.'
     || lk == 23834                 // '{' '..'
     || lk == 24346                 // '{' '/'
     || lk == 24858                 // '{' '//'
     || lk == 28442                 // '{' '<'
     || lk == 28954                 // '{' '<!--'
     || lk == 31002                 // '{' '<?'
     || lk == 34074                 // '{' '?'
     || lk == 35098                 // '{' '@'
     || lk == 36122                 // '{' '['
     || lk == 37658                 // '{' '``['
     || lk == 38682                 // '{' 'after'
     || lk == 39706                 // '{' 'allowing'
     || lk == 40218                 // '{' 'ancestor'
     || lk == 40730                 // '{' 'ancestor-or-self'
     || lk == 41242                 // '{' 'and'
     || lk == 42266                 // '{' 'append'
     || lk == 42778                 // '{' 'array'
     || lk == 43290                 // '{' 'as'
     || lk == 43802                 // '{' 'ascending'
     || lk == 44314                 // '{' 'at'
     || lk == 44826                 // '{' 'attribute'
     || lk == 45338                 // '{' 'base-uri'
     || lk == 45850                 // '{' 'before'
     || lk == 46362                 // '{' 'boundary-space'
     || lk == 46874                 // '{' 'break'
     || lk == 47898                 // '{' 'case'
     || lk == 48410                 // '{' 'cast'
     || lk == 48922                 // '{' 'castable'
     || lk == 49434                 // '{' 'catch'
     || lk == 50458                 // '{' 'child'
     || lk == 50970                 // '{' 'collation'
     || lk == 51994                 // '{' 'comment'
     || lk == 52506                 // '{' 'constraint'
     || lk == 53018                 // '{' 'construction'
     || lk == 54554                 // '{' 'context'
     || lk == 55066                 // '{' 'continue'
     || lk == 55578                 // '{' 'copy'
     || lk == 56090                 // '{' 'copy-namespaces'
     || lk == 56602                 // '{' 'count'
     || lk == 57114                 // '{' 'decimal-format'
     || lk == 58138                 // '{' 'declare'
     || lk == 58650                 // '{' 'default'
     || lk == 59162                 // '{' 'delete'
     || lk == 59674                 // '{' 'descendant'
     || lk == 60186                 // '{' 'descendant-or-self'
     || lk == 60698                 // '{' 'descending'
     || lk == 63258                 // '{' 'div'
     || lk == 63770                 // '{' 'document'
     || lk == 64282                 // '{' 'document-node'
     || lk == 64794                 // '{' 'element'
     || lk == 65306                 // '{' 'else'
     || lk == 65818                 // '{' 'empty'
     || lk == 66330                 // '{' 'empty-sequence'
     || lk == 66842                 // '{' 'encoding'
     || lk == 67354                 // '{' 'end'
     || lk == 68378                 // '{' 'eq'
     || lk == 68890                 // '{' 'every'
     || lk == 69914                 // '{' 'except'
     || lk == 70426                 // '{' 'exit'
     || lk == 70938                 // '{' 'external'
     || lk == 71450                 // '{' 'first'
     || lk == 71962                 // '{' 'following'
     || lk == 72474                 // '{' 'following-sibling'
     || lk == 72986                 // '{' 'for'
     || lk == 75034                 // '{' 'ft-option'
     || lk == 77082                 // '{' 'function'
     || lk == 77594                 // '{' 'ge'
     || lk == 78618                 // '{' 'group'
     || lk == 79642                 // '{' 'gt'
     || lk == 80154                 // '{' 'idiv'
     || lk == 80666                 // '{' 'if'
     || lk == 81178                 // '{' 'import'
     || lk == 81690                 // '{' 'in'
     || lk == 82202                 // '{' 'index'
     || lk == 84250                 // '{' 'insert'
     || lk == 84762                 // '{' 'instance'
     || lk == 85274                 // '{' 'integrity'
     || lk == 85786                 // '{' 'intersect'
     || lk == 86298                 // '{' 'into'
     || lk == 86810                 // '{' 'is'
     || lk == 87322                 // '{' 'item'
     || lk == 87834                 // '{' 'json'
     || lk == 88346                 // '{' 'json-item'
     || lk == 89882                 // '{' 'last'
     || lk == 90394                 // '{' 'lax'
     || lk == 90906                 // '{' 'le'
     || lk == 91930                 // '{' 'let'
     || lk == 92954                 // '{' 'loop'
     || lk == 93978                 // '{' 'lt'
     || lk == 94490                 // '{' 'map'
     || lk == 95514                 // '{' 'mod'
     || lk == 96026                 // '{' 'modify'
     || lk == 96538                 // '{' 'module'
     || lk == 97562                 // '{' 'namespace'
     || lk == 98074                 // '{' 'namespace-node'
     || lk == 98586                 // '{' 'ne'
     || lk == 101146                // '{' 'node'
     || lk == 101658                // '{' 'nodes'
     || lk == 102682                // '{' 'object'
     || lk == 104730                // '{' 'only'
     || lk == 105242                // '{' 'option'
     || lk == 105754                // '{' 'or'
     || lk == 106266                // '{' 'order'
     || lk == 106778                // '{' 'ordered'
     || lk == 107290                // '{' 'ordering'
     || lk == 108826                // '{' 'parent'
     || lk == 111898                // '{' 'preceding'
     || lk == 112410                // '{' 'preceding-sibling'
     || lk == 113946                // '{' 'processing-instruction'
     || lk == 114970                // '{' 'rename'
     || lk == 115482                // '{' 'replace'
     || lk == 115994                // '{' 'return'
     || lk == 116506                // '{' 'returning'
     || lk == 117018                // '{' 'revalidation'
     || lk == 118042                // '{' 'satisfies'
     || lk == 118554                // '{' 'schema'
     || lk == 119066                // '{' 'schema-attribute'
     || lk == 119578                // '{' 'schema-element'
     || lk == 120090                // '{' 'score'
     || lk == 120602                // '{' 'self'
     || lk == 123162                // '{' 'sliding'
     || lk == 123674                // '{' 'some'
     || lk == 124186                // '{' 'stable'
     || lk == 124698                // '{' 'start'
     || lk == 126234                // '{' 'strict'
     || lk == 127258                // '{' 'structured-item'
     || lk == 127770                // '{' 'switch'
     || lk == 128282                // '{' 'text'
     || lk == 130330                // '{' 'to'
     || lk == 130842                // '{' 'treat'
     || lk == 131354                // '{' 'try'
     || lk == 131866                // '{' 'tumbling'
     || lk == 132378                // '{' 'type'
     || lk == 132890                // '{' 'typeswitch'
     || lk == 133402                // '{' 'union'
     || lk == 134426                // '{' 'unordered'
     || lk == 134938                // '{' 'updating'
     || lk == 136474                // '{' 'validate'
     || lk == 136986                // '{' 'value'
     || lk == 137498                // '{' 'variable'
     || lk == 138010                // '{' 'version'
     || lk == 139546                // '{' 'where'
     || lk == 140058                // '{' 'while'
     || lk == 141594                // '{' 'with'
     || lk == 143642                // '{' 'xquery'
     || lk == 144666                // '{' '{'
     || lk == 145690                // '{' '{|'
     || lk == 147738)               // '{' '}'
    {
      lk = memoized(16, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          lk = -11;
        }
        catch (p11A)
        {
          lk = -12;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(16, e0, lk);
      }
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      parse_Literal();
      break;
    case 32:                        // '$'
      parse_VarRef();
      break;
    case 35:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 45:                        // '.'
      parse_ContextItemExpr();
      break;
    case 17926:                     // EQName^Token '('
    case 17995:                     // 'after' '('
    case 17997:                     // 'allowing' '('
    case 17998:                     // 'ancestor' '('
    case 17999:                     // 'ancestor-or-self' '('
    case 18000:                     // 'and' '('
    case 18002:                     // 'append' '('
    case 18004:                     // 'as' '('
    case 18005:                     // 'ascending' '('
    case 18006:                     // 'at' '('
    case 18008:                     // 'base-uri' '('
    case 18009:                     // 'before' '('
    case 18010:                     // 'boundary-space' '('
    case 18011:                     // 'break' '('
    case 18013:                     // 'case' '('
    case 18014:                     // 'cast' '('
    case 18015:                     // 'castable' '('
    case 18016:                     // 'catch' '('
    case 18018:                     // 'child' '('
    case 18019:                     // 'collation' '('
    case 18022:                     // 'constraint' '('
    case 18023:                     // 'construction' '('
    case 18026:                     // 'context' '('
    case 18027:                     // 'continue' '('
    case 18028:                     // 'copy' '('
    case 18029:                     // 'copy-namespaces' '('
    case 18030:                     // 'count' '('
    case 18031:                     // 'decimal-format' '('
    case 18033:                     // 'declare' '('
    case 18034:                     // 'default' '('
    case 18035:                     // 'delete' '('
    case 18036:                     // 'descendant' '('
    case 18037:                     // 'descendant-or-self' '('
    case 18038:                     // 'descending' '('
    case 18043:                     // 'div' '('
    case 18044:                     // 'document' '('
    case 18047:                     // 'else' '('
    case 18048:                     // 'empty' '('
    case 18050:                     // 'encoding' '('
    case 18051:                     // 'end' '('
    case 18053:                     // 'eq' '('
    case 18054:                     // 'every' '('
    case 18056:                     // 'except' '('
    case 18057:                     // 'exit' '('
    case 18058:                     // 'external' '('
    case 18059:                     // 'first' '('
    case 18060:                     // 'following' '('
    case 18061:                     // 'following-sibling' '('
    case 18062:                     // 'for' '('
    case 18066:                     // 'ft-option' '('
    case 18071:                     // 'ge' '('
    case 18073:                     // 'group' '('
    case 18075:                     // 'gt' '('
    case 18076:                     // 'idiv' '('
    case 18078:                     // 'import' '('
    case 18079:                     // 'in' '('
    case 18080:                     // 'index' '('
    case 18084:                     // 'insert' '('
    case 18085:                     // 'instance' '('
    case 18086:                     // 'integrity' '('
    case 18087:                     // 'intersect' '('
    case 18088:                     // 'into' '('
    case 18089:                     // 'is' '('
    case 18091:                     // 'json' '('
    case 18095:                     // 'last' '('
    case 18096:                     // 'lax' '('
    case 18097:                     // 'le' '('
    case 18099:                     // 'let' '('
    case 18101:                     // 'loop' '('
    case 18103:                     // 'lt' '('
    case 18104:                     // 'map' '('
    case 18106:                     // 'mod' '('
    case 18107:                     // 'modify' '('
    case 18108:                     // 'module' '('
    case 18110:                     // 'namespace' '('
    case 18112:                     // 'ne' '('
    case 18118:                     // 'nodes' '('
    case 18120:                     // 'object' '('
    case 18124:                     // 'only' '('
    case 18125:                     // 'option' '('
    case 18126:                     // 'or' '('
    case 18127:                     // 'order' '('
    case 18128:                     // 'ordered' '('
    case 18129:                     // 'ordering' '('
    case 18132:                     // 'parent' '('
    case 18138:                     // 'preceding' '('
    case 18139:                     // 'preceding-sibling' '('
    case 18144:                     // 'rename' '('
    case 18145:                     // 'replace' '('
    case 18146:                     // 'return' '('
    case 18147:                     // 'returning' '('
    case 18148:                     // 'revalidation' '('
    case 18150:                     // 'satisfies' '('
    case 18151:                     // 'schema' '('
    case 18154:                     // 'score' '('
    case 18155:                     // 'self' '('
    case 18160:                     // 'sliding' '('
    case 18161:                     // 'some' '('
    case 18162:                     // 'stable' '('
    case 18163:                     // 'start' '('
    case 18166:                     // 'strict' '('
    case 18174:                     // 'to' '('
    case 18175:                     // 'treat' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
    case 18200:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 144592:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 144646:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 33:                        // '%'
    case 125:                       // 'document-node'
    case 129:                       // 'empty-sequence'
    case 150:                       // 'function'
    case 157:                       // 'if'
    case 170:                       // 'item'
    case 172:                       // 'json-item'
    case 191:                       // 'namespace-node'
    case 197:                       // 'node'
    case 232:                       // 'schema-attribute'
    case 233:                       // 'schema-element'
    case 248:                       // 'structured-item'
    case 249:                       // 'switch'
    case 259:                       // 'typeswitch'
    case 15366:                     // EQName^Token '#'
    case 15435:                     // 'after' '#'
    case 15437:                     // 'allowing' '#'
    case 15438:                     // 'ancestor' '#'
    case 15439:                     // 'ancestor-or-self' '#'
    case 15440:                     // 'and' '#'
    case 15442:                     // 'append' '#'
    case 15443:                     // 'array' '#'
    case 15444:                     // 'as' '#'
    case 15445:                     // 'ascending' '#'
    case 15446:                     // 'at' '#'
    case 15447:                     // 'attribute' '#'
    case 15448:                     // 'base-uri' '#'
    case 15449:                     // 'before' '#'
    case 15450:                     // 'boundary-space' '#'
    case 15451:                     // 'break' '#'
    case 15453:                     // 'case' '#'
    case 15454:                     // 'cast' '#'
    case 15455:                     // 'castable' '#'
    case 15456:                     // 'catch' '#'
    case 15458:                     // 'child' '#'
    case 15459:                     // 'collation' '#'
    case 15461:                     // 'comment' '#'
    case 15462:                     // 'constraint' '#'
    case 15463:                     // 'construction' '#'
    case 15466:                     // 'context' '#'
    case 15467:                     // 'continue' '#'
    case 15468:                     // 'copy' '#'
    case 15469:                     // 'copy-namespaces' '#'
    case 15470:                     // 'count' '#'
    case 15471:                     // 'decimal-format' '#'
    case 15473:                     // 'declare' '#'
    case 15474:                     // 'default' '#'
    case 15475:                     // 'delete' '#'
    case 15476:                     // 'descendant' '#'
    case 15477:                     // 'descendant-or-self' '#'
    case 15478:                     // 'descending' '#'
    case 15483:                     // 'div' '#'
    case 15484:                     // 'document' '#'
    case 15486:                     // 'element' '#'
    case 15487:                     // 'else' '#'
    case 15488:                     // 'empty' '#'
    case 15490:                     // 'encoding' '#'
    case 15491:                     // 'end' '#'
    case 15493:                     // 'eq' '#'
    case 15494:                     // 'every' '#'
    case 15496:                     // 'except' '#'
    case 15497:                     // 'exit' '#'
    case 15498:                     // 'external' '#'
    case 15499:                     // 'first' '#'
    case 15500:                     // 'following' '#'
    case 15501:                     // 'following-sibling' '#'
    case 15502:                     // 'for' '#'
    case 15506:                     // 'ft-option' '#'
    case 15511:                     // 'ge' '#'
    case 15513:                     // 'group' '#'
    case 15515:                     // 'gt' '#'
    case 15516:                     // 'idiv' '#'
    case 15518:                     // 'import' '#'
    case 15519:                     // 'in' '#'
    case 15520:                     // 'index' '#'
    case 15524:                     // 'insert' '#'
    case 15525:                     // 'instance' '#'
    case 15526:                     // 'integrity' '#'
    case 15527:                     // 'intersect' '#'
    case 15528:                     // 'into' '#'
    case 15529:                     // 'is' '#'
    case 15531:                     // 'json' '#'
    case 15535:                     // 'last' '#'
    case 15536:                     // 'lax' '#'
    case 15537:                     // 'le' '#'
    case 15539:                     // 'let' '#'
    case 15541:                     // 'loop' '#'
    case 15543:                     // 'lt' '#'
    case 15544:                     // 'map' '#'
    case 15546:                     // 'mod' '#'
    case 15547:                     // 'modify' '#'
    case 15548:                     // 'module' '#'
    case 15550:                     // 'namespace' '#'
    case 15552:                     // 'ne' '#'
    case 15558:                     // 'nodes' '#'
    case 15560:                     // 'object' '#'
    case 15564:                     // 'only' '#'
    case 15565:                     // 'option' '#'
    case 15566:                     // 'or' '#'
    case 15567:                     // 'order' '#'
    case 15568:                     // 'ordered' '#'
    case 15569:                     // 'ordering' '#'
    case 15572:                     // 'parent' '#'
    case 15578:                     // 'preceding' '#'
    case 15579:                     // 'preceding-sibling' '#'
    case 15582:                     // 'processing-instruction' '#'
    case 15584:                     // 'rename' '#'
    case 15585:                     // 'replace' '#'
    case 15586:                     // 'return' '#'
    case 15587:                     // 'returning' '#'
    case 15588:                     // 'revalidation' '#'
    case 15590:                     // 'satisfies' '#'
    case 15591:                     // 'schema' '#'
    case 15594:                     // 'score' '#'
    case 15595:                     // 'self' '#'
    case 15600:                     // 'sliding' '#'
    case 15601:                     // 'some' '#'
    case 15602:                     // 'stable' '#'
    case 15603:                     // 'start' '#'
    case 15606:                     // 'strict' '#'
    case 15610:                     // 'text' '#'
    case 15614:                     // 'to' '#'
    case 15615:                     // 'treat' '#'
    case 15616:                     // 'try' '#'
    case 15617:                     // 'tumbling' '#'
    case 15618:                     // 'type' '#'
    case 15620:                     // 'union' '#'
    case 15622:                     // 'unordered' '#'
    case 15623:                     // 'updating' '#'
    case 15626:                     // 'validate' '#'
    case 15627:                     // 'value' '#'
    case 15628:                     // 'variable' '#'
    case 15629:                     // 'version' '#'
    case 15632:                     // 'where' '#'
    case 15633:                     // 'while' '#'
    case 15636:                     // 'with' '#'
    case 15640:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case 144568:                    // 'map' '{'
      parse_MapConstructor();
      break;
    case -11:
    case 27930:                     // '{' ';'
      parse_BlockExpr();
      break;
    case -12:
      parse_ObjectConstructor();
      break;
    case 70:                        // '['
    case 144467:                    // 'array' '{'
      parse_ArrayConstructor();
      break;
    case 73:                        // '``['
      parse_StringConstructor();
      break;
    case 66:                        // '?'
      parse_UnaryLookup();
      break;
    case 284:                       // '{|'
      parse_JSONSimpleObjectUnion();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 190:                       // 'namespace'
      lookahead2W(261);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 222:                       // 'processing-instruction'
      lookahead2W(258);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 282:                       // '{'
      lookahead2W(285);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      break;
    case 87:                        // 'attribute'
    case 126:                       // 'element'
      lookahead2W(265);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 83:                        // 'array'
    case 101:                       // 'comment'
    case 250:                       // 'text'
      lookahead2W(95);              // S^WS | '#' | '(:' | '{'
      break;
    case 124:                       // 'document'
    case 184:                       // 'map'
    case 208:                       // 'ordered'
    case 262:                       // 'unordered'
      lookahead2W(141);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 75:                        // 'after'
    case 77:                        // 'allowing'
    case 78:                        // 'ancestor'
    case 79:                        // 'ancestor-or-self'
    case 80:                        // 'and'
    case 82:                        // 'append'
    case 84:                        // 'as'
    case 85:                        // 'ascending'
    case 86:                        // 'at'
    case 88:                        // 'base-uri'
    case 89:                        // 'before'
    case 90:                        // 'boundary-space'
    case 91:                        // 'break'
    case 93:                        // 'case'
    case 94:                        // 'cast'
    case 95:                        // 'castable'
    case 96:                        // 'catch'
    case 98:                        // 'child'
    case 99:                        // 'collation'
    case 102:                       // 'constraint'
    case 103:                       // 'construction'
    case 106:                       // 'context'
    case 107:                       // 'continue'
    case 108:                       // 'copy'
    case 109:                       // 'copy-namespaces'
    case 110:                       // 'count'
    case 111:                       // 'decimal-format'
    case 113:                       // 'declare'
    case 114:                       // 'default'
    case 115:                       // 'delete'
    case 116:                       // 'descendant'
    case 117:                       // 'descendant-or-self'
    case 118:                       // 'descending'
    case 123:                       // 'div'
    case 127:                       // 'else'
    case 128:                       // 'empty'
    case 130:                       // 'encoding'
    case 131:                       // 'end'
    case 133:                       // 'eq'
    case 134:                       // 'every'
    case 136:                       // 'except'
    case 137:                       // 'exit'
    case 138:                       // 'external'
    case 139:                       // 'first'
    case 140:                       // 'following'
    case 141:                       // 'following-sibling'
    case 142:                       // 'for'
    case 146:                       // 'ft-option'
    case 151:                       // 'ge'
    case 153:                       // 'group'
    case 155:                       // 'gt'
    case 156:                       // 'idiv'
    case 158:                       // 'import'
    case 159:                       // 'in'
    case 160:                       // 'index'
    case 164:                       // 'insert'
    case 165:                       // 'instance'
    case 166:                       // 'integrity'
    case 167:                       // 'intersect'
    case 168:                       // 'into'
    case 169:                       // 'is'
    case 171:                       // 'json'
    case 175:                       // 'last'
    case 176:                       // 'lax'
    case 177:                       // 'le'
    case 179:                       // 'let'
    case 181:                       // 'loop'
    case 183:                       // 'lt'
    case 186:                       // 'mod'
    case 187:                       // 'modify'
    case 188:                       // 'module'
    case 192:                       // 'ne'
    case 198:                       // 'nodes'
    case 200:                       // 'object'
    case 204:                       // 'only'
    case 205:                       // 'option'
    case 206:                       // 'or'
    case 207:                       // 'order'
    case 209:                       // 'ordering'
    case 212:                       // 'parent'
    case 218:                       // 'preceding'
    case 219:                       // 'preceding-sibling'
    case 224:                       // 'rename'
    case 225:                       // 'replace'
    case 226:                       // 'return'
    case 227:                       // 'returning'
    case 228:                       // 'revalidation'
    case 230:                       // 'satisfies'
    case 231:                       // 'schema'
    case 234:                       // 'score'
    case 235:                       // 'self'
    case 240:                       // 'sliding'
    case 241:                       // 'some'
    case 242:                       // 'stable'
    case 243:                       // 'start'
    case 246:                       // 'strict'
    case 254:                       // 'to'
    case 255:                       // 'treat'
    case 256:                       // 'try'
    case 257:                       // 'tumbling'
    case 258:                       // 'type'
    case 260:                       // 'union'
    case 263:                       // 'updating'
    case 266:                       // 'validate'
    case 267:                       // 'value'
    case 268:                       // 'variable'
    case 269:                       // 'version'
    case 272:                       // 'where'
    case 273:                       // 'while'
    case 276:                       // 'with'
    case 280:                       // 'xquery'
      lookahead2W(94);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 2842                  // '{' Wildcard
     || lk == 3354                  // '{' EQName^Token
     || lk == 4378                  // '{' IntegerLiteral
     || lk == 4890                  // '{' DecimalLiteral
     || lk == 5402                  // '{' DoubleLiteral
     || lk == 5914                  // '{' StringLiteral
     || lk == 16666                 // '{' '$'
     || lk == 17178                 // '{' '%'
     || lk == 18202                 // '{' '('
     || lk == 18714                 // '{' '(#'
     || lk == 21274                 // '{' '+'
     || lk == 22298                 // '{' '-'
     || lk == 23322                 // '{' '.'
     || lk == 23834                 // '{' '..'
     || lk == 24346                 // '{' '/'
     || lk == 24858                 // '{' '//'
     || lk == 28442                 // '{' '<'
     || lk == 28954                 // '{' '<!--'
     || lk == 31002                 // '{' '<?'
     || lk == 34074                 // '{' '?'
     || lk == 35098                 // '{' '@'
     || lk == 36122                 // '{' '['
     || lk == 37658                 // '{' '``['
     || lk == 38682                 // '{' 'after'
     || lk == 39706                 // '{' 'allowing'
     || lk == 40218                 // '{' 'ancestor'
     || lk == 40730                 // '{' 'ancestor-or-self'
     || lk == 41242                 // '{' 'and'
     || lk == 42266                 // '{' 'append'
     || lk == 42778                 // '{' 'array'
     || lk == 43290                 // '{' 'as'
     || lk == 43802                 // '{' 'ascending'
     || lk == 44314                 // '{' 'at'
     || lk == 44826                 // '{' 'attribute'
     || lk == 45338                 // '{' 'base-uri'
     || lk == 45850                 // '{' 'before'
     || lk == 46362                 // '{' 'boundary-space'
     || lk == 46874                 // '{' 'break'
     || lk == 47898                 // '{' 'case'
     || lk == 48410                 // '{' 'cast'
     || lk == 48922                 // '{' 'castable'
     || lk == 49434                 // '{' 'catch'
     || lk == 50458                 // '{' 'child'
     || lk == 50970                 // '{' 'collation'
     || lk == 51994                 // '{' 'comment'
     || lk == 52506                 // '{' 'constraint'
     || lk == 53018                 // '{' 'construction'
     || lk == 54554                 // '{' 'context'
     || lk == 55066                 // '{' 'continue'
     || lk == 55578                 // '{' 'copy'
     || lk == 56090                 // '{' 'copy-namespaces'
     || lk == 56602                 // '{' 'count'
     || lk == 57114                 // '{' 'decimal-format'
     || lk == 58138                 // '{' 'declare'
     || lk == 58650                 // '{' 'default'
     || lk == 59162                 // '{' 'delete'
     || lk == 59674                 // '{' 'descendant'
     || lk == 60186                 // '{' 'descendant-or-self'
     || lk == 60698                 // '{' 'descending'
     || lk == 63258                 // '{' 'div'
     || lk == 63770                 // '{' 'document'
     || lk == 64282                 // '{' 'document-node'
     || lk == 64794                 // '{' 'element'
     || lk == 65306                 // '{' 'else'
     || lk == 65818                 // '{' 'empty'
     || lk == 66330                 // '{' 'empty-sequence'
     || lk == 66842                 // '{' 'encoding'
     || lk == 67354                 // '{' 'end'
     || lk == 68378                 // '{' 'eq'
     || lk == 68890                 // '{' 'every'
     || lk == 69914                 // '{' 'except'
     || lk == 70426                 // '{' 'exit'
     || lk == 70938                 // '{' 'external'
     || lk == 71450                 // '{' 'first'
     || lk == 71962                 // '{' 'following'
     || lk == 72474                 // '{' 'following-sibling'
     || lk == 72986                 // '{' 'for'
     || lk == 75034                 // '{' 'ft-option'
     || lk == 77082                 // '{' 'function'
     || lk == 77594                 // '{' 'ge'
     || lk == 78618                 // '{' 'group'
     || lk == 79642                 // '{' 'gt'
     || lk == 80154                 // '{' 'idiv'
     || lk == 80666                 // '{' 'if'
     || lk == 81178                 // '{' 'import'
     || lk == 81690                 // '{' 'in'
     || lk == 82202                 // '{' 'index'
     || lk == 84250                 // '{' 'insert'
     || lk == 84762                 // '{' 'instance'
     || lk == 85274                 // '{' 'integrity'
     || lk == 85786                 // '{' 'intersect'
     || lk == 86298                 // '{' 'into'
     || lk == 86810                 // '{' 'is'
     || lk == 87322                 // '{' 'item'
     || lk == 87834                 // '{' 'json'
     || lk == 88346                 // '{' 'json-item'
     || lk == 89882                 // '{' 'last'
     || lk == 90394                 // '{' 'lax'
     || lk == 90906                 // '{' 'le'
     || lk == 91930                 // '{' 'let'
     || lk == 92954                 // '{' 'loop'
     || lk == 93978                 // '{' 'lt'
     || lk == 94490                 // '{' 'map'
     || lk == 95514                 // '{' 'mod'
     || lk == 96026                 // '{' 'modify'
     || lk == 96538                 // '{' 'module'
     || lk == 97562                 // '{' 'namespace'
     || lk == 98074                 // '{' 'namespace-node'
     || lk == 98586                 // '{' 'ne'
     || lk == 101146                // '{' 'node'
     || lk == 101658                // '{' 'nodes'
     || lk == 102682                // '{' 'object'
     || lk == 104730                // '{' 'only'
     || lk == 105242                // '{' 'option'
     || lk == 105754                // '{' 'or'
     || lk == 106266                // '{' 'order'
     || lk == 106778                // '{' 'ordered'
     || lk == 107290                // '{' 'ordering'
     || lk == 108826                // '{' 'parent'
     || lk == 111898                // '{' 'preceding'
     || lk == 112410                // '{' 'preceding-sibling'
     || lk == 113946                // '{' 'processing-instruction'
     || lk == 114970                // '{' 'rename'
     || lk == 115482                // '{' 'replace'
     || lk == 115994                // '{' 'return'
     || lk == 116506                // '{' 'returning'
     || lk == 117018                // '{' 'revalidation'
     || lk == 118042                // '{' 'satisfies'
     || lk == 118554                // '{' 'schema'
     || lk == 119066                // '{' 'schema-attribute'
     || lk == 119578                // '{' 'schema-element'
     || lk == 120090                // '{' 'score'
     || lk == 120602                // '{' 'self'
     || lk == 123162                // '{' 'sliding'
     || lk == 123674                // '{' 'some'
     || lk == 124186                // '{' 'stable'
     || lk == 124698                // '{' 'start'
     || lk == 126234                // '{' 'strict'
     || lk == 127258                // '{' 'structured-item'
     || lk == 127770                // '{' 'switch'
     || lk == 128282                // '{' 'text'
     || lk == 130330                // '{' 'to'
     || lk == 130842                // '{' 'treat'
     || lk == 131354                // '{' 'try'
     || lk == 131866                // '{' 'tumbling'
     || lk == 132378                // '{' 'type'
     || lk == 132890                // '{' 'typeswitch'
     || lk == 133402                // '{' 'union'
     || lk == 134426                // '{' 'unordered'
     || lk == 134938                // '{' 'updating'
     || lk == 136474                // '{' 'validate'
     || lk == 136986                // '{' 'value'
     || lk == 137498                // '{' 'variable'
     || lk == 138010                // '{' 'version'
     || lk == 139546                // '{' 'where'
     || lk == 140058                // '{' 'while'
     || lk == 141594                // '{' 'with'
     || lk == 143642                // '{' 'xquery'
     || lk == 144666                // '{' '{'
     || lk == 145690                // '{' '{|'
     || lk == 147738)               // '{' '}'
    {
      lk = memoized(16, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          memoize(16, e0A, -11);
          lk = -17;
        }
        catch (p11A)
        {
          lk = -12;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(16, e0A, -12);
        }
      }
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      try_Literal();
      break;
    case 32:                        // '$'
      try_VarRef();
      break;
    case 35:                        // '('
      try_ParenthesizedExpr();
      break;
    case 45:                        // '.'
      try_ContextItemExpr();
      break;
    case 17926:                     // EQName^Token '('
    case 17995:                     // 'after' '('
    case 17997:                     // 'allowing' '('
    case 17998:                     // 'ancestor' '('
    case 17999:                     // 'ancestor-or-self' '('
    case 18000:                     // 'and' '('
    case 18002:                     // 'append' '('
    case 18004:                     // 'as' '('
    case 18005:                     // 'ascending' '('
    case 18006:                     // 'at' '('
    case 18008:                     // 'base-uri' '('
    case 18009:                     // 'before' '('
    case 18010:                     // 'boundary-space' '('
    case 18011:                     // 'break' '('
    case 18013:                     // 'case' '('
    case 18014:                     // 'cast' '('
    case 18015:                     // 'castable' '('
    case 18016:                     // 'catch' '('
    case 18018:                     // 'child' '('
    case 18019:                     // 'collation' '('
    case 18022:                     // 'constraint' '('
    case 18023:                     // 'construction' '('
    case 18026:                     // 'context' '('
    case 18027:                     // 'continue' '('
    case 18028:                     // 'copy' '('
    case 18029:                     // 'copy-namespaces' '('
    case 18030:                     // 'count' '('
    case 18031:                     // 'decimal-format' '('
    case 18033:                     // 'declare' '('
    case 18034:                     // 'default' '('
    case 18035:                     // 'delete' '('
    case 18036:                     // 'descendant' '('
    case 18037:                     // 'descendant-or-self' '('
    case 18038:                     // 'descending' '('
    case 18043:                     // 'div' '('
    case 18044:                     // 'document' '('
    case 18047:                     // 'else' '('
    case 18048:                     // 'empty' '('
    case 18050:                     // 'encoding' '('
    case 18051:                     // 'end' '('
    case 18053:                     // 'eq' '('
    case 18054:                     // 'every' '('
    case 18056:                     // 'except' '('
    case 18057:                     // 'exit' '('
    case 18058:                     // 'external' '('
    case 18059:                     // 'first' '('
    case 18060:                     // 'following' '('
    case 18061:                     // 'following-sibling' '('
    case 18062:                     // 'for' '('
    case 18066:                     // 'ft-option' '('
    case 18071:                     // 'ge' '('
    case 18073:                     // 'group' '('
    case 18075:                     // 'gt' '('
    case 18076:                     // 'idiv' '('
    case 18078:                     // 'import' '('
    case 18079:                     // 'in' '('
    case 18080:                     // 'index' '('
    case 18084:                     // 'insert' '('
    case 18085:                     // 'instance' '('
    case 18086:                     // 'integrity' '('
    case 18087:                     // 'intersect' '('
    case 18088:                     // 'into' '('
    case 18089:                     // 'is' '('
    case 18091:                     // 'json' '('
    case 18095:                     // 'last' '('
    case 18096:                     // 'lax' '('
    case 18097:                     // 'le' '('
    case 18099:                     // 'let' '('
    case 18101:                     // 'loop' '('
    case 18103:                     // 'lt' '('
    case 18104:                     // 'map' '('
    case 18106:                     // 'mod' '('
    case 18107:                     // 'modify' '('
    case 18108:                     // 'module' '('
    case 18110:                     // 'namespace' '('
    case 18112:                     // 'ne' '('
    case 18118:                     // 'nodes' '('
    case 18120:                     // 'object' '('
    case 18124:                     // 'only' '('
    case 18125:                     // 'option' '('
    case 18126:                     // 'or' '('
    case 18127:                     // 'order' '('
    case 18128:                     // 'ordered' '('
    case 18129:                     // 'ordering' '('
    case 18132:                     // 'parent' '('
    case 18138:                     // 'preceding' '('
    case 18139:                     // 'preceding-sibling' '('
    case 18144:                     // 'rename' '('
    case 18145:                     // 'replace' '('
    case 18146:                     // 'return' '('
    case 18147:                     // 'returning' '('
    case 18148:                     // 'revalidation' '('
    case 18150:                     // 'satisfies' '('
    case 18151:                     // 'schema' '('
    case 18154:                     // 'score' '('
    case 18155:                     // 'self' '('
    case 18160:                     // 'sliding' '('
    case 18161:                     // 'some' '('
    case 18162:                     // 'stable' '('
    case 18163:                     // 'start' '('
    case 18166:                     // 'strict' '('
    case 18174:                     // 'to' '('
    case 18175:                     // 'treat' '('
    case 18176:                     // 'try' '('
    case 18177:                     // 'tumbling' '('
    case 18178:                     // 'type' '('
    case 18180:                     // 'union' '('
    case 18182:                     // 'unordered' '('
    case 18183:                     // 'updating' '('
    case 18186:                     // 'validate' '('
    case 18187:                     // 'value' '('
    case 18188:                     // 'variable' '('
    case 18189:                     // 'version' '('
    case 18192:                     // 'where' '('
    case 18193:                     // 'while' '('
    case 18196:                     // 'with' '('
    case 18200:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 144592:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 144646:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 33:                        // '%'
    case 125:                       // 'document-node'
    case 129:                       // 'empty-sequence'
    case 150:                       // 'function'
    case 157:                       // 'if'
    case 170:                       // 'item'
    case 172:                       // 'json-item'
    case 191:                       // 'namespace-node'
    case 197:                       // 'node'
    case 232:                       // 'schema-attribute'
    case 233:                       // 'schema-element'
    case 248:                       // 'structured-item'
    case 249:                       // 'switch'
    case 259:                       // 'typeswitch'
    case 15366:                     // EQName^Token '#'
    case 15435:                     // 'after' '#'
    case 15437:                     // 'allowing' '#'
    case 15438:                     // 'ancestor' '#'
    case 15439:                     // 'ancestor-or-self' '#'
    case 15440:                     // 'and' '#'
    case 15442:                     // 'append' '#'
    case 15443:                     // 'array' '#'
    case 15444:                     // 'as' '#'
    case 15445:                     // 'ascending' '#'
    case 15446:                     // 'at' '#'
    case 15447:                     // 'attribute' '#'
    case 15448:                     // 'base-uri' '#'
    case 15449:                     // 'before' '#'
    case 15450:                     // 'boundary-space' '#'
    case 15451:                     // 'break' '#'
    case 15453:                     // 'case' '#'
    case 15454:                     // 'cast' '#'
    case 15455:                     // 'castable' '#'
    case 15456:                     // 'catch' '#'
    case 15458:                     // 'child' '#'
    case 15459:                     // 'collation' '#'
    case 15461:                     // 'comment' '#'
    case 15462:                     // 'constraint' '#'
    case 15463:                     // 'construction' '#'
    case 15466:                     // 'context' '#'
    case 15467:                     // 'continue' '#'
    case 15468:                     // 'copy' '#'
    case 15469:                     // 'copy-namespaces' '#'
    case 15470:                     // 'count' '#'
    case 15471:                     // 'decimal-format' '#'
    case 15473:                     // 'declare' '#'
    case 15474:                     // 'default' '#'
    case 15475:                     // 'delete' '#'
    case 15476:                     // 'descendant' '#'
    case 15477:                     // 'descendant-or-self' '#'
    case 15478:                     // 'descending' '#'
    case 15483:                     // 'div' '#'
    case 15484:                     // 'document' '#'
    case 15486:                     // 'element' '#'
    case 15487:                     // 'else' '#'
    case 15488:                     // 'empty' '#'
    case 15490:                     // 'encoding' '#'
    case 15491:                     // 'end' '#'
    case 15493:                     // 'eq' '#'
    case 15494:                     // 'every' '#'
    case 15496:                     // 'except' '#'
    case 15497:                     // 'exit' '#'
    case 15498:                     // 'external' '#'
    case 15499:                     // 'first' '#'
    case 15500:                     // 'following' '#'
    case 15501:                     // 'following-sibling' '#'
    case 15502:                     // 'for' '#'
    case 15506:                     // 'ft-option' '#'
    case 15511:                     // 'ge' '#'
    case 15513:                     // 'group' '#'
    case 15515:                     // 'gt' '#'
    case 15516:                     // 'idiv' '#'
    case 15518:                     // 'import' '#'
    case 15519:                     // 'in' '#'
    case 15520:                     // 'index' '#'
    case 15524:                     // 'insert' '#'
    case 15525:                     // 'instance' '#'
    case 15526:                     // 'integrity' '#'
    case 15527:                     // 'intersect' '#'
    case 15528:                     // 'into' '#'
    case 15529:                     // 'is' '#'
    case 15531:                     // 'json' '#'
    case 15535:                     // 'last' '#'
    case 15536:                     // 'lax' '#'
    case 15537:                     // 'le' '#'
    case 15539:                     // 'let' '#'
    case 15541:                     // 'loop' '#'
    case 15543:                     // 'lt' '#'
    case 15544:                     // 'map' '#'
    case 15546:                     // 'mod' '#'
    case 15547:                     // 'modify' '#'
    case 15548:                     // 'module' '#'
    case 15550:                     // 'namespace' '#'
    case 15552:                     // 'ne' '#'
    case 15558:                     // 'nodes' '#'
    case 15560:                     // 'object' '#'
    case 15564:                     // 'only' '#'
    case 15565:                     // 'option' '#'
    case 15566:                     // 'or' '#'
    case 15567:                     // 'order' '#'
    case 15568:                     // 'ordered' '#'
    case 15569:                     // 'ordering' '#'
    case 15572:                     // 'parent' '#'
    case 15578:                     // 'preceding' '#'
    case 15579:                     // 'preceding-sibling' '#'
    case 15582:                     // 'processing-instruction' '#'
    case 15584:                     // 'rename' '#'
    case 15585:                     // 'replace' '#'
    case 15586:                     // 'return' '#'
    case 15587:                     // 'returning' '#'
    case 15588:                     // 'revalidation' '#'
    case 15590:                     // 'satisfies' '#'
    case 15591:                     // 'schema' '#'
    case 15594:                     // 'score' '#'
    case 15595:                     // 'self' '#'
    case 15600:                     // 'sliding' '#'
    case 15601:                     // 'some' '#'
    case 15602:                     // 'stable' '#'
    case 15603:                     // 'start' '#'
    case 15606:                     // 'strict' '#'
    case 15610:                     // 'text' '#'
    case 15614:                     // 'to' '#'
    case 15615:                     // 'treat' '#'
    case 15616:                     // 'try' '#'
    case 15617:                     // 'tumbling' '#'
    case 15618:                     // 'type' '#'
    case 15620:                     // 'union' '#'
    case 15622:                     // 'unordered' '#'
    case 15623:                     // 'updating' '#'
    case 15626:                     // 'validate' '#'
    case 15627:                     // 'value' '#'
    case 15628:                     // 'variable' '#'
    case 15629:                     // 'version' '#'
    case 15632:                     // 'where' '#'
    case 15633:                     // 'while' '#'
    case 15636:                     // 'with' '#'
    case 15640:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case 144568:                    // 'map' '{'
      try_MapConstructor();
      break;
    case -11:
    case 27930:                     // '{' ';'
      try_BlockExpr();
      break;
    case -12:
      try_ObjectConstructor();
      break;
    case 70:                        // '['
    case 144467:                    // 'array' '{'
      try_ArrayConstructor();
      break;
    case 73:                        // '``['
      try_StringConstructor();
      break;
    case 66:                        // '?'
      try_UnaryLookup();
      break;
    case 284:                       // '{|'
      try_JSONSimpleObjectUnion();
      break;
    case -17:
      break;
    default:
      try_Constructor();
    }
  }

  function parse_JSONSimpleObjectUnion()
  {
    eventHandler.startNonterminal("JSONSimpleObjectUnion", e0);
    consume(284);                   // '{|'
    lookahead1W(281);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '|}'
    if (l1 != 287)                  // '|}'
    {
      whitespace();
      parse_Expr();
    }
    consume(287);                   // '|}'
    eventHandler.endNonterminal("JSONSimpleObjectUnion", e0);
  }

  function try_JSONSimpleObjectUnion()
  {
    consumeT(284);                  // '{|'
    lookahead1W(281);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '|}'
    if (l1 != 287)                  // '|}'
    {
      try_Expr();
    }
    consumeT(287);                  // '|}'
  }

  function parse_ObjectConstructor()
  {
    eventHandler.startNonterminal("ObjectConstructor", e0);
    consume(282);                   // '{'
    lookahead1W(282);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
    if (l1 != 288)                  // '}'
    {
      whitespace();
      parse_PairConstructorList();
    }
    consume(288);                   // '}'
    eventHandler.endNonterminal("ObjectConstructor", e0);
  }

  function try_ObjectConstructor()
  {
    consumeT(282);                  // '{'
    lookahead1W(282);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
    if (l1 != 288)                  // '}'
    {
      try_PairConstructorList();
    }
    consumeT(288);                  // '}'
  }

  function parse_PairConstructorList()
  {
    eventHandler.startNonterminal("PairConstructorList", e0);
    parse_PairConstructor();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consume(42);                  // ','
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      whitespace();
      parse_PairConstructor();
    }
    eventHandler.endNonterminal("PairConstructorList", e0);
  }

  function try_PairConstructorList()
  {
    try_PairConstructor();
    for (;;)
    {
      if (l1 != 42)                 // ','
      {
        break;
      }
      consumeT(42);                 // ','
      lookahead1W(276);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      try_PairConstructor();
    }
  }

  function parse_PairConstructor()
  {
    eventHandler.startNonterminal("PairConstructor", e0);
    parse_ExprSingle();
    consume(50);                    // ':'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("PairConstructor", e0);
  }

  function try_PairConstructor()
  {
    try_ExprSingle();
    consumeT(50);                   // ':'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    switch (l1)
    {
    case 70:                        // '['
      parse_SquareArrayConstructor();
      break;
    default:
      parse_CurlyArrayConstructor();
    }
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    switch (l1)
    {
    case 70:                        // '['
      try_SquareArrayConstructor();
      break;
    default:
      try_CurlyArrayConstructor();
    }
  }

  function parse_SquareArrayConstructor()
  {
    eventHandler.startNonterminal("SquareArrayConstructor", e0);
    consume(70);                    // '['
    lookahead1W(280);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 71)                   // ']'
    {
      whitespace();
      parse_ExprSingle();
      for (;;)
      {
        if (l1 != 42)               // ','
        {
          break;
        }
        consume(42);                // ','
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(71);                    // ']'
    eventHandler.endNonterminal("SquareArrayConstructor", e0);
  }

  function try_SquareArrayConstructor()
  {
    consumeT(70);                   // '['
    lookahead1W(280);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 71)                   // ']'
    {
      try_ExprSingle();
      for (;;)
      {
        if (l1 != 42)               // ','
        {
          break;
        }
        consumeT(42);               // ','
        lookahead1W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        try_ExprSingle();
      }
    }
    consumeT(71);                   // ']'
  }

  function parse_CurlyArrayConstructor()
  {
    eventHandler.startNonterminal("CurlyArrayConstructor", e0);
    consume(83);                    // 'array'
    lookahead1W(89);                // S^WS | '(:' | '{'
    whitespace();
    parse_EnclosedExpr();
    eventHandler.endNonterminal("CurlyArrayConstructor", e0);
  }

  function try_CurlyArrayConstructor()
  {
    consumeT(83);                   // 'array'
    lookahead1W(89);                // S^WS | '(:' | '{'
    try_EnclosedExpr();
  }

  function parse_StringConstructor()
  {
    eventHandler.startNonterminal("StringConstructor", e0);
    consume(73);                    // '``['
    parse_StringConstructorContent();
    consume(72);                    // ']``'
    eventHandler.endNonterminal("StringConstructor", e0);
  }

  function try_StringConstructor()
  {
    consumeT(73);                   // '``['
    try_StringConstructorContent();
    consumeT(72);                   // ']``'
  }

  function parse_StringConstructorContent()
  {
    eventHandler.startNonterminal("StringConstructorContent", e0);
    lookahead1(5);                  // StringConstructorChars
    consume(21);                    // StringConstructorChars
    for (;;)
    {
      lookahead1(16);               // ']``' | '`{'
      if (l1 != 74)                 // '`{'
      {
        break;
      }
      parse_StringConstructorInterpolation();
      lookahead1(5);                // StringConstructorChars
      consume(21);                  // StringConstructorChars
    }
    eventHandler.endNonterminal("StringConstructorContent", e0);
  }

  function try_StringConstructorContent()
  {
    lookahead1(5);                  // StringConstructorChars
    consumeT(21);                   // StringConstructorChars
    for (;;)
    {
      lookahead1(16);               // ']``' | '`{'
      if (l1 != 74)                 // '`{'
      {
        break;
      }
      try_StringConstructorInterpolation();
      lookahead1(5);                // StringConstructorChars
      consumeT(21);                 // StringConstructorChars
    }
  }

  function parse_StringConstructorInterpolation()
  {
    eventHandler.startNonterminal("StringConstructorInterpolation", e0);
    consume(74);                    // '`{'
    lookahead1W(283);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}`'
    if (l1 != 289)                  // '}`'
    {
      whitespace();
      parse_Expr();
    }
    consume(289);                   // '}`'
    eventHandler.endNonterminal("StringConstructorInterpolation", e0);
  }

  function try_StringConstructorInterpolation()
  {
    consumeT(74);                   // '`{'
    lookahead1W(283);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}`'
    if (l1 != 289)                  // '}`'
    {
      try_Expr();
    }
    consumeT(289);                  // '}`'
  }

  function parse_BlockExpr()
  {
    eventHandler.startNonterminal("BlockExpr", e0);
    consume(282);                   // '{'
    lookahead1W(285);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
    whitespace();
    parse_StatementsAndOptionalExpr();
    consume(288);                   // '}'
    eventHandler.endNonterminal("BlockExpr", e0);
  }

  function try_BlockExpr()
  {
    consumeT(282);                  // '{'
    lookahead1W(285);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
    try_StatementsAndOptionalExpr();
    consumeT(288);                  // '}'
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(150);                   // 'function'
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(24);                // S^WS | '(' | '(:'
    consume(35);                    // '('
    lookahead1W(96);                // S^WS | '$' | '(:' | ')'
    if (l1 == 32)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(38);                    // ')'
    lookahead1W(150);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 84)                   // 'as'
    {
      whitespace();
      parse_ReturnType();
    }
    lookahead1W(120);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 282:                       // '{'
      consume(282);                 // '{'
      lookahead1W(285);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | '``[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      whitespace();
      parse_StatementsAndOptionalExpr();
      consume(288);                 // '}'
      break;
    default:
      consume(138);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function parse_ReturnType()
  {
    eventHandler.startNonterminal("ReturnType", e0);
    consume(84);                    // 'as'
    lookahead1W(267);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("ReturnType", e0);
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(XQueryParser.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function consumeT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(set)
  {
    var code;
    for (;;)
    {
      code = match(set);
      if (code != 23)               // S^WS
      {
        if (code != 37)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(set)
  {
    if (l1 == 0)
    {
      l1 = matchW(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(set)
  {
    if (l2 == 0)
    {
      l2 = matchW(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function lookahead1(set)
  {
    if (l1 == 0)
    {
      l1 = match(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2(set)
  {
    if (l2 == 0)
    {
      l2 = match(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new thisParser.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 5) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 5) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;

  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = XQueryParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = XQueryParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = XQueryParser.MAP1[(c0 & 15) + XQueryParser.MAP1[(c1 & 31) + XQueryParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }

        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (XQueryParser.MAP2[m] > c0) hi = m - 1;
          else if (XQueryParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = XQueryParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = XQueryParser.TRANSITION[(i0 & 15) + XQueryParser.TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    if (end > size) end = size;
    return (result & 511) - 1;
  }

}

XQueryParser.XmlSerializer = function(log, indent)
{
  var input = null;
  var delayedTag = null;
  var hasChildElement = false;
  var depth = 0;

  this.reset = function(string)
  {
    log("<?xml version=\"1.0\" encoding=\"UTF-8\"?" + ">");
    input = string;
    delayedTag = null;
    hasChildElement = false;
    depth = 0;
  };

  this.startNonterminal = function(tag, begin)
  {
    if (delayedTag != null)
    {
      log("<");
      log(delayedTag);
      log(">");
    }
    delayedTag = tag;
    if (indent)
    {
      log("\n");
      for (var i = 0; i < depth; ++i)
      {
        log("  ");
      }
    }
    hasChildElement = false;
    ++depth;
  };

  this.endNonterminal = function(tag, end)
  {
    --depth;
    if (delayedTag != null)
    {
      delayedTag = null;
      log("<");
      log(tag);
      log("/>");
    }
    else
    {
      if (indent)
      {
        if (hasChildElement)
        {
          log("\n");
          for (var i = 0; i < depth; ++i)
          {
            log("  ");
          }
        }
      }
      log("</");
      log(tag);
      log(">");
    }
    hasChildElement = true;
  };

  this.terminal = function(tag, begin, end)
  {
    if (tag.charAt(0) == '\'') tag = "TOKEN";
    this.startNonterminal(tag, begin);
    characters(begin, end);
    this.endNonterminal(tag, end);
  };

  this.whitespace = function(begin, end)
  {
    characters(begin, end);
  };

  function characters(begin, end)
  {
    if (begin < end)
    {
      if (delayedTag != null)
      {
        log("<");
        log(delayedTag);
        log(">");
        delayedTag = null;
      }
      log(input.substring(begin, end)
               .replace(/&/g, "&amp;")
               .replace(/</g, "&lt;")
               .replace(/>/g, "&gt;"));
    }
  }
};

XQueryParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : XQueryParser.INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 291; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 3638 + s - 1;
    var i1 = i0 >> 2;
    var i2 = i1 >> 2;
    var f = XQueryParser.EXPECTED[(i0 & 3) + XQueryParser.EXPECTED[(i1 & 3) + XQueryParser.EXPECTED[(i2 & 15) + XQueryParser.EXPECTED[i2 >> 4]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(XQueryParser.TOKEN[j]);
      }
    }
  }
  return set;
};

XQueryParser.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new XQueryParser.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new XQueryParser.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
};

XQueryParser.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  };
};

XQueryParser.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  };
};

XQueryParser.MAP0 =
[
  /*   0 */ 71, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 38, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
  /* 118 */ 62, 63, 64, 65, 66, 67, 68, 69, 38, 38
];

XQueryParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 71, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30,
  /* 371 */ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
  /* 398 */ 67, 68, 69, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 70, 38, 38,
  /* 425 */ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
  /* 452 */ 70, 70, 70, 70
];

XQueryParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
  /* 17 */ 38
];

XQueryParser.INITIAL =
[
  /*   0 */ 1, 12290, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
  /* 107 */ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
  /* 128 */ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
  /* 149 */ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
  /* 170 */ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
  /* 191 */ 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
  /* 212 */ 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
  /* 233 */ 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
  /* 254 */ 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
  /* 275 */ 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295
];

XQueryParser.TRANSITION =
[
  /*     0 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*    15 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*    30 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*    45 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*    60 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*    75 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*    90 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*   105 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*   120 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*   135 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*   150 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*   165 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*   180 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*   195 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*   210 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*   225 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*   240 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*   255 */ 19782, 18432, 18470, 18535, 18535, 18535, 18493, 18535, 18535, 18535, 18535, 18507, 18534, 18535, 18535,
  /*   270 */ 18535, 18477, 18475, 18535, 18518, 18551, 19782, 19782, 19782, 22320, 19782, 19782, 41992, 19782, 19782,
  /*   285 */ 19782, 19782, 19782, 19782, 19782, 25572, 19842, 20742, 20740, 19298, 24698, 21132, 18578, 18596, 18612,
  /*   300 */ 43006, 19782, 26820, 19782, 19782, 18663, 18683, 18711, 18716, 20702, 18732, 18748, 19230, 18945, 18774,
  /*   315 */ 21073, 18764, 20827, 18795, 18779, 21078, 18769, 20832, 18821, 19782, 19782, 18837, 19782, 19782, 19782,
  /*   330 */ 18871, 35657, 19782, 18915, 19510, 18931, 20707, 18961, 20216, 20707, 18976, 20340, 20867, 19258, 20527,
  /*   345 */ 20742, 51282, 19291, 20870, 19261, 20530, 20742, 51285, 25998, 19782, 33029, 19000, 28001, 19037, 19073,
  /*   360 */ 25611, 19782, 51363, 46551, 27111, 19222, 19098, 19138, 20328, 19167, 19207, 22573, 20443, 19246, 19883,
  /*   375 */ 19277, 19207, 22573, 20443, 19246, 19883, 19314, 25997, 47097, 19389, 26085, 19440, 50926, 19456, 19477,
  /*   390 */ 19526, 20775, 19329, 19571, 19344, 19609, 19625, 19648, 19671, 19555, 19694, 19618, 19641, 19664, 19548,
  /*   405 */ 19687, 19710, 19722, 19743, 19781, 24870, 30798, 19799, 19835, 19858, 19899, 19940, 19982, 20457, 20000,
  /*   420 */ 20018, 19980, 20455, 19998, 20016, 20034, 20069, 20092, 20135, 20158, 20177, 20207, 26581, 27318, 27334,
  /*   435 */ 50991, 21059, 27333, 50990, 19122, 39818, 20232, 20248, 20298, 20314, 20366, 21931, 20409, 21921, 21937,
  /*   450 */ 20415, 20431, 20473, 20489, 20505, 19359, 20546, 20565, 20549, 20603, 20651, 20687, 20380, 20725, 20393,
  /*   465 */ 20760, 20709, 20742, 20744, 20805, 19873, 20917, 27102, 24692, 20848, 20927, 20886, 20902, 20943, 20969,
  /*   480 */ 21030, 21045, 21094, 21107, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*   495 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*   510 */ 19782, 19782, 21129, 19782, 19782, 19782, 19782, 33405, 19782, 19782, 19782, 19782, 29317, 21148, 21173,
  /*   525 */ 21183, 21192, 21222, 19782, 21208, 21157, 39730, 19782, 19782, 19782, 22320, 19782, 19782, 41992, 26104,
  /*   540 */ 19782, 19782, 19782, 19782, 19782, 19782, 25572, 19842, 20742, 20740, 18805, 20953, 21132, 18578, 18596,
  /*   555 */ 18612, 43006, 19782, 26820, 19782, 19782, 18663, 18683, 18711, 18716, 20702, 18732, 18748, 19230, 18945,
  /*   570 */ 18774, 21073, 18764, 20827, 18795, 18779, 21078, 18769, 20832, 18821, 19782, 19782, 18837, 19782, 19782,
  /*   585 */ 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707, 18961, 20216, 20707, 18976, 20340, 20867, 19258,
  /*   600 */ 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742, 51285, 25998, 19782, 33029, 19000, 28001, 19037,
  /*   615 */ 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098, 19138, 20328, 19167, 19207, 22573, 20443, 19246,
  /*   630 */ 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314, 25997, 47097, 19389, 26085, 19440, 50926, 19456,
  /*   645 */ 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625, 19648, 19671, 19555, 19694, 19618, 19641, 19664,
  /*   660 */ 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798, 19799, 19835, 19858, 19899, 19940, 19982, 20457,
  /*   675 */ 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069, 20092, 20135, 20158, 20177, 20207, 26581, 27318,
  /*   690 */ 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232, 20248, 20298, 20314, 20366, 21931, 20409, 21921,
  /*   705 */ 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546, 20565, 20549, 20603, 20651, 20687, 20380, 20725,
  /*   720 */ 20393, 20760, 20709, 20742, 20744, 20805, 19873, 20917, 27102, 24692, 20848, 20927, 20886, 20902, 20943,
  /*   735 */ 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*   750 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*   765 */ 19782, 19782, 19782, 21271, 21287, 19782, 19782, 19782, 39854, 19782, 19782, 30322, 32370, 26625, 21308,
  /*   780 */ 19782, 19782, 19782, 19782, 21325, 21343, 21356, 22468, 19782, 19782, 19782, 22320, 19782, 19782, 21372,
  /*   795 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 25572, 19842, 20742, 20740, 19298, 24698, 21398, 18578,
  /*   810 */ 18596, 18612, 43006, 19782, 26820, 19782, 19782, 18663, 18683, 18711, 18716, 20702, 18732, 18748, 19230,
  /*   825 */ 18945, 18774, 21073, 18764, 20827, 18795, 18779, 21078, 18769, 20832, 18821, 19782, 19782, 18837, 19782,
  /*   840 */ 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707, 18961, 20216, 20707, 18976, 20340, 20867,
  /*   855 */ 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742, 51285, 25998, 19782, 33029, 19000, 28001,
  /*   870 */ 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098, 19138, 20328, 19167, 19207, 22573, 20443,
  /*   885 */ 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314, 25997, 47097, 19389, 26085, 19440, 50926,
  /*   900 */ 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625, 19648, 19671, 19555, 19694, 19618, 19641,
  /*   915 */ 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798, 19799, 19835, 19858, 19899, 19940, 19982,
  /*   930 */ 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069, 20092, 20135, 20158, 20177, 20207, 26581,
  /*   945 */ 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232, 20248, 20298, 20314, 20366, 21931, 20409,
  /*   960 */ 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546, 20565, 20549, 20603, 20651, 20687, 20380,
  /*   975 */ 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873, 20917, 27102, 24692, 20848, 20927, 20886, 20902,
  /*   990 */ 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  1005 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  1020 */ 19782, 19782, 19782, 19782, 21437, 22671, 19782, 19782, 19782, 33656, 19782, 19782, 29017, 19782, 29317,
  /*  1035 */ 21465, 31754, 21492, 31745, 21535, 21571, 22674, 21476, 39730, 19782, 19782, 19782, 18899, 19782, 19782,
  /*  1050 */ 21597, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 25572, 19842, 20742, 20740, 19298, 24698, 21634,
  /*  1065 */ 18578, 18596, 18612, 43006, 19782, 26820, 19782, 19782, 18663, 18683, 18711, 18716, 20702, 18732, 18748,
  /*  1080 */ 19230, 18945, 18774, 21073, 18764, 20827, 18795, 18779, 21078, 18769, 20832, 18821, 19782, 19782, 18837,
  /*  1095 */ 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707, 18961, 20216, 20707, 18976, 20517,
  /*  1110 */ 20867, 19258, 20527, 20742, 51282, 20580, 20870, 19261, 20530, 20742, 51285, 25998, 19782, 33029, 19000,
  /*  1125 */ 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098, 19138, 20328, 19167, 19207, 22573,
  /*  1140 */ 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314, 25997, 47097, 19389, 26085, 19440,
  /*  1155 */ 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625, 19648, 19671, 19555, 19694, 19618,
  /*  1170 */ 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798, 19799, 19835, 19858, 19899, 19940,
  /*  1185 */ 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069, 20092, 20135, 20158, 20177, 20207,
  /*  1200 */ 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232, 20248, 20298, 20314, 20366, 21931,
  /*  1215 */ 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546, 20565, 20549, 20603, 20651, 20687,
  /*  1230 */ 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873, 20917, 27102, 24692, 20848, 20927, 20886,
  /*  1245 */ 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  1260 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  1275 */ 19782, 19782, 19782, 19782, 19782, 21129, 21698, 19782, 19782, 19782, 33405, 21733, 19782, 24037, 19782,
  /*  1290 */ 22301, 21672, 21690, 21703, 30425, 19782, 21674, 21722, 21752, 39730, 19782, 19782, 19782, 22320, 19782,
  /*  1305 */ 19782, 41992, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 25572, 19842, 20742, 20740, 19298, 24698,
  /*  1320 */ 21132, 18578, 18596, 18612, 43006, 19782, 26820, 19782, 19782, 18663, 18683, 18711, 18716, 20702, 18732,
  /*  1335 */ 18748, 19230, 18945, 18774, 21073, 18764, 20827, 18795, 18779, 21078, 18769, 20832, 18821, 19782, 19782,
  /*  1350 */ 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707, 18961, 20216, 20707, 18976,
  /*  1365 */ 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742, 51285, 25998, 19782, 33029,
  /*  1380 */ 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098, 19138, 20328, 19167, 19207,
  /*  1395 */ 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314, 25997, 47097, 19389, 26085,
  /*  1410 */ 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625, 19648, 19671, 19555, 19694,
  /*  1425 */ 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798, 19799, 19835, 19858, 19899,
  /*  1440 */ 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069, 20092, 20135, 20158, 20177,
  /*  1455 */ 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232, 20248, 20298, 20314, 20366,
  /*  1470 */ 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546, 20565, 20549, 20603, 20651,
  /*  1485 */ 20687, 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873, 20917, 27102, 24692, 20848, 20927,
  /*  1500 */ 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  1515 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  1530 */ 19782, 19782, 19782, 19782, 19782, 19782, 21129, 19782, 19782, 19782, 19782, 33405, 21826, 19782, 19782,
  /*  1545 */ 19782, 45944, 21847, 19782, 22705, 19782, 19782, 48960, 21865, 21878, 39730, 19782, 19782, 19782, 22320,
  /*  1560 */ 19782, 19782, 41992, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 25572, 19842, 20742, 20740, 19298,
  /*  1575 */ 24698, 21132, 18578, 18596, 18612, 43006, 19782, 26820, 19782, 19782, 18663, 18683, 18711, 18716, 20702,
  /*  1590 */ 18732, 18748, 19230, 18945, 18774, 21073, 18764, 20827, 18795, 18779, 21078, 18769, 20832, 18821, 19782,
  /*  1605 */ 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707, 18961, 20216, 20707,
  /*  1620 */ 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742, 51285, 25998, 19782,
  /*  1635 */ 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098, 19138, 20328, 19167,
  /*  1650 */ 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314, 25997, 47097, 19389,
  /*  1665 */ 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625, 19648, 19671, 19555,
  /*  1680 */ 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798, 19799, 19835, 19858,
  /*  1695 */ 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069, 20092, 20135, 20158,
  /*  1710 */ 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232, 20248, 20298, 20314,
  /*  1725 */ 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546, 20565, 20549, 20603,
  /*  1740 */ 20651, 20687, 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873, 20917, 27102, 24692, 20848,
  /*  1755 */ 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  1770 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  1785 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 21129, 19782, 19782, 19782, 19782, 33405, 19782, 19782,
  /*  1800 */ 19782, 19782, 39053, 21894, 19782, 19782, 19782, 19782, 19782, 19782, 46940, 19401, 19782, 19782, 19782,
  /*  1815 */ 22320, 19782, 19782, 41992, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 25572, 19842, 20742, 20740,
  /*  1830 */ 19298, 24698, 21132, 18578, 18596, 18612, 43006, 19782, 26820, 19782, 19782, 18663, 18683, 18711, 18716,
  /*  1845 */ 20702, 18732, 18748, 19230, 20191, 18774, 21073, 18764, 20827, 21911, 18779, 21078, 18769, 20832, 18821,
  /*  1860 */ 19782, 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707, 18961, 20216,
  /*  1875 */ 20707, 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742, 51285, 25998,
  /*  1890 */ 19782, 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098, 19138, 20328,
  /*  1905 */ 19167, 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314, 25997, 47097,
  /*  1920 */ 19389, 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625, 19648, 19671,
  /*  1935 */ 19555, 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798, 19799, 19835,
  /*  1950 */ 19858, 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069, 20092, 20135,
  /*  1965 */ 20158, 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232, 20248, 20298,
  /*  1980 */ 20314, 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546, 20565, 20549,
  /*  1995 */ 20603, 20651, 20687, 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873, 20917, 27102, 24692,
  /*  2010 */ 20848, 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782, 19782, 19782,
  /*  2025 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  2040 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 21953, 21969, 19782, 19782, 19782, 40821, 19782,
  /*  2055 */ 19782, 30617, 33073, 27224, 21308, 19782, 19782, 19782, 19782, 25889, 21990, 18562, 41817, 19782, 19782,
  /*  2070 */ 19782, 22320, 19782, 19782, 22044, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 25572, 19842, 20742,
  /*  2085 */ 20740, 19298, 24698, 22080, 18578, 18596, 18612, 43006, 19782, 26820, 19782, 19782, 18663, 18683, 18711,
  /*  2100 */ 18716, 20702, 18732, 18748, 19230, 18945, 18774, 21073, 18764, 20827, 18795, 18779, 21078, 18769, 20832,
  /*  2115 */ 18821, 19782, 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707, 18961,
  /*  2130 */ 20216, 20707, 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742, 51285,
  /*  2145 */ 25998, 19782, 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098, 19138,
  /*  2160 */ 20328, 19167, 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314, 25997,
  /*  2175 */ 47097, 19389, 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625, 19648,
  /*  2190 */ 19671, 19555, 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798, 19799,
  /*  2205 */ 19835, 19858, 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069, 20092,
  /*  2220 */ 20135, 20158, 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232, 20248,
  /*  2235 */ 20298, 20314, 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546, 20565,
  /*  2250 */ 20549, 20603, 20651, 20687, 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873, 20917, 27102,
  /*  2265 */ 24692, 20848, 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782, 19782,
  /*  2280 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  2295 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 21129, 22118, 22149, 22149, 22149, 22270,
  /*  2310 */ 22142, 22149, 22152, 22126, 22168, 22211, 22251, 22261, 22182, 22195, 22239, 22223, 22286, 39730, 19782,
  /*  2325 */ 19782, 19782, 47168, 19782, 19782, 41992, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 25572, 19842,
  /*  2340 */ 20742, 20740, 19298, 24698, 21132, 18578, 18596, 18612, 26324, 19782, 26820, 19782, 19782, 18663, 18683,
  /*  2355 */ 18711, 18716, 20702, 18732, 18748, 19230, 18945, 18774, 21073, 18764, 20827, 18795, 18779, 21078, 18769,
  /*  2370 */ 20832, 18821, 19782, 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707,
  /*  2385 */ 18961, 20216, 20707, 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742,
  /*  2400 */ 51285, 25998, 19782, 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098,
  /*  2415 */ 19138, 20328, 19167, 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314,
  /*  2430 */ 25997, 47097, 19389, 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625,
  /*  2445 */ 19648, 19671, 19555, 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798,
  /*  2460 */ 19799, 19835, 19858, 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069,
  /*  2475 */ 20092, 20135, 20158, 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232,
  /*  2490 */ 20248, 20298, 20314, 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546,
  /*  2505 */ 20565, 20549, 20603, 20651, 20687, 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873, 20917,
  /*  2520 */ 27102, 24692, 20848, 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782,
  /*  2535 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  2550 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 21129, 35006, 19782, 19782, 19782,
  /*  2565 */ 33405, 22345, 19782, 19782, 22351, 29317, 22336, 19782, 23042, 23051, 23054, 35014, 35010, 22370, 39730,
  /*  2580 */ 19782, 19782, 19782, 24244, 19782, 19782, 41992, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 25572,
  /*  2595 */ 19842, 20742, 20740, 19298, 24698, 21132, 18578, 18596, 18612, 33410, 19782, 26820, 19782, 19782, 18663,
  /*  2610 */ 18683, 18711, 18716, 20702, 18732, 18748, 19230, 18945, 18774, 21073, 18764, 20827, 18795, 18779, 21078,
  /*  2625 */ 18769, 20832, 18821, 19782, 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931,
  /*  2640 */ 20707, 18961, 20216, 20707, 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530,
  /*  2655 */ 20742, 51285, 25998, 19782, 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222,
  /*  2670 */ 19098, 19138, 20328, 19167, 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883,
  /*  2685 */ 19314, 25997, 47097, 19389, 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609,
  /*  2700 */ 19625, 19648, 19671, 19555, 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870,
  /*  2715 */ 30798, 19799, 19835, 19858, 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034,
  /*  2730 */ 20069, 20092, 20135, 20158, 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818,
  /*  2745 */ 20232, 20248, 20298, 20314, 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359,
  /*  2760 */ 20546, 20565, 20549, 20603, 20651, 20687, 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873,
  /*  2775 */ 20917, 27102, 24692, 20848, 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782,
  /*  2790 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  2805 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 21129, 21255, 19782, 19782,
  /*  2820 */ 19782, 33405, 19782, 19782, 19782, 26550, 36235, 22386, 22411, 22421, 22395, 22455, 22503, 22533, 22547,
  /*  2835 */ 39730, 19782, 19782, 19782, 22320, 19782, 19782, 41992, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  2850 */ 25572, 19842, 20742, 20740, 19298, 24698, 21132, 18578, 18596, 18612, 43006, 19782, 26820, 19782, 19782,
  /*  2865 */ 18663, 18683, 18711, 18716, 20702, 18732, 18748, 19230, 18945, 18774, 21073, 18764, 20827, 22563, 18779,
  /*  2880 */ 21078, 18769, 20832, 18821, 19782, 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510,
  /*  2895 */ 18931, 20707, 18961, 20216, 20707, 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261,
  /*  2910 */ 20530, 20742, 51285, 25998, 19782, 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111,
  /*  2925 */ 19222, 19098, 19138, 20328, 19167, 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246,
  /*  2940 */ 19883, 19314, 25997, 47097, 19389, 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344,
  /*  2955 */ 19609, 19625, 19648, 19671, 19555, 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781,
  /*  2970 */ 24870, 30798, 19799, 19835, 19858, 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016,
  /*  2985 */ 20034, 20069, 20092, 20135, 20158, 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122,
  /*  3000 */ 39818, 20232, 20248, 20298, 20314, 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505,
  /*  3015 */ 19359, 20546, 20565, 20549, 20603, 20651, 20687, 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805,
  /*  3030 */ 19873, 20917, 27102, 24692, 20848, 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782,
  /*  3045 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  3060 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 21129, 19782, 19782,
  /*  3075 */ 19782, 19782, 33405, 19782, 19782, 19782, 24085, 50809, 22589, 22599, 22615, 22598, 22658, 19782, 22596,
  /*  3090 */ 22690, 39730, 19782, 19782, 19782, 22320, 19782, 19782, 41992, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  3105 */ 19782, 25572, 19842, 20742, 20740, 19298, 24698, 21132, 18578, 18596, 18612, 43006, 19782, 26839, 19782,
  /*  3120 */ 19782, 18663, 18683, 18711, 18716, 20702, 18732, 18748, 19230, 18945, 18774, 21073, 18764, 20827, 18795,
  /*  3135 */ 18779, 21078, 18769, 20832, 18821, 19782, 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915,
  /*  3150 */ 19510, 18931, 20707, 18961, 20216, 20707, 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870,
  /*  3165 */ 19261, 20530, 20742, 51285, 25998, 19782, 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551,
  /*  3180 */ 27111, 19222, 19098, 19138, 20328, 19167, 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443,
  /*  3195 */ 19246, 19883, 19314, 25997, 47097, 19389, 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571,
  /*  3210 */ 19344, 19609, 19625, 19648, 19671, 19555, 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743,
  /*  3225 */ 19781, 24870, 30798, 19799, 19835, 19858, 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998,
  /*  3240 */ 20016, 20034, 20069, 20092, 20135, 20158, 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990,
  /*  3255 */ 19122, 39818, 20232, 20248, 20298, 20314, 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489,
  /*  3270 */ 20505, 19359, 20546, 20565, 20549, 20603, 20651, 20687, 20380, 20725, 20393, 20760, 20709, 20742, 20744,
  /*  3285 */ 20805, 19873, 20917, 27102, 24692, 20848, 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107,
  /*  3300 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  3315 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 21129, 29688,
  /*  3330 */ 19782, 19782, 19782, 33405, 22738, 19782, 19782, 22730, 26644, 22754, 22782, 22789, 22789, 22792, 29686,
  /*  3345 */ 22808, 22821, 39730, 19782, 19782, 19782, 22320, 19782, 19782, 41992, 19782, 19782, 19782, 19782, 19782,
  /*  3360 */ 19782, 19782, 25572, 19842, 20742, 20740, 19298, 24698, 21132, 18578, 18596, 18612, 43006, 19782, 26820,
  /*  3375 */ 19782, 19782, 18663, 18683, 18711, 18716, 20702, 18732, 18748, 19230, 18945, 18774, 21073, 18764, 20827,
  /*  3390 */ 18795, 18779, 21078, 18769, 20832, 18821, 19782, 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782,
  /*  3405 */ 18915, 19510, 18931, 20707, 18961, 20216, 20707, 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291,
  /*  3420 */ 20870, 19261, 20530, 20742, 51285, 25998, 19782, 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363,
  /*  3435 */ 46551, 27111, 19222, 19098, 19138, 20328, 19167, 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573,
  /*  3450 */ 20443, 19246, 19883, 19314, 25997, 47097, 19389, 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329,
  /*  3465 */ 19571, 19344, 19609, 19625, 19648, 19671, 19555, 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722,
  /*  3480 */ 19743, 19781, 24870, 30798, 19799, 19835, 19858, 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455,
  /*  3495 */ 19998, 20016, 20034, 20069, 20092, 20135, 20158, 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333,
  /*  3510 */ 50990, 19122, 39818, 20232, 20248, 20298, 20314, 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473,
  /*  3525 */ 20489, 20505, 19359, 20546, 20565, 20549, 20603, 20651, 20687, 20380, 20725, 20393, 20760, 20709, 20742,
  /*  3540 */ 20744, 20805, 19873, 20917, 27102, 24692, 20848, 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094,
  /*  3555 */ 21107, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  3570 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 22837,
  /*  3585 */ 19782, 19782, 19782, 19782, 33405, 19782, 19782, 19782, 19782, 29317, 22861, 22871, 22887, 22870, 23029,
  /*  3600 */ 19782, 22868, 23070, 23107, 19782, 19782, 19782, 22320, 19782, 19782, 41992, 19782, 19782, 19782, 19782,
  /*  3615 */ 19782, 19782, 19782, 35489, 51103, 31388, 42844, 28960, 42835, 23142, 19782, 23161, 19782, 43006, 28431,
  /*  3630 */ 26839, 19782, 23181, 19782, 19782, 19782, 23278, 28524, 32702, 28524, 28524, 29167, 31388, 23199, 31388,
  /*  3645 */ 31388, 23217, 23379, 29586, 29586, 33324, 37323, 19782, 19782, 19782, 19782, 19782, 19782, 39684, 44296,
  /*  3660 */ 43082, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 28524, 23236, 31388, 31388, 31388, 31388, 31388,
  /*  3675 */ 23258, 29586, 29586, 29586, 29586, 29588, 44603, 19782, 39884, 23277, 19782, 19782, 19782, 19782, 49400,
  /*  3690 */ 19782, 19782, 32058, 30571, 28524, 28524, 28524, 28525, 23294, 33975, 31388, 23328, 31388, 31389, 23348,
  /*  3705 */ 47280, 29586, 23375, 29586, 29587, 44602, 19782, 19782, 19782, 19782, 19782, 20045, 19782, 38085, 28524,
  /*  3720 */ 29976, 28524, 28524, 23419, 31388, 34775, 31388, 31388, 31389, 44651, 29586, 23395, 29586, 29586, 44595,
  /*  3735 */ 46137, 19782, 19782, 43389, 19782, 19782, 28524, 28524, 28524, 23413, 31388, 31388, 31388, 23435, 44654,
  /*  3750 */ 29586, 29586, 33319, 35404, 23454, 19782, 29283, 23475, 35488, 23493, 28524, 31448, 23513, 31388, 47621,
  /*  3765 */ 23532, 29586, 28300, 23552, 19782, 21413, 33882, 23569, 28524, 23596, 23630, 43707, 23649, 29586, 28299,
  /*  3780 */ 19782, 29901, 49480, 23678, 47524, 47575, 45001, 23704, 46140, 29666, 23741, 43367, 23757, 35630, 40135,
  /*  3795 */ 40154, 42846, 49479, 34395, 47619, 37278, 23806, 41167, 37278, 51103, 47619, 42914, 34416, 33502, 32018,
  /*  3810 */ 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  3825 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  3840 */ 21129, 19782, 19782, 19782, 19782, 33405, 19782, 19782, 19782, 35698, 29317, 21308, 19782, 19782, 19782,
  /*  3855 */ 19782, 19782, 23822, 23835, 39730, 19782, 19782, 19782, 22320, 19782, 19782, 23851, 19782, 19782, 19782,
  /*  3870 */ 19782, 19782, 19782, 19782, 35489, 51103, 31388, 42844, 46826, 42835, 23142, 19782, 19782, 19782, 43006,
  /*  3885 */ 19782, 26820, 19782, 19782, 19782, 19782, 19782, 23278, 28524, 28524, 28524, 28524, 29167, 31388, 31388,
  /*  3900 */ 31388, 31388, 23217, 29586, 29586, 29586, 29226, 37323, 19782, 19782, 19782, 19782, 19782, 19782, 39684,
  /*  3915 */ 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 28524, 23236, 31388, 31388, 31388, 31388,
  /*  3930 */ 31388, 23258, 29586, 29586, 29586, 29586, 29588, 44603, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  3945 */ 19782, 19782, 19782, 35488, 28524, 28524, 28524, 28524, 28525, 28901, 31388, 31388, 31388, 31388, 31389,
  /*  3960 */ 44653, 29586, 29586, 29586, 29586, 29587, 44602, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 38085,
  /*  3975 */ 28524, 28524, 28524, 28524, 23419, 31388, 31388, 31388, 31388, 31389, 44651, 29586, 29586, 29586, 29586,
  /*  3990 */ 44595, 46137, 19782, 19782, 19782, 19782, 19782, 28524, 28524, 28524, 28526, 31388, 31388, 31388, 31388,
  /*  4005 */ 44654, 29586, 29586, 29586, 35404, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 31448, 31388, 31388,
  /*  4020 */ 47621, 29586, 29586, 28300, 19782, 19782, 19782, 38084, 28524, 28524, 31449, 31388, 33722, 29586, 29586,
  /*  4035 */ 28299, 19782, 29901, 49480, 28524, 31450, 33720, 29586, 38434, 46140, 49480, 51104, 33723, 29587, 30550,
  /*  4050 */ 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414, 37278, 51103, 47619, 42914, 34416, 33502,
  /*  4065 */ 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  4080 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  4095 */ 19782, 21129, 26477, 19782, 19782, 19782, 33384, 19782, 19782, 19782, 19782, 29317, 23870, 23981, 23889,
  /*  4110 */ 23873, 23941, 19782, 23979, 23997, 39730, 19782, 19782, 19782, 22320, 19782, 19782, 41992, 26998, 19782,
  /*  4125 */ 24034, 19782, 19782, 19782, 19782, 25572, 19842, 20742, 20740, 19298, 24698, 21132, 18578, 18596, 18612,
  /*  4140 */ 43006, 19782, 26820, 19782, 19782, 18663, 18683, 18711, 18716, 20702, 18732, 18748, 19230, 18945, 18774,
  /*  4155 */ 21073, 18764, 20827, 18795, 18779, 21078, 18769, 20832, 18821, 19782, 19782, 18837, 19782, 19782, 19782,
  /*  4170 */ 18871, 35657, 19782, 18915, 19510, 18931, 20707, 18961, 20216, 20707, 18976, 20340, 20867, 19258, 20527,
  /*  4185 */ 20742, 51282, 19291, 20870, 19261, 20530, 20742, 51285, 25998, 19782, 33029, 19000, 28001, 19037, 19073,
  /*  4200 */ 25611, 19782, 51363, 46551, 27111, 19222, 19098, 19138, 20328, 19167, 19207, 22573, 20443, 19246, 19883,
  /*  4215 */ 19277, 19207, 22573, 20443, 19246, 19883, 19314, 25997, 47097, 19389, 26085, 19440, 50926, 19456, 19477,
  /*  4230 */ 19526, 20775, 19329, 19571, 19344, 19609, 19625, 19648, 19671, 19555, 19694, 19618, 19641, 19664, 19548,
  /*  4245 */ 19687, 19710, 19722, 19743, 19781, 24870, 30798, 19799, 19835, 19858, 19899, 19940, 19982, 20457, 20000,
  /*  4260 */ 20018, 19980, 20455, 19998, 20016, 20034, 20069, 20092, 20135, 20158, 20177, 20207, 26581, 27318, 27334,
  /*  4275 */ 50991, 21059, 27333, 50990, 19122, 39818, 20232, 20248, 20298, 20314, 20366, 21931, 20409, 21921, 21937,
  /*  4290 */ 20415, 20431, 20473, 20489, 20505, 19359, 20546, 20565, 20549, 20603, 20651, 20687, 20380, 20725, 20393,
  /*  4305 */ 20760, 20709, 20742, 20744, 20805, 19873, 20917, 27102, 24692, 20848, 20927, 20886, 20902, 20943, 20969,
  /*  4320 */ 21030, 21045, 21094, 21107, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  4335 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  4350 */ 19782, 19782, 21129, 26547, 19782, 19782, 19782, 33405, 19782, 19782, 19782, 37882, 29317, 21308, 19782,
  /*  4365 */ 19782, 19782, 19782, 26536, 24053, 24066, 39539, 19782, 19782, 19782, 22320, 19782, 19782, 24082, 19782,
  /*  4380 */ 19782, 19782, 19782, 19782, 19782, 19782, 35489, 51103, 31388, 42844, 47287, 42835, 23142, 19782, 19782,
  /*  4395 */ 19782, 43006, 19782, 31245, 40085, 19782, 19782, 19782, 19782, 23278, 28524, 28524, 28524, 28524, 29167,
  /*  4410 */ 31388, 31388, 31388, 31388, 23217, 29586, 29586, 29586, 29226, 37323, 24101, 19782, 19782, 19782, 19782,
  /*  4425 */ 19782, 18855, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 28524, 23236, 31388, 31388,
  /*  4440 */ 31388, 31388, 31388, 23258, 29586, 29586, 29586, 29586, 29588, 33754, 24137, 24157, 19782, 19782, 19782,
  /*  4455 */ 19782, 26744, 19782, 19782, 19782, 35488, 28524, 28524, 28524, 28524, 33673, 28901, 31388, 31388, 31388,
  /*  4470 */ 31388, 23201, 44653, 29586, 29586, 29586, 29586, 29587, 29611, 24153, 19782, 19782, 19782, 19782, 19782,
  /*  4485 */ 19782, 38085, 28524, 28524, 28524, 28524, 29470, 31388, 31388, 31388, 31388, 23201, 24174, 29586, 29586,
  /*  4500 */ 29586, 29586, 44595, 46137, 19782, 19782, 19782, 19782, 19782, 28524, 28524, 28524, 31071, 31388, 31388,
  /*  4515 */ 31388, 31388, 24192, 29586, 29586, 29586, 35404, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 31448,
  /*  4530 */ 31388, 31388, 47621, 29586, 29586, 28300, 19782, 19782, 19782, 38084, 28524, 28524, 31449, 31388, 33722,
  /*  4545 */ 29586, 29586, 28299, 19782, 29901, 49480, 28524, 31450, 33720, 29586, 38434, 46140, 49480, 51104, 33723,
  /*  4560 */ 29587, 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414, 37278, 51103, 47619, 42914,
  /*  4575 */ 34416, 33502, 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  4590 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  4605 */ 19782, 19782, 19782, 21129, 34590, 19782, 19782, 19782, 42551, 25383, 19782, 19782, 24210, 29317, 24226,
  /*  4620 */ 41090, 23954, 23963, 24260, 19782, 19782, 24301, 41744, 19782, 19782, 19782, 24894, 19782, 19782, 41992,
  /*  4635 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 25572, 25580, 24777, 24492, 24605, 25451, 21132, 18578,
  /*  4650 */ 18596, 18612, 31830, 19782, 26820, 19782, 19782, 18663, 18683, 18711, 18716, 20702, 18732, 18748, 19230,
  /*  4665 */ 20789, 25225, 24477, 24332, 24562, 24358, 25502, 24384, 25139, 24400, 24431, 19782, 19782, 18837, 19782,
  /*  4680 */ 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707, 18961, 20216, 20707, 18976, 19583, 24568,
  /*  4695 */ 24550, 24342, 24777, 24772, 24598, 25149, 25652, 25075, 25144, 24447, 24415, 19782, 33029, 19000, 28001,
  /*  4710 */ 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098, 19138, 20328, 19167, 24510, 19924, 24538,
  /*  4725 */ 24526, 25187, 24584, 24621, 24368, 24649, 24637, 25661, 24677, 24414, 47097, 19389, 26085, 19440, 50926,
  /*  4740 */ 19456, 19477, 19526, 20775, 19329, 19571, 19344, 24714, 24760, 24795, 24729, 24811, 24855, 24316, 25482,
  /*  4755 */ 25549, 25493, 25302, 24910, 24926, 19743, 19781, 24870, 30798, 19799, 19835, 19858, 19899, 19940, 25218,
  /*  4770 */ 24947, 24744, 25004, 25020, 24661, 25047, 25063, 25100, 20069, 20092, 20135, 20158, 20177, 20207, 26581,
  /*  4785 */ 51410, 25179, 24826, 24839, 25127, 24988, 25031, 39818, 20232, 20248, 20298, 20314, 20366, 25165, 25203,
  /*  4800 */ 19593, 25414, 24976, 25241, 20473, 20489, 20505, 19359, 25271, 25287, 25331, 25347, 25363, 20687, 19373,
  /*  4815 */ 25399, 25255, 25430, 25576, 24779, 24494, 20805, 19914, 24962, 25562, 25445, 25467, 25084, 25518, 25534,
  /*  4830 */ 24462, 25596, 25637, 25315, 25677, 25690, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  4845 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  4860 */ 19782, 19782, 19782, 19782, 21129, 26763, 19782, 19782, 19782, 33405, 25717, 19782, 19782, 25712, 45616,
  /*  4875 */ 25733, 25770, 25770, 25770, 25773, 19782, 25758, 25742, 39730, 19782, 19782, 19782, 22320, 19782, 19782,
  /*  4890 */ 41992, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 25572, 19842, 20742, 20740, 19298, 24698, 21132,
  /*  4905 */ 18578, 18596, 18612, 43006, 19782, 26820, 19782, 19782, 18663, 18683, 18711, 18716, 20702, 18732, 18748,
  /*  4920 */ 19230, 18945, 18774, 21073, 18764, 20827, 18795, 18779, 21078, 18769, 20832, 18821, 19782, 19782, 18837,
  /*  4935 */ 19782, 19782, 19782, 25789, 25825, 19782, 18915, 19510, 18931, 20707, 18961, 20216, 20707, 18976, 20340,
  /*  4950 */ 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742, 51285, 25932, 25875, 25907, 19000,
  /*  4965 */ 28001, 19037, 19073, 25840, 19782, 51363, 46551, 27111, 19222, 19098, 19138, 20328, 19167, 19207, 22573,
  /*  4980 */ 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314, 25931, 25948, 19389, 26085, 19440,
  /*  4995 */ 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 25982, 19625, 19648, 19671, 19555, 26014, 26054,
  /*  5010 */ 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798, 19799, 19835, 19858, 19899, 26070,
  /*  5025 */ 19982, 20457, 20000, 20018, 26029, 20455, 19998, 20016, 20034, 20069, 20092, 20135, 20158, 20177, 20207,
  /*  5040 */ 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232, 20248, 20298, 20314, 20366, 21931,
  /*  5055 */ 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546, 20565, 20549, 20603, 20651, 20687,
  /*  5070 */ 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873, 20917, 27102, 24692, 20848, 20927, 20886,
  /*  5085 */ 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  5100 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  5115 */ 19782, 19782, 19782, 19782, 19782, 21129, 19782, 19782, 19782, 19782, 33405, 19782, 19782, 19782, 19782,
  /*  5130 */ 19782, 26120, 26130, 26130, 26130, 26133, 19782, 26149, 26162, 39730, 19782, 19782, 19782, 22320, 19782,
  /*  5145 */ 19782, 41992, 19782, 19782, 26178, 19782, 19782, 19782, 19782, 25572, 19842, 20742, 20740, 19298, 19537,
  /*  5160 */ 21132, 18578, 18596, 18612, 43006, 19782, 26820, 19782, 19782, 18663, 18683, 18711, 18716, 20702, 18732,
  /*  5175 */ 18748, 19230, 18945, 18774, 21073, 18764, 20827, 18795, 18779, 21078, 18769, 20832, 18821, 19782, 19782,
  /*  5190 */ 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707, 18961, 20216, 20707, 18976,
  /*  5205 */ 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742, 51285, 25998, 19782, 33029,
  /*  5220 */ 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098, 19138, 20328, 19167, 19207,
  /*  5235 */ 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314, 25997, 47097, 19389, 26085,
  /*  5250 */ 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625, 19648, 19671, 19555, 19694,
  /*  5265 */ 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798, 19799, 19835, 19858, 19899,
  /*  5280 */ 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069, 20092, 20135, 20158, 20177,
  /*  5295 */ 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232, 20248, 20298, 20314, 20366,
  /*  5310 */ 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546, 20565, 20549, 20603, 20651,
  /*  5325 */ 20687, 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873, 20917, 27102, 24692, 20848, 20927,
  /*  5340 */ 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  5355 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  5370 */ 19782, 19782, 19782, 19782, 19782, 19782, 26198, 21849, 19782, 19782, 19782, 33405, 19782, 19782, 19782,
  /*  5385 */ 19782, 29317, 26236, 26261, 26271, 26281, 26311, 19782, 26297, 26245, 40054, 19782, 19782, 19782, 22320,
  /*  5400 */ 19782, 19782, 41992, 19782, 19782, 26348, 19782, 19782, 19782, 19782, 25572, 19842, 20742, 20740, 19298,
  /*  5415 */ 20816, 21132, 18578, 18596, 18612, 43006, 19782, 26820, 19782, 19782, 18663, 18683, 18711, 18716, 20702,
  /*  5430 */ 18732, 18748, 19230, 18945, 18774, 21073, 18764, 20827, 18795, 18779, 21078, 18769, 20832, 18821, 19782,
  /*  5445 */ 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707, 18961, 20216, 20707,
  /*  5460 */ 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742, 51285, 25998, 19782,
  /*  5475 */ 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098, 19138, 20328, 19167,
  /*  5490 */ 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314, 25997, 47097, 19389,
  /*  5505 */ 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625, 19648, 19671, 19555,
  /*  5520 */ 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798, 19799, 19835, 19858,
  /*  5535 */ 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069, 20092, 20135, 20158,
  /*  5550 */ 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232, 20248, 20298, 20314,
  /*  5565 */ 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546, 20565, 20549, 20603,
  /*  5580 */ 20651, 20687, 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873, 20917, 27102, 24692, 20848,
  /*  5595 */ 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  5610 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  5625 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26370, 23085, 19782, 19782, 19782, 47133, 19782, 19782,
  /*  5640 */ 19782, 19782, 29317, 26406, 26445, 26445, 26445, 26448, 19782, 26431, 26415, 26464, 19782, 19782, 19782,
  /*  5655 */ 22320, 19782, 19782, 41992, 19782, 19782, 26499, 19782, 19782, 19782, 19782, 25572, 19842, 20742, 20740,
  /*  5670 */ 19298, 24698, 26521, 18578, 18596, 18612, 43006, 19782, 26820, 19782, 19782, 18663, 18683, 18711, 18716,
  /*  5685 */ 20702, 18732, 18748, 19230, 18945, 18774, 21073, 18764, 20827, 18795, 18779, 21078, 18769, 20832, 18821,
  /*  5700 */ 19782, 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707, 18961, 20216,
  /*  5715 */ 20707, 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742, 51285, 25998,
  /*  5730 */ 19782, 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098, 19138, 20328,
  /*  5745 */ 19167, 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314, 25997, 47097,
  /*  5760 */ 19389, 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625, 19648, 19671,
  /*  5775 */ 19555, 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798, 19799, 19835,
  /*  5790 */ 19858, 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069, 20092, 20135,
  /*  5805 */ 20158, 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232, 20248, 20298,
  /*  5820 */ 20314, 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546, 20565, 20549,
  /*  5835 */ 20603, 20651, 20687, 20380, 20725, 20393, 26566, 20709, 20742, 20744, 20805, 19873, 20917, 27102, 24692,
  /*  5850 */ 20848, 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782, 19782, 19782,
  /*  5865 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  5880 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26610, 19782, 19782, 19782, 19782, 33405, 32423,
  /*  5895 */ 19782, 19782, 26801, 25966, 21308, 32426, 19782, 26664, 26660, 19782, 26680, 26693, 39730, 19782, 19782,
  /*  5910 */ 19782, 22320, 19782, 19782, 41992, 30416, 19782, 19782, 19782, 19782, 19782, 19782, 25572, 19842, 20742,
  /*  5925 */ 20740, 20350, 19111, 21132, 18578, 18596, 18612, 43006, 19782, 26820, 19782, 19782, 18663, 18683, 18711,
  /*  5940 */ 18716, 20702, 18732, 18748, 19230, 18945, 18774, 21073, 18764, 20827, 18795, 18779, 21078, 18769, 20832,
  /*  5955 */ 18821, 19782, 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707, 18961,
  /*  5970 */ 20216, 20707, 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742, 51285,
  /*  5985 */ 25998, 19782, 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098, 19138,
  /*  6000 */ 20328, 19167, 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314, 25997,
  /*  6015 */ 47097, 19389, 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625, 19648,
  /*  6030 */ 19671, 19555, 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798, 19799,
  /*  6045 */ 19835, 19858, 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069, 20092,
  /*  6060 */ 20135, 20158, 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232, 20248,
  /*  6075 */ 20298, 20314, 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546, 20565,
  /*  6090 */ 20549, 20603, 20651, 20687, 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873, 20917, 27102,
  /*  6105 */ 24692, 20848, 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782, 19782,
  /*  6120 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  6135 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 21129, 19782, 19782, 19782, 19782, 33405,
  /*  6150 */ 19782, 19782, 19782, 19782, 29317, 21308, 19782, 19782, 19782, 19782, 19782, 26709, 26722, 39730, 19782,
  /*  6165 */ 19782, 19782, 22320, 19782, 19782, 41992, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 25572, 19842,
  /*  6180 */ 20742, 20740, 19298, 24698, 21132, 18578, 18596, 18612, 43006, 19782, 26820, 19782, 19782, 18663, 18683,
  /*  6195 */ 18711, 18716, 20702, 18732, 18748, 19230, 18945, 18774, 21073, 18764, 20827, 18795, 18779, 21078, 18769,
  /*  6210 */ 20832, 18821, 19782, 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707,
  /*  6225 */ 18961, 20216, 20707, 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742,
  /*  6240 */ 51285, 25998, 19782, 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098,
  /*  6255 */ 19138, 20328, 19167, 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314,
  /*  6270 */ 25997, 47097, 19389, 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625,
  /*  6285 */ 19648, 19671, 19555, 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798,
  /*  6300 */ 19799, 19835, 19858, 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069,
  /*  6315 */ 20092, 20135, 20158, 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232,
  /*  6330 */ 20248, 20298, 20314, 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546,
  /*  6345 */ 20565, 20549, 20603, 20651, 20687, 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873, 20917,
  /*  6360 */ 27102, 24692, 20848, 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782,
  /*  6375 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  6390 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26738, 19782, 19782, 19782, 19782,
  /*  6405 */ 36044, 19782, 19782, 19782, 19782, 29317, 21308, 19782, 19782, 19782, 50412, 34266, 34342, 29426, 37463,
  /*  6420 */ 19782, 19782, 19782, 22320, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 35489,
  /*  6435 */ 51103, 31388, 42844, 28960, 42835, 26760, 19782, 19782, 19782, 43006, 19782, 19782, 19782, 19782, 19782,
  /*  6450 */ 19782, 19782, 23278, 28524, 28524, 28524, 28524, 50291, 31388, 31388, 31388, 31388, 26779, 29586, 29586,
  /*  6465 */ 29586, 29226, 37323, 19782, 19782, 19782, 19782, 19782, 19782, 40414, 19782, 19782, 19782, 19782, 38085,
  /*  6480 */ 28524, 28524, 28524, 28524, 28524, 23236, 31388, 31388, 31388, 31388, 31388, 23258, 29586, 29586, 29586,
  /*  6495 */ 29586, 29588, 38214, 47450, 24157, 19782, 19782, 19782, 19782, 26744, 19782, 19782, 19782, 35488, 28524,
  /*  6510 */ 28524, 28524, 28524, 28525, 28901, 31388, 31388, 31388, 31388, 31389, 44653, 29586, 29586, 29586, 29586,
  /*  6525 */ 29587, 29611, 24153, 19782, 19782, 19782, 19782, 26798, 19782, 38085, 28524, 28524, 28524, 28524, 38367,
  /*  6540 */ 31388, 31388, 31388, 31388, 31389, 24174, 29586, 29586, 29586, 29586, 44595, 46137, 19782, 19782, 19782,
  /*  6555 */ 19782, 19782, 28524, 28524, 28524, 31071, 31388, 31388, 31388, 31388, 24192, 29586, 29586, 29586, 35404,
  /*  6570 */ 19782, 19782, 19819, 19782, 35488, 28524, 28524, 31448, 31388, 31388, 47621, 29586, 29586, 28300, 19782,
  /*  6585 */ 19782, 19782, 38084, 28524, 28524, 31449, 31388, 33722, 29586, 29586, 28299, 19782, 29901, 49480, 28524,
  /*  6600 */ 31450, 33720, 29586, 38434, 46140, 49480, 51104, 33723, 29587, 30550, 32185, 33721, 42846, 49479, 34395,
  /*  6615 */ 47619, 37278, 51102, 34414, 37278, 51103, 47619, 42914, 34416, 33502, 32018, 41494, 41504, 19782, 19782,
  /*  6630 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  6645 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26738, 19782, 19782, 19782,
  /*  6660 */ 19782, 36044, 19782, 19782, 19782, 19782, 29317, 21308, 19782, 19782, 19782, 50412, 34266, 34342, 29426,
  /*  6675 */ 37463, 19782, 19782, 19782, 22320, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  6690 */ 35489, 51103, 31388, 42844, 28960, 42835, 26760, 19782, 19782, 19782, 43006, 19782, 19782, 19782, 19782,
  /*  6705 */ 19782, 19782, 19782, 23278, 28524, 28524, 28524, 28524, 50291, 31388, 31388, 31388, 31388, 26779, 29586,
  /*  6720 */ 29586, 29586, 29226, 37323, 19782, 19782, 19782, 19782, 19782, 19782, 40414, 19782, 19782, 19782, 19782,
  /*  6735 */ 38085, 28524, 28524, 28524, 28524, 28524, 23236, 31388, 31388, 31388, 31388, 31388, 23258, 29586, 29586,
  /*  6750 */ 29586, 29586, 29588, 38214, 47450, 24157, 19782, 19782, 19782, 19782, 26744, 19782, 19782, 19782, 35488,
  /*  6765 */ 28524, 28524, 28524, 28524, 28525, 28901, 31388, 31388, 31388, 31388, 31389, 44653, 29586, 29586, 29586,
  /*  6780 */ 29586, 29587, 29611, 24153, 19782, 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524,
  /*  6795 */ 38367, 31388, 31388, 31388, 31388, 31389, 24174, 29586, 29586, 29586, 29586, 44595, 46137, 19782, 19782,
  /*  6810 */ 19782, 19782, 19782, 28524, 28524, 28524, 31071, 31388, 31388, 31388, 31388, 24192, 29586, 29586, 29586,
  /*  6825 */ 35404, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 31448, 31388, 31388, 47621, 29586, 29586, 28300,
  /*  6840 */ 19782, 19782, 19782, 38084, 28524, 28524, 31449, 31388, 33722, 29586, 29586, 28299, 19782, 29901, 49480,
  /*  6855 */ 28524, 31450, 33720, 29586, 38434, 46140, 49480, 51104, 33723, 29587, 30550, 32185, 33721, 42846, 49479,
  /*  6870 */ 34395, 47619, 37278, 51102, 34414, 37278, 51103, 47619, 42914, 34416, 33502, 32018, 41494, 41504, 19782,
  /*  6885 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  6900 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26738, 19782, 19782,
  /*  6915 */ 19782, 19782, 36044, 19782, 19782, 19782, 19782, 29317, 21308, 19782, 19782, 19782, 50412, 34266, 34342,
  /*  6930 */ 29426, 37463, 19782, 19782, 19782, 22320, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  6945 */ 19782, 35489, 51103, 31388, 42844, 28960, 42835, 26760, 19782, 19782, 19782, 43006, 19782, 19782, 19782,
  /*  6960 */ 19782, 19782, 19782, 19782, 23278, 28524, 28524, 28524, 28524, 50291, 31388, 31388, 31388, 31388, 26779,
  /*  6975 */ 29586, 29586, 29586, 29226, 37323, 19782, 19782, 19782, 19782, 19782, 19782, 40414, 42261, 19782, 19782,
  /*  6990 */ 19782, 38085, 28524, 28524, 28524, 28524, 28524, 23236, 31388, 31388, 31388, 31388, 31388, 23258, 29586,
  /*  7005 */ 29586, 29586, 29586, 29588, 38214, 47450, 24157, 19782, 19782, 19782, 19782, 26744, 19782, 19782, 19782,
  /*  7020 */ 35488, 28524, 28524, 28524, 28524, 28525, 28901, 31388, 31388, 31388, 31388, 31389, 44653, 29586, 29586,
  /*  7035 */ 29586, 29586, 29587, 29611, 24153, 19782, 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524,
  /*  7050 */ 28524, 38367, 31388, 31388, 31388, 31388, 31389, 24174, 29586, 29586, 29586, 29586, 44595, 46137, 19782,
  /*  7065 */ 19782, 19782, 19782, 19782, 28524, 28524, 28524, 31071, 31388, 31388, 31388, 31388, 24192, 29586, 29586,
  /*  7080 */ 29586, 35404, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 31448, 31388, 31388, 47621, 29586, 29586,
  /*  7095 */ 28300, 19782, 19782, 19782, 38084, 28524, 28524, 31449, 31388, 33722, 29586, 29586, 28299, 19782, 29901,
  /*  7110 */ 49480, 28524, 31450, 33720, 29586, 38434, 46140, 49480, 51104, 33723, 29587, 30550, 32185, 33721, 42846,
  /*  7125 */ 49479, 34395, 47619, 37278, 51102, 34414, 37278, 51103, 47619, 42914, 34416, 33502, 32018, 41494, 41504,
  /*  7140 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  7155 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26738, 19782,
  /*  7170 */ 19782, 19782, 19782, 36044, 19782, 19782, 19782, 19782, 29317, 21308, 19782, 19782, 19782, 50412, 34266,
  /*  7185 */ 34342, 29426, 37463, 19782, 19782, 19782, 22320, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  7200 */ 19782, 19782, 35489, 51103, 31388, 42844, 28960, 42835, 26760, 19782, 19782, 19782, 43006, 19782, 19782,
  /*  7215 */ 19782, 19782, 19782, 19782, 19782, 23278, 28524, 28524, 28524, 28524, 50291, 31388, 31388, 31388, 31388,
  /*  7230 */ 26779, 29586, 29586, 29586, 29226, 37323, 19782, 19782, 19782, 19782, 19782, 19782, 40414, 19782, 19782,
  /*  7245 */ 19782, 19782, 38085, 28524, 28524, 28524, 28524, 28524, 23236, 31388, 31388, 31388, 31388, 31388, 23258,
  /*  7260 */ 29586, 29586, 29586, 29586, 29588, 38214, 47450, 24157, 19782, 19782, 19782, 19782, 26744, 50957, 19782,
  /*  7275 */ 19782, 35488, 28524, 28524, 28524, 28524, 28525, 28901, 31388, 31388, 31388, 31388, 31389, 44653, 29586,
  /*  7290 */ 29586, 29586, 29586, 29587, 29611, 24153, 19782, 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524,
  /*  7305 */ 28524, 28524, 38367, 31388, 31388, 31388, 31388, 31389, 24174, 29586, 29586, 29586, 29586, 44595, 46137,
  /*  7320 */ 19782, 19782, 19782, 19782, 19782, 28524, 28524, 28524, 31071, 31388, 31388, 31388, 31388, 24192, 29586,
  /*  7335 */ 29586, 29586, 35404, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 31448, 31388, 31388, 47621, 29586,
  /*  7350 */ 29586, 28300, 19782, 19782, 19782, 38084, 28524, 28524, 31449, 31388, 33722, 29586, 29586, 28299, 19782,
  /*  7365 */ 29901, 49480, 28524, 31450, 33720, 29586, 38434, 46140, 49480, 51104, 33723, 29587, 30550, 32185, 33721,
  /*  7380 */ 42846, 49479, 34395, 47619, 37278, 51102, 34414, 37278, 51103, 47619, 42914, 34416, 33502, 32018, 41494,
  /*  7395 */ 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  7410 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26738,
  /*  7425 */ 19782, 19782, 19782, 19782, 36044, 19782, 19782, 19782, 19782, 29317, 21308, 19782, 19782, 19782, 50412,
  /*  7440 */ 34266, 34342, 29426, 37463, 19782, 19782, 19782, 22320, 19782, 19782, 26817, 19782, 19782, 19782, 19782,
  /*  7455 */ 19782, 19782, 19782, 35489, 51103, 31388, 42844, 28960, 42835, 26760, 19782, 19782, 19782, 43006, 19782,
  /*  7470 */ 34714, 19782, 19782, 19782, 19782, 19782, 23278, 28524, 28524, 28524, 28524, 50291, 31388, 31388, 31388,
  /*  7485 */ 31388, 26779, 29586, 29586, 29586, 29226, 37323, 19782, 19782, 19782, 19782, 19782, 19782, 40414, 19782,
  /*  7500 */ 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 28524, 23236, 31388, 31388, 31388, 31388, 31388,
  /*  7515 */ 23258, 29586, 29586, 29586, 29586, 29588, 38214, 47450, 24157, 19782, 19782, 19782, 19782, 26744, 19782,
  /*  7530 */ 19782, 19782, 35488, 28524, 28524, 28524, 28524, 28525, 28901, 31388, 31388, 31388, 31388, 31389, 44653,
  /*  7545 */ 29586, 29586, 29586, 29586, 29587, 29611, 24153, 19782, 19782, 19782, 19782, 19782, 19782, 38085, 28524,
  /*  7560 */ 28524, 28524, 28524, 38367, 31388, 31388, 31388, 31388, 31389, 24174, 29586, 29586, 29586, 29586, 44595,
  /*  7575 */ 46137, 19782, 19782, 19782, 19782, 19782, 28524, 28524, 28524, 31071, 31388, 31388, 31388, 31388, 24192,
  /*  7590 */ 29586, 29586, 29586, 35404, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 31448, 31388, 31388, 47621,
  /*  7605 */ 29586, 29586, 28300, 19782, 19782, 19782, 38084, 28524, 28524, 31449, 31388, 33722, 29586, 29586, 28299,
  /*  7620 */ 19782, 29901, 49480, 28524, 31450, 33720, 29586, 38434, 46140, 49480, 51104, 33723, 29587, 30550, 32185,
  /*  7635 */ 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414, 37278, 51103, 47619, 42914, 34416, 33502, 32018,
  /*  7650 */ 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  7665 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  7680 */ 26738, 19782, 19782, 19782, 19782, 36044, 19782, 19782, 19782, 19782, 29317, 21308, 19782, 19782, 19782,
  /*  7695 */ 50412, 34266, 34342, 29426, 37463, 19782, 19782, 19782, 22320, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  7710 */ 19782, 19782, 19782, 19782, 35489, 51103, 31388, 42844, 28960, 42835, 26760, 19782, 19782, 19782, 43006,
  /*  7725 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 23278, 28524, 28524, 28524, 28524, 50291, 31388, 31388,
  /*  7740 */ 31388, 31388, 26779, 29586, 29586, 29586, 29226, 37323, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  7755 */ 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 28524, 23236, 31388, 31388, 31388, 31388,
  /*  7770 */ 31388, 23258, 29586, 29586, 29586, 29586, 29588, 44603, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  7785 */ 19782, 19782, 19782, 35488, 28524, 28524, 28524, 28524, 28525, 28901, 31388, 31388, 31388, 31388, 31389,
  /*  7800 */ 44653, 29586, 29586, 29586, 29586, 29587, 44602, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 38085,
  /*  7815 */ 28524, 28524, 28524, 28524, 23419, 31388, 31388, 31388, 31388, 31389, 44651, 29586, 29586, 29586, 29586,
  /*  7830 */ 44595, 46137, 19782, 19782, 19782, 19782, 19782, 28524, 28524, 28524, 28526, 31388, 31388, 31388, 31388,
  /*  7845 */ 44654, 29586, 29586, 29586, 35404, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 31448, 31388, 31388,
  /*  7860 */ 47621, 29586, 29586, 28300, 19782, 19782, 19782, 38084, 28524, 28524, 31449, 31388, 33722, 29586, 29586,
  /*  7875 */ 28299, 19782, 29901, 49480, 28524, 31450, 33720, 29586, 38434, 46140, 49480, 51104, 33723, 29587, 30550,
  /*  7890 */ 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414, 37278, 51103, 47619, 42914, 34416, 33502,
  /*  7905 */ 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  7920 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  7935 */ 19782, 26738, 19782, 19782, 19782, 19782, 36044, 19782, 19782, 19782, 19782, 29317, 21308, 19782, 19782,
  /*  7950 */ 19782, 50412, 34266, 34342, 29426, 37463, 19782, 19782, 19782, 22320, 19782, 19782, 19782, 19782, 19782,
  /*  7965 */ 19782, 19782, 19782, 19782, 19782, 35489, 51103, 31388, 42844, 28960, 42835, 26836, 19782, 19782, 19782,
  /*  7980 */ 43006, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 23278, 28524, 28524, 28524, 28524, 50291, 31388,
  /*  7995 */ 31388, 31388, 31388, 26779, 29586, 29586, 29586, 29226, 37323, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  8010 */ 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 28524, 23236, 31388, 31388, 31388,
  /*  8025 */ 31388, 31388, 23258, 29586, 29586, 29586, 29586, 29588, 44603, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  8040 */ 19782, 19782, 19782, 19782, 35488, 28524, 28524, 28524, 28524, 28525, 28901, 31388, 31388, 31388, 31388,
  /*  8055 */ 31389, 44653, 29586, 29586, 29586, 29586, 29587, 44602, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  8070 */ 38085, 28524, 28524, 28524, 28524, 23419, 31388, 31388, 31388, 31388, 31389, 44651, 29586, 29586, 29586,
  /*  8085 */ 29586, 44595, 46137, 19782, 19782, 19782, 19782, 19782, 28524, 28524, 28524, 28526, 31388, 31388, 31388,
  /*  8100 */ 31388, 44654, 29586, 29586, 29586, 35404, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 31448, 31388,
  /*  8115 */ 31388, 47621, 29586, 29586, 28300, 19782, 19782, 19782, 38084, 28524, 28524, 31449, 31388, 33722, 29586,
  /*  8130 */ 29586, 28299, 19782, 29901, 49480, 28524, 31450, 33720, 29586, 38434, 46140, 49480, 51104, 33723, 29587,
  /*  8145 */ 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414, 37278, 51103, 47619, 42914, 34416,
  /*  8160 */ 33502, 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  8175 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  8190 */ 19782, 19782, 26738, 19782, 19782, 19782, 19782, 36044, 19782, 19782, 19782, 19782, 29317, 21308, 19782,
  /*  8205 */ 19782, 19782, 50412, 34266, 34342, 32987, 37463, 19782, 19782, 19782, 22320, 19782, 19782, 19782, 19782,
  /*  8220 */ 19782, 19782, 19782, 19782, 19782, 19782, 35489, 51103, 31388, 42844, 28960, 42835, 26760, 19782, 19782,
  /*  8235 */ 19782, 43006, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 23278, 28524, 28524, 28524, 28524, 50291,
  /*  8250 */ 31388, 31388, 31388, 31388, 26779, 29586, 29586, 29586, 29226, 37323, 19782, 19782, 19782, 19782, 19782,
  /*  8265 */ 19782, 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 28524, 23236, 31388, 31388,
  /*  8280 */ 31388, 31388, 31388, 23258, 29586, 29586, 29586, 29586, 29588, 44603, 19782, 19782, 19782, 19782, 19782,
  /*  8295 */ 19782, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 28524, 28524, 28525, 28901, 31388, 31388, 31388,
  /*  8310 */ 31388, 31389, 44653, 29586, 29586, 29586, 29586, 29587, 44602, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  8325 */ 19782, 38085, 28524, 28524, 28524, 28524, 23419, 31388, 31388, 31388, 31388, 31389, 44651, 29586, 29586,
  /*  8340 */ 29586, 29586, 44595, 46137, 19782, 19782, 19782, 19782, 19782, 28524, 28524, 28524, 28526, 31388, 31388,
  /*  8355 */ 31388, 31388, 44654, 29586, 29586, 29586, 35404, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 31448,
  /*  8370 */ 31388, 31388, 47621, 29586, 29586, 28300, 19782, 19782, 19782, 38084, 28524, 28524, 31449, 31388, 33722,
  /*  8385 */ 29586, 29586, 28299, 19782, 29901, 49480, 28524, 31450, 33720, 29586, 38434, 46140, 49480, 51104, 33723,
  /*  8400 */ 29587, 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414, 37278, 51103, 47619, 42914,
  /*  8415 */ 34416, 33502, 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  8430 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  8445 */ 19782, 19782, 19782, 26738, 19782, 19782, 19782, 19782, 36044, 19782, 19782, 19782, 19782, 29317, 26855,
  /*  8460 */ 19782, 19782, 19782, 50412, 34266, 34342, 29426, 37463, 19782, 19782, 19782, 22320, 19782, 19782, 19782,
  /*  8475 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 35489, 51103, 31388, 42844, 28960, 42835, 26760, 19782,
  /*  8490 */ 19782, 19782, 43006, 19782, 19782, 19782, 40572, 19782, 19782, 19782, 23278, 28524, 28524, 28524, 28524,
  /*  8505 */ 50291, 31388, 31388, 31388, 31388, 26779, 29586, 29586, 29586, 29226, 37323, 19782, 19782, 19782, 19782,
  /*  8520 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 28524, 23236, 31388,
  /*  8535 */ 31388, 31388, 31388, 31388, 23258, 29586, 29586, 29586, 29586, 29588, 44603, 19782, 19782, 19782, 19782,
  /*  8550 */ 19782, 19782, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 28524, 28524, 28525, 28901, 31388, 31388,
  /*  8565 */ 31388, 31388, 31389, 44653, 29586, 29586, 29586, 29586, 29587, 44602, 19782, 19782, 19782, 19782, 19782,
  /*  8580 */ 19782, 19782, 38085, 28524, 28524, 28524, 28524, 23419, 31388, 31388, 31388, 31388, 31389, 44651, 29586,
  /*  8595 */ 29586, 29586, 29586, 44595, 46137, 19782, 19782, 19782, 19782, 19782, 28524, 28524, 28524, 28526, 31388,
  /*  8610 */ 31388, 31388, 31388, 44654, 29586, 29586, 29586, 35404, 19782, 19782, 19782, 19782, 35488, 28524, 28524,
  /*  8625 */ 31448, 31388, 31388, 47621, 29586, 29586, 28300, 19782, 19782, 19782, 38084, 28524, 28524, 31449, 31388,
  /*  8640 */ 33722, 29586, 29586, 28299, 19782, 29901, 49480, 28524, 31450, 33720, 29586, 38434, 46140, 49480, 51104,
  /*  8655 */ 33723, 29587, 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414, 37278, 51103, 47619,
  /*  8670 */ 42914, 34416, 33502, 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  8685 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  8700 */ 19782, 19782, 19782, 19782, 26738, 19782, 19782, 19782, 19782, 36044, 19782, 19782, 19782, 19782, 29317,
  /*  8715 */ 21308, 19782, 19782, 19782, 34840, 26878, 26893, 26907, 37463, 19782, 19782, 19782, 22320, 19782, 19782,
  /*  8730 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 35489, 51103, 31388, 42844, 28960, 42835, 26760,
  /*  8745 */ 19782, 19782, 19782, 43006, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 23278, 28524, 28524, 28524,
  /*  8760 */ 28524, 50291, 31388, 31388, 31388, 31388, 26779, 29586, 29586, 29586, 29226, 37323, 19782, 19782, 19782,
  /*  8775 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 28524, 23236,
  /*  8790 */ 31388, 31388, 31388, 31388, 31388, 23258, 29586, 29586, 29586, 29586, 29588, 44603, 19782, 19782, 19782,
  /*  8805 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 28524, 28524, 28525, 28901, 31388,
  /*  8820 */ 31388, 31388, 31388, 31389, 44653, 29586, 29586, 29586, 29586, 29587, 44602, 19782, 19782, 19782, 19782,
  /*  8835 */ 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 23419, 31388, 31388, 31388, 31388, 31389, 44651,
  /*  8850 */ 29586, 29586, 29586, 29586, 44595, 46137, 19782, 19782, 19782, 19782, 19782, 28524, 28524, 28524, 28526,
  /*  8865 */ 31388, 31388, 31388, 31388, 44654, 29586, 29586, 29586, 35404, 19782, 19782, 19782, 19782, 35488, 28524,
  /*  8880 */ 28524, 31448, 31388, 31388, 47621, 29586, 29586, 28300, 19782, 19782, 19782, 38084, 28524, 28524, 31449,
  /*  8895 */ 31388, 33722, 29586, 29586, 28299, 19782, 29901, 49480, 28524, 31450, 33720, 29586, 38434, 46140, 49480,
  /*  8910 */ 51104, 33723, 29587, 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414, 37278, 51103,
  /*  8925 */ 47619, 42914, 34416, 33502, 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  8940 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  8955 */ 19782, 19782, 19782, 19782, 19782, 26738, 19782, 19782, 19782, 19782, 36044, 19782, 19782, 19782, 19782,
  /*  8970 */ 29317, 21308, 19782, 19782, 19782, 50412, 34266, 34342, 29426, 37463, 19782, 19782, 19782, 22320, 19782,
  /*  8985 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 35489, 51103, 31388, 42844, 28960, 42835,
  /*  9000 */ 26760, 19782, 19782, 19782, 43006, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 23278, 28524, 28524,
  /*  9015 */ 28524, 28524, 50291, 31388, 31388, 31388, 31388, 26779, 29586, 29586, 29586, 29226, 37323, 19782, 19782,
  /*  9030 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 28524,
  /*  9045 */ 23236, 31388, 31388, 31388, 31388, 31388, 23258, 29586, 29586, 29586, 29586, 29588, 44603, 19782, 19782,
  /*  9060 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 28524, 28524, 28525, 28901,
  /*  9075 */ 31388, 31388, 31388, 31388, 31389, 44653, 29586, 29586, 29586, 29586, 29587, 44602, 19782, 19782, 19782,
  /*  9090 */ 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 23419, 31388, 31388, 31388, 31388, 31389,
  /*  9105 */ 44651, 29586, 29586, 29586, 29586, 44595, 46137, 19782, 19782, 50460, 19782, 19782, 28524, 28524, 28524,
  /*  9120 */ 28526, 31388, 31388, 31388, 31388, 44654, 29586, 29586, 29586, 35404, 19782, 19782, 19782, 19782, 35488,
  /*  9135 */ 28524, 28524, 31448, 31388, 31388, 47621, 29586, 29586, 28300, 19782, 19782, 19782, 38084, 28524, 28524,
  /*  9150 */ 31449, 31388, 33722, 29586, 29586, 28299, 19782, 29901, 49480, 28524, 31450, 33720, 29586, 38434, 46140,
  /*  9165 */ 49480, 51104, 33723, 29587, 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414, 37278,
  /*  9180 */ 51103, 47619, 42914, 34416, 33502, 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  9195 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  9210 */ 19782, 19782, 19782, 19782, 19782, 19782, 26923, 19782, 19782, 19782, 19782, 36044, 19782, 19782, 19782,
  /*  9225 */ 19782, 29317, 21308, 19782, 19782, 19782, 50412, 34266, 34342, 29426, 37463, 19782, 19782, 19782, 22320,
  /*  9240 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 35489, 51103, 31388, 42844, 28960,
  /*  9255 */ 42835, 26760, 19782, 19782, 19782, 43006, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 23278, 28524,
  /*  9270 */ 28524, 28524, 28524, 50291, 31388, 31388, 31388, 31388, 26779, 29586, 29586, 29586, 29226, 37323, 19782,
  /*  9285 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524,
  /*  9300 */ 28524, 23236, 31388, 31388, 31388, 31388, 31388, 23258, 29586, 29586, 29586, 29586, 29588, 44603, 19782,
  /*  9315 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 28524, 28524, 28525,
  /*  9330 */ 28901, 31388, 31388, 31388, 31388, 31389, 44653, 29586, 29586, 29586, 29586, 29587, 44602, 19782, 19782,
  /*  9345 */ 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 23419, 31388, 31388, 31388, 31388,
  /*  9360 */ 31389, 44651, 29586, 29586, 29586, 29586, 44595, 46137, 19782, 19782, 19782, 19782, 19782, 28524, 28524,
  /*  9375 */ 28524, 28526, 31388, 31388, 31388, 31388, 44654, 29586, 29586, 29586, 35404, 19782, 19782, 19782, 19782,
  /*  9390 */ 35488, 28524, 28524, 31448, 31388, 31388, 47621, 29586, 29586, 28300, 19782, 19782, 19782, 38084, 28524,
  /*  9405 */ 28524, 31449, 31388, 33722, 29586, 29586, 28299, 19782, 29901, 49480, 28524, 31450, 33720, 29586, 38434,
  /*  9420 */ 46140, 49480, 51104, 33723, 29587, 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414,
  /*  9435 */ 37278, 51103, 47619, 42914, 34416, 33502, 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  9450 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  9465 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 21129, 19782, 19782, 19782, 19782, 33405, 19782, 19782,
  /*  9480 */ 19782, 19782, 29317, 26945, 26964, 26989, 26948, 27041, 19782, 26964, 26973, 39730, 19782, 19782, 19782,
  /*  9495 */ 22320, 19782, 19782, 41992, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 25572, 19842, 20742, 20740,
  /*  9510 */ 19298, 24698, 21132, 18578, 18596, 18612, 43006, 19782, 26820, 19782, 27070, 18663, 18683, 18711, 18716,
  /*  9525 */ 20702, 18732, 18748, 19230, 18945, 18774, 21073, 18764, 20827, 18795, 18779, 21078, 18769, 27088, 18821,
  /*  9540 */ 19782, 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707, 18961, 20216,
  /*  9555 */ 20707, 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742, 51285, 25998,
  /*  9570 */ 19782, 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098, 19138, 20328,
  /*  9585 */ 19167, 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314, 25997, 47097,
  /*  9600 */ 19389, 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625, 19648, 19671,
  /*  9615 */ 19555, 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798, 19799, 19835,
  /*  9630 */ 19858, 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069, 20092, 20135,
  /*  9645 */ 20158, 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232, 27127, 20298,
  /*  9660 */ 20314, 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546, 20565, 20549,
  /*  9675 */ 20603, 20651, 20687, 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873, 20917, 27102, 24692,
  /*  9690 */ 20848, 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782, 19782, 19782,
  /*  9705 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  9720 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 21129, 19782, 19782, 19782, 19782, 33405, 19782,
  /*  9735 */ 19782, 19782, 19782, 29317, 21308, 19782, 19782, 19782, 19782, 19782, 19782, 46940, 39730, 19782, 19782,
  /*  9750 */ 19782, 22320, 19782, 19782, 41992, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 25572, 19842, 20742,
  /*  9765 */ 20740, 19298, 24698, 21132, 18578, 18596, 18612, 43006, 19782, 26820, 19782, 19782, 18663, 18683, 18711,
  /*  9780 */ 18716, 20702, 18732, 18748, 19230, 18945, 18774, 21073, 18764, 20827, 18795, 18779, 21078, 18769, 20832,
  /*  9795 */ 18821, 19782, 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707, 18961,
  /*  9810 */ 20216, 20707, 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742, 51285,
  /*  9825 */ 25998, 19782, 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098, 19138,
  /*  9840 */ 20328, 19167, 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314, 25997,
  /*  9855 */ 47097, 19389, 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625, 19648,
  /*  9870 */ 19671, 19555, 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798, 19799,
  /*  9885 */ 19835, 19858, 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069, 20092,
  /*  9900 */ 20135, 20158, 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232, 20248,
  /*  9915 */ 20298, 20314, 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546, 20565,
  /*  9930 */ 20549, 20603, 20651, 20687, 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873, 20917, 27102,
  /*  9945 */ 24692, 20848, 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782, 19782,
  /*  9960 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /*  9975 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 27156, 27175, 19782, 19782, 19782, 33405,
  /*  9990 */ 19782, 19782, 19782, 19782, 29317, 27192, 19782, 24273, 24282, 24285, 19782, 27193, 27209, 39730, 19782,
  /* 10005 */ 19782, 19782, 22320, 19782, 19782, 41992, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 25572, 19842,
  /* 10020 */ 20742, 20740, 19298, 24698, 27159, 18578, 18596, 18612, 43006, 19782, 26820, 19782, 19782, 18663, 18683,
  /* 10035 */ 18711, 18716, 20702, 18732, 18748, 19230, 18945, 18774, 21073, 18764, 20827, 18795, 18779, 21078, 18769,
  /* 10050 */ 20832, 18821, 19782, 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707,
  /* 10065 */ 18961, 20216, 20707, 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742,
  /* 10080 */ 51285, 25998, 19782, 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098,
  /* 10095 */ 19138, 20328, 19167, 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314,
  /* 10110 */ 25997, 47097, 19389, 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625,
  /* 10125 */ 19648, 19671, 19555, 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798,
  /* 10140 */ 19799, 19835, 19858, 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069,
  /* 10155 */ 20092, 20135, 20158, 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232,
  /* 10170 */ 20248, 20298, 20314, 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 27251, 20505, 19359, 20546,
  /* 10185 */ 20565, 20549, 20603, 27267, 20687, 20380, 20725, 20393, 27303, 20709, 20742, 20744, 20805, 19873, 20917,
  /* 10200 */ 27102, 24692, 20848, 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782,
  /* 10215 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 10230 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 27350, 27372, 19782, 19782, 19782,
  /* 10245 */ 33405, 19782, 19782, 19782, 19782, 29317, 21308, 19782, 19782, 19782, 19782, 19782, 27389, 27402, 27418,
  /* 10260 */ 19782, 19782, 19782, 22320, 19782, 19782, 41992, 19782, 19782, 27458, 19782, 19782, 19782, 19782, 25572,
  /* 10275 */ 19842, 20742, 20740, 26038, 24698, 27475, 18578, 18596, 18612, 43006, 19782, 26820, 19782, 19782, 18663,
  /* 10290 */ 18683, 18711, 18716, 20702, 18732, 18748, 19230, 18945, 18774, 21073, 18764, 20827, 18795, 18779, 21078,
  /* 10305 */ 18769, 20832, 18821, 19782, 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931,
  /* 10320 */ 20707, 18961, 20216, 20707, 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530,
  /* 10335 */ 20742, 51285, 25998, 19782, 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222,
  /* 10350 */ 19098, 19138, 20328, 19167, 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883,
  /* 10365 */ 19314, 25997, 47097, 19389, 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609,
  /* 10380 */ 19625, 19648, 19671, 19555, 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870,
  /* 10395 */ 30798, 19799, 19835, 19858, 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034,
  /* 10410 */ 20069, 20092, 20135, 20158, 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818,
  /* 10425 */ 20232, 20248, 20298, 20314, 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359,
  /* 10440 */ 20546, 20565, 20549, 20603, 20651, 20687, 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873,
  /* 10455 */ 20917, 27102, 24692, 20848, 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782,
  /* 10470 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 10485 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26738, 19782, 27527, 19782,
  /* 10500 */ 19782, 36044, 27054, 27526, 19782, 27511, 27543, 27578, 27588, 27598, 27614, 27626, 27642, 27657, 27671,
  /* 10515 */ 37463, 27687, 29945, 19782, 27709, 19813, 33862, 27800, 27745, 27780, 29309, 32401, 27816, 40450, 27852,
  /* 10530 */ 27868, 27884, 32782, 44496, 27915, 27931, 27971, 19782, 19782, 19782, 43309, 39507, 47419, 30596, 39703,
  /* 10545 */ 27287, 19782, 37428, 38618, 28524, 28524, 28524, 37095, 50291, 31388, 31388, 31388, 28017, 26779, 29586,
  /* 10560 */ 29586, 23220, 29226, 37323, 19782, 39476, 19782, 31784, 40922, 46862, 40414, 36074, 19782, 42587, 42568,
  /* 10575 */ 28036, 28058, 28524, 28524, 46184, 48722, 28111, 28146, 31388, 31388, 43220, 28181, 28215, 48526, 29586,
  /* 10590 */ 29586, 28270, 28292, 28316, 47450, 28384, 19782, 21831, 44054, 19782, 28419, 19782, 33775, 28466, 51097,
  /* 10605 */ 28488, 28524, 28523, 28542, 32710, 29541, 28562, 50131, 31388, 28596, 50299, 24176, 28615, 35148, 29586,
  /* 10620 */ 28648, 50577, 28667, 28703, 28727, 28745, 19782, 48954, 28769, 19782, 38085, 28818, 28524, 28524, 28869,
  /* 10635 */ 28890, 40001, 28920, 31388, 44416, 36927, 28940, 43583, 29586, 29586, 28976, 44595, 35600, 28992, 29013,
  /* 10650 */ 29033, 32555, 41995, 35678, 48600, 29050, 31071, 42382, 33259, 30176, 31388, 29071, 29115, 36558, 29586,
  /* 10665 */ 43937, 28997, 19782, 19782, 19782, 35488, 28846, 35524, 31448, 32268, 38923, 47621, 46819, 45349, 28300,
  /* 10680 */ 19782, 19782, 19782, 38084, 28524, 28524, 31449, 31388, 33722, 29586, 29586, 28299, 19782, 29901, 49480,
  /* 10695 */ 28524, 31450, 33720, 29586, 38434, 46140, 49480, 51104, 33723, 29587, 29143, 29191, 29207, 29223, 29242,
  /* 10710 */ 42922, 48744, 34313, 51102, 34414, 45420, 51103, 47619, 42914, 34416, 33502, 32018, 41494, 41504, 19782,
  /* 10725 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 10740 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26738, 19782, 29278,
  /* 10755 */ 19782, 19782, 36044, 19782, 19782, 19782, 19782, 20635, 29299, 19782, 37185, 37194, 29333, 29347, 29363,
  /* 10770 */ 29377, 37463, 19782, 19782, 19782, 22320, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 10785 */ 19782, 35489, 29393, 41147, 42844, 29412, 42835, 26760, 19782, 19782, 19782, 43006, 19782, 19782, 19782,
  /* 10800 */ 19782, 19782, 19782, 19782, 23278, 28524, 28524, 28524, 28524, 50291, 31388, 31388, 31388, 31388, 26779,
  /* 10815 */ 29586, 29586, 29586, 29226, 37323, 19782, 19782, 19782, 19782, 19782, 40027, 40414, 33445, 19782, 29442,
  /* 10830 */ 19782, 38085, 28524, 28524, 28524, 28524, 29461, 23236, 31388, 31388, 31388, 44764, 43504, 23258, 29586,
  /* 10845 */ 29586, 29586, 39233, 29486, 38214, 47450, 24157, 19782, 19782, 19782, 19782, 26744, 19782, 19782, 19782,
  /* 10860 */ 35488, 28524, 28524, 28524, 28524, 28525, 28901, 31388, 31388, 31388, 31388, 31389, 44653, 29586, 29586,
  /* 10875 */ 29586, 29586, 29587, 29611, 24153, 19782, 50962, 19782, 19782, 19782, 19050, 41107, 29509, 28524, 28524,
  /* 10890 */ 28524, 29530, 39991, 31388, 31388, 31388, 40288, 29557, 29585, 29586, 29586, 29586, 29604, 46137, 19782,
  /* 10905 */ 19782, 19782, 19782, 19782, 28524, 28524, 28524, 31071, 31388, 31388, 31388, 31388, 24192, 29586, 29586,
  /* 10920 */ 29586, 35404, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 31448, 31388, 31388, 47621, 29586, 29586,
  /* 10935 */ 28300, 19782, 19782, 19782, 38084, 28524, 28524, 31449, 31388, 33722, 29586, 29586, 28299, 19782, 29901,
  /* 10950 */ 49480, 28524, 31450, 33720, 29586, 38434, 46140, 49480, 51104, 33723, 29587, 30550, 32185, 33721, 42846,
  /* 10965 */ 49479, 29627, 29643, 29659, 51102, 34414, 37278, 51103, 47619, 42914, 34416, 33502, 32018, 41494, 41504,
  /* 10980 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 10995 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26738, 19782,
  /* 11010 */ 27140, 19782, 19782, 36044, 19782, 29682, 19782, 27490, 36144, 29704, 29714, 29730, 29745, 29757, 29773,
  /* 11025 */ 29788, 29804, 37463, 19782, 19782, 48780, 43660, 19782, 39778, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 11040 */ 29835, 38511, 35489, 46335, 32274, 42844, 32973, 29853, 26760, 46160, 19782, 19782, 45857, 19782, 25377,
  /* 11055 */ 19782, 26384, 29923, 29943, 49461, 47964, 29961, 29998, 28524, 28524, 43688, 38140, 31388, 31388, 31388,
  /* 11070 */ 30019, 30044, 29586, 29586, 29226, 37323, 19782, 43867, 19782, 19782, 44291, 19782, 30077, 19782, 36798,
  /* 11085 */ 19782, 19782, 38085, 43901, 30128, 30145, 44911, 28524, 23236, 30162, 48058, 31388, 30198, 31388, 23258,
  /* 11100 */ 30219, 37966, 29586, 30246, 29588, 38214, 47450, 24157, 19782, 19782, 30264, 19782, 47400, 19782, 19782,
  /* 11115 */ 19782, 35488, 28524, 28524, 33150, 42703, 28525, 28901, 31388, 31388, 30916, 50544, 31389, 44653, 29586,
  /* 11130 */ 29586, 38563, 26782, 29587, 29611, 30282, 19782, 19782, 19782, 30317, 49670, 19782, 38085, 28524, 28524,
  /* 11145 */ 28524, 30338, 38367, 31388, 31388, 31388, 43734, 31389, 24174, 29586, 29586, 31408, 29586, 44595, 46137,
  /* 11160 */ 19782, 19782, 30355, 19782, 30373, 28524, 40939, 28524, 31071, 31388, 35855, 31388, 31388, 24192, 29586,
  /* 11175 */ 30389, 29586, 28243, 30407, 19782, 19782, 21706, 36437, 28524, 30441, 41253, 31388, 30460, 31468, 29586,
  /* 11190 */ 30479, 28300, 19782, 19782, 28472, 38084, 28524, 39295, 31449, 31388, 43229, 29586, 29586, 30499, 19782,
  /* 11205 */ 29901, 49480, 28524, 31450, 33720, 29586, 38434, 46140, 49480, 51104, 33723, 29587, 30550, 32185, 33721,
  /* 11220 */ 38581, 30520, 39458, 47583, 37278, 51102, 34414, 37278, 51103, 47619, 42914, 34416, 33502, 34803, 30536,
  /* 11235 */ 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 11250 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26738,
  /* 11265 */ 19782, 19783, 30595, 19782, 36044, 19782, 30612, 31512, 30595, 32082, 30633, 30643, 30653, 30669, 30672,
  /* 11280 */ 30688, 30703, 30717, 37463, 19782, 19782, 19782, 22320, 19782, 19782, 19782, 19782, 19782, 39890, 38530,
  /* 11295 */ 19782, 38529, 39895, 41395, 51103, 30733, 35802, 28960, 42835, 26760, 19782, 30753, 30794, 43006, 38489,
  /* 11310 */ 19782, 19082, 19782, 37044, 45463, 30814, 30841, 30864, 30882, 36179, 28524, 30898, 35036, 45141, 30932,
  /* 11325 */ 49168, 30966, 28625, 33235, 30988, 30230, 37323, 19782, 19782, 19782, 19782, 31009, 41213, 40414, 19782,
  /* 11340 */ 19782, 19782, 43327, 38085, 28524, 28524, 28524, 28524, 31028, 23236, 31388, 31388, 31388, 48478, 31388,
  /* 11355 */ 23258, 29586, 29586, 29586, 38415, 29588, 34013, 47450, 31045, 19782, 19782, 22923, 40882, 26744, 19782,
  /* 11370 */ 19782, 20076, 41466, 31068, 31087, 28524, 28524, 29158, 31106, 31142, 31160, 31388, 31388, 47212, 31178,
  /* 11385 */ 31207, 31225, 29586, 29586, 32885, 29611, 24153, 19782, 19782, 19782, 19782, 27693, 31243, 33904, 28524,
  /* 11400 */ 28524, 23497, 28524, 38367, 31261, 31388, 31388, 31281, 31389, 31301, 29586, 29586, 32310, 29586, 44595,
  /* 11415 */ 46137, 31052, 49876, 19782, 50668, 19782, 28524, 31347, 23580, 31071, 31388, 31367, 23605, 31387, 24192,
  /* 11430 */ 37960, 43794, 31405, 35404, 50856, 19782, 19782, 19782, 35488, 28524, 28524, 31448, 31388, 31388, 47621,
  /* 11445 */ 29586, 29586, 28300, 19782, 42530, 19782, 38084, 28524, 44883, 31449, 31388, 30950, 29586, 29586, 31424,
  /* 11460 */ 19782, 29901, 49480, 28524, 31450, 23242, 29586, 41441, 46140, 49480, 51104, 33723, 29587, 30550, 43428,
  /* 11475 */ 48855, 28955, 49479, 31445, 31466, 31484, 51102, 34414, 37278, 51103, 47619, 42914, 34416, 33502, 32018,
  /* 11490 */ 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 11505 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 11520 */ 26738, 19782, 19782, 31507, 19782, 36044, 35248, 32414, 19782, 31528, 48415, 31554, 31564, 31574, 31590,
  /* 11535 */ 31602, 31618, 31633, 31647, 37463, 29837, 18647, 21581, 22320, 31663, 19954, 26817, 20106, 31700, 44160,
  /* 11550 */ 31734, 31770, 31806, 31854, 31907, 31944, 31960, 27899, 31991, 32034, 26760, 36625, 27757, 43037, 32074,
  /* 11565 */ 32098, 38600, 32127, 32146, 19782, 49304, 19782, 23278, 40963, 32163, 32183, 32201, 32230, 32254, 35426,
  /* 11580 */ 35720, 46486, 32290, 45411, 30054, 48098, 32326, 37323, 19782, 32366, 32386, 32442, 36263, 32465, 32490,
  /* 11595 */ 32527, 50891, 22642, 32548, 32571, 32587, 32603, 32638, 32654, 32692, 32726, 32769, 32798, 32823, 32859,
  /* 11610 */ 30909, 32910, 48351, 32926, 32942, 44026, 32958, 33003, 47450, 33053, 33069, 43282, 48034, 49918, 26744,
  /* 11625 */ 33089, 43978, 33124, 33145, 33166, 28524, 28524, 33182, 27025, 28901, 33207, 31388, 50229, 33251, 31891,
  /* 11640 */ 44653, 33275, 29586, 35772, 33340, 37228, 33364, 24153, 20627, 33400, 33426, 19782, 33461, 33478, 33494,
  /* 11655 */ 33518, 33536, 36484, 34453, 38367, 42787, 42067, 44954, 33556, 49381, 33592, 28651, 29586, 33622, 42461,
  /* 11670 */ 44595, 46137, 19782, 33037, 33651, 19782, 18447, 28524, 33672, 33689, 31071, 31388, 33719, 33739, 31388,
  /* 11685 */ 24192, 33791, 33810, 33830, 35404, 19782, 33847, 33898, 18627, 33920, 33948, 40255, 33964, 33998, 34064,
  /* 11700 */ 34092, 34120, 34136, 34165, 19182, 28395, 31838, 46220, 34207, 34230, 34251, 31371, 37910, 34304, 48518,
  /* 11715 */ 34329, 19782, 34358, 49480, 49497, 31450, 44799, 29586, 21014, 47944, 49480, 34393, 34411, 37682, 34432,
  /* 11730 */ 32167, 30182, 47917, 30848, 29396, 36323, 31331, 34469, 34516, 34532, 51103, 47619, 35814, 34555, 33502,
  /* 11745 */ 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 11760 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 11775 */ 19782, 26738, 19782, 19782, 27829, 19782, 36044, 34586, 31819, 28729, 49695, 29819, 34606, 19782, 32111,
  /* 11790 */ 34648, 34651, 34667, 34682, 34696, 37463, 19782, 19782, 34712, 22320, 19782, 19782, 19782, 19782, 28443,
  /* 11805 */ 19782, 19782, 28449, 43102, 43100, 30092, 39390, 34730, 32006, 28960, 42835, 26760, 38453, 19782, 19782,
  /* 11820 */ 45672, 19782, 19782, 19782, 21501, 42523, 19782, 34750, 23278, 36120, 28524, 28524, 28524, 50291, 34768,
  /* 11835 */ 31388, 31388, 31388, 34791, 34819, 29586, 29586, 29226, 37323, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 11850 */ 40414, 19782, 19782, 19782, 34837, 38085, 28524, 28524, 28524, 30146, 28524, 23236, 31388, 31388, 31388,
  /* 11865 */ 44123, 31388, 23258, 29586, 29586, 29586, 48673, 29588, 38214, 47450, 24157, 19782, 19782, 19782, 19782,
  /* 11880 */ 26744, 19782, 47727, 19782, 35488, 28524, 28524, 48592, 28524, 28525, 28901, 31388, 31388, 44409, 31388,
  /* 11895 */ 31389, 44653, 29586, 29586, 50033, 29586, 29587, 29611, 24153, 19782, 19782, 19782, 19782, 19782, 50206,
  /* 11910 */ 38085, 28524, 28524, 28524, 34856, 38367, 31388, 31388, 31388, 32238, 31389, 24174, 29586, 29586, 29586,
  /* 11925 */ 34876, 44595, 46137, 19782, 19782, 19782, 19782, 19782, 28524, 28524, 28524, 31071, 31388, 31388, 31388,
  /* 11940 */ 31388, 24192, 29586, 29586, 29586, 35404, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 31448, 31388,
  /* 11955 */ 31388, 47621, 29586, 29586, 28300, 21248, 19782, 19782, 38084, 35516, 28524, 46342, 31388, 33722, 31126,
  /* 11970 */ 29586, 28299, 19782, 29901, 49480, 28524, 31450, 33720, 29586, 38434, 46140, 49480, 51104, 33723, 29587,
  /* 11985 */ 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414, 37278, 51103, 47619, 34104, 37270,
  /* 12000 */ 33502, 35470, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 12015 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 12030 */ 19782, 19782, 26738, 19782, 19782, 19782, 19782, 36044, 19782, 36645, 19782, 19782, 37436, 34893, 34903,
  /* 12045 */ 34913, 34922, 34925, 34941, 34956, 34970, 37463, 19782, 19782, 19782, 22320, 19782, 19782, 41532, 19782,
  /* 12060 */ 19782, 19782, 19782, 19782, 19782, 19782, 35489, 51103, 31388, 42844, 28960, 42835, 34986, 19782, 19782,
  /* 12075 */ 19782, 43006, 19782, 19782, 19782, 30294, 19782, 19782, 19782, 23278, 28524, 28524, 28524, 28524, 50291,
  /* 12090 */ 31388, 31388, 31388, 31388, 26779, 29586, 29586, 29586, 29226, 37323, 19782, 19782, 19782, 19782, 19782,
  /* 12105 */ 19782, 19782, 19782, 22633, 19782, 19727, 38085, 28524, 28524, 28524, 28524, 28524, 35030, 31388, 31388,
  /* 12120 */ 31388, 31388, 31388, 35052, 29586, 29586, 29586, 29586, 29588, 44603, 19782, 19782, 19782, 46364, 19782,
  /* 12135 */ 27356, 39030, 19782, 19782, 35071, 35091, 28524, 28524, 35112, 28524, 28525, 28901, 31388, 31388, 35130,
  /* 12150 */ 31388, 31389, 44653, 29586, 29586, 35147, 29586, 29587, 29881, 19782, 19782, 19782, 35164, 19782, 19782,
  /* 12165 */ 19782, 38085, 28524, 28524, 28524, 28524, 23419, 31388, 31388, 31388, 31388, 31389, 44651, 29586, 29586,
  /* 12180 */ 29586, 29586, 44595, 46137, 19782, 19782, 35183, 26332, 19782, 28524, 28524, 28524, 35202, 31388, 31388,
  /* 12195 */ 31388, 35224, 44654, 29586, 29586, 38409, 35404, 20053, 35244, 35264, 35300, 19015, 34048, 35320, 35357,
  /* 12210 */ 28580, 46780, 35378, 48373, 32753, 35400, 31790, 19782, 43948, 28687, 31090, 28086, 35420, 36594, 35442,
  /* 12225 */ 29586, 35458, 28299, 19782, 29901, 35486, 35505, 41899, 44568, 45259, 35540, 46140, 49480, 51104, 33723,
  /* 12240 */ 29587, 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414, 37278, 51103, 47619, 42914,
  /* 12255 */ 34416, 35587, 35616, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 12270 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 12285 */ 19782, 19782, 19782, 26738, 19782, 19782, 19782, 19782, 36044, 19782, 19782, 19782, 19782, 29317, 21308,
  /* 12300 */ 19782, 19782, 19782, 50412, 34266, 34342, 29426, 37463, 22480, 19782, 30266, 33018, 19782, 19782, 19782,
  /* 12315 */ 40846, 36455, 19782, 19782, 40844, 35646, 36039, 41280, 40611, 35131, 48344, 32350, 48158, 26760, 19782,
  /* 12330 */ 19782, 31718, 43006, 24115, 18846, 19782, 19782, 19782, 19782, 19782, 23278, 28524, 28524, 28524, 35673,
  /* 12345 */ 50291, 31388, 31388, 23438, 31388, 26779, 29586, 29586, 48105, 29226, 37323, 19782, 19782, 19782, 19782,
  /* 12360 */ 19782, 19782, 19782, 19782, 19782, 35694, 45936, 38085, 28524, 28524, 28524, 28524, 28524, 35714, 31388,
  /* 12375 */ 31388, 31388, 31388, 49765, 23258, 29586, 29586, 29586, 29586, 39333, 44603, 19782, 22905, 19782, 19782,
  /* 12390 */ 19782, 19782, 19782, 19782, 19782, 23459, 35488, 35736, 28524, 28524, 28524, 28525, 28901, 35754, 31388,
  /* 12405 */ 31388, 31388, 31389, 44653, 35771, 29586, 29586, 29586, 29587, 44602, 19782, 19782, 19782, 50919, 19782,
  /* 12420 */ 19782, 19782, 38085, 28524, 28524, 28524, 43908, 23419, 31388, 31388, 31388, 31388, 35788, 44651, 29586,
  /* 12435 */ 29586, 29586, 42888, 44595, 46137, 19782, 19782, 19503, 19782, 19782, 28524, 28524, 28524, 28526, 31388,
  /* 12450 */ 31388, 31388, 31388, 44654, 29586, 29586, 29586, 35404, 19782, 19782, 19782, 19782, 35488, 28524, 28524,
  /* 12465 */ 31448, 31388, 31388, 47621, 29586, 29586, 28300, 19782, 36080, 19782, 25915, 28524, 28524, 31449, 31388,
  /* 12480 */ 33722, 29586, 29586, 37374, 19782, 29901, 35830, 28524, 35853, 34734, 29586, 49441, 46140, 49480, 51104,
  /* 12495 */ 33723, 29587, 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414, 37278, 51103, 47619,
  /* 12510 */ 42914, 34416, 33502, 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 12525 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 12540 */ 19782, 19782, 19782, 19782, 26738, 19782, 19782, 18881, 19782, 36044, 19782, 34632, 35304, 34624, 35871,
  /* 12555 */ 35910, 35920, 35936, 35951, 35963, 35979, 35994, 36008, 37463, 19782, 19782, 19782, 51352, 33379, 19782,
  /* 12570 */ 19782, 40396, 36024, 27562, 19782, 36060, 36096, 36136, 36160, 39171, 36195, 48088, 38643, 36211, 26760,
  /* 12585 */ 19782, 19782, 27459, 36227, 19782, 36251, 19782, 19782, 19782, 43068, 26483, 23278, 19021, 48811, 28524,
  /* 12600 */ 33932, 36279, 39960, 40281, 31388, 36303, 36339, 28632, 36355, 30993, 29085, 37323, 19782, 40376, 38726,
  /* 12615 */ 36373, 18641, 36392, 37994, 41042, 36421, 36453, 47128, 36432, 49323, 28524, 33520, 36471, 36500, 23236,
  /* 12630 */ 48282, 31388, 38279, 36539, 36582, 23258, 43553, 29586, 43561, 27955, 44824, 44603, 19782, 19782, 19782,
  /* 12645 */ 19782, 47769, 36610, 50801, 19782, 19782, 19782, 40116, 29255, 28524, 28524, 50501, 31928, 36661, 44445,
  /* 12660 */ 31388, 31388, 29175, 42794, 36687, 38557, 29586, 29586, 39256, 45313, 36723, 19782, 24931, 36748, 48774,
  /* 12675 */ 36784, 28345, 26636, 50279, 28524, 48824, 35096, 36814, 36850, 31388, 40749, 36866, 36910, 36943, 48666,
  /* 12690 */ 29586, 36992, 37018, 46304, 36967, 45608, 37034, 27764, 40577, 25111, 37060, 37077, 35837, 37111, 37160,
  /* 12705 */ 37210, 46015, 37244, 37260, 37301, 42741, 37339, 37390, 31429, 19782, 19782, 21327, 37418, 36405, 34041,
  /* 12720 */ 40248, 48924, 33570, 35564, 39415, 49810, 37632, 28300, 19782, 19758, 47734, 38084, 28524, 28524, 31449,
  /* 12735 */ 31388, 33722, 29586, 29586, 28299, 37452, 29901, 37285, 50249, 23716, 32807, 45307, 46464, 46140, 22095,
  /* 12750 */ 51104, 33723, 29587, 30550, 46578, 45190, 50650, 49479, 34395, 47619, 37278, 51102, 34414, 37278, 37479,
  /* 12765 */ 37502, 42914, 34416, 33502, 32018, 31191, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 12780 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 12795 */ 19782, 19782, 19782, 19782, 19782, 26738, 19782, 19782, 26390, 19782, 36044, 19782, 19782, 19782, 19782,
  /* 12810 */ 29317, 21308, 26390, 37518, 38001, 37521, 37537, 37552, 37566, 37463, 19782, 19782, 19782, 22320, 19782,
  /* 12825 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 35489, 51103, 31388, 42844, 28960, 42835,
  /* 12840 */ 26760, 19782, 19782, 19782, 43006, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 23278, 28524, 28524,
  /* 12855 */ 33540, 28524, 50291, 31388, 31388, 46008, 31388, 26779, 29586, 29586, 37582, 29226, 37323, 19782, 19782,
  /* 12870 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 28524,
  /* 12885 */ 23236, 31388, 31388, 31388, 31388, 31388, 23258, 29586, 29586, 29586, 29586, 29588, 44603, 19782, 19782,
  /* 12900 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 28524, 28524, 28525, 28901,
  /* 12915 */ 31388, 31388, 31388, 31388, 31389, 44653, 29586, 29586, 29586, 29586, 29587, 44602, 19782, 19782, 19782,
  /* 12930 */ 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 23419, 31388, 31388, 31388, 31388, 31389,
  /* 12945 */ 44651, 29586, 29586, 29586, 29586, 44595, 46137, 19782, 19782, 19782, 19782, 19782, 28524, 28524, 28524,
  /* 12960 */ 28526, 31388, 31388, 31388, 31388, 44654, 29586, 29586, 29586, 35404, 19782, 19782, 19782, 19782, 35488,
  /* 12975 */ 28524, 28524, 31448, 31388, 31388, 47621, 29586, 29586, 28300, 19782, 19782, 19782, 38084, 28524, 28524,
  /* 12990 */ 31449, 31388, 33722, 29586, 29586, 28299, 19782, 29901, 49480, 28524, 31450, 33720, 29586, 38434, 46140,
  /* 13005 */ 49480, 51104, 33723, 29587, 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414, 37278,
  /* 13020 */ 51103, 47619, 42914, 34416, 33502, 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 13035 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 13050 */ 19782, 19782, 19782, 19782, 19782, 19782, 26738, 19782, 19782, 32532, 19782, 36044, 19782, 19782, 19782,
  /* 13065 */ 19782, 29317, 21308, 19782, 19782, 19782, 50412, 34266, 34342, 29426, 37463, 19782, 19782, 19782, 22320,
  /* 13080 */ 19782, 23553, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 35489, 51103, 31388, 42844, 28960,
  /* 13095 */ 42835, 26760, 19782, 19782, 19782, 43006, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 23278, 28524,
  /* 13110 */ 28524, 28524, 28524, 50291, 31388, 31388, 31388, 31388, 26779, 29586, 29586, 29586, 29226, 37323, 19782,
  /* 13125 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524,
  /* 13140 */ 28524, 23236, 31388, 31388, 31388, 31388, 31388, 23258, 29586, 29586, 29586, 29586, 29588, 44603, 19782,
  /* 13155 */ 47987, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 46385, 28524, 28524, 28524, 28524, 28525,
  /* 13170 */ 37600, 31388, 31388, 31388, 31388, 31389, 37656, 29586, 29586, 29586, 29586, 29587, 44602, 19782, 19782,
  /* 13185 */ 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 23419, 31388, 31388, 31388, 31388,
  /* 13200 */ 31389, 44651, 29586, 29586, 29586, 29586, 44595, 46137, 19782, 19782, 19782, 19782, 19782, 28524, 28524,
  /* 13215 */ 28524, 28526, 31388, 31388, 31388, 31388, 44654, 29586, 29586, 29586, 35404, 19782, 19782, 19782, 19782,
  /* 13230 */ 35488, 28524, 28524, 31448, 31388, 31388, 47621, 29586, 29586, 28300, 19782, 19782, 19782, 38084, 28524,
  /* 13245 */ 28524, 31449, 31388, 33722, 29586, 29586, 28299, 19782, 29901, 49480, 28524, 31450, 33720, 29586, 38434,
  /* 13260 */ 46140, 49480, 51104, 33723, 29587, 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414,
  /* 13275 */ 37278, 51103, 47619, 42914, 34416, 33502, 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 13290 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 13305 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26738, 19782, 19782, 35075, 19782, 36044, 19782, 28802,
  /* 13320 */ 19782, 43984, 37707, 37723, 37737, 37749, 37758, 37762, 37778, 37793, 37807, 37463, 19782, 37823, 19782,
  /* 13335 */ 22320, 19782, 25958, 37841, 19782, 50212, 19782, 19782, 37878, 37868, 21113, 30768, 46416, 37898, 32341,
  /* 13350 */ 33290, 37934, 37982, 22018, 19782, 19782, 38017, 19782, 19782, 38041, 38058, 21510, 27373, 41717, 38080,
  /* 13365 */ 38101, 32615, 42308, 45573, 38130, 46429, 38156, 23725, 33576, 38173, 38194, 29586, 38230, 36707, 38257,
  /* 13380 */ 19782, 34998, 19782, 19782, 19782, 40541, 19782, 19782, 19782, 19782, 19782, 38085, 28368, 49784, 28524,
  /* 13395 */ 30112, 28524, 38273, 44398, 33982, 31388, 23305, 28904, 35052, 38295, 45498, 29586, 38319, 42643, 44603,
  /* 13410 */ 19782, 19782, 49858, 28795, 19782, 44260, 19782, 38339, 19782, 19782, 35488, 28524, 28524, 28507, 28833,
  /* 13425 */ 38360, 28901, 31388, 31388, 28572, 44556, 38383, 44653, 29586, 29586, 50106, 37948, 38431, 44602, 19782,
  /* 13440 */ 38450, 19782, 19782, 51132, 19782, 19782, 38085, 28524, 38469, 28524, 28524, 23419, 31388, 49092, 31388,
  /* 13455 */ 31388, 31389, 44651, 41000, 29586, 29586, 29586, 44595, 36732, 19782, 38486, 19782, 38505, 38527, 37144,
  /* 13470 */ 28524, 28524, 45162, 50525, 31388, 31388, 31265, 38546, 38579, 29586, 42492, 35404, 19782, 38597, 19782,
  /* 13485 */ 38616, 35488, 48694, 28524, 31448, 23312, 31388, 47621, 40337, 29586, 28300, 19782, 23145, 19782, 38084,
  /* 13500 */ 28524, 49582, 31449, 31388, 36317, 29586, 48617, 28299, 19782, 29901, 49480, 28524, 31450, 33720, 29586,
  /* 13515 */ 38434, 46140, 49480, 51104, 33723, 29587, 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 43466,
  /* 13530 */ 38634, 38659, 32622, 37220, 42914, 34416, 38709, 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782,
  /* 13545 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 13560 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26738, 19782, 19782, 23183, 19782, 36044, 19782,
  /* 13575 */ 21895, 38725, 19782, 21382, 38742, 38768, 38752, 38784, 38787, 38803, 38818, 38832, 37463, 19782, 38859,
  /* 13590 */ 19782, 22320, 19782, 25809, 19782, 19782, 38064, 19782, 19782, 38858, 38848, 38062, 21656, 51103, 38875,
  /* 13605 */ 38397, 28960, 42835, 26760, 19782, 46506, 19782, 43006, 19782, 39849, 25803, 19782, 19782, 19782, 27794,
  /* 13620 */ 21519, 28874, 28524, 35341, 30778, 50291, 39924, 31388, 38895, 38915, 26779, 38939, 23397, 23536, 38956,
  /* 13635 */ 38972, 38988, 37061, 39046, 41977, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 38085, 42242, 39069,
  /* 13650 */ 40603, 28524, 28524, 23236, 21803, 39089, 44949, 31388, 31388, 23258, 50371, 29586, 39106, 29586, 29588,
  /* 13665 */ 44603, 19782, 19782, 39125, 47159, 19782, 19782, 39143, 42149, 19782, 19782, 35488, 36834, 28524, 28524,
  /* 13680 */ 39163, 28525, 39187, 47839, 31388, 31388, 39206, 31389, 39229, 45506, 29586, 29586, 39249, 29587, 44602,
  /* 13695 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 23419, 31388, 31388,
  /* 13710 */ 31388, 31388, 31389, 44651, 29586, 29586, 29586, 29586, 44595, 46137, 19782, 19782, 19782, 19782, 19782,
  /* 13725 */ 28524, 28524, 28524, 28526, 31388, 31388, 31388, 31388, 44654, 29586, 29586, 29586, 35404, 39272, 19782,
  /* 13740 */ 19782, 19782, 35488, 39292, 28524, 31448, 39311, 31388, 47621, 39329, 29586, 28300, 19782, 19782, 19782,
  /* 13755 */ 38084, 28524, 28524, 31449, 42622, 33722, 29586, 50570, 28299, 19782, 29901, 49480, 28524, 31450, 33720,
  /* 13770 */ 29586, 38434, 41025, 49480, 40638, 46069, 46526, 39349, 39386, 39406, 39431, 49479, 34395, 47619, 37278,
  /* 13785 */ 51102, 34414, 37278, 51103, 31119, 39450, 34416, 33502, 32018, 41494, 41504, 19782, 19782, 19782, 19782,
  /* 13800 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 13815 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26738, 19782, 19782, 21309, 39474, 40903,
  /* 13830 */ 19782, 32130, 39492, 36768, 39528, 39555, 39569, 39585, 39600, 39616, 39630, 39646, 39660, 37463, 19782,
  /* 13845 */ 39676, 39700, 39719, 39746, 39774, 34752, 37825, 24121, 27430, 39794, 39810, 39834, 39870, 34028, 39911,
  /* 13860 */ 39946, 32741, 39976, 42835, 26760, 19964, 19782, 19782, 39003, 45722, 40025, 40043, 40070, 39127, 28450,
  /* 13875 */ 27983, 40106, 29055, 41066, 28524, 40132, 50291, 40743, 40151, 38899, 31388, 26779, 40170, 29586, 42880,
  /* 13890 */ 39434, 40200, 19782, 40216, 27993, 27729, 19782, 19782, 19782, 42161, 19782, 19782, 22896, 38085, 40235,
  /* 13905 */ 28524, 36523, 28524, 28524, 23236, 40271, 31388, 38687, 31388, 31388, 40304, 45252, 29586, 40353, 29586,
  /* 13920 */ 29588, 44603, 19782, 19782, 19782, 19782, 19782, 40373, 19782, 22941, 40392, 40412, 28358, 28524, 28524,
  /* 13935 */ 31029, 28524, 40430, 40466, 31388, 31388, 28020, 31388, 46795, 40499, 29586, 29586, 30391, 29586, 50385,
  /* 13950 */ 44602, 45962, 40524, 24018, 47699, 40540, 44061, 40557, 23013, 33191, 40593, 40627, 40671, 23419, 23332,
  /* 13965 */ 40694, 30942, 40730, 31389, 44651, 40184, 40765, 46656, 40796, 32894, 40816, 19490, 40837, 40862, 40898,
  /* 13980 */ 40919, 40938, 40955, 37135, 38114, 40979, 46061, 36287, 23614, 40996, 45242, 43815, 48127, 41016, 18454,
  /* 13995 */ 41041, 19782, 23925, 41058, 47544, 37126, 45134, 45543, 34483, 42947, 44103, 50087, 28300, 41082, 19782,
  /* 14010 */ 19782, 41106, 41123, 36171, 48247, 41139, 41163, 47317, 41183, 28299, 41210, 24885, 49480, 41229, 43475,
  /* 14025 */ 33720, 49236, 38434, 46140, 49480, 41248, 47614, 48551, 41269, 41304, 41334, 41363, 41391, 41411, 41434,
  /* 14040 */ 41457, 51102, 34414, 37278, 51103, 47619, 29569, 41482, 33502, 32018, 41494, 41526, 19782, 19782, 19782,
  /* 14055 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 14070 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26738, 19782, 19782, 19782, 41548,
  /* 14085 */ 36044, 19782, 43873, 33102, 19782, 28711, 41574, 41584, 41600, 41616, 41619, 41635, 41650, 41664, 37463,
  /* 14100 */ 41680, 39147, 41710, 41733, 21449, 41760, 19782, 41806, 41833, 31538, 41868, 41915, 41951, 41967, 42011,
  /* 14115 */ 42027, 42043, 31975, 40780, 42092, 26760, 19782, 42108, 35284, 47088, 29034, 19782, 42135, 34616, 19782,
  /* 14130 */ 19782, 39013, 23278, 28524, 45579, 42184, 42206, 50291, 31388, 41318, 44451, 47862, 26779, 33831, 40508,
  /* 14145 */ 36697, 29867, 37323, 19782, 19782, 44154, 19782, 45049, 19782, 42222, 42258, 39758, 42685, 19782, 42277,
  /* 14160 */ 42305, 44368, 42324, 28524, 48437, 42347, 31388, 42363, 42398, 31388, 34492, 42418, 29586, 42447, 42491,
  /* 14175 */ 29586, 37367, 44603, 42508, 42546, 19782, 42567, 42584, 19782, 19782, 19782, 19782, 43014, 35488, 28524,
  /* 14190 */ 41790, 50479, 28524, 28525, 28901, 31388, 28191, 30203, 31388, 31389, 44653, 29586, 49206, 40357, 29586,
  /* 14205 */ 29587, 44602, 19782, 19782, 49146, 19782, 22986, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 42603,
  /* 14220 */ 31388, 31388, 31388, 31388, 44083, 42638, 29586, 29586, 29586, 29586, 42659, 46137, 22312, 42683, 19782,
  /* 14235 */ 19782, 39512, 42701, 45982, 28524, 28526, 42719, 40714, 31388, 31388, 42737, 31227, 29586, 29586, 48637,
  /* 14250 */ 47461, 19782, 19782, 19782, 46749, 31351, 28524, 46701, 50061, 31388, 46724, 33794, 29586, 28300, 42757,
  /* 14265 */ 19782, 19782, 38084, 28524, 28524, 31449, 31388, 33722, 29586, 29586, 28299, 21548, 29901, 28254, 28524,
  /* 14280 */ 42776, 42721, 21006, 38434, 41375, 34539, 38674, 42810, 28230, 30550, 42826, 42862, 42904, 49479, 34395,
  /* 14295 */ 47619, 37278, 51102, 34414, 37278, 51103, 47619, 37313, 34416, 42938, 32018, 23662, 41504, 19782, 19782,
  /* 14310 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 14325 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26738, 19782, 19782, 19782,
  /* 14340 */ 18891, 36044, 19782, 19782, 42971, 19765, 42995, 43030, 19782, 19782, 43053, 43118, 43132, 43148, 43162,
  /* 14355 */ 37463, 19782, 19782, 43178, 22320, 19782, 19782, 24158, 19782, 20665, 19782, 23477, 23476, 19782, 19782,
  /* 14370 */ 31678, 43207, 34500, 32838, 43245, 42835, 26760, 21419, 43281, 19782, 43006, 19782, 47412, 43298, 19782,
  /* 14385 */ 43325, 19782, 21421, 23278, 43343, 43413, 37087, 43451, 43355, 42056, 28199, 43491, 40655, 43526, 43577,
  /* 14400 */ 47652, 43535, 49129, 37323, 43599, 19782, 22064, 22430, 19782, 35278, 35885, 19782, 19782, 19782, 19782,
  /* 14415 */ 38085, 28524, 28524, 45440, 28524, 28524, 23236, 31388, 31388, 36894, 31388, 31388, 23258, 29586, 29586,
  /* 14430 */ 45489, 29586, 29588, 42667, 28783, 46362, 41845, 19782, 19782, 44866, 19782, 43652, 21974, 19782, 35488,
  /* 14445 */ 28524, 43676, 28524, 28524, 28525, 43704, 31388, 43723, 31388, 31388, 31389, 43757, 29586, 43777, 29586,
  /* 14460 */ 29586, 29587, 44602, 19782, 22959, 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 23782, 28524,
  /* 14475 */ 35208, 31388, 31388, 30737, 31388, 31389, 43810, 29586, 29586, 40332, 29586, 44595, 46137, 19782, 19782,
  /* 14490 */ 19782, 19782, 19782, 28524, 28524, 28524, 28526, 31388, 31388, 31388, 31388, 44654, 29586, 29586, 29586,
  /* 14505 */ 35404, 19782, 18580, 19782, 19782, 43831, 28524, 28524, 31448, 31388, 31388, 47621, 29586, 29586, 50394,
  /* 14520 */ 19782, 19782, 19782, 38084, 28524, 28524, 31449, 31388, 33722, 29586, 29586, 28299, 19782, 29901, 49480,
  /* 14535 */ 28524, 31450, 33720, 29586, 38434, 43852, 43889, 40678, 35228, 43924, 49652, 32185, 33721, 42846, 49479,
  /* 14550 */ 34395, 47619, 37278, 51102, 34414, 37278, 51103, 47619, 42914, 34416, 33502, 32018, 41494, 41504, 19782,
  /* 14565 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 14580 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26738, 19782, 19782,
  /* 14595 */ 19782, 19782, 36044, 19782, 19782, 19782, 19782, 29317, 21308, 19782, 19782, 19782, 50412, 34266, 34342,
  /* 14610 */ 29426, 37463, 19782, 19782, 19782, 22320, 19782, 19782, 33108, 19782, 19782, 43185, 43188, 43191, 43964,
  /* 14625 */ 43182, 30561, 42331, 44000, 44017, 36566, 42835, 44042, 19782, 19782, 19782, 43006, 19782, 19782, 19782,
  /* 14640 */ 19782, 19782, 19782, 19782, 23278, 28524, 28524, 28524, 28524, 50291, 31388, 31388, 31388, 31388, 26779,
  /* 14655 */ 29586, 29586, 29586, 29226, 37323, 19782, 19782, 19782, 19461, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 14670 */ 19782, 38085, 28524, 28524, 28524, 28524, 28524, 44077, 31388, 31388, 31388, 31388, 31388, 44099, 29586,
  /* 14685 */ 29586, 29586, 29586, 29588, 44603, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 14700 */ 35488, 28524, 28524, 28524, 28524, 28525, 28901, 31388, 31388, 31388, 31388, 31389, 44653, 29586, 29586,
  /* 14715 */ 29586, 29586, 29587, 44602, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524,
  /* 14730 */ 28524, 23419, 31388, 31388, 31388, 31388, 31389, 44651, 29586, 29586, 29586, 29586, 44595, 46137, 19782,
  /* 14745 */ 19782, 19782, 19782, 19782, 28524, 28524, 28524, 28526, 31388, 31388, 31388, 31388, 44654, 29586, 29586,
  /* 14760 */ 29586, 35404, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 31448, 31388, 31388, 47621, 29586, 29586,
  /* 14775 */ 28300, 19782, 19782, 19782, 38084, 50340, 28524, 31449, 44119, 33722, 35055, 29586, 28299, 19782, 29901,
  /* 14790 */ 49480, 28524, 31450, 33720, 29586, 38434, 46140, 49480, 51104, 33723, 29587, 30550, 32185, 33721, 42846,
  /* 14805 */ 49479, 34395, 47619, 37278, 51102, 34414, 37278, 51103, 47619, 42914, 34416, 33502, 32018, 41494, 41504,
  /* 14820 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 14835 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26738, 19782,
  /* 14850 */ 19782, 19782, 45057, 36044, 39028, 19782, 39021, 19782, 28753, 44139, 29445, 42119, 44176, 44179, 44195,
  /* 14865 */ 44210, 44224, 37463, 19782, 36640, 32505, 22320, 24236, 44240, 44259, 34180, 39276, 27176, 44276, 34570,
  /* 14880 */ 44312, 44332, 44356, 44384, 44432, 32874, 44467, 44512, 26760, 19782, 19782, 19782, 22517, 44619, 44638,
  /* 14895 */ 47349, 41510, 19782, 19782, 40219, 44670, 28524, 35334, 28524, 44709, 44734, 35755, 44763, 48459, 44780,
  /* 14910 */ 44815, 28276, 29586, 23359, 37002, 44840, 19782, 19782, 19782, 19782, 44856, 46113, 19782, 26929, 19782,
  /* 14925 */ 44863, 47372, 38085, 44882, 23790, 28524, 35114, 44899, 44935, 31388, 42376, 31388, 39930, 47815, 44970,
  /* 14940 */ 29586, 44997, 29586, 38303, 38241, 44603, 19782, 19782, 19782, 45017, 20271, 45039, 45073, 45075, 45091,
  /* 14955 */ 45103, 34194, 28524, 32214, 45119, 45157, 30444, 45178, 31388, 44747, 45206, 45275, 28599, 45295, 29586,
  /* 14970 */ 41194, 45329, 45365, 31209, 44602, 40090, 19782, 19782, 26862, 45385, 22995, 18667, 21608, 30579, 28524,
  /* 14985 */ 45436, 28524, 23419, 30463, 40709, 40483, 31388, 31389, 44651, 44981, 38940, 29586, 29586, 37691, 45456,
  /* 15000 */ 23165, 49253, 19782, 19782, 19782, 36515, 28524, 28524, 44718, 34280, 31388, 31388, 46436, 45479, 29586,
  /* 15015 */ 29586, 43761, 35404, 19782, 23916, 19782, 19782, 42235, 28524, 28524, 45537, 31388, 31285, 44578, 29586,
  /* 15030 */ 37584, 28300, 19782, 27007, 19782, 38084, 28524, 28524, 31449, 31388, 33722, 29586, 29586, 28299, 19782,
  /* 15045 */ 29901, 49480, 28524, 31450, 33720, 29586, 38434, 29893, 30825, 48211, 42076, 45522, 30550, 32185, 33721,
  /* 15060 */ 42846, 45559, 43435, 46600, 30028, 51102, 34414, 37278, 51103, 47619, 29127, 50443, 45595, 37402, 41494,
  /* 15075 */ 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 15090 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 26738,
  /* 15105 */ 19782, 19782, 19782, 48039, 36044, 45751, 25621, 45632, 45661, 45688, 45704, 45738, 45645, 45770, 45786,
  /* 15120 */ 45800, 45816, 45830, 37852, 19782, 42168, 19782, 45846, 19782, 19782, 44340, 19782, 25852, 38344, 38342,
  /* 15135 */ 51248, 51239, 27442, 31869, 29982, 45873, 33222, 28960, 42835, 45894, 45910, 19782, 36763, 43006, 45926,
  /* 15150 */ 19782, 19782, 19782, 22004, 27281, 45960, 41852, 33703, 30129, 45978, 28524, 42289, 45998, 41418, 31388,
  /* 15165 */ 31388, 46031, 46085, 49197, 29586, 29226, 37323, 19782, 22714, 19782, 23091, 22439, 46106, 19782, 19782,
  /* 15180 */ 19782, 19782, 25696, 38085, 31684, 39073, 28524, 28524, 30339, 23236, 40647, 28165, 31388, 31388, 45279,
  /* 15195 */ 23258, 32304, 50097, 29586, 29586, 49817, 46129, 19782, 19782, 44243, 19782, 46156, 22914, 47036, 50710,
  /* 15210 */ 22950, 19782, 46176, 28524, 28524, 41935, 30105, 46200, 46236, 31388, 31388, 44693, 44793, 46258, 46298,
  /* 15225 */ 29586, 29586, 50114, 43788, 46320, 29099, 46358, 50884, 19782, 26096, 19782, 19782, 19057, 46380, 28524,
  /* 15240 */ 28524, 46401, 28524, 23419, 31388, 31388, 40009, 43260, 31389, 44651, 29586, 29586, 46452, 29586, 44595,
  /* 15255 */ 46137, 19782, 27235, 19782, 46502, 19782, 28524, 36827, 43836, 30866, 31388, 28123, 45878, 31388, 46522,
  /* 15270 */ 42955, 34821, 29586, 35404, 19782, 19782, 27554, 21235, 35488, 28524, 28524, 31448, 31388, 31388, 47621,
  /* 15285 */ 29586, 29586, 46282, 22354, 19782, 46542, 46567, 28524, 22102, 31449, 31388, 46594, 29586, 39109, 29493,
  /* 15300 */ 46616, 20984, 21767, 28524, 46476, 33720, 46638, 45369, 46672, 49480, 46696, 46717, 50603, 30550, 32185,
  /* 15315 */ 33721, 42846, 27016, 49538, 36549, 37278, 41890, 37614, 46740, 46765, 48862, 42914, 34416, 33502, 32018,
  /* 15330 */ 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 15345 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 15360 */ 26738, 19782, 19782, 19782, 27072, 46842, 19782, 19782, 51139, 19782, 46878, 46905, 46915, 46931, 46956,
  /* 15375 */ 46972, 46986, 47002, 47016, 37463, 47060, 43627, 50624, 22320, 47032, 22766, 47052, 23119, 19413, 20671,
  /* 15390 */ 47077, 47113, 47149, 19424, 47184, 47199, 47228, 33305, 44527, 47303, 26760, 47345, 22058, 47365, 46889,
  /* 15405 */ 19782, 19782, 35894, 51254, 47388, 27723, 47435, 47485, 48582, 49354, 47501, 47540, 47560, 47599, 28130,
  /* 15420 */ 34288, 23516, 47637, 30061, 27945, 48509, 50040, 37323, 47681, 46622, 47697, 25859, 26505, 47715, 19782,
  /* 15435 */ 19782, 46215, 37174, 47750, 41772, 49527, 21782, 23772, 28524, 47785, 23236, 47807, 47831, 47855, 31388,
  /* 15450 */ 47878, 47897, 33606, 42475, 47913, 24194, 30248, 47933, 19782, 21292, 19782, 47960, 41694, 19782, 49284,
  /* 15465 */ 47980, 19782, 48003, 35488, 28073, 21618, 28524, 50687, 48019, 48055, 45220, 36877, 31388, 35362, 48074,
  /* 15480 */ 48121, 37670, 47270, 29586, 40800, 48143, 44602, 20142, 46856, 19782, 22977, 48174, 19782, 23004, 48198,
  /* 15495 */ 41782, 28095, 48227, 44919, 23419, 48263, 28924, 48298, 48314, 48330, 20997, 48367, 40318, 47260, 48888,
  /* 15510 */ 44595, 41347, 48389, 23898, 19782, 48406, 22845, 34214, 48431, 28524, 29262, 35571, 48453, 48475, 43265,
  /* 15525 */ 48494, 48542, 45343, 36357, 35404, 19782, 20261, 43397, 19782, 41881, 28499, 48567, 44685, 34076, 39313,
  /* 15540 */ 42871, 37623, 48616, 48633, 48653, 19782, 19782, 21649, 48689, 48710, 37486, 46242, 48738, 31322, 47329,
  /* 15555 */ 28299, 48760, 46680, 31491, 48796, 35552, 39213, 50023, 48897, 46140, 49480, 51104, 33723, 29587, 30550,
  /* 15570 */ 32185, 33721, 42846, 49479, 34395, 47240, 49622, 48840, 36671, 34149, 21793, 48878, 48913, 34416, 33502,
  /* 15585 */ 32018, 33635, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 15600 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 15615 */ 19782, 26738, 19782, 19782, 19782, 19782, 48940, 19782, 19782, 33439, 19782, 49703, 48976, 49018, 49002,
  /* 15630 */ 49017, 48986, 49034, 49049, 49063, 37463, 19782, 19782, 19782, 42979, 19782, 20279, 19782, 19782, 19782,
  /* 15645 */ 19782, 20282, 30357, 19782, 19782, 28042, 48240, 49079, 36957, 42431, 49114, 26760, 49145, 19782, 19782,
  /* 15660 */ 43006, 19782, 19782, 34368, 34376, 19782, 19782, 19782, 34377, 23688, 28524, 28524, 28524, 31883, 49162,
  /* 15675 */ 31388, 31388, 38157, 49184, 49230, 29586, 29586, 30972, 37323, 43614, 49252, 26354, 49269, 19782, 19782,
  /* 15690 */ 19782, 22624, 49300, 38042, 42760, 38085, 28524, 49320, 49339, 47791, 49836, 23236, 39090, 23633, 49098,
  /* 15705 */ 40475, 49370, 23258, 30483, 38178, 37640, 37353, 44587, 44603, 19782, 19782, 49397, 44622, 19782, 19782,
  /* 15720 */ 19782, 47061, 19782, 19782, 35488, 30003, 28524, 28524, 28524, 28525, 49416, 43741, 31388, 31388, 31388,
  /* 15735 */ 31389, 49435, 35384, 29586, 29586, 29586, 29587, 44602, 47762, 19782, 49457, 19782, 19782, 19782, 19782,
  /* 15750 */ 49477, 49496, 28524, 28524, 28524, 23419, 48276, 31388, 31388, 31388, 31389, 45398, 29586, 29586, 29586,
  /* 15765 */ 29586, 44595, 43378, 19782, 19782, 32449, 19782, 19782, 49513, 28524, 28524, 28526, 44542, 31388, 31388,
  /* 15780 */ 28158, 49562, 29586, 29586, 49214, 35404, 20161, 19782, 19782, 19782, 35488, 28524, 28524, 31448, 31388,
  /* 15795 */ 31388, 47621, 29586, 29586, 28300, 19782, 19782, 19782, 38084, 28524, 28524, 31449, 31388, 33722, 29586,
  /* 15810 */ 29586, 28299, 19782, 29901, 49480, 49578, 32676, 33720, 46090, 38434, 46140, 49480, 51104, 33723, 29587,
  /* 15825 */ 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 41288, 45232, 32049, 51103, 47619, 42914, 34416,
  /* 15840 */ 49598, 49638, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 15855 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 15870 */ 19782, 19782, 26738, 19782, 19782, 19782, 19782, 28331, 28682, 22028, 33877, 19782, 28403, 49668, 22025,
  /* 15885 */ 49686, 31012, 35167, 49719, 49734, 49748, 37463, 19782, 19782, 19782, 22320, 19782, 19782, 19782, 19782,
  /* 15900 */ 19782, 19782, 19782, 19782, 19782, 19782, 34443, 51103, 49764, 46809, 28960, 42835, 26760, 19782, 21555,
  /* 15915 */ 31710, 43006, 19782, 19782, 19782, 19782, 33462, 19782, 19782, 23278, 41232, 28524, 28524, 49781, 50291,
  /* 15930 */ 36919, 31388, 42402, 31388, 26779, 49800, 29586, 43544, 29226, 37323, 19782, 19782, 19782, 19782, 19782,
  /* 15945 */ 19782, 45714, 19782, 19782, 23126, 19782, 38085, 28524, 28524, 49833, 28524, 28524, 23236, 31388, 40980,
  /* 15960 */ 31388, 31388, 31388, 23258, 29586, 33814, 29586, 29586, 29588, 44603, 19782, 19782, 19782, 19782, 19782,
  /* 15975 */ 19782, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 28524, 28524, 28525, 28901, 31388, 31388, 31388,
  /* 15990 */ 31388, 31389, 44653, 29586, 29586, 29586, 29586, 29587, 44602, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 16005 */ 19782, 38085, 28524, 28524, 28524, 28524, 23419, 31388, 31388, 31388, 31388, 31389, 44651, 29586, 29586,
  /* 16020 */ 29586, 29586, 44595, 46137, 19782, 26182, 19782, 19782, 19782, 28524, 28524, 28524, 28526, 31388, 31388,
  /* 16035 */ 31388, 31388, 44654, 29586, 29586, 29586, 35404, 19782, 27836, 19782, 19782, 35488, 28524, 28524, 31448,
  /* 16050 */ 31388, 31388, 47621, 29586, 29586, 28300, 19782, 19782, 19782, 38084, 28524, 28524, 31449, 31388, 33722,
  /* 16065 */ 29586, 29586, 28299, 23854, 49852, 49480, 28524, 31450, 33720, 29586, 38434, 46140, 49480, 51104, 33723,
  /* 16080 */ 29587, 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414, 37278, 51103, 47619, 42914,
  /* 16095 */ 34416, 33502, 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 16110 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 16125 */ 19782, 19782, 19782, 26738, 19782, 19782, 19782, 19782, 20119, 19782, 19782, 49874, 33129, 49892, 49908,
  /* 16140 */ 19782, 18695, 49934, 49949, 49963, 49979, 49993, 37463, 19782, 19782, 19782, 22320, 19782, 19782, 19782,
  /* 16155 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 35489, 47516, 43510, 42844, 46046, 50009, 26760, 19782,
  /* 16170 */ 19782, 19782, 43006, 19782, 19782, 19782, 32147, 19782, 19782, 19782, 23278, 28524, 28524, 28524, 28524,
  /* 16185 */ 50291, 31388, 31388, 31388, 31388, 26779, 29586, 29586, 29586, 29226, 37323, 19782, 19782, 19782, 19782,
  /* 16200 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 28524, 23236, 31388,
  /* 16215 */ 31388, 31388, 31388, 31388, 23258, 29586, 29586, 29586, 29586, 29588, 44603, 19782, 19782, 19782, 19782,
  /* 16230 */ 19782, 19782, 22932, 19782, 19782, 19782, 41928, 28524, 28524, 28524, 28524, 28525, 50056, 31388, 31388,
  /* 16245 */ 31388, 31388, 31389, 50077, 29586, 29586, 29586, 29586, 29587, 44602, 19782, 19782, 22968, 19782, 19782,
  /* 16260 */ 19782, 19782, 38085, 28524, 34235, 28524, 28546, 23419, 31388, 31388, 50130, 31388, 44482, 44651, 29586,
  /* 16275 */ 46647, 29586, 32843, 44595, 46137, 19782, 19782, 19782, 19782, 19782, 28524, 28524, 28524, 28526, 31388,
  /* 16290 */ 31388, 31388, 31388, 44654, 29586, 29586, 29586, 35404, 19782, 19782, 19782, 19782, 35488, 28524, 28524,
  /* 16305 */ 31448, 31388, 31388, 47621, 29586, 29586, 28300, 19782, 19782, 19782, 38084, 28524, 28524, 31449, 31388,
  /* 16320 */ 33722, 29586, 29586, 28299, 19782, 29901, 49480, 28524, 31450, 33720, 29586, 38434, 46140, 49480, 51104,
  /* 16335 */ 33723, 29587, 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414, 37278, 51103, 47619,
  /* 16350 */ 42914, 34416, 33502, 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 16365 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 16380 */ 19782, 19782, 19782, 19782, 26923, 19782, 19782, 19782, 19782, 36044, 19782, 19782, 19782, 19782, 29317,
  /* 16395 */ 21308, 19782, 19782, 19782, 35186, 50147, 50162, 50176, 37463, 19782, 19782, 19782, 47469, 19782, 36376,
  /* 16410 */ 19782, 19782, 19782, 41555, 41558, 19782, 50192, 44316, 39360, 51103, 50228, 46272, 28960, 42835, 26760,
  /* 16425 */ 19782, 19782, 29907, 43006, 32511, 45023, 40445, 19782, 19782, 19782, 19782, 23278, 28524, 28524, 50245,
  /* 16440 */ 42190, 50291, 31388, 47881, 31388, 42617, 26779, 29586, 33348, 34877, 29226, 37323, 50265, 19782, 19782,
  /* 16455 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 28524, 23236,
  /* 16470 */ 31388, 31388, 31388, 31388, 31388, 23258, 29586, 29586, 29586, 29586, 29588, 44603, 19782, 19782, 19782,
  /* 16485 */ 19782, 19782, 19782, 45754, 19782, 19782, 19782, 35488, 28524, 35738, 28524, 28524, 38470, 28901, 31388,
  /* 16500 */ 49419, 31388, 31388, 31144, 44653, 29586, 23261, 29586, 29586, 29587, 44602, 48390, 19782, 19782, 19782,
  /* 16515 */ 19782, 19782, 19782, 38085, 28853, 28524, 28524, 28524, 23419, 31162, 31388, 31388, 31388, 31389, 44651,
  /* 16530 */ 47250, 29586, 29586, 29586, 44595, 46137, 19782, 19782, 19782, 19782, 19782, 28524, 28524, 28524, 28526,
  /* 16545 */ 31388, 31388, 31388, 31388, 44654, 29586, 29586, 29586, 35404, 19782, 19782, 19782, 19782, 35488, 28524,
  /* 16560 */ 28524, 31448, 31388, 31388, 47621, 29586, 29586, 28300, 19782, 19782, 19782, 38084, 28524, 28524, 31449,
  /* 16575 */ 31388, 33722, 29586, 29586, 28299, 19782, 29901, 49480, 28524, 31450, 33720, 29586, 38434, 46140, 49480,
  /* 16590 */ 51104, 33723, 29587, 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414, 37278, 51103,
  /* 16605 */ 47619, 42914, 34416, 33502, 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 16620 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 16635 */ 19782, 19782, 19782, 19782, 19782, 26738, 19782, 19782, 19782, 19782, 36044, 19782, 19782, 19782, 19782,
  /* 16650 */ 29317, 21308, 19782, 19782, 19782, 50412, 34266, 34342, 29426, 37463, 50315, 19782, 19782, 22320, 19782,
  /* 16665 */ 19782, 43094, 19782, 19782, 19782, 43088, 19782, 19782, 19782, 50335, 32668, 38879, 42844, 47665, 50356,
  /* 16680 */ 26760, 19782, 48182, 19782, 43006, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 50410, 28524, 28524,
  /* 16695 */ 28524, 34860, 50291, 31388, 31388, 31388, 36887, 26779, 29586, 29586, 29586, 50428, 37323, 19782, 50319,
  /* 16710 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 50459, 19782, 38085, 29514, 28524, 28524, 50476, 28524,
  /* 16725 */ 23236, 49546, 31388, 44001, 31388, 31388, 23258, 31312, 29586, 38323, 29586, 29588, 44603, 19782, 19782,
  /* 16740 */ 40876, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 35488, 28524, 50495, 28524, 28524, 28525, 50517,
  /* 16755 */ 31388, 50541, 31388, 31388, 31389, 50560, 29586, 50593, 29586, 29586, 29587, 44602, 19782, 19782, 19782,
  /* 16770 */ 19782, 19782, 19782, 50619, 38085, 28524, 28524, 31922, 28524, 39370, 31388, 31388, 38693, 31388, 39190,
  /* 16785 */ 44651, 29586, 29586, 50640, 29586, 38206, 46137, 19782, 19782, 23907, 19782, 19782, 28524, 28524, 28524,
  /* 16800 */ 28526, 31388, 31388, 31388, 31388, 44654, 29586, 29586, 29586, 30504, 19782, 19782, 21736, 19782, 36109,
  /* 16815 */ 28524, 28524, 36976, 31388, 31388, 37918, 29586, 29586, 28300, 19782, 19782, 50666, 38084, 28524, 50684,
  /* 16830 */ 31449, 21810, 33722, 29586, 49612, 28299, 19782, 29901, 49480, 28524, 31450, 33720, 29586, 38434, 46140,
  /* 16845 */ 49480, 51104, 33723, 29587, 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414, 37278,
  /* 16860 */ 51103, 47619, 42914, 34416, 33502, 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 16875 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 16890 */ 19782, 19782, 19782, 19782, 19782, 19782, 26738, 19782, 19782, 19782, 19782, 36044, 19782, 19782, 19782,
  /* 16905 */ 19782, 29317, 50703, 19782, 19782, 19782, 50412, 34266, 34342, 29426, 37463, 19782, 19782, 19782, 22320,
  /* 16920 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 35489, 51103, 31388, 42844, 28960,
  /* 16935 */ 42835, 26760, 19782, 19782, 19782, 43006, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 23278, 28524,
  /* 16950 */ 28524, 28524, 28524, 50291, 31388, 31388, 31388, 31388, 26779, 29586, 29586, 29586, 29226, 37323, 19782,
  /* 16965 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524,
  /* 16980 */ 28524, 23236, 31388, 31388, 31388, 31388, 31388, 23258, 29586, 29586, 29586, 29586, 29588, 44603, 19782,
  /* 16995 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 35488, 28524, 28524, 28524, 28524, 28525,
  /* 17010 */ 28901, 31388, 31388, 31388, 31388, 31389, 44653, 29586, 29586, 29586, 29586, 29587, 44602, 19782, 19782,
  /* 17025 */ 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 23419, 31388, 31388, 31388, 31388,
  /* 17040 */ 31389, 44651, 29586, 29586, 29586, 29586, 44595, 46137, 19782, 19782, 19782, 19782, 19782, 28524, 28524,
  /* 17055 */ 28524, 28526, 31388, 31388, 31388, 31388, 44654, 29586, 29586, 29586, 35404, 19782, 19782, 19782, 19782,
  /* 17070 */ 35488, 28524, 28524, 31448, 31388, 31388, 47621, 29586, 29586, 28300, 19782, 19782, 19782, 38084, 28524,
  /* 17085 */ 28524, 31449, 31388, 33722, 29586, 29586, 28299, 19782, 29901, 49480, 28524, 31450, 33720, 29586, 38434,
  /* 17100 */ 46140, 49480, 51104, 33723, 29587, 30550, 32185, 33721, 42846, 49479, 34395, 47619, 37278, 51102, 34414,
  /* 17115 */ 37278, 51103, 47619, 42914, 34416, 33502, 32018, 41494, 41504, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 17130 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 17145 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 21129, 19782, 19782, 19782, 19782, 50762, 26218, 26216,
  /* 17160 */ 30301, 26211, 50726, 50736, 50757, 26220, 50741, 50778, 50791, 50825, 50841, 50872, 19782, 19782, 19782,
  /* 17175 */ 22320, 19782, 19782, 50907, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 25572, 18984, 20742, 20863,
  /* 17190 */ 19298, 24698, 50942, 18578, 18596, 18612, 43006, 19782, 26820, 19782, 19782, 18663, 18683, 18711, 18716,
  /* 17205 */ 20702, 18732, 18748, 19230, 19151, 18774, 21073, 18764, 20827, 50978, 18779, 21078, 18769, 20832, 18821,
  /* 17220 */ 50855, 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707, 18961, 20216,
  /* 17235 */ 20707, 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742, 51285, 25998,
  /* 17250 */ 19782, 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098, 19138, 20328,
  /* 17265 */ 19167, 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314, 25997, 47097,
  /* 17280 */ 19389, 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625, 19648, 19671,
  /* 17295 */ 19555, 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798, 19799, 19835,
  /* 17310 */ 19858, 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069, 20092, 20135,
  /* 17325 */ 20158, 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232, 20248, 20298,
  /* 17340 */ 20314, 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546, 20565, 20549,
  /* 17355 */ 20603, 20651, 20687, 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873, 20917, 27102, 24692,
  /* 17370 */ 20848, 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782, 19782, 19782,
  /* 17385 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 17400 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 21129, 19782, 19782, 19782, 19782, 33405, 19782,
  /* 17415 */ 19782, 32474, 19782, 29317, 51007, 51066, 51017, 51033, 51036, 19782, 51052, 51082, 39730, 19782, 19782,
  /* 17430 */ 19782, 22320, 19782, 19782, 41992, 19782, 19782, 19782, 24015, 19782, 19782, 24012, 25572, 19842, 20742,
  /* 17445 */ 20740, 20587, 24698, 21132, 18578, 18596, 18612, 43006, 19782, 26820, 19782, 19782, 18663, 18683, 18711,
  /* 17460 */ 18716, 20702, 18732, 18748, 19230, 18945, 18774, 21073, 18764, 20827, 18795, 18779, 21078, 18769, 20832,
  /* 17475 */ 18821, 19782, 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707, 18961,
  /* 17490 */ 20216, 20707, 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742, 51285,
  /* 17505 */ 25998, 19782, 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098, 19138,
  /* 17520 */ 20328, 19167, 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314, 25997,
  /* 17535 */ 47097, 19389, 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625, 19648,
  /* 17550 */ 19671, 19555, 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798, 19799,
  /* 17565 */ 19835, 19858, 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069, 20092,
  /* 17580 */ 20135, 20158, 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232, 20248,
  /* 17595 */ 20298, 20314, 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546, 20565,
  /* 17610 */ 20549, 20603, 20651, 20687, 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873, 20917, 27102,
  /* 17625 */ 24692, 20848, 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782, 19782,
  /* 17640 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 17655 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 21129, 19782, 19782, 19782, 19782, 22487,
  /* 17670 */ 19782, 19782, 19782, 19782, 19191, 51120, 51155, 51168, 51177, 51180, 19782, 51196, 51210, 39730, 19782,
  /* 17685 */ 19782, 19782, 22320, 19782, 19782, 51226, 19782, 25891, 19782, 19782, 19782, 19782, 33769, 25572, 19842,
  /* 17700 */ 20742, 20740, 19298, 24698, 21132, 18578, 18596, 18612, 43006, 19782, 26820, 19782, 19782, 18663, 18683,
  /* 17715 */ 18711, 18716, 20702, 18732, 18748, 19230, 26594, 18774, 21073, 18764, 20827, 51270, 18779, 21078, 18769,
  /* 17730 */ 20832, 18821, 19782, 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510, 18931, 20707,
  /* 17745 */ 18961, 20216, 20707, 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261, 20530, 20742,
  /* 17760 */ 51285, 25998, 19782, 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111, 19222, 19098,
  /* 17775 */ 19138, 20328, 19167, 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246, 19883, 19314,
  /* 17790 */ 25997, 47097, 19389, 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344, 19609, 19625,
  /* 17805 */ 19648, 19671, 19555, 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781, 24870, 30798,
  /* 17820 */ 19799, 19835, 19858, 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016, 20034, 20069,
  /* 17835 */ 20092, 20135, 20158, 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122, 39818, 20232,
  /* 17850 */ 20248, 20298, 20314, 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 20489, 20505, 19359, 20546,
  /* 17865 */ 20565, 20549, 20603, 20651, 20687, 20380, 20725, 20393, 20760, 20709, 20742, 20744, 20805, 19873, 20917,
  /* 17880 */ 27102, 24692, 20848, 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782, 19782, 19782,
  /* 17895 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 17910 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 21129, 19782, 19782, 19782, 19782,
  /* 17925 */ 33405, 19782, 19782, 19782, 19782, 29317, 21308, 19782, 19782, 19782, 19782, 19782, 19782, 43636, 37463,
  /* 17940 */ 19782, 19782, 19782, 22320, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 35489,
  /* 17955 */ 51103, 31388, 42844, 28960, 42835, 23142, 19782, 19782, 19782, 43006, 19782, 19782, 19782, 19782, 19782,
  /* 17970 */ 19782, 19782, 23278, 28524, 28524, 28524, 28524, 29167, 31388, 31388, 31388, 31388, 23217, 29586, 29586,
  /* 17985 */ 29586, 29226, 37323, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 38085,
  /* 18000 */ 28524, 28524, 28524, 28524, 28524, 23236, 31388, 31388, 31388, 31388, 31388, 23258, 29586, 29586, 29586,
  /* 18015 */ 29586, 29588, 44603, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 35488, 28524,
  /* 18030 */ 28524, 28524, 28524, 28525, 28901, 31388, 31388, 31388, 31388, 31389, 44653, 29586, 29586, 29586, 29586,
  /* 18045 */ 29587, 44602, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 38085, 28524, 28524, 28524, 28524, 23419,
  /* 18060 */ 31388, 31388, 31388, 31388, 31389, 44651, 29586, 29586, 29586, 29586, 44595, 46137, 19782, 19782, 19782,
  /* 18075 */ 19782, 19782, 28524, 28524, 28524, 28526, 31388, 31388, 31388, 31388, 44654, 29586, 29586, 29586, 35404,
  /* 18090 */ 19782, 19782, 19782, 19782, 35488, 28524, 28524, 31448, 31388, 31388, 47621, 29586, 29586, 28300, 19782,
  /* 18105 */ 19782, 19782, 38084, 28524, 28524, 31449, 31388, 33722, 29586, 29586, 28299, 19782, 29901, 49480, 28524,
  /* 18120 */ 31450, 33720, 29586, 38434, 46140, 49480, 51104, 33723, 29587, 30550, 32185, 33721, 42846, 49479, 34395,
  /* 18135 */ 47619, 37278, 51102, 34414, 37278, 51103, 47619, 42914, 34416, 33502, 32018, 41494, 41504, 19782, 19782,
  /* 18150 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 18165 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 18180 */ 19782, 19782, 19782, 19782, 27495, 19782, 19782, 38025, 51313, 51320, 51320, 51323, 19782, 51301, 51339,
  /* 18195 */ 41985, 19782, 19782, 19782, 19782, 19782, 19782, 41992, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 18210 */ 25572, 19842, 20742, 20740, 19298, 24698, 29927, 18578, 18596, 18612, 19782, 19782, 26820, 19782, 19782,
  /* 18225 */ 18663, 18683, 18711, 18716, 20702, 18732, 18748, 19230, 19151, 18774, 21073, 18764, 20827, 50978, 18779,
  /* 18240 */ 21078, 18769, 20832, 18821, 19782, 19782, 18837, 19782, 19782, 19782, 18871, 35657, 19782, 18915, 19510,
  /* 18255 */ 18931, 20707, 18961, 20216, 20707, 18976, 20340, 20867, 19258, 20527, 20742, 51282, 19291, 20870, 19261,
  /* 18270 */ 20530, 20742, 51285, 25998, 19782, 33029, 19000, 28001, 19037, 19073, 25611, 19782, 51363, 46551, 27111,
  /* 18285 */ 19222, 19098, 19138, 20328, 19167, 19207, 22573, 20443, 19246, 19883, 19277, 19207, 22573, 20443, 19246,
  /* 18300 */ 19883, 19314, 25997, 47097, 19389, 26085, 19440, 50926, 19456, 19477, 19526, 20775, 19329, 19571, 19344,
  /* 18315 */ 19609, 19625, 19648, 19671, 19555, 19694, 19618, 19641, 19664, 19548, 19687, 19710, 19722, 19743, 19781,
  /* 18330 */ 24870, 30798, 19799, 19835, 19858, 19899, 19940, 19982, 20457, 20000, 20018, 19980, 20455, 19998, 20016,
  /* 18345 */ 20034, 20069, 20092, 20135, 20158, 20177, 20207, 26581, 27318, 27334, 50991, 21059, 27333, 50990, 19122,
  /* 18360 */ 39818, 20232, 20248, 20298, 20314, 20366, 21931, 20409, 21921, 21937, 20415, 20431, 20473, 51379, 20505,
  /* 18375 */ 19359, 20546, 20565, 20549, 20603, 20617, 20687, 20380, 20725, 20393, 51395, 20709, 20742, 20744, 20805,
  /* 18390 */ 19873, 20917, 27102, 24692, 20848, 20927, 20886, 20902, 20943, 20969, 21030, 21045, 21094, 21107, 19782,
  /* 18405 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782,
  /* 18420 */ 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 19782, 1, 12290, 3, 0, 0, 6,
  /* 18438 */ 0, 0, 0, 0, 0, 94515, 94515, 94515, 94515, 0, 0, 0, 0, 0, 2783, 2784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2955,
  /* 18465 */ 2956, 0, 0, 0, 0, 0, 98614, 98614, 98614, 94515, 94515, 98614, 98614, 98614, 98614, 98614, 98614, 98614,
  /* 18483 */ 98614, 98614, 98614, 98614, 98614, 98614, 98614, 98614, 0, 98614, 98614, 98614, 98614, 98614, 98614,
  /* 18498 */ 98614, 98614, 98614, 98614, 98614, 98614, 377, 98614, 94515, 98614, 98614, 98614, 98614, 98614, 98614,
  /* 18513 */ 98614, 98614, 98614, 69632, 73728, 98614, 98614, 98614, 98614, 98614, 98614, 98614, 1, 12290, 3, 0, 0,
  /* 18530 */ 2183168, 6, 6, 0, 65536, 98614, 98614, 98614, 98614, 98614, 98614, 98614, 98614, 98614, 98614, 98614,
  /* 18546 */ 98614, 98614, 98614, 98614, 98614, 0, 0, 94515, 0, 0, 98614, 311, 312, 0, 2134016, 315, 316, 0, 0, 0, 0,
  /* 18567 */ 316, 316, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 2478080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18595 */ 2972, 0, 0, 0, 0, 2752512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2928640, 2932736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18623 */ 0, 0, 0, 3141632, 0, 0, 0, 0, 0, 2989, 0, 0, 0, 0, 2994, 2995, 0, 2997, 0, 0, 0, 0, 0, 1639, 0, 0, 0, 0,
  /* 18651 */ 0, 0, 0, 0, 0, 0, 681, 682, 0, 0, 0, 0, 2895872, 0, 0, 2445312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18680 */ 2503, 0, 0, 2646016, 0, 2719744, 2736128, 0, 0, 2793472, 2826240, 2850816, 0, 2887680, 2945024, 0, 0, 0,
  /* 18698 */ 0, 0, 0, 506, 506, 0, 513, 513, 513, 513, 519, 520, 513, 0, 0, 0, 2826240, 2945024, 0, 0, 0, 0, 0,
  /* 18721 */ 2945024, 0, 0, 0, 0, 0, 0, 0, 2752512, 0, 2179072, 2179072, 2179072, 2646016, 2179072, 2179072, 2179072,
  /* 18738 */ 2179072, 2179072, 2179072, 2719744, 2179072, 2736128, 2179072, 2744320, 2179072, 2752512, 2793472,
  /* 18749 */ 2179072, 2179072, 2179072, 2826240, 2179072, 2850816, 2179072, 2179072, 2179072, 2887680, 2179072,
  /* 18760 */ 2179072, 2179072, 2179072, 2945024, 2850816, 2125824, 2125824, 2125824, 2887680, 2125824, 2125824,
  /* 18771 */ 2125824, 2125824, 2945024, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18782 */ 2125824, 2125824, 2125824, 2125824, 2646016, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18793 */ 2719744, 2125824, 0, 0, 995, 2125824, 2125824, 2125824, 2125824, 2125824, 2445312, 2453504, 2125824,
  /* 18806 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 1068, 0, 0, 0, 2179072, 2125824,
  /* 18820 */ 2125824, 2478080, 2179072, 2179072, 2179072, 2179072, 2478080, 2125824, 2125824, 2125824, 2125824,
  /* 18831 */ 2478080, 2125824, 2125824, 2125824, 2125824, 2183168, 0, 0, 2637824, 0, 0, 0, 0, 0, 2809856, 0, 0, 0, 0,
  /* 18850 */ 0, 0, 0, 0, 1187, 0, 0, 0, 0, 0, 0, 0, 0, 1194, 1194, 0, 0, 0, 1198, 1676, 0, 0, 0, 0, 0, 2822144, 0, 0,
  /* 18878 */ 0, 0, 2142208, 0, 0, 0, 0, 0, 0, 0, 343, 344, 345, 0, 0, 0, 0, 0, 0, 0, 359, 0, 0, 0, 0, 0, 0, 0, 0, 377,
  /* 18908 */ 377, 377, 0, 0, 0, 151552, 0, 0, 0, 0, 0, 2428928, 0, 0, 2605056, 0, 0, 0, 0, 2863104, 0, 0, 2863104,
  /* 18931 */ 2412544, 2433024, 0, 0, 2863104, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2428928, 2179072, 2179072,
  /* 18947 */ 2179072, 2179072, 2179072, 2179072, 0, 920, 2125824, 2125824, 2125824, 2125824, 2125824, 2445312, 2453504,
  /* 18960 */ 2125824, 2179072, 2605056, 2179072, 2179072, 2179072, 2179072, 2179072, 2637824, 2179072, 2179072,
  /* 18971 */ 2179072, 2179072, 2179072, 2179072, 2682880, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18982 */ 2179072, 3149824, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18993 */ 2179072, 2125824, 2126744, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 0, 2621440, 0, 0, 2789376,
  /* 19008 */ 2797568, 2801664, 0, 2842624, 0, 0, 2908160, 0, 0, 0, 0, 0, 3004, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 19029 */ 549, 549, 1288, 549, 549, 549, 549, 549, 3211264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2818048, 0, 0, 0, 0, 0,
  /* 19055 */ 0, 2498, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2502, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2875392, 2891776, 0, 0, 2908160,
  /* 19082 */ 0, 0, 0, 0, 0, 0, 0, 0, 1204, 1206, 0, 0, 0, 0, 0, 0, 2621440, 2179072, 2179072, 2179072, 2179072,
  /* 19103 */ 2662400, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2740224, 2179072, 2179072, 2179072,
  /* 19114 */ 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 249856, 2125824, 2125824, 2125824, 2125824,
  /* 19126 */ 2125824, 3203072, 2179072, 2125824, 2125824, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824,
  /* 19137 */ 2461696, 2179072, 2179072, 2789376, 2797568, 2801664, 2818048, 2842624, 2179072, 2179072, 2179072,
  /* 19148 */ 2908160, 2179072, 2936832, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 0, 2125824, 2125824,
  /* 19161 */ 2125824, 2125824, 2125824, 2445312, 2453504, 2125824, 3125248, 2179072, 2179072, 3158016, 2179072,
  /* 19172 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3231744, 2179072, 0, 0, 0, 0, 0,
  /* 19187 */ 3142, 0, 0, 3145, 0, 0, 0, 0, 0, 0, 0, 0, 1183744, 429, 429, 0, 0, 0, 0, 0, 0, 0, 0, 2125824, 2125824,
  /* 19212 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2482176, 2486272,
  /* 19223 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2543616, 2179072, 2179072, 2179072, 2179072,
  /* 19234 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3141632, 2179072, 2179072, 2179072,
  /* 19245 */ 2179072, 2125824, 2789376, 2797568, 2801664, 2818048, 2842624, 2125824, 2125824, 2125824, 2908160,
  /* 19256 */ 2125824, 2936832, 2125824, 2125824, 2125824, 2125824, 2637824, 2125824, 2125824, 2125824, 2125824,
  /* 19267 */ 2125824, 2125824, 2682880, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3125248,
  /* 19278 */ 2125824, 2125824, 3158016, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19289 */ 2125824, 3231744, 2125824, 0, 0, 2125824, 2125824, 2125824, 2428928, 2125824, 2125824, 2125824, 2125824,
  /* 19302 */ 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 0, 2179072, 2125824, 2125824, 3125248, 2125824,
  /* 19316 */ 2125824, 3158016, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19327 */ 3231744, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 2625536, 2179072, 2650112, 2179072,
  /* 19338 */ 2179072, 2670592, 2179072, 2179072, 2179072, 2727936, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19349 */ 3059712, 2179072, 2179072, 3096576, 2179072, 2179072, 3145728, 2179072, 2179072, 3166208, 2179072,
  /* 19360 */ 2179072, 2179072, 2179072, 2674688, 2699264, 2781184, 2785280, 2879488, 2994176, 2179072, 3031040,
  /* 19371 */ 2179072, 3043328, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3162112,
  /* 19382 */ 2126743, 2126743, 2519959, 2126743, 2126743, 2126743, 2577303, 0, 0, 0, 0, 2625536, 0, 0, 0, 0, 2912256,
  /* 19399 */ 0, 2949120, 0, 0, 0, 0, 0, 0, 647, 648, 0, 2134016, 651, 652, 0, 0, 0, 0, 0, 0, 655, 0, 0, 0, 0, 0, 0,
  /* 19426 */ 795, 0, 0, 0, 0, 0, 0, 0, 795, 655, 0, 0, 795, 795, 3096576, 2670592, 0, 0, 2830336, 0, 0, 0, 0, 0, 0, 0,
  /* 19452 */ 0, 0, 0, 3112960, 0, 3215360, 0, 0, 2596864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1630, 0, 0, 0, 2408448,
  /* 19478 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3145728, 3166208, 0, 0, 0, 0, 0, 0, 2730, 0, 0, 0, 0, 0, 2734, 0, 0, 0, 0,
  /* 19507 */ 0, 0, 2757, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2916352, 0, 0, 0, 0, 0, 2949120, 0, 2703360, 0, 0, 0, 0, 0, 0,
  /* 19535 */ 3137536, 2408448, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824,
  /* 19546 */ 2125824, 241664, 2125824, 2125824, 2125824, 2125824, 2125824, 2912256, 2125824, 2125824, 2949120, 2125824,
  /* 19558 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3059712, 2125824, 2125824,
  /* 19569 */ 3096576, 2125824, 2756608, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2912256,
  /* 19580 */ 2179072, 2179072, 2949120, 2179072, 2179072, 2179072, 2179072, 2125824, 0, 2126743, 2126743, 2126743,
  /* 19592 */ 2429847, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 3154839, 2126743, 2126743,
  /* 19603 */ 3179415, 3191703, 3199895, 2417634, 2421730, 2126818, 2179072, 2179072, 3194880, 2179072, 2179072,
  /* 19614 */ 3215360, 3219456, 2179072, 0, 0, 0, 0, 0, 0, 2408448, 2125824, 2125824, 2125824, 2441216, 2125824,
  /* 19629 */ 2125824, 2125824, 2125824, 2125824, 2473984, 2125824, 2494464, 2502656, 2125824, 2125824, 2125824,
  /* 19640 */ 2125824, 2125824, 2494464, 2502656, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2551808,
  /* 19651 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2625536, 2125824, 2650112, 2125824,
  /* 19662 */ 2125824, 2670592, 2125824, 2625536, 2125824, 2650112, 2125824, 2125824, 2670592, 2125824, 2125824,
  /* 19673 */ 2125824, 2727936, 2125824, 2756608, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19684 */ 2125824, 2912256, 2125824, 2125824, 2125824, 3059712, 2125824, 2125824, 3096576, 2125824, 2125824,
  /* 19695 */ 2125824, 3145728, 2125824, 2125824, 3166208, 2125824, 2125824, 2125824, 3194880, 2125824, 2125824,
  /* 19706 */ 3215360, 3219456, 2125824, 0, 3194880, 2125824, 2125824, 3215360, 3219456, 2125824, 2179072, 2125824,
  /* 19718 */ 2125824, 2179072, 2179072, 3137536, 3244032, 2125824, 2125824, 3137536, 3244032, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19735 */ 0, 0, 0, 0, 1725, 0, 0, 0, 0, 0, 2838528, 2871296, 0, 2940928, 0, 0, 3026944, 0, 0, 3047424, 0, 0,
  /* 19757 */ 3170304, 0, 0, 0, 0, 0, 3150, 3151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 359, 0, 417, 0, 0, 0, 0, 3227648, 0, 0, 0,
  /* 19785 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 335, 0, 0, 0, 2658304, 0, 0, 0, 0, 2641920, 0, 3207168, 2924544, 0,
  /* 19812 */ 2985984, 0, 0, 0, 0, 0, 722, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2980, 0, 0, 0, 0, 2179072, 2179072, 2437120,
  /* 19838 */ 2179072, 2179072, 2179072, 2465792, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19849 */ 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2179072, 2179072,
  /* 19860 */ 2572288, 2179072, 2179072, 2179072, 2179072, 2179072, 2658304, 2179072, 2179072, 2179072, 2179072,
  /* 19871 */ 2748416, 2772992, 2179072, 2179072, 2179072, 2179072, 3035136, 2179072, 2179072, 2125824, 2125824,
  /* 19882 */ 2523136, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3063808, 2125824,
  /* 19893 */ 3088384, 2125824, 2125824, 2125824, 2125824, 2125824, 2179072, 2179072, 2867200, 2871296, 2179072,
  /* 19904 */ 2920448, 2940928, 2179072, 2179072, 2969600, 2179072, 2179072, 3018752, 2179072, 3026944, 2179072,
  /* 19915 */ 2179072, 2179072, 2179072, 3035136, 2179072, 2179072, 2126743, 2126743, 2524055, 2126743, 2126743,
  /* 19926 */ 2126743, 2126743, 2126743, 2126743, 2544535, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743,
  /* 19937 */ 2126743, 2126743, 2622359, 2179072, 3047424, 2179072, 3092480, 3108864, 3121152, 2179072, 2179072,
  /* 19948 */ 2179072, 2179072, 2179072, 2179072, 2179072, 3248128, 0, 0, 0, 0, 0, 738, 0, 0, 0, 742, 0, 0, 0, 0, 0, 0,
  /* 19970 */ 0, 1113, 1114, 1115, 1116, 0, 0, 0, 0, 0, 0, 0, 2125824, 2125824, 2437120, 2125824, 2125824, 2125824,
  /* 19988 */ 2465792, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2772992,
  /* 19999 */ 2125824, 2125824, 2125824, 2125824, 2867200, 2871296, 2125824, 2920448, 2940928, 2125824, 2125824,
  /* 20010 */ 2969600, 2125824, 2125824, 3018752, 2125824, 3026944, 2125824, 3026944, 2125824, 2125824, 3047424,
  /* 20021 */ 2125824, 3092480, 3108864, 2125824, 3121152, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20032 */ 2125824, 3248128, 2125824, 3248128, 2179072, 2125824, 2125824, 2179072, 2179072, 2125824, 2125824,
  /* 20043 */ 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0, 2484, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2954, 0, 0, 0, 2958, 0, 0, 0,
  /* 20070 */ 2531328, 2535424, 0, 0, 2568192, 2617344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20096 */ 3203072, 2691072, 0, 2764800, 0, 0, 0, 0, 0, 2953216, 0, 0, 0, 0, 0, 767, 0, 0, 0, 0, 0, 0, 774, 0, 0, 0,
  /* 20122 */ 0, 0, 373, 374, 375, 376, 0, 0, 377, 0, 301, 0, 0, 0, 3084288, 0, 2564096, 2686976, 0, 2654208, 0, 0, 0,
  /* 20145 */ 0, 0, 0, 0, 0, 0, 0, 2424, 0, 0, 0, 0, 0, 0, 0, 2981888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2959,
  /* 20176 */ 0, 0, 3235840, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2514944,
  /* 20191 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 1366, 2125824, 2125824, 2125824, 2125824,
  /* 20203 */ 2125824, 2445312, 2453504, 2125824, 2535424, 2179072, 2179072, 2179072, 2564096, 2568192, 2179072,
  /* 20214 */ 2179072, 2617344, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 20225 */ 2179072, 2822144, 2834432, 2179072, 2854912, 2863104, 2179072, 2715648, 3198976, 2666496, 2633728,
  /* 20236 */ 2723840, 0, 0, 0, 0, 3002368, 0, 0, 3072000, 3153920, 0, 3006464, 2416640, 0, 3178496, 0, 0, 0, 2760704,
  /* 20255 */ 0, 0, 0, 0, 0, 2813952, 0, 0, 0, 0, 0, 0, 2965, 0, 0, 2967, 0, 0, 0, 0, 0, 0, 0, 2078, 0, 0, 0, 0, 0, 0,
  /* 20285 */ 0, 0, 741, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2490368, 2527232, 2777088, 0, 0, 2600960, 0, 0, 0, 2416640,
  /* 20310 */ 2420736, 2179072, 2179072, 2461696, 2179072, 2490368, 2179072, 2179072, 2179072, 2539520, 2179072,
  /* 20321 */ 2179072, 2179072, 2179072, 2609152, 2179072, 2633728, 2666496, 2179072, 2179072, 2179072, 2179072,
  /* 20332 */ 2179072, 2179072, 2179072, 2179072, 2179072, 3063808, 2179072, 3088384, 2179072, 2179072, 2179072,
  /* 20343 */ 2179072, 2125824, 0, 2125824, 2125824, 2125824, 2428928, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20355 */ 2125824, 2125824, 2125824, 2125824, 249856, 0, 0, 0, 2179072, 2125824, 2125824, 2715648, 2777088, 2179072,
  /* 20369 */ 2179072, 2179072, 2957312, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3153920,
  /* 20380 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3162112, 2125824, 2125824,
  /* 20391 */ 2519040, 2125824, 2125824, 2125824, 2576384, 2584576, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20402 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3162112, 2965504, 2125824, 2125824, 2609152, 2125824,
  /* 20413 */ 2633728, 2666496, 2125824, 2125824, 2715648, 2777088, 2125824, 2125824, 2125824, 2125824, 2957312,
  /* 20424 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3153920, 2125824, 2125824,
  /* 20435 */ 3178496, 3190784, 3198976, 2527232, 2527232, 2527232, 2179072, 2179072, 2125824, 2125824, 2125824,
  /* 20446 */ 2125824, 2662400, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2740224, 2125824, 2125824,
  /* 20457 */ 2125824, 2125824, 2572288, 2125824, 2125824, 2125824, 2125824, 2125824, 2658304, 2125824, 2125824,
  /* 20468 */ 2125824, 2125824, 2748416, 2772992, 2125824, 0, 2506752, 0, 0, 0, 0, 0, 2699264, 2879488, 3031040, 0,
  /* 20484 */ 3133440, 3223552, 0, 0, 3067904, 0, 3174400, 2961408, 0, 2781184, 3158, 0, 0, 0, 0, 2977792, 0, 0,
  /* 20502 */ 2846720, 3182592, 2449408, 0, 3043328, 2785280, 2592768, 0, 0, 3076096, 2179072, 2449408, 2457600,
  /* 20515 */ 2179072, 2506752, 2179072, 2179072, 2179072, 2179072, 2125824, 1824, 2125824, 2125824, 2125824, 2428928,
  /* 20527 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2822144, 2834432, 2125824, 2854912,
  /* 20538 */ 2863104, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2179072, 3174400, 2125824,
  /* 20549 */ 2449408, 2457600, 2125824, 2506752, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20560 */ 2125824, 2674688, 2699264, 2781184, 2785280, 2699264, 2781184, 2785280, 2805760, 2879488, 2994176,
  /* 20571 */ 2125824, 3031040, 2125824, 3043328, 2125824, 2125824, 2125824, 2125824, 3174400, 2125824, 0, 1920,
  /* 20583 */ 2125824, 2125824, 2125824, 2428928, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20594 */ 2125824, 2125824, 0, 0, 1167360, 0, 2179072, 2125824, 2125824, 2805760, 2879488, 2994176, 2125824,
  /* 20607 */ 3031040, 2125824, 3043328, 2125824, 2125824, 2125824, 2125824, 3174400, 2179072, 3076096, 2125824,
  /* 20618 */ 3076096, 0, 2510848, 2519040, 0, 0, 0, 0, 2899968, 0, 0, 0, 0, 0, 0, 0, 2436, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20644 */ 69632, 73728, 0, 0, 0, 433, 0, 2125824, 3076096, 0, 2510848, 2519040, 0, 0, 0, 0, 2899968, 0, 0, 0, 3158,
  /* 20665 */ 0, 0, 0, 0, 0, 786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 804, 0, 809, 0, 0, 0, 2859008, 0, 3252224, 2588672,
  /* 20691 */ 2584576, 0, 2965504, 2179072, 2179072, 2519040, 2179072, 2179072, 2179072, 2576384, 2584576, 2179072,
  /* 20703 */ 2179072, 2179072, 2445312, 2453504, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 20714 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824,
  /* 20725 */ 2584576, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20736 */ 3162112, 2125824, 2125824, 2519040, 2125824, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20748 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 2523136,
  /* 20760 */ 2965504, 2965504, 0, 0, 0, 0, 0, 2768896, 2904064, 0, 3158, 0, 0, 0, 0, 2179072, 2179072, 2179072,
  /* 20778 */ 2473984, 2179072, 2494464, 2502656, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2551808,
  /* 20789 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 920, 2126743, 2126743, 2126743, 2126743, 2126743,
  /* 20802 */ 2446231, 2454423, 2126743, 0, 0, 3035136, 0, 0, 0, 0, 3014656, 2179072, 2179072, 2523136, 2179072,
  /* 20817 */ 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 245760, 2125824, 2125824,
  /* 20829 */ 2125824, 2125824, 2125824, 3141632, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20840 */ 2125824, 2125824, 2125824, 0, 0, 2179072, 2125824, 2125824, 2613248, 2125824, 2125824, 2125824, 2125824,
  /* 20853 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2613248, 2125824, 0,
  /* 20865 */ 2125824, 2126819, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20876 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2605056, 2125824, 2125824, 2125824, 2125824, 2179072,
  /* 20887 */ 2555904, 2179072, 2629632, 2179072, 2883584, 2179072, 2179072, 2179072, 3055616, 2125824, 2469888,
  /* 20898 */ 2125824, 2555904, 2125824, 2629632, 2125824, 2883584, 2125824, 2125824, 2125824, 3055616, 2125824,
  /* 20909 */ 2125824, 2469888, 2125824, 2555904, 2125824, 2629632, 2125824, 2883584, 2125824, 2125824, 2125824,
  /* 20920 */ 3035136, 2125824, 2125824, 2125824, 2125824, 2125824, 2523136, 2125824, 2125824, 2125824, 2125824,
  /* 20931 */ 2125824, 2125824, 2125824, 2469888, 0, 2555904, 3055616, 0, 0, 0, 2179072, 2469888, 2125824, 2125824,
  /* 20945 */ 3055616, 2125824, 2547712, 0, 0, 0, 2179072, 2547712, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 20958 */ 2125824, 2125824, 2125824, 2125824, 2125824, 1068, 2125824, 2125824, 2125824, 2125824, 2125824, 2547712,
  /* 20970 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3117056, 2125824, 2547712, 2125824, 2125824, 2125824,
  /* 20981 */ 2125824, 2125824, 3117056, 0, 0, 0, 0, 0, 3158, 0, 3280, 0, 0, 0, 0, 3284, 0, 0, 0, 0, 0, 595, 595, 2644,
  /* 21005 */ 595, 595, 595, 595, 595, 595, 595, 595, 3330, 595, 595, 595, 595, 595, 595, 595, 595, 3341, 595, 595, 595,
  /* 21026 */ 549, 549, 571, 571, 0, 0, 2424832, 2179072, 2179072, 2179072, 2179072, 3051520, 2424832, 2125824, 2125824,
  /* 21041 */ 2125824, 2125824, 3051520, 2424832, 2125824, 2125824, 2125824, 3051520, 2560000, 0, 2973696, 2179072,
  /* 21053 */ 2678784, 2998272, 2179072, 2125824, 2678784, 2998272, 2125824, 2125824, 2125824, 2125824, 3203072,
  /* 21064 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2514944, 2125824, 2125824,
  /* 21075 */ 2125824, 2719744, 2125824, 2736128, 2125824, 2744320, 2125824, 2752512, 2793472, 2125824, 2125824,
  /* 21086 */ 2125824, 2826240, 2125824, 2850816, 2125824, 2125824, 2125824, 2887680, 2678784, 2998272, 2125824,
  /* 21097 */ 2732032, 2580480, 2179072, 2580480, 2125824, 2580480, 2125824, 2179072, 2125824, 2125824, 2179072,
  /* 21108 */ 2125824, 2125824, 3010560, 3010560, 3010560, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 753, 672, 0, 0, 740, 1,
  /* 21130 */ 12290, 3, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2445312, 2453504, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21158 */ 115154, 115154, 115154, 115154, 115154, 115154, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 115154, 115154,
  /* 21175 */ 115154, 115154, 115154, 115154, 115154, 115154, 115154, 115154, 115154, 115154, 115154, 115154, 115154,
  /* 21188 */ 115154, 466, 466, 115154, 466, 466, 466, 466, 466, 466, 466, 115154, 115154, 115154, 115154, 115154,
  /* 21204 */ 115154, 115154, 466, 115154, 0, 0, 0, 115154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115154, 115154, 466, 115154,
  /* 21226 */ 115154, 115154, 115154, 115154, 115154, 115154, 115154, 115154, 115154, 0, 0, 0, 0, 0, 0, 2990, 2991, 0,
  /* 21244 */ 0, 0, 0, 2996, 0, 0, 0, 0, 0, 0, 3143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 0, 0, 0, 0, 0, 1, 12290, 3,
  /* 21274 */ 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 311, 0, 315, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21304 */ 2045, 2046, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 351, 0, 315, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21335 */ 0, 0, 0, 0, 0, 0, 0, 2984, 315, 315, 315, 0, 315, 315, 315, 315, 315, 315, 315, 315, 315, 315, 0, 0, 0, 0,
  /* 21361 */ 315, 315, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 57344, 0, 0, 0, 0, 0, 0,
  /* 21388 */ 0, 398, 0, 69632, 73728, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 311, 0, 0, 0, 315, 0, 0, 0, 2445312, 2453504, 0, 0,
  /* 21415 */ 0, 0, 0, 3160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1117, 0, 0, 0, 0, 0, 0, 2105640, 12290, 3, 0, 0, 6, 304,
  /* 21444 */ 0, 0, 0, 0, 304, 0, 0, 0, 0, 0, 0, 723, 0, 0, 0, 727, 0, 0, 730, 0, 732, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21475 */ 126976, 0, 126976, 126976, 126976, 126976, 0, 0, 2105640, 12290, 3, 0, 0, 2183168, 6, 6, 0, 126976,
  /* 21493 */ 126976, 126976, 126976, 126976, 126976, 0, 0, 126976, 0, 0, 0, 0, 0, 0, 0, 0, 1219, 0, 0, 0, 0, 0, 0, 0,
  /* 21517 */ 0, 1233, 0, 0, 0, 0, 0, 0, 0, 0, 1272, 0, 0, 0, 0, 0, 0, 549, 126976, 0, 0, 126976, 0, 0, 126976, 126976,
  /* 21543 */ 0, 0, 126976, 126976, 126976, 0, 0, 0, 0, 0, 0, 3272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1130, 0, 0, 0, 0, 0, 0,
  /* 21571 */ 0, 0, 126976, 0, 0, 126976, 0, 0, 0, 126976, 0, 0, 0, 0, 0, 0, 0, 694, 695, 696, 0, 0, 0, 700, 0, 0, 0, 0,
  /* 21599 */ 2134016, 0, 0, 0, 0, 0, 0, 0, 757, 0, 0, 0, 0, 0, 0, 0, 2511, 0, 0, 549, 549, 549, 549, 549, 549, 549,
  /* 21625 */ 2187, 549, 549, 2190, 549, 549, 549, 549, 549, 0, 0, 6, 0, 0, 0, 1090, 1094, 0, 0, 1098, 1102, 0, 2445312,
  /* 21648 */ 2453504, 0, 0, 0, 0, 0, 3171, 3172, 0, 0, 0, 0, 549, 549, 549, 549, 549, 865, 549, 549, 879, 549, 549,
  /* 21671 */ 549, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 135168, 0, 0, 135168, 0, 0, 0, 0, 135168,
  /* 21697 */ 135168, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2998, 0, 135168, 135168,
  /* 21724 */ 135168, 0, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 0, 0, 0, 0, 0,
  /* 21741 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2983, 0, 135168, 0, 0, 0, 0, 135168, 135168, 1, 12290, 3, 0, 0, 2183168, 6, 6,
  /* 21767 */ 0, 0, 0, 0, 0, 3287, 0, 549, 549, 549, 3289, 549, 549, 549, 3292, 549, 549, 549, 549, 549, 1762, 549, 549,
  /* 21790 */ 549, 549, 1766, 549, 549, 549, 549, 549, 549, 549, 3566, 3567, 549, 571, 571, 571, 571, 571, 571, 1844,
  /* 21810 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 3218, 571, 571, 571, 571, 571, 0, 0, 0, 139264, 139264,
  /* 21831 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2068, 0, 0, 0, 65536, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21862 */ 0, 0, 253952, 139264, 139264, 139264, 0, 139264, 139264, 139264, 139264, 139264, 139264, 139264, 139264,
  /* 21877 */ 139264, 139264, 0, 0, 0, 0, 139264, 139264, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 427, 0, 0, 0, 0, 0, 0, 0,
  /* 21902 */ 0, 0, 0, 0, 0, 0, 0, 0, 398, 0, 0, 1459, 2125824, 2125824, 2125824, 2125824, 2125824, 2445312, 2453504,
  /* 21921 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3153920, 2125824, 2125824, 3178496,
  /* 21932 */ 3190784, 3198976, 2416640, 2420736, 2125824, 2125824, 2461696, 2125824, 2490368, 2125824, 2125824,
  /* 21943 */ 2125824, 2539520, 2125824, 2125824, 2125824, 2125824, 2609152, 2125824, 2633728, 2666496, 1, 12290, 3, 0,
  /* 21957 */ 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 143360, 0, 312, 0, 316, 143360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2137,
  /* 21987 */ 0, 0, 0, 316, 316, 316, 0, 316, 316, 316, 316, 316, 316, 316, 316, 316, 316, 0, 0, 0, 0, 0, 1108, 1231, 0,
  /* 22012 */ 0, 0, 0, 0, 0, 1238, 0, 0, 0, 0, 0, 1111, 1112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 387, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22044 */ 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61440, 0, 0, 0, 0, 0, 1126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22074 */ 1612, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 312, 0, 0, 0, 316, 2445312, 2453504, 0, 0, 0, 0, 0, 3359, 0,
  /* 22102 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 3198, 549, 549, 549, 549, 549, 0, 313, 313, 313, 0, 0,
  /* 22124 */ 313, 313, 147769, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 147839, 313, 313, 313, 313,
  /* 22144 */ 313, 313, 313, 147769, 383, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
  /* 22164 */ 313, 147769, 313, 313, 313, 313, 313, 313, 147839, 313, 313, 313, 147839, 69632, 73728, 313, 313, 147769,
  /* 22182 */ 313, 313, 313, 313, 313, 313, 313, 147769, 147769, 147769, 147769, 147769, 147769, 147769, 313, 147769,
  /* 22198 */ 313, 147769, 313, 147769, 313, 147769, 147769, 147769, 147769, 147769, 313, 0, 313, 65536, 313, 313, 313,
  /* 22215 */ 313, 313, 313, 313, 313, 313, 147769, 313, 147769, 147769, 147769, 147769, 147839, 147839, 147839, 147839,
  /* 22231 */ 147839, 147839, 147839, 147839, 147839, 147839, 147769, 147769, 0, 313, 313, 313, 147769, 147769, 313,
  /* 22246 */ 313, 313, 313, 147769, 147769, 313, 147769, 147769, 147769, 313, 147769, 147769, 147769, 147769, 147769,
  /* 22261 */ 147769, 147769, 147769, 147769, 147769, 147769, 313, 313, 147769, 313, 313, 313, 313, 313, 313, 313, 313,
  /* 22278 */ 313, 313, 313, 378, 313, 0, 147769, 313, 147839, 147769, 147769, 147769, 147769, 147769, 147769, 1, 12290,
  /* 22295 */ 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 0, 135168, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 0, 0, 2731, 0, 0, 0,
  /* 22323 */ 0, 0, 0, 0, 0, 377, 377, 377, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 0,
  /* 22352 */ 159744, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3148, 3149, 0, 0, 159744, 159744, 159744, 0,
  /* 22376 */ 159744, 0, 12290, 3, 0, 0, 2183168, 6, 6, 131072, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 163840,
  /* 22398 */ 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 167936, 163840,
  /* 22411 */ 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840,
  /* 22424 */ 163840, 163840, 163840, 0, 0, 163840, 0, 0, 0, 0, 0, 0, 0, 0, 1626, 0, 0, 0, 0, 0, 0, 0, 0, 1642, 0, 1644,
  /* 22450 */ 0, 0, 0, 1648, 0, 163840, 163840, 167936, 163840, 163840, 163840, 163840, 163840, 163840, 163840, 163840,
  /* 22466 */ 163840, 163840, 0, 0, 0, 0, 0, 0, 33414, 312, 0, 2134016, 49802, 316, 0, 0, 0, 0, 0, 0, 661, 0, 0, 0, 0,
  /* 22491 */ 0, 0, 0, 0, 0, 0, 1183744, 377, 0, 0, 0, 0, 0, 0, 0, 0, 163840, 0, 25170, 163840, 0, 0, 0, 0, 163840,
  /* 22516 */ 163840, 0, 0, 0, 0, 0, 1155, 377, 377, 0, 0, 1158, 0, 0, 0, 1161, 0, 0, 25170, 25170, 163840, 25170,
  /* 22538 */ 25170, 25170, 25170, 25170, 25170, 25170, 25170, 25170, 25170, 25170, 163840, 163840, 163840, 163840,
  /* 22552 */ 25170, 25170, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 24576, 995, 2125824, 2125824, 2125824, 2125824,
  /* 22570 */ 2125824, 2445312, 2453504, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2543616, 2125824,
  /* 22581 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2621440, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22599 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 22612 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 0, 0, 172032, 0, 0, 0, 0, 0, 0, 0,
  /* 22631 */ 0, 1682, 0, 0, 0, 0, 0, 0, 0, 0, 1696, 0, 0, 0, 0, 0, 0, 0, 0, 1709, 0, 0, 1712, 0, 0, 0, 0, 172032,
  /* 22659 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 0, 0, 0,
  /* 22674 */ 0, 0, 0, 126976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126976, 126976, 172032, 172032, 172032, 172032, 172032,
  /* 22695 */ 172032, 172032, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 0, 139264, 0, 0, 139264, 0, 0, 0, 0, 0, 0,
  /* 22720 */ 0, 0, 1597, 1598, 0, 0, 0, 0, 0, 0, 0, 176128, 0, 176128, 176128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176128, 0,
  /* 22747 */ 176128, 0, 0, 0, 0, 0, 0, 65536, 0, 176128, 176128, 0, 176128, 0, 0, 176128, 176128, 0, 176128, 0, 0, 0,
  /* 22769 */ 0, 0, 0, 739, 0, 0, 0, 0, 0, 0, 0, 0, 749, 176128, 0, 176128, 176128, 176128, 176128, 0, 176128, 176128,
  /* 22791 */ 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128,
  /* 22804 */ 176128, 0, 0, 0, 0, 0, 0, 176128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128, 176128,
  /* 22827 */ 176128, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 1, 297, 3, 0, 0, 6, 0, 305, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2786,
  /* 22855 */ 0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 180224, 180224, 180224, 180224, 180224, 180224,
  /* 22877 */ 180224, 180224, 180224, 180224, 180224, 180224, 180224, 180224, 180224, 180224, 180224, 180224, 180224,
  /* 22890 */ 180224, 180224, 180224, 0, 0, 180224, 0, 0, 0, 0, 0, 0, 0, 0, 1723, 0, 0, 0, 0, 0, 0, 0, 0, 2041, 0, 0, 0,
  /* 22917 */ 0, 0, 0, 0, 0, 2058, 0, 0, 0, 0, 0, 0, 0, 0, 2079, 0, 0, 0, 0, 0, 0, 0, 0, 2106, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 22949 */ 2119, 0, 0, 0, 0, 0, 0, 0, 0, 2134, 0, 0, 0, 0, 0, 0, 0, 0, 2437, 0, 0, 0, 0, 0, 0, 0, 0, 2449, 0, 0, 0,
  /* 22980 */ 0, 0, 0, 0, 0, 2460, 0, 0, 0, 0, 0, 0, 0, 0, 2475, 0, 0, 0, 0, 0, 0, 0, 0, 2485, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23012 */ 2500, 0, 0, 0, 0, 0, 0, 0, 0, 2512, 0, 549, 549, 549, 549, 549, 549, 180224, 180224, 180224, 180224,
  /* 23033 */ 180224, 180224, 180224, 180224, 180224, 180224, 180224, 180224, 180224, 0, 0, 0, 0, 0, 0, 159744, 159744,
  /* 23050 */ 0, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744,
  /* 23064 */ 159744, 159744, 159744, 0, 0, 0, 180224, 180224, 180224, 180224, 180224, 180224, 180224, 1, 0, 3, 78123,
  /* 23081 */ 78123, 301, 6, 6, 0, 0, 0, 0, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1629, 0, 0, 0, 0, 644, 0, 0, 0,
  /* 23111 */ 0, 0, 311, 312, 0, 2134016, 315, 316, 0, 0, 0, 0, 0, 0, 768, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1710, 0, 0, 0, 0,
  /* 23140 */ 0, 0, 78123, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3156, 0, 0, 0, 0, 1125, 0, 0, 0, 0, 0, 0, 0,
  /* 23172 */ 0, 0, 0, 0, 0, 0, 2735, 0, 2736, 0, 1213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 350, 0, 571, 1405,
  /* 23201 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2320, 0, 0, 995, 595, 595, 595,
  /* 23223 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 1533, 595, 595, 549, 549, 549, 549, 1365, 0, 571, 571,
  /* 23244 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 3323, 571, 571, 595, 571, 26034, 0, 595, 595, 595, 595,
  /* 23265 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 2365, 595, 595, 2049, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23291 */ 0, 0, 549, 0, 0, 0, 571, 571, 571, 571, 571, 571, 571, 2246, 571, 571, 571, 571, 571, 571, 1891, 571, 571,
  /* 23314 */ 571, 571, 571, 571, 571, 571, 571, 571, 3062, 571, 571, 571, 571, 571, 571, 571, 571, 2283, 571, 571, 571,
  /* 23335 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2587, 571, 571, 0, 0, 0, 595, 595, 595, 595, 595, 595,
  /* 23357 */ 595, 2333, 595, 595, 595, 595, 595, 1520, 595, 595, 595, 595, 595, 595, 595, 1534, 595, 595, 595, 595,
  /* 23377 */ 595, 2370, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 1498, 595, 595, 595, 595, 2665,
  /* 23397 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 1514, 595, 549, 2828, 549, 549, 549,
  /* 23418 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 0, 0, 0, 0, 0, 0, 571, 571, 571, 571, 2876, 571, 571, 571,
  /* 23441 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1435, 571, 0, 0, 0, 0, 2951, 0, 0, 0, 0, 0, 0, 0,
  /* 23466 */ 0, 0, 0, 0, 0, 2148, 0, 0, 0, 2985, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 690, 762, 549, 549, 549,
  /* 23496 */ 3016, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2555, 549, 549, 571, 571, 3056,
  /* 23516 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1456, 571, 595, 595, 595, 3098, 595,
  /* 23537 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 1532, 595, 595, 595, 3137, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23561 */ 0, 0, 0, 0, 0, 0, 0, 748, 3179, 549, 549, 549, 549, 549, 549, 549, 549, 549, 3187, 549, 549, 549, 549,
  /* 23584 */ 549, 549, 549, 2820, 549, 549, 549, 549, 549, 549, 549, 2826, 549, 549, 549, 571, 3203, 571, 571, 571,
  /* 23604 */ 3206, 571, 571, 571, 571, 571, 571, 571, 571, 2868, 571, 571, 571, 571, 571, 571, 571, 571, 2879, 571,
  /* 23624 */ 571, 2882, 571, 571, 2885, 571, 571, 571, 3214, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 23644 */ 571, 571, 571, 1867, 571, 595, 595, 3235, 595, 595, 595, 595, 595, 595, 595, 595, 595, 3243, 595, 595,
  /* 23664 */ 595, 0, 549, 549, 571, 571, 595, 595, 549, 571, 595, 3633, 3634, 3635, 549, 549, 549, 549, 3298, 549, 549,
  /* 23685 */ 549, 3299, 3300, 549, 549, 549, 549, 549, 549, 549, 1284, 549, 549, 549, 1293, 549, 549, 549, 549, 595,
  /* 23705 */ 3336, 3337, 595, 595, 595, 595, 595, 595, 595, 595, 595, 549, 549, 571, 571, 571, 571, 571, 571, 3309,
  /* 23725 */ 571, 571, 571, 571, 571, 571, 571, 1424, 571, 571, 571, 571, 571, 571, 571, 1437, 549, 549, 549, 549,
  /* 23745 */ 3371, 549, 549, 549, 549, 571, 571, 571, 571, 571, 571, 3380, 595, 595, 3396, 595, 595, 595, 595, 595,
  /* 23765 */ 595, 3402, 595, 595, 595, 3406, 595, 549, 549, 549, 549, 549, 1777, 549, 549, 549, 1782, 549, 549, 549,
  /* 23785 */ 549, 549, 549, 549, 2549, 549, 549, 549, 549, 549, 549, 549, 549, 1764, 549, 549, 549, 549, 549, 549, 549,
  /* 23806 */ 549, 549, 3523, 549, 549, 549, 549, 549, 549, 549, 549, 571, 571, 571, 571, 3535, 188834, 189037, 189037,
  /* 23825 */ 0, 189037, 189037, 189037, 189037, 189037, 189037, 189037, 189037, 189037, 189037, 0, 0, 0, 0, 189037,
  /* 23841 */ 189037, 1, 12290, 3, 78123, 78123, 301, 6, 6, 0, 0, 0, 2134767, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23868 */ 3275, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 197075, 197075, 197075, 197075, 197075, 197075, 197075, 0,
  /* 23888 */ 197075, 197075, 197075, 197075, 197075, 197075, 197075, 0, 0, 197075, 0, 0, 0, 0, 0, 0, 0, 0, 2744, 0, 0,
  /* 23909 */ 0, 0, 0, 0, 0, 0, 2759, 0, 0, 0, 0, 0, 0, 0, 0, 2966, 0, 0, 0, 0, 0, 0, 0, 0, 2992, 0, 0, 0, 0, 0, 0,
  /* 23940 */ 2999, 197075, 197075, 0, 197075, 197075, 197075, 197075, 197075, 197075, 197075, 197075, 197075, 197075,
  /* 23954 */ 0, 0, 0, 0, 0, 0, 208896, 208896, 0, 208896, 208896, 208896, 208896, 208896, 208896, 208896, 208896,
  /* 23971 */ 208896, 208896, 208896, 208896, 208896, 208896, 209215, 208896, 0, 0, 197075, 197075, 197075, 197075,
  /* 23985 */ 197075, 197075, 197075, 197075, 197075, 197075, 197075, 197075, 197075, 197075, 197075, 197075, 197075,
  /* 23998 */ 197075, 197075, 197075, 197075, 0, 0, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 0, 1175552, 0, 0, 0,
  /* 24021 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2452, 0, 0, 0, 0, 200704, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135168,
  /* 24052 */ 135168, 419, 419, 419, 0, 419, 419, 419, 419, 419, 419, 419, 419, 419, 419, 0, 0, 0, 0, 419, 419, 1,
  /* 24074 */ 12290, 3, 78123, 78123, 301, 6, 6, 0, 0, 751, 419, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 0, 0,
  /* 24102 */ 1566, 0, 0, 0, 1572, 0, 0, 0, 1578, 0, 0, 0, 1584, 0, 0, 0, 0, 0, 1168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 674,
  /* 24132 */ 0, 793, 0, 0, 0, 0, 0, 0, 1572, 2033, 0, 0, 0, 0, 1578, 2035, 0, 0, 0, 0, 1584, 2033, 0, 2035, 0, 2037, 0,
  /* 24159 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 762, 2641, 0, 0, 0, 0, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 24187 */ 595, 595, 595, 595, 2337, 2641, 0, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 24208 */ 2000, 2001, 0, 0, 0, 319, 0, 319, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319, 65536, 0, 0, 0, 0, 0, 0, 0, 319, 208896,
  /* 24236 */ 0, 0, 0, 0, 0, 0, 0, 724, 0, 0, 0, 0, 0, 0, 0, 0, 377, 377, 212992, 0, 0, 0, 0, 0, 208896, 208896, 209215,
  /* 24263 */ 208896, 208896, 209214, 208896, 208896, 209214, 208896, 209214, 208896, 208896, 0, 0, 0, 0, 0, 0, 294912,
  /* 24280 */ 294912, 0, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912, 294912,
  /* 24294 */ 294912, 294912, 294912, 294912, 0, 0, 0, 0, 318, 208896, 208896, 209214, 0, 208896, 1, 12290, 3, 0, 0,
  /* 24313 */ 2183810, 6, 6, 0, 0, 0, 0, 0, 2409442, 2126818, 2126818, 2126818, 2442210, 2126818, 2126818, 2126818,
  /* 24329 */ 2126818, 2126818, 2474978, 2851735, 2126743, 2126743, 2126743, 2888599, 2126743, 2126743, 2126743,
  /* 24340 */ 2126743, 2945943, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2823063, 2835351,
  /* 24351 */ 2126743, 2855831, 2864023, 2126743, 2126743, 2126743, 2126743, 0, 0, 995, 2126818, 2126818, 2126818,
  /* 24364 */ 2126818, 2126818, 2446306, 2454498, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2544610,
  /* 24375 */ 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2622434, 2737122, 2126818,
  /* 24386 */ 2745314, 2126818, 2753506, 2794466, 2126818, 2126818, 2126818, 2827234, 2126818, 2851810, 2126818,
  /* 24397 */ 2126818, 2126818, 2888674, 3142626, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818,
  /* 24408 */ 2126818, 2126818, 2126818, 0, 0, 2179072, 2126818, 2126743, 2179072, 2179072, 2179072, 2179072, 2126743,
  /* 24421 */ 2126743, 2126743, 2126743, 2126818, 2126818, 2126818, 2126818, 0, 0, 0, 2478080, 2179072, 2179072,
  /* 24434 */ 2179072, 2179072, 2478999, 2126743, 2126743, 2126743, 2126743, 2479074, 2126818, 2126818, 2126818,
  /* 24445 */ 2126818, 2183168, 2126818, 3150818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818,
  /* 24456 */ 2126818, 2126818, 2126818, 2126818, 2126818, 2179072, 2126818, 2126818, 3056610, 2126818, 2547712, 0, 0,
  /* 24469 */ 0, 2179072, 2547712, 2179072, 2179072, 2179072, 2179072, 2179072, 2126743, 2126743, 2126743, 2720663,
  /* 24481 */ 2126743, 2737047, 2126743, 2745239, 2126743, 2753431, 2794391, 2126743, 2126743, 2126743, 2827159,
  /* 24492 */ 2126743, 993, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818,
  /* 24504 */ 2126818, 2126818, 2126818, 2126818, 0, 2523136, 0, 0, 0, 2126743, 2126743, 2126743, 2126743, 2126743,
  /* 24518 */ 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2483095, 2487191, 2126743, 2790295, 2798487,
  /* 24529 */ 2802583, 2818967, 2843543, 2126743, 2126743, 2126743, 2909079, 2126743, 2937751, 2126743, 2126743,
  /* 24540 */ 2126743, 2126743, 2663319, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2741143, 2126743,
  /* 24551 */ 2126743, 2126743, 2126743, 2638743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2683799,
  /* 24562 */ 2126743, 2126743, 2126743, 2126743, 2126743, 3142551, 2126743, 2126743, 2126743, 2126743, 2126743,
  /* 24573 */ 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2605975, 2126743,
  /* 24584 */ 3126167, 2126743, 2126743, 3158935, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743,
  /* 24595 */ 2126743, 2126743, 3232663, 2126743, 0, 0, 2126818, 2126818, 2126818, 2429922, 2126818, 2126818, 2126818,
  /* 24608 */ 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 0, 0, 0, 0, 2179072, 2126818, 2126743, 0, 0, 0,
  /* 24624 */ 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818,
  /* 24635 */ 2483170, 2487266, 2126818, 2790370, 2798562, 2802658, 2819042, 2843618, 2126818, 2126818, 2126818,
  /* 24646 */ 2909154, 2126818, 2937826, 2126818, 2126818, 2126818, 2126818, 2663394, 2126818, 2126818, 2126818,
  /* 24657 */ 2126818, 2126818, 2126818, 2741218, 2126818, 2126818, 2126818, 2126818, 2573282, 2126818, 2126818,
  /* 24668 */ 2126818, 2126818, 2126818, 2659298, 2126818, 2126818, 2126818, 2126818, 2749410, 3126242, 2126818,
  /* 24679 */ 2126818, 3159010, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818,
  /* 24690 */ 3232738, 2126818, 2179072, 2179072, 2179072, 2613248, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 24701 */ 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 2125824, 2125824, 2125824, 2125824,
  /* 24713 */ 2125824, 2179072, 2179072, 3194880, 2179072, 2179072, 3215360, 3219456, 2179072, 0, 0, 0, 0, 0, 0,
  /* 24728 */ 2409367, 2126743, 2126743, 2126743, 2728855, 2126743, 2757527, 2126743, 2126743, 2126743, 2126743,
  /* 24739 */ 2126743, 2126743, 2126743, 2126743, 2913175, 2126743, 2126743, 2126743, 2868119, 2872215, 2126743,
  /* 24750 */ 2921367, 2941847, 2126743, 2126743, 2970519, 2126743, 2126743, 3019671, 2126743, 3027863, 2126743,
  /* 24761 */ 2126743, 2442135, 2126743, 2126743, 2126743, 2126743, 2126743, 2474903, 2126743, 2495383, 2503575,
  /* 24772 */ 2126743, 2126743, 2126743, 2126743, 3150743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743,
  /* 24783 */ 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126818,
  /* 24794 */ 2126818, 2126743, 2126743, 2552727, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743,
  /* 24805 */ 2626455, 2126743, 2651031, 2126743, 2126743, 2671511, 2126743, 2950039, 2126743, 2126743, 2126743,
  /* 24816 */ 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 3060631, 2126743, 2126743, 3097495, 2126743,
  /* 24827 */ 2126743, 2126743, 2954135, 2126743, 2126743, 2126743, 3023767, 2126743, 2126743, 2126743, 2126743,
  /* 24838 */ 3085207, 2126743, 2126743, 2126743, 2126743, 3203991, 2126818, 2126818, 2126818, 2126818, 2126818,
  /* 24849 */ 2126818, 2126818, 2126818, 2515938, 2126818, 2126818, 2126743, 2126743, 3146647, 2126743, 2126743,
  /* 24860 */ 3167127, 2126743, 2126743, 2126743, 3195799, 2126743, 2126743, 3216279, 3220375, 2126743, 0, 0, 0, 0, 0,
  /* 24875 */ 2748416, 0, 0, 0, 3108864, 0, 0, 0, 0, 3092480, 0, 0, 0, 0, 0, 3158, 0, 0, 3281, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 24902 */ 2204360, 155648, 2204360, 0, 0, 0, 155648, 0, 3195874, 2126818, 2126818, 3216354, 3220450, 2126818,
  /* 24916 */ 2179072, 2126818, 2126743, 2179072, 2179072, 3137536, 3244032, 2126743, 2126743, 3138455, 3244951,
  /* 24927 */ 2126818, 2126818, 3138530, 3245026, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2439, 2440, 0, 0, 2126743,
  /* 24948 */ 2126743, 2573207, 2126743, 2126743, 2126743, 2126743, 2126743, 2659223, 2126743, 2126743, 2126743,
  /* 24959 */ 2126743, 2749335, 2773911, 2126743, 2126743, 2126743, 3036055, 2126743, 2126743, 2126743, 2126818,
  /* 24970 */ 2126818, 2524130, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2716642, 2778082, 2126818,
  /* 24981 */ 2126818, 2126818, 2126818, 2958306, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818,
  /* 24992 */ 2954210, 2126818, 2126818, 2126818, 3023842, 2126818, 2126818, 2126818, 2126818, 3085282, 2126818,
  /* 25003 */ 2126818, 2126743, 2126743, 3048343, 2126743, 3093399, 3109783, 2126743, 3122071, 2126743, 2126743,
  /* 25014 */ 2126743, 2126743, 2126743, 2126743, 2126743, 3249047, 0, 0, 2126818, 2126818, 2438114, 2126818, 2126818,
  /* 25027 */ 2126818, 2466786, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 3204066, 2179072,
  /* 25038 */ 2126818, 2126743, 2179072, 2179072, 2126743, 2126743, 2126818, 2126818, 2461696, 2773986, 2126818,
  /* 25049 */ 2126818, 2126818, 2126818, 2868194, 2872290, 2126818, 2921442, 2941922, 2126818, 2126818, 2970594,
  /* 25060 */ 2126818, 2126818, 3019746, 2126818, 3027938, 2126818, 2126818, 3048418, 2126818, 3093474, 3109858,
  /* 25071 */ 2126818, 3122146, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2823138, 2835426, 2126818,
  /* 25082 */ 2855906, 2864098, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2469888, 0, 2555904,
  /* 25094 */ 3055616, 0, 0, 0, 2179072, 2469888, 2126818, 3249122, 2179072, 2126818, 2126743, 2179072, 2179072,
  /* 25107 */ 2126743, 2126743, 2126818, 2126818, 0, 0, 0, 0, 0, 0, 0, 2772, 0, 0, 0, 0, 2777, 0, 0, 0, 2536418,
  /* 25128 */ 2126818, 2126818, 2126818, 2565090, 2569186, 2126818, 2126818, 2618338, 2126818, 2126818, 2126818,
  /* 25139 */ 2126818, 2126818, 2126818, 2126818, 2946018, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818,
  /* 25150 */ 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2606050,
  /* 25161 */ 2126818, 2126818, 2126818, 2126818, 3178496, 3190784, 3198976, 2417559, 2421655, 2126743, 2126743,
  /* 25172 */ 2462615, 2126743, 2491287, 2126743, 2126743, 2126743, 2540439, 2126743, 2126743, 2126743, 2565015,
  /* 25183 */ 2569111, 2126743, 2126743, 2618263, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743,
  /* 25194 */ 2126743, 3064727, 2126743, 3089303, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743,
  /* 25205 */ 2610071, 2126743, 2634647, 2667415, 2126743, 2126743, 2716567, 2778007, 2126743, 2126743, 2126743,
  /* 25216 */ 2126743, 2958231, 2126743, 2126743, 2438039, 2126743, 2126743, 2126743, 2466711, 2126743, 2126743,
  /* 25227 */ 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2646935,
  /* 25238 */ 2126743, 2126743, 2126743, 2126818, 3154914, 2126818, 2126818, 3179490, 3191778, 3199970, 2527232,
  /* 25249 */ 2528226, 2528151, 2179072, 2179072, 2126743, 2126743, 2126818, 2126818, 2577378, 2585570, 2126818,
  /* 25260 */ 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 3163106, 2965504,
  /* 25271 */ 2179072, 3174400, 2126743, 2450327, 2458519, 2126743, 2507671, 2126743, 2126743, 2126743, 2126743,
  /* 25282 */ 2126743, 2126743, 2126743, 2126743, 2675607, 2700183, 2782103, 2786199, 2806679, 2880407, 2995095,
  /* 25293 */ 2126743, 3031959, 2126743, 3044247, 2126743, 2126743, 2126743, 2126743, 3175319, 2126818, 2126818,
  /* 25304 */ 3060706, 2126818, 2126818, 3097570, 2126818, 2126818, 2126818, 3146722, 2126818, 2126818, 3167202,
  /* 25315 */ 2126818, 2126818, 2126818, 3052514, 2560000, 0, 2973696, 2179072, 2678784, 2998272, 2179072, 2126743,
  /* 25327 */ 2679703, 2999191, 2126743, 2126818, 2450402, 2458594, 2126818, 2507746, 2126818, 2126818, 2126818,
  /* 25338 */ 2126818, 2126818, 2126818, 2126818, 2126818, 2675682, 2700258, 2782178, 2786274, 2806754, 2880482,
  /* 25349 */ 2995170, 2126818, 3032034, 2126818, 3044322, 2126818, 2126818, 2126818, 2126818, 3175394, 2179072,
  /* 25360 */ 3076096, 2126743, 3077015, 2126818, 3077090, 0, 2510848, 2519040, 0, 0, 0, 0, 2899968, 0, 0, 0, 3158, 0,
  /* 25378 */ 0, 0, 0, 0, 1184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 319, 319, 319, 0, 0, 0, 2585495, 2126743, 2126743,
  /* 25402 */ 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 3163031, 2126818, 2126818,
  /* 25413 */ 2520034, 2126818, 2462690, 2126818, 2491362, 2126818, 2126818, 2126818, 2540514, 2126818, 2126818,
  /* 25424 */ 2126818, 2126818, 2610146, 2126818, 2634722, 2667490, 2966423, 2966498, 0, 0, 0, 0, 0, 2768896, 2904064,
  /* 25439 */ 0, 3158, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2613248, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 25454 */ 2179072, 2179072, 2126743, 2126743, 2126743, 2126743, 2126743, 0, 2126818, 2126818, 2126818, 2126818,
  /* 25466 */ 2126818, 2614167, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126818,
  /* 25477 */ 2126818, 2126818, 2126818, 2126818, 2614242, 2126818, 2495458, 2503650, 2126818, 2126818, 2126818,
  /* 25488 */ 2126818, 2126818, 2126818, 2552802, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2913250,
  /* 25499 */ 2126818, 2126818, 2950114, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2647010,
  /* 25510 */ 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2720738, 2126818, 2179072, 2555904, 2179072,
  /* 25521 */ 2629632, 2179072, 2883584, 2179072, 2179072, 2179072, 3055616, 2126743, 2470807, 2126743, 2556823,
  /* 25532 */ 2126743, 2630551, 2126743, 2884503, 2126743, 2126743, 2126743, 3056535, 2126743, 2126818, 2470882,
  /* 25543 */ 2126818, 2556898, 2126818, 2630626, 2126818, 2884578, 2126818, 2626530, 2126818, 2651106, 2126818,
  /* 25554 */ 2126818, 2671586, 2126818, 2126818, 2126818, 2728930, 2126818, 2757602, 2126818, 2126818, 2126818,
  /* 25565 */ 3036130, 2126818, 2126818, 2126818, 0, 0, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 25581 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2126743, 2126743,
  /* 25592 */ 2126743, 2126743, 2126743, 2126743, 2548631, 2126743, 2126743, 2126743, 2126743, 2126743, 3117975,
  /* 25603 */ 2126818, 2548706, 2126818, 2126818, 2126818, 2126818, 2126818, 3118050, 0, 0, 0, 0, 0, 3080192, 0, 0, 0,
  /* 25620 */ 3158016, 0, 0, 0, 0, 0, 0, 0, 388, 0, 0, 0, 0, 380, 0, 397, 0, 0, 0, 2424832, 2179072, 2179072, 2179072,
  /* 25643 */ 2179072, 3051520, 2425751, 2126743, 2126743, 2126743, 2126743, 3052439, 2425826, 2126818, 2638818,
  /* 25654 */ 2126818, 2126818, 2126818, 2126818, 2126818, 2126818, 2683874, 2126818, 2126818, 2126818, 2126818,
  /* 25665 */ 2126818, 2126818, 2126818, 2126818, 3064802, 2126818, 3089378, 2126818, 2126818, 2126818, 2126818,
  /* 25676 */ 2126818, 2679778, 2999266, 2126818, 2732032, 2580480, 2179072, 2581399, 2126743, 2581474, 2126818,
  /* 25687 */ 2179072, 2126743, 2126818, 2179072, 2126743, 2126818, 3010560, 3011479, 3011554, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25704 */ 0, 0, 0, 1598, 0, 0, 0, 0, 0, 0, 0, 225280, 225280, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225280, 225280, 0, 0,
  /* 25730 */ 225280, 225280, 225280, 65536, 0, 0, 0, 0, 0, 225280, 0, 0, 225280, 225280, 225280, 225280, 225280,
  /* 25747 */ 225280, 225280, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 225280, 0, 0, 225280, 0, 0, 0, 0, 0, 225280,
  /* 25771 */ 225280, 225280, 225280, 225280, 225280, 225280, 225280, 225280, 225280, 225280, 225280, 225280, 225280,
  /* 25784 */ 225280, 225280, 0, 0, 0, 0, 0, 0, 0, 2822144, 0, 0, 0, 0, 2142208, 0, 0, 0, 102400, 0, 0, 0, 0, 0, 1200,
  /* 25809 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 743, 0, 0, 0, 0, 0, 0, 53248, 0, 0, 0, 0, 0, 2682880, 0, 2834432, 0, 0, 0,
  /* 25838 */ 0, 2383872, 0, 0, 0, 0, 0, 3080192, 0, 0, 0, 3158016, 0, 102400, 0, 0, 0, 0, 0, 0, 788, 0, 0, 0, 0, 0, 0,
  /* 25865 */ 0, 0, 0, 1627, 0, 0, 0, 0, 0, 0, 0, 311, 0, 312, 0, 0, 0, 312, 0, 315, 0, 0, 0, 315, 0, 316, 0, 0, 0, 0,
  /* 25895 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1179648, 0, 0, 0, 316, 0, 0, 0, 2482176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3174,
  /* 25925 */ 0, 549, 549, 549, 549, 549, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824,
  /* 25939 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 311, 0, 0, 312, 0, 315, 0, 316, 0, 0, 0, 2494464,
  /* 25957 */ 2498560, 0, 0, 0, 0, 0, 0, 0, 740, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 274432, 0, 0, 0, 0, 2179072,
  /* 25983 */ 2179072, 3194880, 2179072, 2179072, 3215360, 3219456, 2179072, 920, 0, 0, 0, 920, 0, 2408448, 2125824,
  /* 25998 */ 2125824, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 26009 */ 2125824, 2125824, 0, 0, 0, 2125824, 2125824, 3145728, 2125824, 2125824, 3166208, 2125824, 2125824,
  /* 26022 */ 2125824, 3194880, 2125824, 2125824, 3215360, 3219456, 2125824, 995, 0, 2125824, 2125824, 2437120, 2125824,
  /* 26035 */ 2125824, 2125824, 2465792, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 26046 */ 2125824, 0, 1069, 0, 0, 2179072, 2125824, 2125824, 0, 0, 0, 995, 0, 2408448, 2125824, 2125824, 2125824,
  /* 26063 */ 2441216, 2125824, 2125824, 2125824, 2125824, 2125824, 2473984, 2179072, 3047424, 2179072, 3092480,
  /* 26074 */ 3108864, 3121152, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3248128, 920, 0, 0, 0, 0,
  /* 26089 */ 0, 3186688, 3194880, 0, 0, 3244032, 3059712, 0, 0, 0, 0, 0, 0, 0, 2459, 0, 0, 0, 0, 0, 0, 0, 0, 770, 0, 0,
  /* 26115 */ 0, 0, 0, 0, 0, 229817, 0, 0, 0, 0, 0, 0, 0, 0, 0, 229844, 229844, 229844, 229844, 229844, 229844, 229844,
  /* 26137 */ 229844, 229844, 229844, 229844, 229844, 229844, 229844, 229844, 229844, 0, 0, 0, 229994, 229994, 229994,
  /* 26152 */ 229844, 229994, 229994, 229994, 229994, 229994, 229994, 229994, 229994, 229994, 229994, 229844, 229844,
  /* 26165 */ 229844, 229844, 230011, 230011, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 241664, 0, 0, 0, 0, 0, 0, 0,
  /* 26189 */ 0, 0, 0, 0, 0, 0, 2749, 0, 0, 1, 12290, 3, 0, 0, 6, 0, 0, 253952, 0, 0, 0, 253952, 0, 0, 0, 0, 0, 0,
  /* 26217 */ 1159168, 0, 0, 0, 0, 0, 0, 1159168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26246 */ 254421, 254421, 254421, 254421, 254421, 254421, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 254421, 254421,
  /* 26263 */ 254421, 254421, 254421, 254421, 254421, 254421, 254421, 254421, 254421, 254421, 254421, 254421, 254421,
  /* 26276 */ 254421, 253952, 253952, 254421, 253952, 253952, 253952, 253952, 253952, 253952, 253952, 254421, 254421,
  /* 26289 */ 254421, 254421, 254421, 254421, 254421, 254421, 253952, 254421, 0, 0, 0, 254421, 0, 0, 0, 253952, 0, 0, 0,
  /* 26308 */ 0, 0, 0, 254421, 254421, 253952, 254421, 254421, 254421, 254421, 254421, 254421, 254421, 254421, 254421,
  /* 26323 */ 254421, 0, 0, 0, 0, 0, 0, 2204359, 2204359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2774, 0, 0, 0, 0, 0, 0, 0, 118784,
  /* 26350 */ 0, 245760, 0, 266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1613, 0, 0, 0, 0, 1, 12290, 3, 0, 0, 6, 0, 0, 0,
  /* 26379 */ 262144, 0, 0, 0, 262144, 0, 0, 0, 0, 0, 1216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 346, 0, 0, 0, 0, 0, 65536, 0,
  /* 26408 */ 0, 0, 0, 0, 0, 0, 0, 0, 262614, 262614, 262614, 262614, 262614, 262614, 1, 12290, 0, 0, 0, 2183168, 6, 6,
  /* 26430 */ 0, 0, 0, 0, 262614, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262614, 262614, 262614, 262614, 262614, 262614, 262614,
  /* 26452 */ 262614, 262614, 262614, 262614, 262614, 262614, 262614, 262614, 262614, 0, 0, 0, 0, 278528, 0, 0, 0, 0,
  /* 26470 */ 311, 312, 0, 2134016, 315, 316, 204800, 0, 0, 0, 0, 0, 317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1261, 0, 0,
  /* 26497 */ 0, 0, 0, 0, 0, 0, 258048, 270336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1645, 0, 0, 0, 0, 0, 0, 6, 184320, 0,
  /* 26526 */ 0, 0, 0, 0, 0, 0, 0, 0, 2445312, 2453504, 0, 0, 0, 0, 314, 0, 0, 0, 0, 0, 0, 0, 0, 314, 0, 0, 0, 0, 0, 0,
  /* 26556 */ 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 2965504, 2965504, 0, 0, 0, 0, 0, 2768896, 2904064, 0, 20480, 0, 0, 0,
  /* 26580 */ 0, 2179072, 2179072, 2179072, 2953216, 2179072, 2179072, 2179072, 3022848, 2179072, 2179072, 2179072,
  /* 26592 */ 2179072, 3084288, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 919, 2125824, 2125824, 2125824,
  /* 26605 */ 2125824, 2125824, 2445312, 2453504, 2125824, 1, 12290, 2113834, 0, 0, 6, 0, 0, 0, 0, 306, 0, 0, 0, 306, 0,
  /* 26626 */ 0, 0, 0, 315, 0, 0, 0, 315, 123306, 73728, 0, 0, 0, 0, 0, 0, 0, 2499, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632,
  /* 26654 */ 73728, 176128, 0, 0, 0, 0, 0, 0, 274432, 0, 0, 0, 0, 0, 0, 274432, 0, 0, 0, 0, 0, 0, 0, 0, 274432, 0,
  /* 26680 */ 274432, 274432, 274432, 0, 274432, 274432, 274432, 274432, 274432, 274432, 274432, 274432, 274432, 274432,
  /* 26694 */ 0, 0, 0, 0, 274432, 274432, 1, 12290, 2113834, 0, 0, 2183168, 6, 6, 0, 0, 282624, 282624, 0, 282624,
  /* 26714 */ 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 0, 0, 0, 0, 282624, 282624, 1,
  /* 26730 */ 12290, 3, 0, 0, 2183168, 6, 6, 0, 1, 12290, 3, 78123, 301, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1676, 0, 0,
  /* 26758 */ 0, 0, 78123, 1088, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225280, 0, 26034, 1365, 995, 595, 595,
  /* 26784 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2391, 2392, 2393, 0, 0, 2480, 0, 0, 0, 0, 0, 0, 0,
  /* 26808 */ 0, 0, 0, 0, 0, 0, 0, 274432, 0, 0, 0, 752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2138112, 0, 299,
  /* 26837 */ 1088, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2138112, 1193, 65536, 0, 0, 0, 0, 0, 444, 0, 0, 0, 0,
  /* 26866 */ 0, 0, 0, 0, 0, 0, 2462, 0, 0, 2465, 0, 0, 572, 549, 549, 572, 549, 549, 596, 572, 572, 572, 572, 572, 572,
  /* 26891 */ 549, 572, 572, 596, 596, 549, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 596, 572, 549, 572, 572,
  /* 26912 */ 596, 596, 1, 12290, 3, 78123, 78123, 301, 6, 6, 0, 1, 12290, 3, 78124, 301, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26938 */ 0, 0, 1684, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 0, 290816, 290816, 290816, 290816, 290816, 290816,
  /* 26961 */ 290816, 0, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816,
  /* 26975 */ 290816, 290816, 290816, 290816, 290816, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 290816, 290816, 290816,
  /* 26992 */ 290816, 290816, 290816, 0, 0, 290816, 0, 0, 0, 0, 0, 0, 0, 0, 237568, 0, 0, 0, 0, 0, 0, 0, 0, 3153, 0, 0,
  /* 27018 */ 0, 0, 0, 0, 0, 0, 3471, 549, 549, 549, 549, 549, 549, 549, 549, 2227, 549, 549, 2230, 2231, 549, 549, 0,
  /* 27041 */ 290816, 290816, 0, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 290816, 0, 0,
  /* 27056 */ 0, 0, 0, 321, 0, 0, 0, 0, 0, 320, 0, 320, 321, 0, 0, 1214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 366,
  /* 27087 */ 367, 3141632, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0,
  /* 27100 */ 303104, 2179072, 2125824, 2125824, 2125824, 3035136, 2125824, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0,
  /* 27116 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2482176,
  /* 27127 */ 2416640, 0, 3178496, 3158, 0, 0, 2760704, 0, 0, 0, 0, 0, 2813952, 0, 0, 0, 0, 0, 325, 326, 327, 328, 329,
  /* 27150 */ 330, 331, 332, 333, 334, 0, 1, 12290, 3, 0, 0, 302, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2445312, 2453504, 0,
  /* 27175 */ 308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 812, 65536, 0, 0, 0, 0, 0, 0, 0, 0, 294912, 0, 0, 0, 0,
  /* 27206 */ 0, 0, 0, 0, 0, 294912, 294912, 294912, 0, 294912, 1, 12290, 3, 0, 0, 2183168, 302, 302, 0, 0, 0, 0, 316,
  /* 27229 */ 0, 0, 0, 316, 69632, 143790, 0, 0, 0, 0, 0, 0, 0, 2743, 0, 0, 0, 0, 2748, 0, 0, 0, 0, 3174400, 2961408, 0,
  /* 27255 */ 2781184, 3278, 0, 0, 0, 0, 2977792, 0, 0, 2846720, 3182592, 2449408, 2125824, 3076096, 0, 2510848,
  /* 27271 */ 2519040, 0, 0, 0, 0, 2899968, 0, 0, 0, 3355, 0, 0, 0, 0, 0, 1243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1235, 0,
  /* 27299 */ 0, 0, 0, 0, 2965504, 2965504, 0, 0, 0, 0, 0, 2768896, 2904064, 0, 3355, 0, 0, 0, 0, 2179072, 2179072,
  /* 27320 */ 2179072, 3203072, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2514944,
  /* 27331 */ 2125824, 2125824, 2535424, 2125824, 2125824, 2125824, 2564096, 2568192, 2125824, 2125824, 2617344,
  /* 27342 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 1, 12290, 3, 0, 0, 303, 0, 0, 0,
  /* 27359 */ 0, 0, 0, 0, 0, 0, 0, 0, 2094, 0, 0, 0, 0, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1112, 619,
  /* 27390 */ 619, 619, 0, 619, 619, 619, 619, 619, 619, 619, 619, 619, 619, 0, 0, 0, 0, 619, 619, 1, 12290, 3, 0, 0,
  /* 27414 */ 2183168, 4285059, 303, 0, 0, 0, 0, 645, 0, 0, 311, 312, 0, 2134016, 315, 316, 0, 0, 0, 0, 0, 0, 797, 0, 0,
  /* 27439 */ 0, 0, 806, 0, 0, 0, 0, 0, 0, 807, 0, 0, 0, 0, 788, 0, 807, 0, 0, 1187840, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27470 */ 0, 0, 0, 0, 1149, 0, 0, 1089, 0, 299008, 0, 0, 0, 0, 0, 0, 0, 0, 2445312, 2453504, 0, 0, 0, 0, 328, 0, 0,
  /* 27497 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110592, 0, 0, 0, 321, 320, 0, 0, 0, 320, 320, 321, 321, 0, 0, 0, 0, 0, 0,
  /* 27526 */ 320, 320, 321, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 420, 321, 0, 0, 0, 321, 425, 0, 0, 69632, 73728,
  /* 27554 */ 0, 0, 0, 0, 0, 0, 0, 2976, 0, 0, 0, 0, 0, 0, 0, 0, 800, 0, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 0, 0,
  /* 27586 */ 320, 455, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 471, 497, 497, 471,
  /* 27607 */ 497, 497, 497, 497, 497, 497, 497, 522, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497,
  /* 27628 */ 540, 497, 497, 497, 497, 497, 497, 497, 497, 497, 497, 550, 573, 550, 573, 550, 550, 573, 550, 550, 597,
  /* 27649 */ 573, 573, 573, 573, 573, 573, 550, 573, 573, 597, 597, 550, 597, 597, 597, 597, 597, 597, 597, 597, 597,
  /* 27670 */ 597, 597, 573, 550, 573, 573, 597, 597, 1, 12290, 3, 78123, 78123, 301, 6, 6, 0, 0, 656, 0, 0, 659, 660,
  /* 27693 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2488, 0, 0, 0, 0, 0, 0, 0, 706, 0, 0, 0, 0, 377, 377, 377, 0, 0, 715, 0,
  /* 27724 */ 0, 0, 0, 0, 1244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1628, 0, 0, 1631, 0, 1633, 656, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27755 */ 0, 773, 0, 0, 0, 0, 0, 0, 1127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2746, 2747, 0, 0, 0, 0, 779, 0, 0, 783, 0,
  /* 27785 */ 0, 0, 0, 790, 0, 0, 0, 0, 794, 0, 0, 0, 0, 0, 1255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 758, 0, 0, 0, 0, 0, 0,
  /* 27817 */ 659, 0, 0, 0, 0, 0, 0, 822, 0, 0, 0, 798, 0, 0, 0, 0, 0, 341, 342, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2968, 0,
  /* 27848 */ 0, 0, 0, 0, 0, 839, 794, 0, 0, 0, 0, 0, 843, 844, 794, 0, 0, 0, 794, 794, 0, 747, 794, 0, 549, 549, 854,
  /* 27875 */ 858, 549, 549, 549, 549, 549, 549, 884, 888, 890, 549, 897, 549, 900, 549, 549, 914, 549, 549, 571, 571,
  /* 27896 */ 571, 928, 932, 571, 0, 595, 595, 595, 1004, 595, 1010, 595, 595, 1023, 595, 595, 1034, 595, 1040, 595,
  /* 27916 */ 1046, 595, 1049, 595, 595, 1063, 595, 595, 0, 0, 0, 0, 858, 1007, 932, 854, 1074, 900, 549, 549, 928,
  /* 27937 */ 1079, 974, 571, 571, 0, 1003, 1084, 1049, 595, 595, 595, 595, 1505, 595, 595, 595, 595, 1510, 595, 595,
  /* 27957 */ 595, 595, 595, 595, 1990, 595, 595, 595, 595, 595, 595, 1998, 595, 595, 78123, 1088, 6, 0, 0, 0, 1091,
  /* 27978 */ 1095, 0, 0, 1099, 1103, 0, 0, 0, 0, 0, 0, 1154, 0, 0, 1260, 0, 0, 0, 0, 0, 0, 0, 1610, 0, 0, 0, 0, 0, 0,
  /* 28007 */ 0, 0, 0, 3104768, 3125248, 3129344, 0, 0, 0, 0, 571, 571, 1440, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 28028 */ 571, 571, 571, 571, 571, 571, 2291, 571, 0, 0, 1729, 0, 0, 1730, 0, 0, 0, 0, 549, 549, 549, 549, 549, 549,
  /* 28052 */ 873, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1743, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1756,
  /* 28073 */ 549, 549, 549, 549, 549, 2170, 549, 549, 2174, 549, 549, 549, 2178, 549, 549, 549, 549, 549, 549, 3194,
  /* 28093 */ 549, 3196, 549, 549, 549, 549, 549, 549, 549, 549, 2537, 549, 549, 549, 2540, 549, 549, 2542, 549, 549,
  /* 28113 */ 549, 549, 1365, 1825, 571, 571, 571, 571, 571, 1832, 571, 571, 571, 571, 571, 571, 2857, 571, 571, 571,
  /* 28133 */ 571, 571, 571, 571, 571, 571, 1412, 571, 571, 571, 571, 1417, 571, 571, 1838, 571, 571, 571, 571, 571,
  /* 28153 */ 571, 571, 571, 571, 1851, 571, 571, 571, 571, 571, 571, 2878, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 28174 */ 1863, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1906, 571, 571, 571, 571, 571, 1911, 571, 571, 571,
  /* 28194 */ 571, 571, 571, 571, 2273, 571, 571, 571, 571, 571, 571, 571, 571, 1409, 571, 571, 571, 571, 571, 571, 571,
  /* 28215 */ 571, 26034, 1921, 595, 595, 595, 595, 595, 1928, 595, 595, 595, 595, 595, 1934, 595, 595, 595, 595, 3397,
  /* 28235 */ 595, 595, 595, 595, 595, 3403, 595, 595, 595, 595, 549, 595, 571, 549, 2939, 571, 2941, 595, 2943, 0, 0,
  /* 28256 */ 0, 0, 0, 0, 0, 3288, 549, 549, 549, 549, 549, 549, 549, 3293, 595, 595, 1986, 595, 595, 1989, 595, 595,
  /* 28278 */ 595, 595, 595, 595, 595, 595, 595, 595, 1495, 1497, 595, 595, 595, 595, 2002, 595, 595, 595, 595, 595,
  /* 28298 */ 2007, 595, 595, 595, 595, 595, 595, 595, 549, 595, 571, 549, 549, 571, 571, 595, 595, 0, 571, 2019, 549,
  /* 28319 */ 549, 549, 2023, 571, 571, 571, 2027, 595, 595, 595, 0, 2031, 0, 0, 0, 0, 372, 0, 0, 0, 0, 0, 0, 377, 0,
  /* 28344 */ 301, 0, 0, 0, 0, 0, 2482, 2483, 0, 0, 2486, 0, 0, 2489, 0, 0, 0, 0, 0, 549, 549, 549, 2158, 2159, 549,
  /* 28369 */ 549, 549, 549, 549, 549, 549, 1747, 1748, 549, 549, 549, 549, 1755, 549, 549, 2037, 0, 0, 0, 0, 0, 0, 0,
  /* 28392 */ 0, 0, 2043, 0, 0, 0, 0, 0, 0, 0, 3152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 382, 382, 0, 0, 2099,
  /* 28420 */ 0, 2101, 0, 0, 0, 0, 0, 0, 0, 0, 1676, 0, 0, 0, 0, 0, 0, 1169, 0, 0, 0, 0, 1174, 0, 0, 0, 0, 0, 0, 787, 0,
  /* 28451 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1249, 0, 0, 2136, 0, 0, 2143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28483 */ 3165, 0, 0, 0, 0, 2165, 549, 549, 2168, 549, 549, 549, 549, 549, 549, 2176, 549, 549, 549, 549, 549, 549,
  /* 28505 */ 549, 3019, 549, 549, 549, 549, 549, 549, 549, 549, 2199, 549, 549, 549, 549, 549, 549, 549, 2195, 549,
  /* 28525 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 0, 0, 549, 549, 549, 2209, 549,
  /* 28547 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2568, 549, 549, 571, 571, 2253, 571, 571, 571,
  /* 28568 */ 571, 571, 571, 2261, 571, 571, 571, 571, 571, 571, 571, 2285, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 28589 */ 3061, 571, 571, 571, 571, 571, 571, 571, 571, 2295, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 28610 */ 571, 571, 571, 2319, 0, 595, 595, 2340, 595, 595, 595, 595, 595, 595, 2348, 595, 595, 595, 595, 595, 595,
  /* 28631 */ 1490, 595, 595, 595, 595, 595, 595, 595, 595, 595, 1493, 595, 595, 595, 595, 595, 595, 595, 595, 2382,
  /* 28651 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2661, 595, 2663, 2408, 2409, 549, 549,
  /* 28671 */ 549, 549, 571, 571, 571, 571, 595, 595, 595, 595, 2031, 0, 0, 0, 0, 382, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28698 */ 549, 549, 3177, 549, 549, 2033, 0, 2035, 0, 2037, 0, 0, 2423, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0,
  /* 28723 */ 0, 0, 358, 357, 0, 2431, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 412, 0, 0, 2444, 0, 0, 0, 0, 0, 2448,
  /* 28753 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 362, 360, 0, 0, 0, 2481, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28782 */ 2490, 0, 0, 0, 0, 0, 1576, 0, 0, 0, 0, 0, 1582, 0, 0, 0, 0, 0, 0, 2065, 0, 0, 0, 0, 0, 0, 0, 0, 0, 390, 0,
  /* 28813 */ 393, 0, 0, 0, 393, 549, 549, 2520, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2528, 549, 549,
  /* 28835 */ 549, 549, 549, 2211, 549, 549, 549, 549, 549, 549, 2216, 549, 549, 549, 549, 549, 549, 3017, 549, 549,
  /* 28855 */ 549, 549, 549, 549, 549, 549, 549, 549, 2525, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2562, 549, 549,
  /* 28876 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 1290, 549, 549, 549, 549, 549, 2571, 549, 549, 549, 549, 549,
  /* 28897 */ 549, 0, 2575, 0, 0, 0, 0, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1917, 571,
  /* 28920 */ 571, 571, 571, 2592, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2601, 571, 571,
  /* 28940 */ 2641, 0, 0, 0, 0, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2650, 595, 595, 595, 595, 3454, 595, 595,
  /* 28962 */ 595, 595, 595, 595, 595, 595, 595, 0, 0, 0, 0, 549, 595, 571, 595, 2693, 595, 595, 595, 595, 595, 595,
  /* 28984 */ 595, 595, 595, 595, 595, 595, 595, 2703, 0, 0, 0, 0, 2729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2957, 0, 0,
  /* 29012 */ 0, 0, 0, 0, 2739, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126976, 0, 0, 2752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29044 */ 0, 0, 0, 0, 0, 1178, 549, 549, 549, 549, 2819, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 29066 */ 1291, 549, 549, 549, 549, 2641, 0, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2895, 595, 595,
  /* 29087 */ 595, 595, 1541, 595, 595, 595, 1548, 595, 595, 0, 0, 549, 595, 571, 549, 549, 2412, 2413, 571, 571, 2416,
  /* 29108 */ 2417, 595, 595, 2420, 2421, 0, 1570, 2899, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2908, 595,
  /* 29128 */ 595, 595, 595, 0, 0, 0, 0, 549, 549, 549, 549, 549, 3591, 549, 571, 571, 595, 3407, 0, 3409, 0, 0, 0, 0,
  /* 29152 */ 0, 3158, 3413, 0, 3415, 0, 549, 549, 549, 549, 549, 2224, 549, 2226, 549, 549, 549, 549, 549, 549, 549, 0,
  /* 29174 */ 920, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2301, 571, 571, 571, 571, 571, 571, 3418, 549, 3420,
  /* 29194 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 571, 3433, 571, 3435, 571, 571, 571, 571, 571, 571,
  /* 29215 */ 571, 571, 571, 571, 571, 571, 595, 3449, 595, 3451, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 29236 */ 595, 0, 0, 549, 595, 571, 0, 3466, 0, 0, 0, 3469, 0, 0, 549, 549, 549, 549, 3474, 549, 549, 549, 549, 549,
  /* 29260 */ 549, 2172, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2834, 549, 549, 549, 0, 0, 0, 0, 322, 323,
  /* 29282 */ 324, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2981, 0, 0, 0, 65536, 0, 0, 0, 433, 0, 0, 0, 0, 456, 0, 0, 0, 0,
  /* 29313 */ 0, 0, 0, 798, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 456, 545, 456, 545, 545, 545, 545,
  /* 29340 */ 545, 545, 545, 545, 545, 456, 551, 574, 551, 551, 574, 551, 551, 598, 574, 574, 574, 574, 574, 574, 551,
  /* 29361 */ 574, 574, 574, 598, 598, 551, 598, 598, 598, 598, 598, 598, 598, 598, 598, 598, 598, 574, 625, 630, 630,
  /* 29382 */ 598, 636, 1, 12290, 3, 78123, 78123, 301, 6, 6, 0, 549, 893, 549, 549, 549, 549, 549, 549, 549, 549, 571,
  /* 29404 */ 571, 571, 571, 571, 571, 3489, 571, 571, 1042, 595, 595, 595, 595, 595, 595, 595, 595, 0, 0, 0, 0, 549,
  /* 29426 */ 595, 571, 549, 571, 571, 595, 595, 1, 12290, 3, 78123, 78123, 301, 6, 6, 0, 0, 0, 1683, 0, 0, 0, 0, 0, 0,
  /* 29451 */ 0, 0, 0, 0, 0, 0, 0, 361, 0, 0, 549, 549, 1805, 549, 549, 549, 549, 549, 1811, 549, 549, 549, 549, 549,
  /* 29475 */ 549, 549, 549, 2233, 2575, 0, 0, 0, 0, 571, 571, 595, 595, 2003, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 29497 */ 595, 595, 595, 549, 595, 571, 549, 3262, 571, 3264, 595, 3266, 549, 549, 549, 549, 2521, 549, 549, 549,
  /* 29517 */ 549, 549, 549, 549, 549, 549, 549, 549, 1752, 549, 549, 549, 549, 549, 549, 549, 2572, 549, 549, 549, 549,
  /* 29538 */ 0, 2575, 0, 0, 0, 0, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2250, 2641, 0, 0, 0, 0,
  /* 29562 */ 595, 595, 595, 595, 595, 595, 2647, 595, 595, 595, 595, 0, 0, 0, 0, 549, 549, 549, 3589, 3590, 549, 549,
  /* 29584 */ 571, 2651, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 549, 595, 595,
  /* 29605 */ 2704, 595, 595, 595, 595, 549, 595, 571, 549, 549, 549, 549, 571, 571, 571, 571, 595, 595, 595, 595, 2031,
  /* 29626 */ 0, 3478, 549, 3480, 549, 549, 3482, 549, 571, 571, 571, 571, 571, 571, 571, 571, 3491, 571, 3493, 571,
  /* 29646 */ 571, 3495, 571, 571, 595, 595, 595, 595, 595, 595, 595, 595, 3505, 595, 3507, 595, 595, 3509, 595, 595, 0,
  /* 29667 */ 0, 0, 0, 0, 0, 0, 549, 549, 549, 549, 549, 549, 3365, 549, 549, 0, 0, 0, 325, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29695 */ 0, 0, 0, 0, 176128, 0, 0, 0, 0, 65536, 442, 435, 443, 434, 443, 0, 325, 443, 457, 472, 472, 472, 472, 472,
  /* 29719 */ 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 472, 493, 498, 498, 509, 498,
  /* 29740 */ 498, 498, 498, 498, 498, 498, 524, 524, 524, 537, 537, 538, 538, 538, 538, 538, 538, 538, 538, 524, 538,
  /* 29761 */ 538, 538, 538, 538, 538, 538, 538, 538, 538, 552, 575, 552, 575, 552, 552, 575, 552, 552, 599, 575, 575,
  /* 29782 */ 575, 575, 575, 575, 552, 575, 575, 599, 599, 622, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599, 623,
  /* 29803 */ 624, 599, 624, 622, 624, 624, 623, 623, 1, 12290, 3, 78123, 78123, 301, 6, 6, 0, 0, 0, 0, 424, 0, 0, 0,
  /* 29827 */ 424, 69632, 73728, 0, 381, 381, 0, 436, 0, 829, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 669, 670, 549,
  /* 29854 */ 549, 901, 549, 549, 571, 571, 975, 571, 571, 0, 595, 595, 1050, 595, 595, 595, 595, 1542, 595, 595, 595,
  /* 29875 */ 595, 595, 595, 0, 0, 549, 595, 571, 2410, 549, 549, 549, 2414, 571, 571, 571, 2418, 595, 595, 595, 0, 0,
  /* 29897 */ 0, 0, 0, 3350, 0, 0, 0, 0, 0, 3158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1146, 0, 0, 0, 0, 0, 0, 0, 1229, 0,
  /* 29928 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2445312, 2453504, 0, 0, 1241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29958 */ 0, 685, 0, 549, 1277, 549, 1280, 549, 549, 549, 549, 549, 549, 549, 549, 1294, 549, 1299, 549, 549, 549,
  /* 29979 */ 549, 549, 2535, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 571, 571, 926, 571, 571, 571, 549, 1303,
  /* 30000 */ 549, 549, 1306, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2177, 549, 549, 549, 549, 26034,
  /* 30020 */ 1365, 995, 595, 595, 1462, 595, 595, 1466, 595, 595, 595, 595, 595, 595, 595, 0, 0, 0, 0, 0, 3517, 0, 549,
  /* 30043 */ 549, 595, 1480, 595, 1485, 595, 595, 1489, 595, 595, 1492, 595, 595, 595, 595, 595, 595, 1506, 595, 595,
  /* 30063 */ 595, 595, 595, 595, 595, 595, 595, 1494, 595, 595, 595, 595, 595, 595, 0, 0, 0, 1669, 0, 0, 0, 0, 0, 0, 0,
  /* 30088 */ 0, 0, 0, 1676, 0, 0, 0, 0, 549, 848, 549, 549, 549, 549, 549, 549, 878, 549, 549, 549, 549, 549, 549,
  /* 30111 */ 2212, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1796, 549, 549, 549, 549, 549, 549, 1758, 549, 549,
  /* 30131 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1318, 1771, 549, 549, 549, 549, 549, 549,
  /* 30152 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 1802, 571, 571, 571, 1841, 571, 571, 571, 571, 571, 571, 571,
  /* 30173 */ 571, 571, 1853, 571, 571, 571, 571, 571, 2867, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 30194 */ 3446, 571, 595, 595, 571, 571, 571, 1888, 1889, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 30214 */ 571, 2289, 571, 571, 571, 1937, 595, 595, 595, 595, 595, 595, 595, 595, 595, 1949, 595, 595, 595, 595,
  /* 30234 */ 595, 1543, 595, 595, 595, 595, 595, 0, 0, 549, 595, 571, 1984, 1985, 595, 595, 595, 595, 595, 595, 595,
  /* 30255 */ 595, 595, 595, 595, 595, 595, 595, 2016, 2017, 0, 2072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 701,
  /* 30281 */ 702, 2033, 0, 2035, 0, 2037, 0, 0, 0, 0, 0, 0, 2425, 0, 0, 0, 0, 0, 0, 1217, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30311 */ 1159168, 0, 0, 1159168, 0, 0, 0, 0, 0, 0, 2471, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 311, 0, 0, 0, 0, 2558,
  /* 30339 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1819, 0, 2753, 0, 0, 0, 0, 0,
  /* 30362 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 714, 0, 0, 0, 0, 0, 2782, 0, 0, 2785, 0, 0, 0, 0, 0, 0, 0, 2789, 595, 2912,
  /* 30391 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2378, 595, 2949, 0, 0, 0, 0, 0, 0,
  /* 30414 */ 0, 2953, 0, 0, 0, 0, 0, 0, 0, 0, 249856, 0, 0, 0, 0, 0, 0, 0, 0, 135168, 0, 0, 135168, 0, 0, 0, 135168,
  /* 30441 */ 549, 3028, 3029, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2232, 0, 3068, 571,
  /* 30462 */ 3070, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2588, 571, 595, 3110, 595,
  /* 30482 */ 3112, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 1950, 595, 595, 595, 595, 595, 3259,
  /* 30502 */ 595, 595, 595, 595, 549, 595, 571, 549, 549, 571, 571, 595, 595, 0, 2945, 0, 0, 0, 3465, 0, 0, 0, 0, 0, 0,
  /* 30527 */ 0, 549, 3472, 549, 3473, 549, 549, 549, 3477, 595, 595, 3626, 0, 549, 549, 571, 571, 595, 595, 549, 571,
  /* 30548 */ 595, 549, 571, 595, 0, 0, 0, 0, 0, 0, 0, 0, 3158, 0, 0, 0, 0, 549, 549, 549, 549, 549, 867, 549, 549, 549,
  /* 30574 */ 549, 549, 549, 549, 2173, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2524, 549, 549, 549, 549, 549,
  /* 30594 */ 2529, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1211, 0, 0, 336, 336, 386, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30625 */ 0, 0, 0, 312, 0, 0, 0, 0, 65536, 0, 0, 0, 386, 0, 445, 451, 0, 458, 473, 473, 473, 473, 473, 473, 473,
  /* 30650 */ 473, 473, 473, 473, 473, 473, 473, 473, 473, 499, 499, 510, 499, 499, 499, 499, 499, 499, 499, 499, 525,
  /* 30671 */ 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 553, 576, 553, 576, 553, 553, 576,
  /* 30692 */ 553, 553, 600, 576, 576, 576, 576, 576, 576, 553, 576, 576, 600, 600, 553, 600, 600, 600, 600, 600, 600,
  /* 30713 */ 600, 600, 600, 600, 600, 576, 553, 576, 576, 600, 600, 1, 12290, 3, 78123, 78123, 301, 6, 6, 0, 571, 571,
  /* 30735 */ 571, 951, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2614, 571, 571, 0, 1123, 0, 0,
  /* 30757 */ 0, 0, 0, 0, 0, 0, 0, 1132, 0, 1134, 1135, 0, 0, 0, 0, 549, 849, 549, 549, 549, 864, 549, 549, 549, 549,
  /* 30782 */ 549, 549, 549, 1346, 549, 549, 549, 549, 549, 1353, 549, 549, 0, 0, 1137, 1138, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30807 */ 0, 0, 0, 0, 2465792, 0, 2867200, 1204, 0, 1123, 0, 1254, 0, 0, 0, 0, 0, 1138, 0, 0, 0, 0, 0, 0, 0, 3360,
  /* 30833 */ 549, 549, 549, 549, 3364, 549, 549, 549, 1237, 0, 0, 0, 1269, 1137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 549, 549,
  /* 30858 */ 549, 549, 549, 549, 3476, 549, 549, 1278, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 30879 */ 549, 0, 2237, 549, 1304, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1317, 1357, 549,
  /* 30900 */ 549, 549, 549, 549, 1365, 920, 571, 571, 1370, 571, 571, 571, 571, 571, 571, 1908, 571, 571, 571, 571,
  /* 30920 */ 571, 571, 571, 571, 571, 571, 2288, 571, 571, 571, 571, 571, 571, 571, 1420, 571, 571, 1422, 571, 571,
  /* 30940 */ 571, 1426, 571, 571, 571, 571, 571, 571, 571, 2608, 571, 571, 571, 571, 571, 571, 571, 571, 571, 3231,
  /* 30960 */ 571, 571, 571, 595, 595, 595, 26034, 1365, 995, 595, 595, 1463, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 30980 */ 595, 595, 1550, 0, 0, 1293, 1479, 1386, 1515, 595, 595, 595, 1519, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 31001 */ 595, 595, 595, 1531, 595, 595, 1535, 595, 1634, 1635, 1636, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 372, 0,
  /* 31027 */ 0, 1803, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2205, 2037, 0, 0, 0,
  /* 31049 */ 0, 0, 2040, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2733, 0, 0, 0, 0, 0, 549, 549, 2167, 549, 549, 549, 549, 549,
  /* 31076 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 2575, 0, 549, 549, 2183, 549, 549, 549, 549, 549, 549, 549,
  /* 31097 */ 549, 549, 549, 549, 549, 549, 549, 3189, 549, 0, 0, 0, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2248,
  /* 31119 */ 571, 571, 571, 571, 571, 571, 3575, 595, 595, 595, 595, 595, 595, 595, 595, 595, 3240, 595, 595, 595, 595,
  /* 31140 */ 595, 595, 571, 2252, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2321, 571,
  /* 31161 */ 2268, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2589, 0, 0, 0, 595, 595,
  /* 31183 */ 595, 595, 595, 595, 595, 595, 595, 2335, 595, 595, 595, 0, 549, 549, 571, 571, 595, 595, 3630, 3631, 3632,
  /* 31204 */ 549, 571, 595, 595, 2339, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2406, 549,
  /* 31225 */ 595, 2355, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2911, 595, 0, 2493, 0, 0,
  /* 31247 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 751, 1194, 571, 2579, 571, 2580, 571, 571, 571, 571, 571, 571, 571,
  /* 31272 */ 571, 571, 571, 571, 571, 571, 2884, 571, 571, 571, 571, 571, 2620, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 31293 */ 571, 571, 571, 571, 571, 3079, 571, 571, 2641, 0, 0, 0, 0, 595, 595, 595, 2645, 595, 2646, 595, 595, 595,
  /* 31315 */ 595, 595, 1943, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 3238, 595, 595, 595, 595, 595, 595, 595,
  /* 31336 */ 595, 595, 3512, 3513, 0, 0, 0, 0, 0, 3519, 3520, 549, 549, 549, 2807, 549, 549, 549, 549, 549, 549, 549,
  /* 31358 */ 549, 549, 549, 549, 549, 549, 3024, 549, 549, 571, 571, 571, 2854, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 31379 */ 571, 571, 571, 571, 571, 3221, 571, 571, 2874, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 31400 */ 571, 571, 571, 571, 0, 595, 595, 2923, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 31421 */ 2689, 595, 595, 595, 595, 595, 3260, 595, 595, 595, 549, 595, 571, 549, 549, 571, 571, 595, 595, 2944, 0,
  /* 31442 */ 0, 2947, 2948, 549, 3479, 549, 549, 549, 549, 549, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 31463 */ 571, 571, 571, 3492, 571, 571, 571, 571, 571, 571, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 3095,
  /* 31484 */ 3506, 595, 595, 595, 595, 595, 595, 0, 0, 0, 0, 0, 0, 0, 549, 549, 549, 549, 549, 3290, 549, 549, 549, 0,
  /* 31508 */ 337, 338, 339, 340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 336, 410, 0, 0, 0, 0, 0, 337, 0, 0, 384, 384, 414, 0,
  /* 31537 */ 340, 0, 0, 0, 0, 0, 0, 0, 799, 0, 0, 0, 0, 0, 810, 0, 0, 65536, 0, 0, 0, 0, 339, 0, 0, 0, 459, 474, 474,
  /* 31566 */ 474, 474, 474, 474, 474, 474, 474, 487, 474, 474, 474, 474, 474, 474, 500, 500, 474, 500, 500, 515, 517,
  /* 31587 */ 500, 500, 515, 500, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 541, 526, 526, 526,
  /* 31608 */ 526, 526, 526, 526, 526, 526, 526, 554, 577, 554, 577, 554, 554, 577, 554, 554, 601, 577, 577, 577, 577,
  /* 31629 */ 577, 577, 554, 577, 577, 601, 601, 554, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 601, 577, 554,
  /* 31650 */ 577, 577, 601, 601, 1, 12290, 3, 78123, 78123, 301, 6, 6, 0, 0, 718, 719, 0, 0, 0, 0, 0, 725, 0, 0, 0,
  /* 31675 */ 729, 0, 731, 0, 0, 0, 0, 549, 851, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1750, 549, 549, 549,
  /* 31698 */ 549, 549, 780, 781, 0, 0, 0, 0, 0, 789, 0, 791, 0, 0, 0, 0, 0, 0, 0, 1142, 0, 0, 0, 0, 0, 0, 0, 0, 1143,
  /* 31727 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 808, 811, 0, 0, 0, 811, 811, 808, 0, 0, 0, 0, 0, 0, 0, 126976, 126976,
  /* 31754 */ 126976, 126976, 126976, 126976, 126976, 0, 126976, 126976, 126976, 126976, 126976, 126976, 126976, 126976,
  /* 31768 */ 126976, 126976, 0, 0, 791, 0, 803, 0, 820, 0, 0, 0, 0, 811, 0, 718, 0, 0, 0, 0, 0, 1623, 0, 0, 0, 0, 0, 0,
  /* 31796 */ 0, 0, 0, 0, 0, 3146, 0, 0, 0, 0, 828, 0, 0, 0, 0, 0, 828, 828, 831, 0, 0, 0, 791, 0, 0, 0, 0, 0, 381, 0,
  /* 31826 */ 0, 0, 389, 391, 0, 0, 0, 0, 0, 0, 0, 2204360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3163, 0, 0, 0, 3166, 3167, 0, 0,
  /* 31855 */ 0, 840, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 840, 0, 0, 0, 0, 549, 852, 549, 549, 549, 549, 549, 549, 881,
  /* 31882 */ 883, 549, 549, 549, 549, 549, 1364, 1365, 920, 571, 571, 571, 571, 571, 571, 571, 571, 2314, 571, 571,
  /* 31902 */ 2317, 2318, 571, 571, 0, 789, 820, 840, 0, 549, 549, 855, 549, 861, 549, 549, 874, 549, 549, 885, 549,
  /* 31923 */ 549, 549, 549, 549, 2547, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2229, 549, 549, 549, 549, 0,
  /* 31944 */ 891, 549, 549, 899, 902, 907, 549, 915, 549, 549, 571, 571, 571, 929, 571, 935, 571, 571, 948, 571, 571,
  /* 31965 */ 959, 571, 965, 571, 571, 973, 976, 981, 571, 989, 571, 0, 595, 595, 595, 1005, 1009, 1012, 595, 1020, 595,
  /* 31986 */ 595, 595, 1035, 1038, 1041, 595, 595, 1048, 1051, 1056, 595, 1064, 595, 595, 0, 0, 0, 0, 549, 595, 571, 0,
  /* 32008 */ 595, 595, 996, 595, 595, 595, 595, 595, 595, 1027, 595, 595, 595, 595, 0, 0, 0, 549, 549, 549, 549, 571,
  /* 32030 */ 571, 571, 571, 595, 855, 549, 1075, 907, 549, 929, 571, 1080, 981, 571, 0, 1004, 595, 1085, 1056, 595,
  /* 32050 */ 595, 595, 595, 3554, 595, 595, 0, 0, 0, 0, 0, 0, 0, 549, 549, 549, 549, 549, 549, 2161, 549, 549, 549,
  /* 32073 */ 549, 0, 0, 1152, 0, 0, 0, 377, 377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 386, 0, 0, 0, 0,
  /* 32101 */ 1166, 0, 0, 0, 0, 0, 0, 0, 0, 1175, 0, 0, 0, 0, 0, 381, 436, 507, 511, 507, 507, 516, 507, 507, 507, 516,
  /* 32127 */ 0, 0, 1144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 395, 0, 0, 1212, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32160 */ 0, 0, 1226, 549, 549, 549, 1305, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 3431,
  /* 32181 */ 571, 571, 549, 1320, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 571, 571, 549,
  /* 32202 */ 1335, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1351, 549, 549, 549, 549, 549, 549, 2186, 549,
  /* 32222 */ 549, 549, 549, 549, 549, 2192, 549, 2194, 549, 549, 549, 1361, 549, 549, 1365, 920, 571, 571, 571, 571,
  /* 32242 */ 571, 571, 571, 571, 571, 2626, 571, 571, 571, 571, 571, 571, 571, 571, 1378, 571, 571, 571, 571, 571, 571,
  /* 32263 */ 1393, 571, 571, 571, 1398, 571, 571, 571, 571, 571, 3057, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 32283 */ 571, 571, 975, 571, 571, 571, 571, 26034, 1365, 995, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 32303 */ 1471, 595, 595, 595, 595, 1941, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2686, 595, 595,
  /* 32323 */ 595, 595, 595, 595, 1537, 595, 595, 595, 595, 595, 595, 1547, 595, 595, 0, 0, 549, 595, 571, 0, 595, 595,
  /* 32345 */ 997, 595, 595, 595, 1013, 595, 595, 595, 595, 595, 595, 595, 1065, 595, 0, 0, 0, 0, 859, 1008, 933, 0,
  /* 32367 */ 1590, 0, 1592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 315, 315, 0, 0, 1605, 0, 0, 0, 0, 0, 0, 0, 0, 1611, 0,
  /* 32397 */ 0, 1614, 1615, 1616, 0, 0, 0, 0, 685, 0, 0, 0, 0, 0, 747, 0, 798, 0, 0, 0, 0, 0, 337, 385, 340, 384, 0, 0,
  /* 32425 */ 0, 0, 0, 0, 0, 0, 274432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1618, 1619, 0, 0, 0, 0, 1624, 0, 0, 0, 0, 0, 0, 0,
  /* 32456 */ 0, 0, 0, 2760, 0, 0, 0, 0, 0, 0, 1651, 0, 0, 0, 0, 0, 1657, 1658, 0, 0, 0, 0, 0, 0, 0, 0, 1171456, 0,
  /* 32484 */ 1171456, 0, 0, 0, 0, 0, 0, 1667, 1668, 0, 0, 0, 0, 0, 0, 0, 0, 1674, 0, 0, 1676, 0, 0, 0, 0, 691, 692, 0,
  /* 32512 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1173, 0, 0, 0, 0, 0, 0, 0, 0, 1678, 1679, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 347,
  /* 32544 */ 0, 0, 0, 0, 0, 1716, 0, 0, 0, 1720, 1721, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2775, 2776, 0, 0, 0, 0, 0, 0, 0,
  /* 32574 */ 1712, 0, 0, 0, 1732, 1592, 1592, 1734, 549, 1736, 549, 1737, 1738, 549, 1740, 549, 549, 549, 1744, 549,
  /* 32594 */ 549, 549, 549, 549, 549, 549, 549, 549, 1757, 549, 549, 549, 549, 1761, 549, 549, 549, 549, 1765, 549,
  /* 32614 */ 1767, 549, 549, 549, 549, 549, 549, 1310, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 3568, 571,
  /* 32634 */ 571, 571, 571, 571, 549, 549, 549, 549, 1775, 1776, 1778, 549, 549, 549, 549, 549, 549, 549, 549, 1786,
  /* 32654 */ 1787, 1788, 549, 549, 1791, 1792, 549, 549, 549, 549, 549, 549, 549, 1800, 549, 549, 549, 549, 549, 911,
  /* 32674 */ 549, 549, 549, 549, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 3315, 571, 549, 1804, 549,
  /* 32695 */ 549, 549, 549, 549, 549, 549, 1812, 549, 549, 549, 549, 549, 549, 549, 1312, 549, 549, 549, 549, 549, 549,
  /* 32716 */ 549, 549, 549, 2228, 549, 549, 549, 549, 549, 0, 549, 549, 549, 1823, 1365, 0, 1828, 571, 1830, 571, 1831,
  /* 32737 */ 571, 1833, 571, 1835, 571, 0, 595, 595, 998, 595, 595, 595, 1015, 595, 595, 1029, 595, 595, 595, 595, 595,
  /* 32758 */ 3113, 595, 595, 595, 595, 595, 595, 595, 595, 595, 3122, 571, 571, 1839, 571, 571, 571, 571, 571, 571,
  /* 32778 */ 571, 571, 571, 1852, 571, 571, 571, 571, 571, 958, 962, 964, 571, 971, 571, 974, 571, 571, 988, 571, 571,
  /* 32799 */ 1856, 571, 571, 571, 571, 1860, 571, 1862, 571, 571, 571, 571, 571, 571, 571, 571, 3320, 571, 571, 571,
  /* 32819 */ 571, 571, 571, 595, 571, 1870, 1871, 1873, 571, 571, 571, 571, 571, 571, 571, 571, 1881, 1882, 1883, 571,
  /* 32839 */ 0, 595, 595, 999, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2700, 595, 595, 595, 595, 571,
  /* 32860 */ 1886, 1887, 571, 571, 571, 571, 571, 571, 571, 1895, 571, 571, 571, 1899, 571, 0, 595, 595, 1000, 1006,
  /* 32880 */ 595, 595, 595, 595, 1024, 595, 595, 595, 595, 595, 2398, 595, 2400, 595, 595, 595, 595, 595, 595, 595,
  /* 32900 */ 549, 595, 571, 549, 2711, 549, 549, 571, 2713, 571, 1919, 26034, 0, 1924, 595, 1926, 595, 1927, 595, 1929,
  /* 32920 */ 595, 1931, 595, 595, 595, 1935, 595, 595, 595, 1956, 595, 1958, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 32940 */ 1966, 1967, 1969, 595, 595, 595, 595, 595, 595, 595, 595, 1977, 1978, 1979, 595, 595, 1982, 1983, 595,
  /* 32959 */ 595, 595, 2004, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2015, 549, 595, 595, 595, 1050, 595, 595,
  /* 32979 */ 595, 595, 595, 0, 0, 0, 0, 549, 595, 571, 549, 571, 571, 595, 595, 1, 12290, 3, 78123, 78465, 301, 6, 6,
  /* 33002 */ 0, 571, 1792, 549, 2021, 549, 1887, 571, 2025, 571, 1983, 595, 2029, 595, 0, 2031, 0, 0, 0, 0, 707, 0, 0,
  /* 33025 */ 0, 377, 377, 377, 0, 0, 0, 0, 0, 0, 0, 2482176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2745, 0, 0, 0, 0, 0, 0, 2037,
  /* 33054 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2044, 0, 0, 2047, 2048, 0, 0, 0, 2052, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33085 */ 316, 316, 0, 0, 0, 0, 0, 2114, 0, 0, 0, 0, 0, 0, 2121, 0, 2123, 0, 0, 0, 0, 0, 403, 0, 0, 0, 0, 0, 0, 0,
  /* 33115 */ 0, 0, 0, 760, 0, 0, 0, 0, 0, 0, 0, 2048, 0, 2142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 373, 0, 0, 0, 0, 0, 0,
  /* 33147 */ 2153, 0, 0, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2202, 549, 549, 549, 549, 549, 549,
  /* 33168 */ 549, 549, 2169, 549, 2171, 549, 549, 549, 549, 549, 549, 2179, 549, 2181, 2206, 2207, 549, 549, 549, 549,
  /* 33188 */ 549, 549, 2214, 549, 549, 549, 549, 549, 549, 549, 549, 2523, 549, 549, 2526, 2527, 549, 549, 549, 571,
  /* 33208 */ 571, 571, 2254, 571, 2256, 571, 571, 571, 571, 571, 571, 2264, 571, 2266, 571, 0, 595, 595, 1001, 595,
  /* 33228 */ 595, 595, 595, 595, 595, 1030, 1032, 595, 595, 595, 595, 1503, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 33248 */ 1513, 595, 595, 2293, 571, 571, 571, 571, 571, 571, 2300, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 33268 */ 2859, 571, 571, 571, 571, 571, 571, 595, 595, 595, 2341, 595, 2343, 595, 595, 595, 595, 595, 595, 2351,
  /* 33288 */ 595, 2353, 595, 595, 595, 1052, 595, 595, 595, 595, 595, 0, 0, 0, 0, 549, 595, 571, 0, 595, 595, 1002,
  /* 33310 */ 595, 595, 595, 595, 1021, 1025, 1031, 595, 1036, 595, 595, 595, 595, 2925, 595, 595, 595, 595, 595, 595,
  /* 33330 */ 595, 595, 595, 595, 595, 1213, 0, 549, 595, 571, 2380, 595, 595, 595, 595, 595, 595, 2387, 595, 595, 595,
  /* 33351 */ 595, 595, 595, 595, 595, 1509, 595, 595, 595, 595, 595, 595, 595, 2343, 2256, 549, 2411, 549, 549, 571,
  /* 33371 */ 2415, 571, 571, 595, 2419, 595, 595, 2031, 0, 0, 0, 0, 721, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 377, 0, 317,
  /* 33398 */ 0, 0, 0, 0, 0, 0, 2447, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2456, 0,
  /* 33431 */ 0, 0, 0, 0, 2461, 0, 2463, 2464, 0, 0, 0, 0, 0, 404, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1683, 0, 0, 0, 0, 0,
  /* 33461 */ 2479, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1240, 0, 0, 2494, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33493 */ 2505, 2463, 0, 0, 0, 0, 0, 2510, 0, 0, 0, 549, 549, 549, 549, 549, 549, 571, 571, 571, 571, 571, 571, 595,
  /* 33517 */ 595, 549, 2519, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1784, 549, 549,
  /* 33537 */ 2531, 549, 2533, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1330, 549, 549, 549, 571,
  /* 33557 */ 2617, 571, 571, 571, 2622, 571, 571, 571, 571, 571, 571, 571, 2629, 571, 571, 571, 571, 571, 3058, 571,
  /* 33577 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1451, 571, 571, 571, 571, 2641, 0, 0, 0, 0, 595, 595,
  /* 33599 */ 595, 595, 595, 595, 595, 595, 2649, 595, 595, 595, 595, 1942, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 33620 */ 595, 1953, 595, 595, 595, 2679, 595, 595, 595, 595, 2683, 595, 595, 595, 2688, 595, 595, 595, 0, 549,
  /* 33640 */ 3627, 571, 3628, 595, 3629, 549, 571, 595, 549, 571, 595, 0, 0, 0, 0, 2756, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33666 */ 0, 377, 0, 0, 126976, 126976, 2805, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 33687 */ 549, 2233, 549, 2818, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2824, 549, 549, 549, 549,
  /* 33707 */ 549, 1282, 549, 549, 549, 1286, 549, 549, 1297, 549, 549, 1301, 2852, 571, 571, 571, 571, 571, 571, 571,
  /* 33727 */ 571, 571, 571, 571, 571, 571, 571, 571, 595, 595, 595, 595, 571, 2865, 571, 571, 571, 571, 571, 571, 571,
  /* 33748 */ 571, 571, 571, 571, 571, 2872, 571, 549, 549, 549, 549, 571, 571, 571, 571, 595, 595, 595, 595, 1566,
  /* 33768 */ 2031, 0, 0, 0, 0, 0, 1179648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2135, 2136, 0, 0, 2138, 0, 595, 595, 2901,
  /* 33794 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 3106, 595, 595, 595, 595, 595, 2914, 595,
  /* 33815 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 1964, 595, 595, 595, 2921, 595, 595, 595, 595, 595,
  /* 33836 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 1500, 0, 2962, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2969, 2970, 0,
  /* 33861 */ 2971, 0, 0, 0, 0, 737, 0, 0, 0, 0, 0, 0, 0, 0, 0, 747, 0, 0, 0, 0, 372, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33893 */ 549, 3176, 549, 549, 549, 2973, 0, 0, 0, 0, 2975, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 549, 549, 549, 2515, 2516,
  /* 33919 */ 549, 3000, 0, 0, 0, 3003, 549, 549, 549, 549, 549, 549, 3010, 549, 549, 549, 549, 549, 549, 1345, 549,
  /* 33940 */ 549, 1349, 549, 549, 549, 549, 549, 1355, 549, 3014, 549, 549, 549, 549, 549, 549, 549, 3020, 549, 549,
  /* 33960 */ 549, 549, 549, 3026, 549, 3042, 3043, 549, 571, 571, 571, 571, 571, 571, 3050, 571, 571, 571, 571, 571,
  /* 33980 */ 571, 2258, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1864, 571, 571, 571, 571, 571, 3054, 571,
  /* 34000 */ 571, 571, 571, 571, 571, 571, 3060, 571, 571, 571, 571, 571, 3066, 571, 549, 549, 549, 2022, 571, 571,
  /* 34020 */ 571, 2026, 595, 595, 595, 2030, 0, 2031, 0, 0, 0, 0, 549, 850, 549, 549, 549, 866, 549, 549, 880, 549,
  /* 34042 */ 549, 549, 549, 549, 549, 3018, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 3021, 549, 549, 549, 549,
  /* 34063 */ 549, 571, 3069, 571, 571, 571, 571, 571, 571, 571, 571, 3076, 3078, 571, 571, 571, 571, 571, 571, 3059,
  /* 34083 */ 571, 571, 571, 571, 571, 571, 571, 571, 3067, 3082, 571, 3084, 3085, 571, 595, 595, 595, 595, 595, 595,
  /* 34103 */ 3092, 595, 595, 595, 595, 0, 0, 0, 0, 3587, 549, 549, 549, 549, 549, 549, 3593, 595, 3096, 595, 595, 595,
  /* 34125 */ 595, 595, 595, 595, 3102, 595, 595, 595, 595, 595, 3108, 595, 595, 3111, 595, 595, 595, 595, 595, 595,
  /* 34145 */ 595, 595, 3118, 3120, 595, 595, 595, 595, 595, 3555, 595, 0, 0, 0, 0, 3558, 0, 3560, 549, 549, 595, 3124,
  /* 34167 */ 595, 3126, 3127, 595, 549, 595, 571, 549, 3132, 571, 3134, 595, 3136, 0, 0, 0, 0, 766, 0, 0, 0, 0, 0, 0,
  /* 34191 */ 0, 0, 776, 0, 0, 0, 0, 0, 2155, 549, 549, 549, 549, 549, 549, 2162, 549, 549, 549, 549, 549, 549, 3183,
  /* 34214 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2798, 549, 2801, 549, 549, 549, 549, 549, 549, 549,
  /* 34234 */ 3193, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2539, 549, 549, 549, 549, 549, 549, 549, 571,
  /* 34255 */ 571, 571, 3205, 571, 571, 571, 571, 571, 571, 571, 3210, 571, 549, 549, 571, 549, 549, 595, 571, 571, 571,
  /* 34276 */ 571, 571, 571, 549, 571, 571, 571, 571, 571, 2841, 571, 2842, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 34296 */ 1425, 571, 571, 571, 1432, 1434, 571, 571, 3234, 595, 595, 595, 595, 595, 595, 595, 3239, 595, 595, 595,
  /* 34316 */ 595, 595, 595, 595, 0, 0, 0, 0, 3516, 0, 3518, 549, 549, 3258, 595, 595, 595, 595, 595, 595, 549, 595,
  /* 34338 */ 571, 549, 549, 571, 571, 595, 595, 549, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 571, 0, 0,
  /* 34360 */ 0, 3277, 0, 3158, 3279, 0, 0, 3282, 0, 0, 0, 0, 0, 0, 0, 1203, 0, 0, 0, 1207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34389 */ 0, 0, 0, 549, 3367, 549, 549, 549, 549, 549, 549, 549, 549, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 34411 */ 571, 571, 3382, 571, 571, 571, 571, 571, 571, 571, 571, 571, 595, 595, 595, 595, 595, 595, 595, 595, 0,
  /* 34432 */ 571, 595, 0, 0, 0, 0, 0, 0, 0, 3412, 3158, 0, 0, 0, 0, 549, 549, 549, 549, 549, 868, 549, 549, 549, 549,
  /* 34457 */ 549, 549, 549, 2564, 549, 549, 549, 549, 549, 549, 549, 2569, 3521, 549, 549, 549, 3524, 549, 3526, 549,
  /* 34477 */ 549, 549, 549, 3531, 3532, 3533, 571, 571, 571, 571, 571, 3072, 571, 571, 3074, 571, 571, 571, 571, 571,
  /* 34497 */ 571, 571, 1909, 571, 571, 571, 571, 571, 571, 571, 571, 969, 571, 571, 571, 571, 987, 571, 571, 571, 3536,
  /* 34518 */ 571, 3538, 571, 571, 571, 571, 3543, 3544, 3545, 3546, 595, 595, 595, 3549, 595, 3551, 595, 595, 595, 595,
  /* 34538 */ 3556, 0, 0, 0, 0, 0, 0, 0, 549, 549, 549, 3362, 549, 549, 549, 549, 3366, 571, 3594, 571, 571, 571, 3598,
  /* 34561 */ 571, 595, 595, 3600, 595, 595, 595, 3604, 595, 0, 0, 0, 0, 766, 0, 0, 821, 0, 0, 0, 0, 0, 0, 0, 827, 0, 0,
  /* 34588 */ 0, 381, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 318, 319, 0, 0, 65536, 381, 436, 436, 342, 436, 0, 0, 436,
  /* 34615 */ 436, 0, 0, 0, 0, 0, 0, 0, 1218, 0, 0, 0, 0, 0, 0, 0, 0, 343, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 343, 394,
  /* 34646 */ 396, 0, 507, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 436, 555, 578, 555,
  /* 34667 */ 578, 555, 555, 578, 555, 555, 602, 578, 578, 578, 578, 578, 578, 555, 578, 578, 602, 602, 555, 602, 602,
  /* 34688 */ 602, 602, 602, 602, 602, 602, 602, 602, 602, 578, 555, 578, 578, 602, 602, 1, 12290, 3, 78123, 78123, 301,
  /* 34709 */ 6, 6, 0, 0, 688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 752, 0, 571, 571, 571, 952, 571, 571, 571, 571,
  /* 34738 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 3324, 571, 595, 0, 1251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34764 */ 0, 0, 761, 0, 1376, 571, 571, 571, 571, 571, 1388, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2599,
  /* 34786 */ 571, 571, 571, 571, 571, 26034, 1365, 995, 595, 595, 595, 595, 595, 595, 595, 595, 1469, 595, 595, 595,
  /* 34806 */ 595, 0, 0, 0, 549, 549, 549, 3622, 571, 571, 571, 3624, 595, 595, 1481, 595, 595, 595, 595, 595, 595, 595,
  /* 34828 */ 595, 595, 595, 595, 595, 595, 595, 2920, 595, 0, 0, 1717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 549, 572,
  /* 34855 */ 549, 549, 549, 549, 2561, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1352, 549, 549, 549,
  /* 34876 */ 2692, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 1536, 65536, 0, 437, 437,
  /* 34897 */ 0, 437, 446, 0, 437, 437, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475, 475,
  /* 34919 */ 501, 501, 475, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 556, 579,
  /* 34940 */ 556, 579, 556, 556, 579, 556, 556, 603, 579, 579, 579, 579, 579, 579, 556, 579, 579, 603, 603, 556, 603,
  /* 34961 */ 603, 603, 603, 603, 603, 603, 603, 603, 603, 603, 579, 556, 579, 579, 603, 603, 1, 12290, 3, 78123, 78123,
  /* 34982 */ 301, 6, 6, 0, 78123, 1088, 6, 0, 0, 0, 1092, 1096, 0, 0, 1100, 1104, 0, 0, 0, 0, 0, 0, 1595, 1596, 0, 0,
  /* 35008 */ 0, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 159744, 0, 159744, 549, 549, 549, 549,
  /* 35034 */ 1365, 1826, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1397, 571, 571, 571, 571, 571, 26034,
  /* 35054 */ 1922, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 3244, 595, 595, 0, 0, 0, 2109, 0,
  /* 35076 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 348, 349, 0, 0, 0, 2152, 0, 0, 0, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 35104 */ 549, 549, 549, 2553, 549, 549, 549, 549, 549, 2196, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 35125 */ 549, 549, 549, 1801, 549, 2281, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 35146 */ 990, 2368, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2367, 0, 0, 2455, 0,
  /* 35168 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 568, 591, 568, 0, 0, 2754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 570,
  /* 35200 */ 593, 570, 549, 549, 2829, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 0, 0, 2237, 0, 0, 0, 571,
  /* 35223 */ 571, 571, 571, 571, 2877, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 595, 3392, 595, 595,
  /* 35244 */ 0, 0, 0, 2964, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 0, 0, 385, 0, 0, 2974, 0, 0, 0, 0, 0, 2977, 0,
  /* 35274 */ 2979, 0, 0, 2982, 0, 0, 0, 0, 0, 1655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1145, 0, 0, 0, 0, 0, 0, 0, 0, 2987,
  /* 35304 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 411, 0, 0, 0, 549, 549, 549, 549, 3030, 549, 549, 549, 549, 549, 549,
  /* 35331 */ 549, 549, 3038, 549, 549, 549, 549, 549, 1309, 1311, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1328,
  /* 35351 */ 549, 549, 549, 549, 549, 549, 3041, 549, 549, 549, 3044, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 35372 */ 571, 571, 2303, 571, 571, 571, 571, 3083, 571, 571, 571, 3086, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 35392 */ 595, 595, 2349, 595, 595, 595, 595, 595, 595, 595, 3125, 595, 595, 595, 549, 595, 571, 549, 549, 571, 571,
  /* 35413 */ 595, 595, 0, 0, 0, 0, 0, 549, 549, 549, 571, 571, 3204, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 35436 */ 571, 1413, 571, 571, 571, 571, 571, 3224, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 595, 595,
  /* 35457 */ 3233, 3245, 595, 595, 595, 595, 595, 595, 595, 595, 3251, 595, 3253, 595, 595, 595, 595, 0, 0, 0, 3621,
  /* 35478 */ 549, 549, 549, 3623, 571, 571, 571, 3625, 3285, 0, 0, 0, 0, 0, 0, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 35501 */ 549, 549, 549, 549, 549, 3295, 549, 549, 549, 549, 549, 549, 549, 549, 3301, 549, 549, 549, 549, 549, 549,
  /* 35522 */ 549, 3184, 549, 549, 549, 549, 549, 549, 549, 549, 549, 3034, 549, 3036, 549, 549, 549, 549, 595, 595,
  /* 35542 */ 595, 3338, 595, 595, 595, 595, 595, 595, 595, 595, 549, 549, 571, 571, 571, 571, 571, 3308, 571, 571, 571,
  /* 35563 */ 3312, 571, 571, 571, 571, 571, 571, 3073, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2845, 571,
  /* 35583 */ 2848, 571, 571, 571, 0, 0, 549, 549, 3609, 3610, 549, 549, 571, 571, 3613, 3614, 571, 571, 595, 595, 595,
  /* 35604 */ 595, 0, 0, 0, 0, 2720, 0, 0, 0, 2724, 0, 0, 3617, 3618, 595, 595, 0, 0, 0, 549, 549, 549, 549, 571, 571,
  /* 35629 */ 571, 571, 595, 0, 0, 0, 0, 0, 0, 0, 0, 3158, 0, 0, 0, 0, 3417, 769, 0, 0, 0, 0, 0, 769, 769, 0, 0, 834, 0,
  /* 35658 */ 0, 0, 0, 0, 0, 0, 2682880, 0, 2834432, 0, 0, 0, 0, 2383872, 0, 549, 549, 549, 549, 1342, 549, 549, 549,
  /* 35681 */ 549, 549, 549, 549, 549, 549, 549, 549, 2799, 549, 549, 2803, 549, 0, 0, 0, 1706, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35706 */ 0, 0, 0, 0, 418, 0, 0, 0, 549, 549, 1822, 549, 1365, 0, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 35730 */ 571, 1428, 571, 571, 571, 571, 549, 2166, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 35751 */ 549, 2193, 549, 2251, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1402,
  /* 35771 */ 2338, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2379, 571, 2632, 571,
  /* 35791 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 0, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 35812 */ 595, 1026, 595, 595, 595, 595, 0, 0, 0, 0, 549, 549, 3588, 549, 549, 549, 3592, 571, 0, 0, 0, 0, 3286, 0,
  /* 35836 */ 0, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2813, 2814, 549, 549, 549, 549, 3305, 549, 571, 571,
  /* 35857 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2863, 343, 0, 0, 0, 0, 0, 343, 0, 0,
  /* 35880 */ 69632, 73728, 0, 431, 431, 0, 0, 0, 0, 0, 1670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1202, 0, 1205, 0, 0, 0, 0, 0,
  /* 35908 */ 1210, 0, 65536, 431, 0, 0, 0, 0, 447, 0, 0, 344, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 476,
  /* 35931 */ 476, 476, 476, 476, 476, 476, 476, 476, 476, 476, 494, 502, 502, 494, 502, 502, 502, 502, 502, 502, 502,
  /* 35952 */ 527, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 542, 535, 535, 535, 535, 535, 535, 535,
  /* 35973 */ 535, 535, 535, 557, 580, 557, 580, 557, 557, 580, 557, 557, 604, 580, 580, 580, 580, 580, 580, 557, 580,
  /* 35994 */ 580, 604, 604, 557, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 604, 580, 557, 580, 580, 604, 604,
  /* 36015 */ 1, 12290, 3, 78123, 78123, 301, 6, 6, 0, 0, 0, 782, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 796, 0, 0, 0, 0, 769,
  /* 36044 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 377, 0, 301, 0, 0, 0, 0, 818, 0, 0, 0, 0, 0, 0, 823, 0, 0, 0, 800, 0, 0,
  /* 36076 */ 0, 0, 0, 1680, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3155, 0, 0, 0, 0, 823, 0, 0, 0, 0, 0, 823, 823, 0, 0, 0,
  /* 36107 */ 0, 800, 0, 0, 0, 0, 0, 549, 549, 549, 549, 549, 3009, 549, 549, 549, 549, 549, 549, 1283, 549, 549, 549,
  /* 36130 */ 549, 549, 1295, 549, 549, 549, 0, 0, 0, 841, 796, 0, 0, 841, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 328,
  /* 36156 */ 329, 329, 434, 435, 0, 0, 0, 841, 549, 549, 549, 549, 862, 549, 870, 549, 549, 549, 549, 549, 549, 549,
  /* 36178 */ 3195, 549, 549, 549, 549, 549, 549, 549, 549, 1327, 549, 549, 1329, 549, 549, 549, 1333, 571, 944, 571,
  /* 36198 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 991, 549, 549, 549, 1076, 917, 571, 571, 571,
  /* 36219 */ 1081, 991, 0, 595, 595, 595, 1086, 1066, 1150, 0, 0, 0, 0, 0, 377, 377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632,
  /* 36245 */ 73728, 167936, 0, 0, 0, 0, 0, 0, 0, 1182, 0, 0, 0, 0, 0, 0, 0, 1190, 0, 0, 0, 0, 0, 0, 1640, 0, 0, 0, 0,
  /* 36274 */ 0, 1646, 0, 0, 1649, 549, 549, 549, 1362, 549, 549, 1365, 920, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 36295 */ 571, 2869, 571, 571, 571, 571, 571, 571, 1438, 571, 571, 1442, 571, 571, 571, 571, 571, 1448, 571, 571,
  /* 36315 */ 571, 1455, 571, 571, 571, 571, 571, 3228, 571, 571, 571, 571, 571, 571, 571, 595, 595, 595, 595, 595, 595,
  /* 36336 */ 3503, 595, 595, 26034, 1365, 995, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 1474, 595,
  /* 36356 */ 1501, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2932, 595, 0, 0, 1620, 0, 0,
  /* 36378 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 746, 0, 0, 1650, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1662, 0, 0, 0, 0, 0,
  /* 36410 */ 549, 549, 549, 549, 3008, 549, 549, 549, 549, 3012, 549, 1687, 0, 1689, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36435 */ 0, 1703, 0, 0, 0, 0, 0, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 3013, 0, 1705, 0, 0, 0, 0, 0, 0,
  /* 36461 */ 0, 0, 0, 0, 0, 0, 0, 0, 769, 0, 549, 549, 549, 1790, 549, 549, 549, 549, 549, 549, 549, 549, 1799, 549,
  /* 36485 */ 549, 549, 549, 549, 549, 2548, 549, 549, 549, 549, 2552, 549, 549, 549, 2557, 549, 549, 549, 1807, 549,
  /* 36505 */ 549, 549, 549, 549, 549, 549, 549, 549, 1816, 1818, 549, 549, 549, 549, 549, 2794, 549, 2795, 549, 549,
  /* 36525 */ 549, 549, 549, 549, 549, 549, 1781, 549, 549, 549, 549, 549, 549, 549, 1885, 571, 571, 571, 571, 571, 571,
  /* 36546 */ 571, 571, 1894, 571, 571, 571, 571, 571, 571, 571, 3498, 595, 595, 595, 595, 595, 595, 595, 595, 2916,
  /* 36566 */ 595, 595, 595, 595, 595, 595, 595, 595, 1067, 0, 0, 0, 0, 549, 595, 571, 1902, 571, 571, 571, 571, 571,
  /* 36588 */ 571, 571, 571, 571, 1912, 1914, 571, 571, 571, 571, 571, 571, 3216, 571, 571, 571, 571, 571, 571, 571,
  /* 36608 */ 571, 3222, 0, 0, 0, 2089, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2097, 0, 0, 0, 0, 1110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36639 */ 1120, 0, 0, 0, 0, 675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 392, 0, 0, 0, 0, 0, 0, 0, 571, 571, 571, 571, 571,
  /* 36669 */ 571, 2245, 571, 571, 571, 571, 571, 571, 571, 3542, 571, 595, 595, 595, 3547, 595, 595, 595, 0, 0, 0, 595,
  /* 36691 */ 595, 595, 595, 595, 595, 2332, 595, 595, 595, 595, 595, 595, 1522, 595, 595, 1529, 595, 595, 595, 595,
  /* 36711 */ 595, 595, 1544, 595, 595, 595, 595, 0, 0, 1289, 1475, 1382, 2344, 2257, 549, 549, 549, 549, 571, 571, 571,
  /* 36732 */ 571, 595, 595, 595, 595, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2725, 0, 2443, 0, 2445, 0, 0, 0, 0, 0, 0, 0, 0, 2450,
  /* 36760 */ 0, 0, 2453, 0, 0, 0, 0, 1139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 399, 0, 0, 0, 0, 0, 2468, 0, 0, 0, 0, 0, 0,
  /* 36792 */ 0, 2476, 0, 0, 0, 2478, 0, 0, 0, 0, 0, 1693, 0, 1695, 0, 0, 0, 0, 0, 0, 1702, 0, 549, 549, 2560, 549, 549,
  /* 36819 */ 549, 549, 549, 549, 549, 549, 549, 2567, 549, 549, 549, 549, 549, 549, 2810, 549, 549, 549, 549, 549, 549,
  /* 36840 */ 549, 549, 549, 2175, 549, 549, 549, 549, 2180, 549, 2570, 549, 549, 549, 549, 549, 549, 549, 0, 0, 0, 0,
  /* 36862 */ 0, 0, 571, 2577, 571, 571, 2605, 571, 571, 571, 571, 571, 571, 571, 2611, 571, 571, 571, 571, 571, 571,
  /* 36883 */ 2272, 571, 571, 2275, 571, 571, 571, 571, 571, 571, 1445, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 36903 */ 1878, 571, 571, 571, 571, 571, 571, 571, 2618, 571, 571, 571, 571, 571, 571, 2625, 571, 571, 571, 571,
  /* 36923 */ 571, 571, 571, 1391, 571, 571, 571, 571, 571, 571, 571, 571, 2637, 571, 571, 571, 571, 571, 571, 0, 571,
  /* 36944 */ 571, 571, 2633, 571, 571, 571, 2636, 571, 571, 571, 571, 571, 571, 571, 0, 595, 595, 595, 595, 595, 595,
  /* 36965 */ 595, 1022, 595, 595, 595, 595, 595, 595, 2707, 2708, 2709, 549, 549, 549, 549, 571, 571, 571, 571, 571,
  /* 36985 */ 3049, 571, 571, 571, 571, 571, 571, 595, 595, 2666, 595, 595, 595, 595, 595, 595, 2671, 595, 595, 595,
  /* 37005 */ 595, 595, 595, 1545, 1546, 595, 595, 595, 0, 0, 549, 595, 571, 595, 2677, 595, 595, 595, 595, 595, 595,
  /* 37026 */ 2684, 595, 595, 595, 595, 595, 595, 2691, 0, 2728, 0, 0, 0, 0, 0, 0, 0, 2732, 0, 0, 0, 0, 0, 0, 0, 1232,
  /* 37052 */ 0, 0, 0, 0, 1237, 0, 0, 0, 2779, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1604, 549, 549, 549, 2792,
  /* 37081 */ 549, 549, 549, 549, 549, 2797, 549, 549, 549, 549, 549, 549, 549, 1326, 549, 549, 549, 549, 549, 549, 549,
  /* 37102 */ 549, 1347, 549, 549, 549, 549, 549, 549, 549, 2817, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2822,
  /* 37122 */ 549, 549, 549, 2825, 549, 549, 549, 549, 549, 3031, 549, 549, 3033, 549, 549, 549, 549, 549, 549, 549,
  /* 37142 */ 549, 2821, 549, 549, 549, 549, 549, 549, 549, 549, 2796, 549, 549, 549, 549, 549, 549, 2804, 2827, 549,
  /* 37162 */ 549, 549, 549, 549, 549, 2831, 549, 549, 549, 549, 549, 549, 0, 0, 0, 0, 0, 1707, 1708, 0, 0, 0, 1711, 0,
  /* 37186 */ 0, 0, 0, 0, 0, 456, 456, 433, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456, 456,
  /* 37209 */ 456, 571, 571, 571, 2839, 571, 571, 571, 571, 571, 2844, 571, 571, 571, 571, 571, 571, 571, 3576, 595,
  /* 37229 */ 595, 595, 595, 595, 595, 595, 595, 2401, 595, 595, 2404, 2405, 595, 595, 2171, 2864, 571, 571, 571, 571,
  /* 37249 */ 571, 571, 571, 571, 571, 571, 2870, 571, 571, 571, 2873, 571, 2875, 571, 571, 571, 571, 571, 571, 571,
  /* 37269 */ 2880, 571, 571, 571, 571, 571, 571, 571, 3599, 595, 595, 595, 595, 595, 595, 595, 0, 0, 0, 0, 0, 0, 0,
  /* 37292 */ 549, 549, 549, 549, 549, 549, 3291, 549, 549, 0, 0, 595, 595, 595, 2888, 595, 595, 595, 595, 595, 2893,
  /* 37313 */ 595, 595, 595, 595, 0, 3584, 0, 3586, 549, 549, 549, 549, 549, 549, 549, 571, 571, 571, 571, 571, 595,
  /* 37334 */ 595, 595, 595, 595, 1088, 595, 595, 2913, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2919, 595,
  /* 37354 */ 595, 595, 595, 1988, 595, 595, 595, 595, 595, 595, 595, 595, 1999, 595, 595, 595, 595, 2005, 595, 595,
  /* 37374 */ 595, 595, 595, 595, 595, 595, 595, 549, 595, 571, 3261, 549, 3263, 571, 3265, 595, 595, 2922, 595, 2924,
  /* 37394 */ 595, 595, 595, 595, 595, 595, 595, 2929, 595, 595, 595, 595, 0, 3620, 0, 549, 549, 549, 549, 571, 571,
  /* 37415 */ 571, 571, 595, 0, 0, 0, 0, 2988, 0, 0, 0, 0, 2993, 0, 0, 0, 0, 0, 0, 0, 1257, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37445 */ 69632, 73728, 0, 0, 0, 0, 437, 0, 0, 0, 0, 3270, 0, 0, 0, 0, 0, 3273, 0, 0, 0, 0, 0, 0, 311, 312, 0, 0,
  /* 37473 */ 315, 316, 0, 0, 0, 0, 549, 549, 549, 549, 3564, 549, 3565, 549, 549, 549, 571, 571, 571, 571, 571, 571,
  /* 37495 */ 571, 571, 571, 3209, 571, 571, 571, 3571, 571, 3572, 571, 571, 571, 571, 595, 595, 595, 595, 595, 595,
  /* 37515 */ 3579, 595, 3580, 346, 0, 0, 346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 558, 581, 558, 581, 558, 558, 581,
  /* 37541 */ 558, 558, 605, 581, 581, 581, 581, 581, 581, 558, 581, 581, 605, 605, 558, 605, 605, 605, 605, 605, 605,
  /* 37562 */ 605, 605, 605, 605, 605, 581, 558, 581, 581, 605, 605, 1, 12290, 3, 78123, 78123, 301, 6, 6, 0, 595, 1516,
  /* 37584 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 3121, 595, 0, 0, 0, 571, 571, 571,
  /* 37606 */ 571, 571, 571, 571, 571, 571, 571, 2249, 571, 571, 571, 571, 571, 3540, 571, 571, 571, 595, 595, 595, 595,
  /* 37627 */ 595, 595, 595, 3101, 595, 595, 595, 595, 595, 595, 595, 595, 3115, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 37648 */ 1976, 595, 595, 595, 595, 595, 595, 595, 0, 0, 0, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2336,
  /* 37670 */ 595, 595, 595, 595, 2342, 595, 595, 2346, 595, 595, 595, 2350, 595, 595, 595, 595, 595, 3398, 595, 595,
  /* 37690 */ 595, 595, 595, 595, 595, 595, 595, 549, 595, 571, 2710, 549, 549, 549, 2712, 571, 571, 0, 0, 415, 0, 0, 0,
  /* 37713 */ 0, 393, 0, 69632, 73728, 0, 0, 0, 0, 438, 65536, 0, 438, 438, 0, 438, 0, 452, 438, 438, 477, 477, 477,
  /* 37736 */ 484, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 477, 484, 477, 477, 477, 477, 491, 477, 503, 503,
  /* 37757 */ 477, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 546, 559, 582, 559,
  /* 37778 */ 582, 559, 559, 582, 559, 559, 606, 582, 582, 582, 582, 582, 582, 559, 582, 582, 606, 606, 559, 606, 606,
  /* 37799 */ 606, 606, 606, 606, 606, 606, 606, 606, 606, 582, 559, 582, 582, 606, 606, 1, 12290, 3, 78123, 78123, 301,
  /* 37820 */ 6, 6, 0, 671, 672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 777, 0, 0, 0, 0, 753, 0, 0, 0, 0, 753, 0,
  /* 37851 */ 759, 0, 0, 0, 0, 0, 0, 311, 312, 0, 0, 315, 316, 0, 0, 0, 654, 0, 0, 672, 0, 672, 0, 0, 0, 0, 832, 0, 0,
  /* 37880 */ 0, 672, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 419, 0, 0, 0, 938, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 37907 */ 571, 571, 977, 571, 571, 571, 571, 571, 571, 3229, 571, 571, 571, 571, 571, 571, 595, 595, 595, 595, 595,
  /* 37928 */ 3091, 595, 595, 595, 595, 595, 549, 549, 903, 549, 549, 571, 571, 977, 571, 571, 0, 595, 595, 1052, 595,
  /* 37949 */ 595, 595, 595, 2384, 595, 595, 595, 595, 595, 595, 2389, 595, 595, 595, 595, 595, 2903, 595, 595, 595,
  /* 37969 */ 595, 595, 595, 595, 595, 595, 595, 1962, 595, 595, 595, 595, 595, 299, 1088, 6, 0, 0, 0, 1092, 1096, 0, 0,
  /* 37992 */ 1100, 1104, 0, 0, 0, 0, 0, 0, 1671, 0, 0, 0, 0, 0, 0, 0, 0, 0, 346, 0, 0, 346, 0, 0, 0, 0, 1151, 0, 1153,
  /* 38021 */ 0, 0, 377, 377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 110592, 0, 110592, 0, 0, 0, 0, 1195, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38051 */ 0, 0, 0, 0, 0, 0, 1613, 0, 0, 1112, 1111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 673, 0, 0, 0, 0, 0, 0, 0,
  /* 38082 */ 1111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 549, 549, 549, 549, 549, 549, 1276, 549, 549, 549, 549, 549,
  /* 38107 */ 549, 549, 549, 549, 549, 1289, 1296, 549, 549, 549, 549, 549, 549, 2830, 549, 549, 2833, 549, 549, 2836,
  /* 38127 */ 549, 0, 0, 549, 1358, 549, 549, 549, 549, 1365, 920, 571, 1368, 571, 571, 571, 571, 571, 571, 1387, 571,
  /* 38148 */ 1392, 571, 571, 1396, 571, 571, 1399, 571, 1403, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 38168 */ 571, 571, 571, 571, 1457, 26034, 1365, 995, 595, 1461, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 38188 */ 595, 1963, 595, 595, 595, 595, 1475, 1482, 595, 595, 595, 595, 595, 595, 595, 595, 595, 1496, 595, 595,
  /* 38208 */ 595, 595, 595, 2706, 549, 595, 571, 549, 549, 549, 549, 571, 571, 571, 571, 595, 595, 595, 595, 0, 2031,
  /* 38229 */ 0, 595, 595, 1517, 595, 595, 595, 595, 595, 595, 595, 1530, 595, 595, 595, 595, 595, 2006, 595, 595, 595,
  /* 38250 */ 595, 2012, 595, 595, 595, 549, 595, 549, 549, 1344, 549, 549, 571, 571, 1437, 571, 571, 595, 595, 1530,
  /* 38270 */ 595, 595, 1088, 549, 1821, 549, 549, 1365, 1826, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 38290 */ 1879, 571, 571, 571, 571, 595, 1938, 1939, 595, 595, 595, 595, 1946, 595, 595, 595, 595, 595, 595, 595,
  /* 38310 */ 595, 1992, 595, 595, 595, 1997, 595, 595, 595, 595, 595, 595, 1987, 595, 595, 595, 595, 595, 595, 595,
  /* 38330 */ 595, 595, 595, 595, 595, 1980, 595, 595, 595, 0, 0, 2113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 807, 0,
  /* 38357 */ 0, 0, 0, 549, 549, 2221, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 0, 2575, 0, 0, 0, 0,
  /* 38381 */ 571, 571, 571, 571, 2308, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 0, 595, 595, 595,
  /* 38402 */ 595, 595, 595, 1014, 595, 595, 1028, 595, 595, 595, 595, 595, 2926, 595, 595, 595, 595, 595, 595, 595,
  /* 38422 */ 595, 595, 595, 1994, 595, 595, 595, 595, 595, 595, 595, 2395, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 38443 */ 595, 595, 595, 549, 549, 571, 571, 0, 0, 2432, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1119, 0, 0, 2530,
  /* 38470 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2234, 0, 0, 2738, 0, 0, 0, 0,
  /* 38493 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1176, 1177, 0, 2765, 0, 0, 0, 0, 2770, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 713, 0, 0,
  /* 38524 */ 0, 713, 0, 0, 2780, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 805, 0, 0, 0, 0, 595, 595, 595, 595, 595,
  /* 38553 */ 595, 595, 595, 2892, 595, 595, 595, 595, 595, 2344, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 38573 */ 2375, 595, 595, 595, 595, 595, 595, 2900, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 38594 */ 595, 3464, 0, 0, 0, 2963, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1192, 752, 0, 0, 2986, 0, 0, 0, 0, 0, 0,
  /* 38624 */ 0, 0, 0, 0, 0, 0, 0, 0, 1235, 549, 571, 571, 3537, 571, 3539, 571, 571, 571, 571, 595, 595, 595, 595, 595,
  /* 38648 */ 595, 595, 1066, 595, 0, 0, 0, 0, 549, 595, 571, 3550, 595, 3552, 595, 595, 595, 595, 0, 0, 0, 0, 0, 0, 0,
  /* 38673 */ 3561, 549, 549, 549, 549, 549, 3372, 549, 549, 549, 571, 571, 571, 3377, 571, 571, 571, 571, 571, 1876,
  /* 38693 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2612, 571, 571, 571, 571, 0, 0, 549, 3608, 549,
  /* 38714 */ 549, 549, 549, 571, 3612, 571, 571, 571, 571, 595, 3616, 350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38741 */ 1617, 65536, 0, 0, 0, 0, 0, 448, 0, 0, 460, 478, 478, 478, 478, 478, 478, 460, 460, 478, 460, 460, 460,
  /* 38764 */ 460, 460, 460, 460, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 478, 488, 478, 478, 478, 460,
  /* 38785 */ 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 560, 583, 560, 583, 560, 560,
  /* 38806 */ 583, 560, 560, 607, 583, 583, 583, 583, 583, 583, 560, 583, 583, 607, 607, 560, 607, 607, 607, 607, 607,
  /* 38827 */ 607, 607, 607, 607, 607, 607, 583, 560, 583, 583, 607, 607, 1, 12290, 3, 78123, 78465, 301, 6, 6, 0, 0, 0,
  /* 38850 */ 673, 0, 673, 0, 0, 0, 0, 0, 0, 0, 0, 673, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 939, 571, 571, 953, 571,
  /* 38880 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 985, 571, 571, 571, 571, 571, 571, 1421, 571, 571,
  /* 38901 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1430, 571, 571, 571, 571, 1439, 571, 571, 571, 571, 571,
  /* 38922 */ 1446, 571, 571, 571, 571, 571, 571, 571, 571, 571, 3075, 571, 3077, 571, 571, 571, 571, 1476, 595, 595,
  /* 38942 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2675, 595, 595, 1539, 595, 595, 595, 595,
  /* 38963 */ 595, 595, 595, 595, 0, 0, 1290, 1476, 1383, 549, 549, 549, 1556, 549, 571, 571, 571, 1560, 571, 595, 595,
  /* 38984 */ 595, 1564, 595, 1088, 0, 0, 1568, 0, 0, 0, 1574, 0, 0, 0, 1580, 0, 0, 0, 1586, 0, 0, 0, 0, 1154, 0, 377,
  /* 39010 */ 377, 0, 1157, 0, 0, 0, 0, 0, 0, 0, 1258, 0, 0, 0, 0, 0, 0, 0, 0, 360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39042 */ 0, 0, 2109, 0, 0, 0, 0, 598016, 0, 0, 1609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 427, 427, 0, 0, 0, 0, 0, 549, 549,
  /* 39071 */ 549, 1760, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1768, 549, 549, 549, 1855, 571,
  /* 39091 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1854, 595, 1971, 595, 595, 595, 595,
  /* 39112 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 3255, 595, 595, 0, 2050, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39137 */ 0, 0, 0, 0, 1239, 0, 0, 0, 0, 2102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 683, 684, 0, 686, 549, 549, 2208,
  /* 39166 */ 549, 549, 549, 549, 2213, 549, 549, 549, 549, 549, 549, 549, 549, 917, 549, 571, 571, 571, 571, 571, 936,
  /* 39187 */ 2235, 0, 0, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2640, 0, 571, 2294, 571,
  /* 39209 */ 571, 571, 571, 2299, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 3321, 571, 571, 571, 571, 595,
  /* 39229 */ 2322, 0, 0, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 1996, 595, 595, 595, 595,
  /* 39250 */ 2381, 595, 595, 595, 595, 2386, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2388, 595, 595, 595, 595,
  /* 39270 */ 595, 595, 0, 0, 0, 2950, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 691, 0, 0, 0, 549, 549, 3015, 549, 549, 549,
  /* 39298 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 3201, 549, 571, 3055, 571, 571, 571, 571, 571, 571,
  /* 39319 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 3081, 595, 595, 3097, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 39340 */ 595, 595, 595, 595, 595, 2014, 595, 549, 595, 571, 595, 0, 0, 0, 3410, 0, 0, 0, 0, 3158, 0, 0, 0, 0, 549,
  /* 39365 */ 549, 549, 549, 549, 869, 549, 549, 549, 549, 549, 549, 549, 2574, 0, 0, 0, 0, 0, 0, 571, 571, 549, 549,
  /* 39388 */ 549, 3421, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 571, 571, 921, 571, 571, 571, 571, 571, 3436,
  /* 39409 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 595, 595, 595, 595, 3090, 595, 595, 595, 595, 3094,
  /* 39430 */ 595, 595, 595, 3452, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 0, 0, 1551, 1552, 1553, 595,
  /* 39451 */ 595, 595, 3583, 0, 0, 0, 0, 549, 549, 549, 549, 549, 549, 549, 571, 3485, 571, 3486, 571, 571, 571, 3490,
  /* 39473 */ 571, 352, 353, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1603, 0, 0, 399, 400, 402, 352, 0, 0, 0, 0, 0, 0,
  /* 39503 */ 351, 0, 0, 352, 0, 0, 0, 0, 1167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2787, 0, 0, 0, 0, 399, 0, 0, 0, 399,
  /* 39534 */ 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 0, 311, 312, 0, 314, 315, 316, 0, 0, 0, 0, 65536, 0, 0, 0, 351, 0,
  /* 39561 */ 0, 453, 0, 0, 479, 479, 479, 479, 479, 479, 485, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479, 479,
  /* 39583 */ 479, 479, 489, 489, 479, 490, 479, 479, 479, 508, 485, 508, 508, 508, 508, 508, 508, 508, 479, 479, 479,
  /* 39604 */ 479, 479, 479, 479, 479, 479, 479, 479, 489, 489, 479, 479, 490, 479, 479, 479, 479, 479, 479, 479, 479,
  /* 39625 */ 479, 479, 479, 479, 561, 584, 561, 561, 584, 561, 561, 608, 584, 584, 584, 584, 584, 584, 561, 584, 584,
  /* 39646 */ 584, 608, 608, 561, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 608, 584, 561, 584, 584, 608, 608,
  /* 39667 */ 1, 12290, 3, 78123, 78123, 301, 6, 6, 0, 0, 0, 0, 674, 0, 0, 677, 678, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2142208,
  /* 39694 */ 0, 0, 0, 0, 0, 0, 0, 0, 689, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1224, 0, 0, 0, 704, 0, 0, 0, 0, 0, 0,
  /* 39727 */ 377, 377, 377, 0, 0, 0, 0, 0, 0, 311, 312, 0, 2134016, 315, 316, 0, 0, 0, 0, 717, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39755 */ 726, 0, 728, 0, 0, 0, 0, 0, 0, 1694, 0, 0, 0, 0, 0, 0, 1701, 0, 0, 0, 0, 0, 736, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39786 */ 0, 0, 0, 0, 745, 0, 0, 0, 0, 814, 0, 0, 0, 0, 717, 0, 0, 0, 0, 0, 0, 817, 0, 814, 797, 0, 0, 819, 0, 678,
  /* 39816 */ 0, 793, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2957312, 2990080, 0, 0, 3100672, 0, 0, 0, 793, 819, 0, 819, 814, 0, 0,
  /* 39842 */ 0, 833, 0, 0, 0, 674, 836, 0, 0, 0, 0, 1183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 377, 311, 0, 0, 0, 793, 0,
  /* 39872 */ 0, 0, 0, 0, 842, 0, 0, 0, 0, 797, 674, 846, 0, 0, 0, 0, 0, 2039, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 805, 0,
  /* 39903 */ 0, 0, 0, 0, 0, 805, 0, 0, 549, 894, 549, 549, 549, 549, 912, 549, 549, 549, 571, 571, 923, 571, 571, 571,
  /* 39927 */ 571, 571, 1383, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1896, 571, 571, 571, 1901, 940,
  /* 39947 */ 571, 571, 954, 571, 571, 571, 571, 968, 571, 571, 571, 571, 986, 571, 571, 571, 571, 1381, 571, 571, 571,
  /* 39968 */ 571, 571, 571, 571, 571, 571, 1400, 571, 1043, 595, 595, 595, 595, 1061, 595, 595, 595, 0, 0, 0, 0, 549,
  /* 39990 */ 595, 571, 571, 571, 571, 2581, 571, 571, 571, 571, 2585, 571, 571, 571, 571, 571, 571, 571, 2584, 571,
  /* 40010 */ 571, 571, 571, 571, 571, 571, 571, 571, 2610, 571, 571, 571, 571, 571, 571, 0, 1180, 0, 0, 0, 0, 0, 0, 0,
  /* 40034 */ 0, 0, 0, 0, 0, 0, 0, 1664, 0, 0, 0, 0, 1197, 0, 0, 0, 0, 0, 0, 1114, 0, 0, 0, 0, 0, 0, 311, 312, 0,
  /* 40063 */ 2134016, 315, 316, 0, 0, 221184, 0, 0, 0, 1116, 0, 0, 0, 0, 0, 0, 1220, 0, 0, 0, 0, 1225, 0, 0, 0, 0,
  /* 40089 */ 1198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2426, 2427, 0, 0, 0, 0, 1239, 0, 0, 0, 0, 1271, 0, 0, 0, 0, 0,
  /* 40119 */ 0, 0, 549, 549, 549, 549, 549, 2160, 549, 549, 549, 549, 549, 549, 549, 1337, 549, 549, 549, 549, 549,
  /* 40140 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 3432, 571, 571, 571, 1406, 571, 571, 571, 571, 571, 571, 571,
  /* 40161 */ 571, 571, 571, 571, 571, 571, 571, 3448, 595, 1477, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 40182 */ 595, 1499, 595, 595, 595, 595, 2653, 595, 595, 2656, 2657, 595, 595, 595, 595, 595, 2662, 595, 549, 549,
  /* 40202 */ 1555, 549, 549, 571, 571, 1559, 571, 571, 595, 595, 1563, 595, 595, 1088, 0, 0, 1591, 0, 0, 0, 0, 0, 0, 0,
  /* 40226 */ 0, 0, 0, 0, 0, 0, 1263, 0, 0, 549, 549, 549, 1742, 549, 549, 549, 549, 549, 549, 549, 549, 1753, 549, 549,
  /* 40250 */ 549, 549, 549, 549, 3032, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 3035, 3037, 549, 549, 549,
  /* 40270 */ 3040, 1837, 571, 571, 571, 571, 571, 571, 571, 571, 1848, 571, 571, 571, 571, 571, 571, 1408, 571, 571,
  /* 40290 */ 571, 571, 571, 571, 571, 571, 571, 571, 2638, 571, 571, 571, 571, 0, 571, 26034, 0, 595, 595, 595, 595,
  /* 40311 */ 595, 595, 595, 595, 595, 595, 1933, 595, 595, 595, 595, 2667, 595, 595, 595, 2670, 595, 595, 2672, 595,
  /* 40331 */ 2673, 595, 595, 595, 595, 2680, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 3104, 595, 595,
  /* 40351 */ 595, 595, 595, 595, 1972, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2376, 595, 595,
  /* 40372 */ 595, 0, 2087, 2088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1602, 0, 0, 0, 0, 0, 2130, 0, 0, 0, 0, 0, 0, 0,
  /* 40403 */ 0, 0, 0, 0, 0, 775, 0, 0, 778, 0, 2141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1676, 0, 549, 549, 549,
  /* 40433 */ 549, 2223, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 0, 0, 0, 0, 1199, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40459 */ 0, 0, 659, 0, 0, 0, 0, 0, 0, 0, 571, 571, 571, 2242, 571, 2244, 571, 571, 571, 571, 571, 571, 571, 1892,
  /* 40483 */ 571, 571, 571, 571, 571, 571, 571, 571, 2609, 571, 571, 571, 571, 571, 571, 571, 0, 0, 0, 595, 595, 595,
  /* 40505 */ 2329, 595, 2331, 595, 595, 595, 595, 595, 595, 595, 1507, 595, 595, 1511, 595, 595, 595, 595, 595, 2430,
  /* 40525 */ 0, 0, 2433, 0, 0, 0, 0, 0, 0, 2438, 0, 0, 0, 2441, 2442, 2467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40555 */ 0, 1665, 0, 0, 0, 2495, 0, 0, 0, 0, 0, 2501, 0, 0, 0, 0, 2504, 0, 0, 0, 0, 1215, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40585 */ 0, 0, 0, 0, 2762, 0, 0, 0, 549, 549, 2532, 549, 2534, 549, 549, 549, 549, 2538, 549, 549, 549, 549, 549,
  /* 40608 */ 549, 549, 1780, 549, 549, 549, 549, 549, 549, 549, 549, 916, 549, 571, 571, 571, 571, 933, 571, 549, 549,
  /* 40629 */ 2544, 549, 549, 549, 549, 549, 549, 549, 2551, 549, 549, 549, 549, 549, 549, 549, 3374, 549, 571, 571,
  /* 40649 */ 571, 571, 571, 571, 571, 1845, 571, 571, 571, 571, 571, 571, 571, 571, 1447, 571, 571, 571, 571, 571, 571,
  /* 40670 */ 571, 549, 2559, 549, 549, 549, 549, 2563, 549, 549, 549, 549, 549, 549, 549, 549, 549, 571, 3376, 571,
  /* 40690 */ 571, 3378, 571, 571, 2590, 2591, 571, 571, 571, 571, 571, 2596, 571, 2598, 571, 571, 571, 571, 2602, 571,
  /* 40710 */ 571, 571, 571, 2593, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2862, 571, 571, 571,
  /* 40730 */ 2616, 571, 571, 571, 571, 571, 571, 2624, 571, 571, 571, 571, 2628, 571, 571, 571, 571, 571, 1384, 571,
  /* 40750 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2600, 571, 571, 571, 571, 2664, 595, 595, 595, 595,
  /* 40770 */ 2668, 595, 595, 595, 595, 595, 595, 595, 595, 2674, 595, 595, 595, 1053, 1057, 595, 595, 595, 595, 0, 0,
  /* 40791 */ 0, 0, 1070, 1071, 1072, 595, 595, 595, 2694, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 40812 */ 2390, 595, 595, 595, 571, 595, 2715, 595, 595, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 377, 312, 0, 0, 0, 0, 0,
  /* 40839 */ 0, 0, 2740, 2741, 2742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 769, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2755, 0, 0, 0, 0,
  /* 40870 */ 0, 0, 0, 2761, 0, 2763, 0, 0, 0, 0, 0, 2053, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2093, 0, 0, 0, 0, 0, 0, 2766,
  /* 40900 */ 0, 0, 2769, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 377, 351, 301, 0, 0, 0, 0, 2781, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 40931 */ 0, 0, 0, 0, 1647, 0, 0, 2790, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 40954 */ 2816, 549, 549, 549, 549, 2808, 549, 549, 2811, 549, 549, 549, 549, 549, 549, 549, 549, 1285, 549, 549,
  /* 40974 */ 549, 549, 549, 549, 1300, 2837, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 40995 */ 1868, 0, 0, 2886, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2660, 595, 595, 595,
  /* 41016 */ 2934, 595, 2935, 2936, 2937, 549, 549, 571, 571, 595, 595, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3354, 3158, 0, 0,
  /* 41041 */ 2961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1686, 0, 0, 3001, 0, 0, 549, 549, 3006, 549, 549, 549,
  /* 41069 */ 549, 549, 549, 549, 549, 1313, 549, 549, 549, 549, 549, 549, 549, 0, 3138, 0, 3140, 0, 0, 0, 3144, 0, 0,
  /* 41092 */ 0, 0, 0, 0, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 3169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 549, 549, 549, 549, 549,
  /* 41122 */ 2517, 549, 549, 3180, 3181, 549, 549, 549, 549, 3185, 3186, 549, 549, 549, 549, 549, 3190, 3212, 3213,
  /* 41141 */ 571, 571, 571, 571, 571, 3217, 571, 571, 571, 571, 571, 571, 571, 571, 967, 571, 571, 571, 571, 571, 571,
  /* 41162 */ 571, 3223, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 595, 595, 595, 595, 3548, 595, 595,
  /* 41183 */ 595, 3246, 595, 595, 595, 595, 595, 595, 595, 595, 3252, 595, 595, 595, 595, 595, 2358, 595, 595, 595,
  /* 41203 */ 595, 595, 595, 2364, 595, 2366, 595, 0, 0, 3268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1663, 0, 0, 549,
  /* 41230 */ 549, 3296, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1298, 549, 549, 549, 549,
  /* 41250 */ 3369, 549, 549, 549, 549, 549, 549, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 3053, 571, 571, 595,
  /* 41271 */ 0, 3408, 0, 0, 3411, 0, 0, 0, 3158, 0, 0, 0, 0, 549, 549, 549, 859, 549, 549, 549, 549, 549, 549, 549,
  /* 41295 */ 549, 549, 3529, 549, 571, 571, 571, 571, 571, 549, 3419, 549, 549, 549, 549, 3424, 549, 549, 549, 549,
  /* 41315 */ 3429, 549, 549, 571, 571, 571, 571, 1407, 571, 571, 571, 571, 571, 571, 571, 1414, 571, 571, 1418, 3434,
  /* 41335 */ 571, 571, 571, 571, 3439, 571, 571, 571, 571, 3444, 571, 571, 571, 595, 595, 595, 595, 0, 0, 0, 2719, 0,
  /* 41357 */ 0, 2722, 2723, 0, 0, 2726, 3450, 595, 595, 595, 595, 3455, 595, 595, 595, 595, 3460, 595, 595, 595, 0, 0,
  /* 41379 */ 0, 3348, 0, 0, 3351, 0, 0, 0, 0, 3158, 0, 0, 0, 0, 0, 3467, 0, 0, 0, 0, 549, 549, 549, 549, 549, 549, 549,
  /* 41406 */ 549, 877, 549, 549, 549, 549, 549, 549, 3481, 549, 549, 3483, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 41427 */ 1411, 571, 571, 571, 1415, 571, 571, 571, 571, 3494, 571, 571, 3496, 571, 595, 595, 595, 595, 595, 595,
  /* 41447 */ 595, 595, 595, 3342, 595, 595, 549, 549, 571, 571, 595, 595, 3508, 595, 595, 3510, 595, 0, 0, 0, 0, 0, 0,
  /* 41470 */ 0, 549, 549, 549, 549, 549, 549, 549, 549, 2163, 549, 549, 571, 571, 3595, 3596, 571, 571, 571, 595, 595,
  /* 41491 */ 595, 3601, 3602, 595, 595, 595, 0, 549, 549, 571, 571, 595, 595, 549, 571, 595, 549, 571, 595, 0, 0, 0, 0,
  /* 41514 */ 0, 0, 0, 0, 0, 0, 0, 1222, 1223, 0, 0, 0, 3636, 3637, 3638, 549, 571, 595, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41542 */ 759, 0, 0, 0, 0, 0, 0, 0, 354, 355, 356, 357, 358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 802, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41573 */ 0, 65536, 356, 357, 357, 358, 357, 0, 356, 357, 461, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480,
  /* 41594 */ 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 480, 495, 504, 504, 512, 504, 514, 504, 504, 514, 514,
  /* 41615 */ 504, 514, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 562, 585, 562, 585,
  /* 41636 */ 562, 562, 585, 562, 562, 609, 585, 585, 585, 585, 585, 585, 562, 585, 585, 609, 609, 562, 609, 609, 609,
  /* 41657 */ 609, 609, 609, 609, 609, 609, 609, 609, 585, 562, 585, 585, 609, 609, 1, 12290, 3, 78123, 78123, 301, 6,
  /* 41678 */ 6, 0, 0, 0, 657, 0, 0, 0, 0, 662, 663, 664, 665, 666, 667, 668, 0, 0, 0, 0, 0, 2076, 0, 0, 0, 0, 2081,
  /* 41705 */ 2082, 0, 0, 2084, 2085, 687, 0, 0, 0, 0, 0, 693, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1112, 0, 0, 0, 0, 1264, 1265,
  /* 41733 */ 703, 0, 0, 0, 0, 0, 0, 710, 377, 377, 377, 0, 0, 0, 0, 0, 0, 311, 312, 155648, 2134016, 315, 316, 0,
  /* 41757 */ 217088, 0, 0, 0, 734, 0, 0, 0, 0, 0, 0, 0, 0, 0, 744, 0, 0, 0, 0, 0, 0, 1731, 0, 1733, 1707, 549, 549,
  /* 41784 */ 549, 549, 549, 549, 549, 2522, 549, 549, 549, 549, 549, 549, 549, 549, 2188, 549, 549, 549, 549, 549, 549,
  /* 41805 */ 549, 657, 763, 764, 765, 0, 0, 0, 0, 0, 771, 772, 0, 0, 0, 0, 0, 0, 311, 33417, 0, 2134016, 315, 49805, 0,
  /* 41830 */ 0, 0, 0, 0, 0, 0, 784, 785, 0, 0, 0, 772, 0, 0, 792, 0, 0, 0, 0, 0, 0, 2054, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41861 */ 1243, 1273, 1274, 0, 1243, 0, 549, 703, 0, 0, 683, 0, 703, 0, 815, 686, 734, 0, 703, 816, 0, 0, 0, 0, 0,
  /* 41886 */ 549, 549, 549, 3007, 549, 549, 549, 549, 549, 549, 549, 549, 3528, 549, 549, 571, 571, 571, 571, 571, 571,
  /* 41907 */ 571, 571, 571, 571, 3313, 571, 571, 571, 0, 772, 0, 0, 0, 0, 0, 0, 0, 0, 765, 825, 826, 0, 0, 0, 0, 0,
  /* 41933 */ 549, 2156, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2200, 2201, 549, 549, 549, 549, 549, 0, 0, 0, 765,
  /* 41955 */ 0, 0, 830, 710, 0, 0, 0, 835, 0, 0, 0, 837, 0, 0, 0, 703, 710, 0, 0, 703, 835, 835, 0, 0, 0, 0, 0, 0, 0,
  /* 41984 */ 1625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2788, 0, 0, 0, 0, 703,
  /* 42015 */ 549, 549, 856, 860, 863, 549, 871, 549, 549, 549, 886, 889, 892, 549, 549, 549, 904, 908, 549, 549, 549,
  /* 42036 */ 549, 571, 571, 571, 930, 934, 937, 571, 945, 571, 571, 571, 960, 963, 966, 571, 571, 571, 978, 982, 571,
  /* 42057 */ 571, 571, 571, 571, 1385, 571, 571, 571, 571, 1395, 571, 571, 571, 571, 571, 571, 2595, 571, 2597, 571,
  /* 42077 */ 571, 571, 571, 571, 571, 571, 571, 3388, 571, 571, 571, 3391, 595, 595, 595, 856, 549, 904, 908, 1077,
  /* 42097 */ 930, 571, 978, 982, 1082, 0, 1005, 595, 1053, 1057, 1087, 0, 0, 1124, 0, 0, 0, 0, 1128, 0, 0, 1131, 0, 0,
  /* 42121 */ 0, 0, 0, 0, 360, 360, 362, 360, 360, 360, 360, 360, 360, 521, 0, 0, 1145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42148 */ 1209, 0, 0, 0, 0, 0, 2116, 0, 0, 0, 0, 0, 2122, 0, 0, 0, 0, 0, 0, 1681, 0, 0, 0, 0, 0, 0, 0, 0, 0, 680, 0,
  /* 42179 */ 0, 0, 0, 0, 0, 549, 549, 1321, 549, 549, 1325, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1350,
  /* 42201 */ 549, 549, 549, 549, 549, 549, 1336, 549, 549, 1343, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 42221 */ 1356, 1666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1673, 0, 1675, 0, 0, 0, 0, 0, 549, 3005, 549, 549, 549, 549, 549,
  /* 42247 */ 549, 549, 549, 549, 1749, 549, 549, 549, 549, 549, 549, 1677, 0, 759, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42273 */ 0, 1685, 0, 0, 0, 0, 0, 1608, 0, 0, 0, 0, 0, 0, 549, 1735, 549, 549, 549, 549, 549, 549, 1365, 920, 571,
  /* 42298 */ 571, 571, 571, 571, 571, 571, 1375, 549, 549, 1741, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 42319 */ 549, 549, 1331, 549, 549, 549, 549, 549, 1774, 549, 549, 1779, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 42339 */ 549, 918, 571, 571, 571, 571, 571, 571, 549, 549, 549, 549, 1365, 0, 571, 1829, 571, 571, 571, 571, 571,
  /* 42360 */ 571, 571, 1836, 571, 571, 571, 1858, 571, 571, 571, 571, 571, 571, 571, 571, 1865, 571, 571, 571, 571,
  /* 42380 */ 571, 1859, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2846, 571, 571, 2850, 571, 1869, 571,
  /* 42400 */ 571, 1874, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1433, 571, 571, 571, 571, 26034, 0,
  /* 42421 */ 595, 1925, 595, 595, 595, 595, 595, 595, 595, 1932, 595, 595, 595, 595, 1059, 595, 595, 595, 595, 0, 0, 0,
  /* 42443 */ 0, 549, 595, 571, 1954, 595, 595, 595, 595, 595, 595, 595, 595, 1961, 595, 595, 595, 1965, 595, 595, 595,
  /* 42464 */ 595, 2695, 595, 595, 595, 595, 595, 595, 595, 595, 2701, 595, 595, 595, 595, 1957, 595, 595, 595, 595,
  /* 42484 */ 595, 595, 595, 595, 595, 595, 1968, 1970, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 42505 */ 595, 595, 2933, 2032, 0, 1092, 0, 0, 0, 2034, 0, 1096, 0, 0, 0, 2036, 0, 1100, 0, 0, 0, 0, 1230, 0, 1119,
  /* 42530 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3154, 0, 0, 0, 0, 0, 0, 0, 2038, 0, 1104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42562 */ 379, 0, 0, 0, 0, 2059, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1728, 0, 0, 2073, 0, 0, 0, 0, 0, 0, 0,
  /* 42594 */ 0, 0, 0, 0, 0, 0, 1713, 0, 0, 549, 549, 549, 549, 2573, 549, 549, 549, 0, 0, 0, 2576, 0, 1826, 571, 571,
  /* 42619 */ 571, 571, 1443, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 3220, 571, 571, 571, 0, 0,
  /* 42640 */ 2642, 0, 1922, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2013, 595, 595, 549, 595, 595, 595,
  /* 42661 */ 2705, 595, 595, 595, 549, 595, 571, 549, 549, 549, 549, 571, 571, 571, 571, 595, 595, 595, 595, 0, 0,
  /* 42682 */ 1570, 0, 2737, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1714, 0, 549, 2791, 549, 549, 549, 549, 549, 549,
  /* 42709 */ 549, 549, 549, 549, 549, 549, 549, 549, 2218, 2219, 571, 2838, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 42729 */ 571, 571, 571, 571, 571, 571, 571, 3325, 0, 0, 595, 2887, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 42750 */ 595, 595, 595, 2909, 2910, 595, 595, 0, 0, 3139, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1726, 0, 0, 549,
  /* 42777 */ 549, 3306, 571, 571, 571, 571, 571, 571, 571, 3311, 571, 571, 571, 571, 571, 571, 2583, 571, 571, 571,
  /* 42797 */ 571, 571, 571, 571, 571, 571, 571, 2316, 571, 571, 571, 571, 0, 571, 3381, 571, 571, 571, 571, 571, 3387,
  /* 42818 */ 571, 571, 571, 571, 595, 595, 595, 3393, 549, 549, 549, 549, 3422, 549, 549, 549, 3426, 549, 549, 549,
  /* 42838 */ 549, 549, 571, 571, 571, 571, 571, 0, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 42859 */ 595, 0, 0, 571, 571, 571, 3437, 571, 571, 571, 3441, 571, 571, 571, 571, 571, 571, 595, 595, 595, 3089,
  /* 42880 */ 595, 595, 595, 595, 595, 595, 595, 1523, 595, 595, 595, 595, 595, 595, 595, 595, 2698, 595, 595, 595, 595,
  /* 42901 */ 595, 595, 595, 595, 595, 595, 3453, 595, 595, 595, 3457, 595, 595, 595, 595, 595, 595, 0, 0, 0, 0, 549,
  /* 42923 */ 549, 549, 549, 549, 549, 549, 571, 571, 571, 571, 3487, 571, 571, 571, 571, 3606, 0, 549, 549, 549, 549,
  /* 42944 */ 549, 549, 571, 571, 571, 571, 571, 571, 595, 595, 3088, 595, 595, 595, 595, 595, 595, 595, 595, 2906, 595,
  /* 42965 */ 595, 595, 595, 595, 595, 595, 0, 0, 401, 0, 0, 0, 405, 401, 0, 0, 0, 0, 0, 0, 0, 0, 377, 377, 377, 0, 714,
  /* 42992 */ 0, 0, 0, 0, 417, 0, 0, 0, 417, 0, 359, 0, 69632, 73728, 0, 0, 0, 0, 0, 0, 377, 377, 0, 0, 0, 0, 0, 0, 0,
  /* 43021 */ 0, 0, 2146, 0, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1144, 0, 0, 1147,
  /* 43050 */ 1148, 0, 0, 523, 530, 530, 530, 530, 530, 530, 0, 0, 0, 0, 0, 0, 0, 530, 0, 0, 0, 0, 1242, 0, 0, 0, 0, 0,
  /* 43078 */ 0, 0, 0, 1247, 0, 0, 0, 0, 0, 1692, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43111 */ 787, 0, 0, 0, 0, 0, 0, 0, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 563, 586, 563, 563,
  /* 43135 */ 586, 563, 563, 610, 586, 586, 586, 586, 586, 586, 563, 586, 586, 586, 610, 610, 563, 610, 610, 610, 610,
  /* 43156 */ 610, 610, 610, 610, 610, 610, 610, 586, 626, 631, 631, 610, 637, 1, 12290, 3, 78123, 78123, 301, 6, 6, 0,
  /* 43178 */ 0, 0, 0, 690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 801, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 549, 895, 549,
  /* 43210 */ 549, 549, 549, 913, 549, 549, 549, 571, 571, 924, 571, 571, 571, 571, 571, 1890, 571, 571, 1893, 571, 571,
  /* 43231 */ 571, 571, 571, 571, 571, 571, 3230, 571, 571, 571, 571, 595, 595, 595, 1044, 595, 595, 595, 595, 1062,
  /* 43251 */ 595, 595, 595, 0, 0, 0, 0, 549, 595, 571, 571, 571, 571, 2621, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 43273 */ 571, 571, 571, 571, 2883, 571, 571, 571, 1122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2071, 0, 1196,
  /* 43300 */ 0, 0, 0, 1201, 0, 0, 0, 0, 1117, 0, 0, 0, 0, 0, 0, 377, 377, 0, 0, 0, 0, 0, 0, 0, 1162, 0, 1227, 0, 0, 0,
  /* 43330 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1727, 0, 549, 549, 1279, 549, 549, 549, 549, 549, 549, 549, 549, 1292,
  /* 43355 */ 549, 549, 549, 549, 549, 549, 1365, 920, 571, 571, 571, 1371, 571, 571, 571, 571, 571, 571, 3386, 571,
  /* 43375 */ 571, 571, 3390, 571, 595, 595, 595, 595, 0, 0, 0, 0, 0, 2721, 0, 0, 0, 0, 0, 0, 0, 2758, 0, 0, 0, 0, 0, 0,
  /* 43403 */ 0, 0, 0, 2978, 0, 0, 0, 0, 0, 0, 1302, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 43427 */ 1316, 549, 549, 549, 549, 549, 3423, 549, 549, 549, 549, 549, 549, 549, 549, 571, 571, 571, 571, 571,
  /* 43447 */ 3488, 571, 571, 571, 549, 549, 1338, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1354, 549,
  /* 43467 */ 549, 549, 549, 549, 3525, 549, 3527, 549, 549, 549, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 43488 */ 3314, 571, 571, 571, 1419, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1431, 571, 571, 571, 571,
  /* 43508 */ 571, 1907, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 980, 571, 571, 571, 571, 26034, 1365,
  /* 43528 */ 995, 595, 595, 595, 1464, 595, 595, 595, 595, 595, 595, 595, 595, 595, 1524, 595, 595, 595, 595, 595, 595,
  /* 43549 */ 595, 595, 1526, 595, 595, 595, 595, 595, 595, 595, 595, 1945, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 43569 */ 1975, 595, 595, 595, 595, 1981, 595, 595, 1478, 595, 595, 595, 595, 1488, 595, 595, 595, 595, 595, 595,
  /* 43589 */ 595, 595, 595, 595, 2658, 595, 595, 595, 595, 595, 0, 0, 1569, 0, 0, 0, 1575, 0, 0, 0, 1581, 0, 0, 0,
  /* 43613 */ 1587, 0, 0, 0, 0, 1571, 0, 0, 0, 1577, 0, 0, 0, 1583, 0, 0, 0, 0, 0, 676, 0, 0, 679, 0, 0, 0, 0, 0, 0, 0,
  /* 43643 */ 1, 12290, 3, 78123, 78123, 301, 6, 6, 0, 0, 2112, 0, 0, 0, 0, 0, 2118, 0, 0, 0, 0, 0, 0, 0, 0, 377, 377,
  /* 43670 */ 377, 713, 0, 0, 0, 0, 549, 549, 549, 549, 2185, 549, 549, 549, 549, 2189, 549, 2191, 549, 549, 549, 549,
  /* 43692 */ 549, 549, 1365, 920, 571, 571, 1369, 571, 571, 1373, 571, 571, 2236, 0, 0, 571, 571, 571, 571, 571, 571,
  /* 43713 */ 571, 571, 571, 571, 571, 571, 571, 595, 3232, 595, 571, 571, 571, 2270, 571, 571, 571, 571, 2274, 571,
  /* 43733 */ 2276, 571, 571, 571, 571, 571, 571, 2623, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2262, 571,
  /* 43753 */ 571, 571, 571, 571, 2323, 0, 0, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2930,
  /* 43774 */ 595, 595, 595, 595, 595, 595, 2357, 595, 595, 595, 595, 2361, 595, 2363, 595, 595, 595, 595, 595, 2385,
  /* 43794 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2917, 595, 595, 595, 595, 595, 0, 2324, 0, 0, 0, 595,
  /* 43816 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2918, 595, 595, 595, 595, 0, 0, 0, 3002, 0, 549, 549,
  /* 43838 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 2823, 549, 549, 549, 549, 595, 595, 3347, 0, 0, 0, 3349, 0,
  /* 43860 */ 0, 0, 0, 0, 0, 3158, 3356, 0, 0, 0, 0, 1593, 1594, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 355, 0, 0, 0, 0, 0, 0,
  /* 43890 */ 3358, 0, 0, 0, 0, 0, 549, 3361, 549, 549, 3363, 549, 549, 549, 549, 549, 549, 1746, 549, 549, 549, 549,
  /* 43912 */ 549, 549, 549, 549, 549, 549, 2566, 549, 549, 549, 549, 549, 3394, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 43933 */ 595, 595, 595, 595, 595, 595, 549, 595, 571, 2938, 549, 2940, 571, 2942, 595, 0, 0, 0, 0, 0, 0, 0, 3161,
  /* 43956 */ 0, 0, 0, 0, 0, 0, 0, 3168, 0, 0, 801, 0, 801, 0, 0, 0, 0, 0, 0, 0, 0, 801, 0, 0, 0, 0, 0, 2132, 0, 0, 0,
  /* 43987 */ 0, 0, 0, 0, 0, 0, 0, 415, 0, 0, 0, 0, 0, 941, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 44013 */ 571, 571, 571, 1884, 992, 0, 595, 595, 595, 595, 595, 595, 1016, 595, 595, 595, 595, 595, 595, 595, 1991,
  /* 44034 */ 595, 595, 595, 1995, 595, 595, 595, 595, 78123, 1088, 6, 0, 0, 0, 1093, 1097, 0, 0, 1101, 1105, 0, 0, 0,
  /* 44057 */ 0, 0, 0, 2077, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2487, 0, 0, 0, 0, 0, 549, 549, 549, 549, 1365, 1827, 571,
  /* 44084 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2639, 571, 571, 571, 0, 571, 26034, 1923, 595, 595, 595,
  /* 44105 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 3105, 595, 3107, 595, 571, 571, 571, 3215, 571, 571,
  /* 44125 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1897, 571, 571, 571, 65536, 0, 360, 360, 362, 360, 0, 0,
  /* 44147 */ 360, 360, 0, 0, 0, 0, 361, 0, 0, 0, 0, 1607, 1608, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 803, 0, 808, 0, 811, 0,
  /* 44176 */ 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 360, 564, 587, 564, 587, 564,
  /* 44197 */ 564, 587, 564, 564, 611, 587, 587, 587, 587, 587, 587, 564, 587, 587, 611, 611, 564, 611, 611, 611, 611,
  /* 44218 */ 611, 611, 611, 611, 611, 611, 611, 587, 564, 587, 587, 611, 611, 1, 12290, 3, 78123, 78123, 301, 6, 6, 0,
  /* 44240 */ 733, 0, 735, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2057, 0, 2058, 750, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44271 */ 0, 0, 0, 0, 2098, 813, 0, 0, 0, 0, 813, 0, 0, 0, 0, 0, 813, 0, 0, 812, 0, 0, 0, 0, 1638, 0, 0, 0, 0, 0, 0,
  /* 44302 */ 0, 0, 0, 0, 0, 0, 233472, 0, 0, 0, 0, 821, 0, 675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 845, 0, 0, 0, 838,
  /* 44333 */ 0, 0, 0, 0, 0, 0, 813, 0, 0, 0, 0, 0, 0, 0, 0, 654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 813, 549, 549, 857, 549,
  /* 44364 */ 549, 549, 549, 875, 549, 549, 549, 549, 549, 549, 1763, 549, 549, 549, 549, 549, 549, 549, 549, 1770, 549,
  /* 44385 */ 896, 898, 549, 549, 909, 549, 549, 549, 549, 571, 571, 925, 931, 571, 571, 571, 571, 1842, 1843, 571, 571,
  /* 44406 */ 571, 571, 1850, 571, 571, 571, 571, 571, 571, 2284, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 44426 */ 2627, 571, 571, 571, 571, 571, 571, 571, 949, 571, 571, 571, 571, 571, 970, 972, 571, 571, 983, 571, 571,
  /* 44447 */ 571, 571, 571, 2257, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1429, 571, 571, 1436, 571,
  /* 44467 */ 1045, 1047, 595, 595, 1058, 595, 595, 595, 595, 0, 0, 0, 0, 549, 595, 571, 571, 571, 571, 2634, 571, 571,
  /* 44489 */ 571, 571, 571, 571, 571, 571, 571, 571, 0, 595, 595, 595, 1003, 1007, 595, 595, 595, 595, 595, 595, 1033,
  /* 44510 */ 1037, 1039, 857, 898, 549, 909, 549, 931, 972, 571, 983, 571, 0, 1006, 1047, 595, 1058, 595, 595, 595,
  /* 44530 */ 1054, 595, 595, 595, 595, 595, 0, 0, 0, 0, 549, 595, 571, 571, 571, 571, 2840, 571, 571, 571, 571, 571,
  /* 44552 */ 571, 2847, 571, 2849, 571, 571, 571, 571, 2297, 571, 571, 571, 571, 571, 571, 2302, 571, 571, 571, 571,
  /* 44572 */ 571, 571, 3319, 571, 571, 571, 571, 571, 571, 571, 571, 595, 3087, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 44593 */ 595, 2009, 595, 595, 595, 595, 595, 595, 549, 595, 571, 549, 549, 549, 549, 571, 571, 571, 571, 595, 595,
  /* 44614 */ 595, 595, 0, 0, 0, 1163, 0, 1165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2069, 0, 0, 1179, 0, 1181, 0, 0,
  /* 44643 */ 0, 0, 1186, 0, 0, 0, 0, 1191, 0, 0, 0, 0, 0, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 44668 */ 595, 595, 0, 1267, 0, 0, 0, 0, 1270, 0, 0, 0, 0, 0, 0, 0, 1191, 549, 549, 549, 549, 571, 571, 571, 3047,
  /* 44693 */ 571, 571, 571, 571, 571, 571, 571, 571, 2286, 2287, 571, 571, 571, 571, 571, 571, 1334, 549, 549, 549,
  /* 44713 */ 549, 549, 549, 549, 1348, 549, 549, 549, 549, 549, 549, 549, 549, 2832, 549, 549, 549, 549, 549, 0, 0,
  /* 44734 */ 549, 1359, 1360, 549, 549, 549, 1365, 920, 571, 571, 571, 571, 1372, 571, 571, 571, 571, 571, 2271, 571,
  /* 44754 */ 571, 571, 571, 571, 571, 2277, 571, 2279, 571, 1404, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 44774 */ 571, 571, 571, 571, 571, 1900, 571, 571, 1441, 571, 571, 571, 571, 571, 571, 571, 571, 1452, 1453, 571,
  /* 44794 */ 571, 571, 571, 571, 2298, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 3322, 571, 571, 571, 595,
  /* 44815 */ 26034, 1365, 995, 595, 595, 595, 595, 1465, 595, 595, 595, 595, 595, 595, 595, 595, 2008, 2010, 595, 595,
  /* 44835 */ 595, 595, 595, 549, 595, 549, 1554, 549, 549, 1557, 571, 1558, 571, 571, 1561, 595, 1562, 595, 595, 1565,
  /* 44855 */ 1088, 0, 0, 0, 1637, 0, 0, 0, 0, 0, 1643, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2096, 0, 0, 1739, 549,
  /* 44884 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 3202, 549, 549, 1806, 549, 549, 549,
  /* 44905 */ 549, 549, 549, 549, 549, 1814, 549, 549, 549, 549, 549, 549, 1793, 1794, 549, 549, 549, 549, 549, 549,
  /* 44925 */ 549, 549, 549, 2565, 549, 549, 549, 549, 549, 549, 1820, 549, 549, 549, 1365, 0, 571, 571, 571, 571, 571,
  /* 44946 */ 571, 571, 1834, 571, 571, 571, 571, 1875, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 44966 */ 2613, 571, 571, 571, 571, 26034, 0, 595, 595, 595, 595, 595, 595, 595, 1930, 595, 595, 595, 595, 595,
  /* 44986 */ 2654, 595, 595, 595, 595, 595, 2659, 595, 595, 595, 595, 595, 595, 1955, 595, 595, 595, 595, 595, 595,
  /* 45006 */ 595, 595, 595, 595, 595, 595, 595, 3335, 595, 595, 595, 0, 2060, 2061, 0, 2063, 2064, 0, 0, 0, 0, 0, 0, 0,
  /* 45030 */ 0, 0, 0, 1189, 0, 0, 0, 0, 0, 2086, 0, 0, 0, 0, 0, 2090, 0, 0, 2092, 0, 0, 0, 0, 0, 0, 0, 1641, 0, 0, 0,
  /* 45060 */ 0, 0, 0, 0, 0, 360, 361, 362, 0, 0, 0, 0, 0, 0, 2100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2125, 0,
  /* 45091 */ 2127, 2128, 2129, 0, 2131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2139, 0, 0, 2144, 2145, 0, 0, 0, 0, 0, 2149, 0,
  /* 45118 */ 0, 549, 2197, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2204, 549, 549, 549, 549, 571,
  /* 45139 */ 571, 3046, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1410, 571, 571, 571, 571, 571, 571, 549, 549, 549,
  /* 45160 */ 549, 2210, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2835, 549, 549, 0, 0, 0, 0, 0, 2239,
  /* 45182 */ 571, 571, 571, 571, 571, 571, 571, 2247, 571, 571, 571, 571, 571, 571, 3440, 571, 3442, 3443, 571, 3445,
  /* 45202 */ 571, 3447, 595, 595, 2282, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2290, 571, 571,
  /* 45222 */ 571, 571, 2255, 571, 571, 2259, 571, 571, 571, 2263, 571, 571, 571, 571, 571, 571, 3541, 571, 571, 595,
  /* 45242 */ 595, 595, 595, 595, 595, 595, 2904, 595, 595, 2907, 595, 595, 595, 595, 595, 595, 1944, 595, 595, 595,
  /* 45262 */ 595, 595, 595, 595, 595, 595, 3332, 595, 595, 595, 595, 595, 595, 571, 571, 571, 2296, 571, 571, 571, 571,
  /* 45283 */ 571, 571, 571, 571, 571, 571, 571, 571, 1915, 571, 571, 571, 0, 0, 0, 2326, 595, 595, 595, 595, 595, 595,
  /* 45305 */ 595, 2334, 595, 595, 595, 595, 595, 3328, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2403, 595,
  /* 45325 */ 595, 595, 595, 2172, 2369, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2377, 595, 595,
  /* 45345 */ 595, 595, 2915, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 3117, 595, 3119, 595, 595, 595,
  /* 45365 */ 595, 595, 595, 2383, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 3344, 549, 3345, 571, 0,
  /* 45386 */ 0, 2469, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2477, 0, 0, 0, 0, 0, 595, 595, 595, 595, 595, 595, 595, 2648, 595,
  /* 45412 */ 595, 595, 595, 1486, 595, 595, 595, 1491, 595, 595, 595, 595, 595, 595, 595, 0, 0, 0, 0, 0, 3559, 0, 549,
  /* 45435 */ 549, 549, 549, 549, 2545, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1783, 549, 549, 549,
  /* 45456 */ 571, 2714, 595, 595, 595, 2716, 2717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1245, 0, 0, 0, 0, 1248, 0, 0, 0, 595,
  /* 45482 */ 595, 595, 595, 595, 2890, 595, 2891, 595, 595, 595, 595, 595, 595, 1974, 595, 595, 595, 595, 595, 595,
  /* 45502 */ 595, 595, 595, 1960, 595, 595, 595, 595, 595, 595, 595, 595, 2347, 595, 595, 595, 595, 2352, 595, 595,
  /* 45522 */ 595, 3395, 595, 595, 595, 595, 595, 595, 595, 595, 595, 3404, 595, 595, 595, 549, 549, 549, 549, 571,
  /* 45542 */ 3045, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 3063, 571, 3065, 571, 571, 0, 0, 0, 0, 3468,
  /* 45564 */ 0, 3470, 0, 549, 549, 549, 549, 549, 3475, 549, 549, 549, 549, 549, 1344, 549, 549, 549, 549, 549, 549,
  /* 45585 */ 549, 549, 549, 549, 1314, 549, 549, 549, 549, 549, 0, 3607, 549, 549, 549, 549, 549, 549, 571, 571, 571,
  /* 45606 */ 571, 571, 571, 595, 595, 595, 595, 0, 0, 2718, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 225280, 0, 0, 0,
  /* 45631 */ 0, 363, 0, 0, 0, 0, 0, 406, 407, 0, 408, 0, 0, 0, 0, 0, 408, 0, 421, 0, 505, 505, 0, 505, 505, 505, 505,
  /* 45658 */ 505, 505, 505, 0, 0, 413, 0, 0, 0, 0, 0, 380, 388, 416, 0, 0, 0, 0, 0, 0, 377, 377, 0, 0, 0, 0, 0, 1119,
  /* 45686 */ 0, 0, 380, 0, 421, 423, 0, 0, 380, 388, 0, 69632, 73728, 0, 0, 0, 0, 439, 65536, 0, 439, 439, 0, 439, 0,
  /* 45711 */ 423, 439, 462, 0, 0, 0, 0, 0, 0, 0, 1672, 0, 0, 0, 0, 0, 0, 0, 0, 1171, 0, 0, 0, 0, 0, 0, 0, 0, 380, 0, 0,
  /* 45742 */ 0, 0, 408, 0, 0, 0, 0, 0, 363, 0, 0, 380, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2108, 0, 0, 505, 531,
  /* 45772 */ 531, 531, 531, 531, 531, 462, 462, 462, 462, 539, 462, 462, 543, 544, 462, 531, 543, 531, 531, 531, 531,
  /* 45793 */ 531, 531, 531, 531, 531, 547, 565, 588, 565, 565, 588, 565, 565, 612, 588, 588, 588, 588, 588, 588, 565,
  /* 45814 */ 588, 588, 588, 612, 612, 565, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 612, 588, 627, 632, 632,
  /* 45835 */ 612, 638, 1, 12290, 3, 78123, 78123, 301, 6, 6, 0, 0, 0, 705, 0, 0, 0, 0, 0, 377, 377, 377, 0, 0, 0, 0, 0,
  /* 45862 */ 0, 377, 377, 0, 0, 0, 0, 1160, 1118, 0, 0, 571, 571, 571, 955, 957, 571, 571, 571, 571, 571, 571, 571,
  /* 45885 */ 571, 571, 571, 571, 571, 2871, 571, 571, 571, 78123, 1088, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1106, 0,
  /* 45911 */ 0, 1108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1121, 0, 1164, 0, 0, 0, 0, 0, 1170, 0, 1172, 0, 0, 0, 0, 0,
  /* 45941 */ 0, 0, 1722, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 139264, 139264, 0, 0, 1243, 1252, 0, 0, 0, 0, 0,
  /* 45967 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 2428, 0, 549, 549, 549, 1322, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 45992 */ 549, 549, 2815, 549, 549, 549, 571, 571, 571, 1379, 571, 571, 1390, 571, 571, 1394, 571, 571, 571, 571,
  /* 46012 */ 571, 571, 1423, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2860, 2861, 571, 571, 571, 571, 26034,
  /* 46032 */ 1365, 995, 595, 595, 595, 595, 595, 595, 595, 1468, 595, 595, 595, 1472, 595, 595, 595, 1055, 595, 595,
  /* 46052 */ 595, 595, 595, 0, 0, 0, 0, 549, 595, 571, 571, 571, 571, 2855, 571, 571, 2858, 571, 571, 571, 571, 571,
  /* 46074 */ 571, 571, 571, 571, 3389, 571, 571, 595, 595, 595, 595, 595, 1483, 595, 595, 1487, 595, 595, 595, 595,
  /* 46094 */ 595, 595, 595, 595, 595, 595, 595, 3334, 595, 595, 595, 595, 0, 0, 1652, 0, 0, 0, 1656, 0, 0, 0, 0, 0, 0,
  /* 46119 */ 0, 0, 0, 1659, 0, 0, 0, 0, 0, 0, 1845, 549, 549, 549, 549, 571, 571, 571, 571, 595, 595, 595, 595, 0, 0,
  /* 46144 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3158, 0, 0, 0, 0, 0, 2074, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1118, 0, 0, 0,
  /* 46176 */ 2151, 0, 0, 2154, 0, 549, 549, 2157, 549, 549, 549, 549, 549, 549, 549, 549, 1795, 549, 549, 1798, 549,
  /* 46197 */ 549, 549, 549, 549, 549, 549, 2222, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 0, 0, 0, 0,
  /* 46219 */ 1691, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 549, 549, 549, 3178, 549, 0, 0, 0, 571, 571, 2241, 571, 571, 571,
  /* 46245 */ 571, 571, 571, 571, 571, 571, 571, 571, 3219, 571, 571, 571, 571, 571, 571, 571, 2309, 571, 571, 571, 571,
  /* 46266 */ 571, 571, 571, 571, 571, 571, 571, 0, 595, 595, 595, 595, 595, 595, 1018, 595, 595, 595, 595, 595, 595,
  /* 46287 */ 595, 3128, 3129, 3130, 549, 549, 571, 571, 595, 595, 0, 0, 0, 0, 595, 595, 2328, 595, 595, 595, 595, 595,
  /* 46309 */ 595, 595, 595, 595, 595, 2699, 595, 595, 595, 2702, 595, 595, 595, 595, 2396, 595, 595, 595, 595, 595,
  /* 46329 */ 595, 595, 595, 595, 595, 595, 549, 549, 549, 549, 901, 549, 549, 549, 549, 549, 571, 571, 571, 571, 571,
  /* 46350 */ 571, 571, 571, 571, 571, 571, 571, 3211, 0, 1576, 0, 1582, 0, 1588, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46377 */ 0, 2070, 0, 0, 0, 0, 0, 2508, 0, 0, 0, 0, 0, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2164, 549, 549,
  /* 46402 */ 549, 549, 549, 2546, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2556, 549, 549, 549, 549, 903, 549, 549,
  /* 46423 */ 549, 549, 549, 571, 571, 922, 571, 571, 571, 571, 571, 1382, 1389, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 46444 */ 571, 571, 2881, 571, 571, 571, 571, 571, 2676, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2687,
  /* 46464 */ 595, 595, 595, 595, 595, 3339, 595, 595, 595, 595, 595, 595, 549, 549, 571, 571, 571, 3307, 571, 571, 571,
  /* 46485 */ 3310, 571, 571, 571, 571, 571, 571, 1444, 571, 571, 571, 571, 571, 571, 1454, 571, 571, 0, 0, 0, 2768, 0,
  /* 46507 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1133, 0, 0, 0, 0, 2324, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 46534 */ 595, 595, 595, 595, 3405, 595, 595, 549, 0, 0, 0, 0, 3159, 0, 0, 0, 3162, 0, 0, 0, 0, 0, 0, 0, 0, 3039232,
  /* 46560 */ 3231744, 0, 2711552, 0, 0, 3239936, 0, 0, 3170, 0, 0, 0, 0, 0, 0, 3173, 0, 3175, 549, 549, 549, 549, 549,
  /* 46583 */ 549, 549, 3425, 549, 3427, 3428, 549, 3430, 549, 571, 571, 571, 571, 571, 3226, 571, 571, 571, 571, 571,
  /* 46603 */ 571, 571, 571, 571, 595, 595, 595, 595, 595, 3502, 595, 595, 595, 3267, 0, 0, 0, 0, 3271, 0, 0, 0, 0, 0,
  /* 46627 */ 0, 0, 0, 0, 0, 1599, 1600, 0, 0, 0, 0, 595, 595, 3326, 595, 595, 595, 3329, 595, 595, 595, 595, 595, 595,
  /* 46651 */ 595, 595, 595, 2669, 595, 595, 595, 595, 595, 595, 595, 595, 2682, 595, 595, 595, 595, 595, 595, 2690,
  /* 46671 */ 595, 3346, 595, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3158, 0, 0, 0, 0, 0, 3283, 0, 0, 0, 0, 549, 3368, 549,
  /* 46699 */ 3370, 549, 549, 549, 549, 549, 571, 571, 571, 571, 571, 571, 571, 3051, 571, 571, 571, 571, 571, 571, 571,
  /* 46720 */ 3383, 571, 3385, 571, 571, 571, 571, 571, 571, 595, 595, 595, 595, 595, 595, 595, 3093, 595, 595, 595,
  /* 46740 */ 595, 595, 595, 3553, 595, 595, 595, 0, 3557, 0, 0, 0, 0, 0, 549, 549, 549, 549, 549, 549, 549, 3011, 549,
  /* 46763 */ 549, 549, 3562, 549, 3563, 549, 549, 549, 549, 549, 549, 549, 571, 571, 3569, 571, 3570, 571, 571, 571,
  /* 46783 */ 571, 3071, 571, 571, 571, 571, 571, 571, 571, 571, 571, 3080, 571, 571, 571, 571, 2310, 571, 571, 571,
  /* 46803 */ 571, 571, 571, 571, 571, 571, 571, 0, 595, 595, 595, 595, 595, 595, 1017, 595, 595, 595, 595, 595, 595,
  /* 46824 */ 595, 3099, 595, 595, 595, 595, 595, 595, 595, 595, 595, 0, 0, 0, 192512, 549, 595, 571, 368, 369, 0, 0, 0,
  /* 46847 */ 0, 0, 0, 0, 0, 0, 377, 0, 301, 0, 0, 0, 0, 0, 2434, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1660, 0, 0, 0, 0, 0, 0,
  /* 46879 */ 0, 422, 368, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 0, 377, 377, 0, 0, 0, 1159, 0, 0, 0, 0, 65536, 0,
  /* 46907 */ 0, 0, 0, 0, 0, 368, 0, 0, 481, 481, 481, 481, 481, 481, 486, 481, 481, 481, 481, 481, 481, 481, 481, 481,
  /* 46931 */ 481, 481, 486, 481, 492, 481, 0, 0, 481, 0, 0, 0, 0, 0, 0, 0, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 532,
  /* 46958 */ 532, 536, 536, 536, 536, 481, 481, 481, 481, 481, 481, 481, 532, 486, 481, 536, 532, 536, 536, 536, 536,
  /* 46979 */ 536, 536, 536, 536, 536, 548, 566, 589, 566, 566, 589, 566, 566, 613, 589, 589, 589, 589, 589, 589, 566,
  /* 47000 */ 589, 589, 589, 613, 613, 566, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 613, 589, 628, 633, 633,
  /* 47021 */ 613, 639, 1, 12290, 3, 78123, 78123, 301, 6, 6, 0, 0, 0, 0, 720, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1202,
  /* 47049 */ 0, 0, 0, 0, 0, 0, 655, 749, 0, 755, 756, 655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2126, 0, 0, 0,
  /* 47080 */ 809, 0, 0, 0, 0, 0, 0, 809, 0, 0, 0, 0, 0, 0, 377, 377, 1156, 0, 0, 0, 0, 0, 0, 0, 0, 2494464, 2498560, 0,
  /* 47108 */ 0, 0, 0, 0, 0, 655, 0, 0, 0, 804, 0, 809, 0, 795, 0, 824, 0, 0, 0, 676, 0, 0, 0, 0, 1719, 0, 0, 0, 0, 0,
  /* 47138 */ 0, 0, 0, 0, 0, 0, 377, 0, 262144, 0, 0, 0, 0, 0, 824, 0, 0, 0, 0, 0, 655, 0, 0, 0, 0, 0, 0, 0, 2066, 2067,
  /* 47168 */ 0, 0, 0, 0, 0, 0, 0, 0, 2204359, 2204359, 2204359, 0, 0, 0, 0, 0, 0, 809, 847, 0, 549, 853, 549, 549, 549,
  /* 47193 */ 549, 872, 876, 882, 549, 887, 549, 549, 549, 549, 905, 549, 549, 549, 549, 549, 571, 571, 927, 571, 571,
  /* 47214 */ 571, 571, 571, 2311, 571, 2313, 571, 571, 571, 571, 571, 571, 571, 0, 571, 946, 950, 956, 571, 961, 571,
  /* 47235 */ 571, 571, 571, 571, 979, 571, 571, 571, 571, 571, 571, 3497, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 47256 */ 2655, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2681, 595, 595, 2685, 595, 595, 595, 595, 595, 595,
  /* 47276 */ 2359, 595, 595, 2362, 595, 595, 595, 595, 595, 595, 2345, 595, 595, 595, 595, 595, 595, 595, 595, 595, 0,
  /* 47297 */ 0, 0, 751, 549, 595, 571, 549, 549, 905, 549, 549, 571, 571, 979, 571, 571, 0, 595, 595, 1054, 595, 595,
  /* 47319 */ 595, 595, 3236, 3237, 595, 595, 595, 595, 3241, 3242, 595, 595, 595, 595, 595, 3248, 595, 595, 595, 595,
  /* 47339 */ 595, 595, 3254, 595, 3256, 595, 0, 0, 0, 1109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1208, 0, 0, 0, 0, 1136,
  /* 47367 */ 0, 0, 0, 1140, 1141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1724, 0, 0, 0, 0, 0, 0, 0, 0, 1228, 0, 0, 1109, 0, 0, 0,
  /* 47397 */ 1234, 0, 1236, 0, 0, 0, 0, 0, 0, 2104, 0, 0, 0, 0, 1676, 0, 0, 0, 0, 0, 0, 1185, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 47427 */ 0, 1188, 0, 0, 0, 0, 0, 0, 1250, 0, 1253, 1210, 0, 1234, 1256, 0, 1259, 0, 0, 0, 0, 0, 1140, 0, 0, 0, 0,
  /* 47454 */ 2033, 0, 0, 0, 0, 0, 2035, 0, 0, 0, 0, 0, 0, 0, 2952, 0, 0, 0, 0, 0, 0, 0, 0, 377, 377, 377, 0, 0, 0, 0,
  /* 47484 */ 716, 0, 0, 0, 1268, 0, 0, 0, 0, 0, 1268, 0, 0, 1159, 1268, 0, 1275, 549, 549, 549, 549, 1324, 549, 549,
  /* 47508 */ 549, 549, 549, 549, 549, 549, 549, 1332, 549, 549, 549, 549, 906, 549, 549, 549, 549, 549, 571, 571, 571,
  /* 47529 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 3316, 549, 549, 1339, 1341, 549, 549, 549, 549, 549,
  /* 47549 */ 549, 549, 549, 549, 549, 549, 549, 3023, 549, 3025, 549, 549, 549, 549, 549, 1363, 549, 1365, 920, 1367,
  /* 47569 */ 571, 571, 571, 571, 571, 1374, 571, 571, 571, 571, 3317, 3318, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 47589 */ 571, 595, 3499, 595, 3500, 595, 595, 595, 3504, 595, 571, 571, 571, 1380, 571, 571, 571, 571, 571, 571,
  /* 47609 */ 571, 571, 571, 571, 1401, 571, 571, 571, 571, 3384, 571, 571, 571, 571, 571, 571, 571, 595, 595, 595, 595,
  /* 47630 */ 595, 595, 595, 595, 595, 595, 595, 26034, 1365, 995, 1460, 595, 595, 595, 595, 595, 1467, 595, 595, 595,
  /* 47650 */ 595, 1473, 595, 595, 595, 1502, 595, 595, 595, 595, 595, 595, 595, 595, 1512, 595, 595, 595, 595, 1060,
  /* 47670 */ 595, 595, 595, 595, 0, 0, 0, 0, 549, 595, 571, 0, 0, 0, 1570, 0, 0, 0, 1576, 0, 0, 0, 1582, 0, 0, 0, 1588,
  /* 47697 */ 0, 1606, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2466, 0, 0, 0, 0, 1653, 1654, 0, 0, 0, 0, 0, 0, 1661,
  /* 47727 */ 0, 0, 0, 0, 0, 0, 2133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3164, 0, 0, 0, 0, 0, 1715, 0, 0, 1718, 0, 0, 0, 0,
  /* 47758 */ 0, 0, 0, 1715, 0, 0, 0, 0, 0, 0, 2422, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2080, 0, 0, 0, 2083, 0, 0, 549, 549,
  /* 47787 */ 549, 549, 1808, 1809, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1797, 549, 549, 549, 549, 549,
  /* 47807 */ 571, 571, 1840, 571, 571, 571, 571, 1846, 571, 571, 571, 571, 571, 571, 571, 571, 1910, 571, 571, 571,
  /* 47827 */ 571, 1916, 571, 571, 571, 571, 1857, 571, 571, 571, 571, 1861, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 47847 */ 2260, 571, 571, 571, 571, 2265, 571, 571, 571, 571, 1872, 571, 571, 571, 1877, 571, 571, 571, 571, 571,
  /* 47867 */ 571, 571, 571, 571, 1449, 571, 571, 571, 571, 571, 571, 571, 1904, 1905, 571, 571, 571, 571, 571, 571,
  /* 47887 */ 571, 571, 571, 571, 571, 571, 571, 1416, 571, 571, 571, 26034, 0, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 47908 */ 595, 595, 595, 595, 1936, 595, 595, 595, 1973, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 47929 */ 3462, 595, 0, 0, 2018, 549, 2020, 549, 549, 571, 2024, 571, 571, 595, 2028, 595, 595, 0, 0, 0, 0, 0, 0, 0,
  /* 47953 */ 0, 3352, 3353, 0, 3158, 0, 3357, 0, 0, 0, 2062, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1241, 0, 0, 549, 2111,
  /* 47981 */ 0, 0, 0, 0, 0, 2117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2042, 0, 0, 0, 0, 0, 0, 2140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 48013 */ 0, 0, 0, 0, 0, 2150, 549, 2220, 549, 549, 549, 549, 2225, 549, 549, 549, 549, 549, 549, 549, 549, 0, 0, 0,
  /* 48037 */ 0, 2075, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 364, 365, 0, 0, 0, 2237, 0, 571, 571, 571, 571, 571, 571,
  /* 48064 */ 571, 571, 571, 571, 571, 571, 571, 1866, 571, 571, 571, 2307, 571, 571, 571, 571, 2312, 571, 571, 571,
  /* 48084 */ 571, 571, 571, 571, 571, 0, 595, 595, 595, 595, 595, 1011, 595, 1019, 595, 595, 595, 595, 595, 595, 1521,
  /* 48105 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 1528, 595, 595, 595, 595, 595, 595, 0, 2324, 0, 595, 595,
  /* 48126 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2928, 595, 595, 2931, 595, 595, 595, 2394, 595,
  /* 48146 */ 595, 595, 595, 2399, 595, 595, 595, 595, 595, 595, 595, 595, 549, 549, 549, 549, 916, 571, 571, 571, 571,
  /* 48167 */ 990, 0, 595, 595, 595, 595, 1065, 0, 0, 0, 2470, 0, 0, 0, 2474, 0, 0, 0, 0, 0, 0, 0, 0, 1129, 0, 0, 0, 0,
  /* 48195 */ 0, 0, 0, 0, 0, 0, 2507, 0, 0, 0, 0, 0, 0, 549, 549, 2514, 549, 549, 549, 549, 549, 549, 3373, 549, 549,
  /* 48220 */ 3375, 571, 571, 571, 571, 3379, 571, 549, 2543, 549, 549, 549, 549, 549, 549, 549, 2550, 549, 549, 2554,
  /* 48240 */ 549, 549, 549, 549, 549, 910, 549, 549, 549, 549, 571, 571, 571, 571, 571, 571, 571, 3207, 3208, 571, 571,
  /* 48261 */ 571, 571, 2578, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2586, 571, 571, 571, 571, 571,
  /* 48281 */ 2582, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1849, 571, 571, 571, 571, 571, 571, 2604, 571,
  /* 48301 */ 571, 2606, 571, 2607, 571, 571, 571, 571, 571, 571, 571, 571, 2615, 571, 571, 2619, 571, 571, 571, 571,
  /* 48321 */ 571, 571, 571, 571, 571, 571, 571, 571, 2630, 2631, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 48342 */ 571, 571, 571, 0, 595, 595, 595, 595, 1008, 595, 595, 595, 595, 595, 595, 595, 595, 595, 1948, 595, 595,
  /* 48363 */ 595, 595, 1952, 595, 595, 595, 595, 2652, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 48383 */ 3103, 595, 595, 595, 595, 595, 2727, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2429, 0, 0, 2767, 0, 0,
  /* 48411 */ 0, 2771, 0, 2773, 0, 0, 0, 0, 0, 0, 0, 340, 0, 69632, 73728, 0, 0, 0, 0, 0, 549, 2806, 549, 549, 549,
  /* 48436 */ 2809, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1813, 549, 549, 549, 549, 549, 571, 2853, 571,
  /* 48456 */ 571, 571, 2856, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1427, 571, 571, 571, 571, 571, 571, 571,
  /* 48477 */ 2866, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1898, 571, 571, 0, 0, 595, 595,
  /* 48498 */ 595, 595, 595, 595, 595, 595, 595, 595, 2894, 595, 2897, 595, 595, 595, 1518, 595, 595, 595, 1525, 1527,
  /* 48518 */ 595, 595, 595, 595, 595, 595, 595, 3250, 595, 595, 595, 595, 595, 595, 595, 595, 1947, 595, 595, 595, 595,
  /* 48539 */ 595, 595, 595, 595, 595, 595, 2902, 595, 595, 595, 2905, 595, 595, 595, 595, 595, 595, 595, 595, 3400,
  /* 48559 */ 595, 595, 595, 595, 595, 595, 595, 549, 3027, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 48580 */ 549, 3039, 549, 549, 549, 549, 1281, 549, 549, 549, 549, 1287, 549, 549, 549, 549, 549, 549, 549, 2198,
  /* 48600 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 2812, 549, 549, 549, 549, 549, 549, 3109, 595, 595, 595, 595,
  /* 48621 */ 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 3257, 3123, 595, 595, 595, 595, 595, 549, 595, 571,
  /* 48642 */ 549, 549, 571, 571, 595, 595, 0, 0, 2946, 0, 0, 0, 0, 0, 0, 3141, 0, 0, 0, 0, 0, 0, 0, 3147, 0, 0, 0, 0,
  /* 48670 */ 0, 595, 2643, 595, 595, 595, 595, 595, 595, 595, 595, 595, 1993, 595, 595, 595, 595, 595, 595, 549, 549,
  /* 48691 */ 549, 549, 3182, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 3022, 549, 549, 549, 549, 549, 549,
  /* 48712 */ 549, 3192, 549, 549, 549, 549, 549, 3197, 549, 3199, 549, 549, 549, 549, 549, 549, 1810, 549, 549, 549,
  /* 48732 */ 549, 549, 1815, 549, 549, 549, 571, 571, 3225, 571, 3227, 571, 571, 571, 571, 571, 571, 571, 571, 595,
  /* 48752 */ 595, 595, 595, 3501, 595, 595, 595, 595, 0, 0, 0, 3269, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3274, 0, 0, 0, 0, 0,
  /* 48779 */ 2457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 697, 0, 0, 0, 0, 0, 3294, 549, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 48806 */ 549, 549, 549, 549, 3303, 549, 549, 549, 549, 1307, 549, 549, 549, 549, 549, 549, 549, 1315, 549, 549,
  /* 48826 */ 549, 549, 549, 549, 2536, 549, 549, 549, 549, 549, 549, 2541, 549, 549, 549, 3522, 549, 549, 549, 549,
  /* 48846 */ 549, 549, 549, 549, 3530, 571, 571, 571, 3534, 571, 571, 571, 571, 3438, 571, 571, 571, 571, 571, 571,
  /* 48866 */ 571, 571, 571, 595, 595, 3577, 595, 3578, 595, 595, 595, 595, 571, 571, 571, 3573, 3574, 571, 571, 595,
  /* 48886 */ 595, 595, 595, 595, 595, 595, 595, 595, 2696, 2697, 595, 595, 595, 595, 595, 595, 595, 595, 3340, 595,
  /* 48906 */ 595, 595, 595, 549, 549, 571, 571, 3581, 3582, 595, 595, 0, 0, 3585, 0, 549, 549, 549, 549, 549, 549, 549,
  /* 48928 */ 571, 571, 571, 571, 3048, 571, 571, 571, 571, 3052, 571, 571, 0, 0, 370, 371, 0, 0, 0, 0, 0, 0, 0, 377, 0,
  /* 48953 */ 301, 0, 0, 0, 0, 0, 2472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139264, 0, 0, 139264, 139264, 65536, 432, 0, 0,
  /* 48980 */ 0, 0, 0, 454, 0, 0, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 482, 567, 590, 567, 482,
  /* 49003 */ 482, 482, 482, 482, 496, 0, 0, 496, 371, 371, 371, 518, 371, 371, 371, 482, 482, 482, 482, 482, 482, 482,
  /* 49025 */ 482, 482, 482, 482, 482, 482, 482, 482, 482, 590, 567, 567, 590, 567, 567, 614, 590, 590, 590, 590, 590,
  /* 49046 */ 590, 567, 590, 590, 614, 614, 567, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 614, 590, 567, 590,
  /* 49067 */ 590, 614, 614, 1, 12290, 3, 78123, 78123, 301, 6, 6, 0, 571, 947, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 49089 */ 571, 571, 984, 571, 571, 571, 571, 571, 2594, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1880,
  /* 49110 */ 571, 571, 571, 571, 549, 549, 549, 910, 549, 571, 571, 571, 984, 571, 0, 595, 595, 595, 1059, 595, 595,
  /* 49131 */ 595, 1540, 595, 595, 595, 595, 595, 595, 595, 0, 0, 1292, 1478, 1385, 1107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49156 */ 0, 0, 0, 0, 0, 2454, 571, 1377, 571, 571, 571, 1386, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 49178 */ 1450, 571, 571, 571, 571, 571, 26034, 1365, 995, 595, 595, 595, 595, 595, 595, 595, 595, 595, 1470, 595,
  /* 49198 */ 595, 595, 595, 1504, 595, 595, 595, 1508, 595, 595, 595, 595, 595, 595, 595, 2360, 595, 595, 595, 595,
  /* 49218 */ 595, 595, 595, 595, 2927, 595, 595, 595, 595, 595, 595, 595, 1479, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 49239 */ 595, 595, 595, 595, 595, 595, 595, 3333, 595, 595, 595, 595, 595, 1589, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49264 */ 0, 0, 0, 0, 2751, 0, 0, 0, 1621, 1622, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1632, 0, 0, 0, 0, 2103, 0, 0, 0, 0, 0,
  /* 49294 */ 2107, 0, 0, 0, 0, 2110, 0, 1688, 0, 1690, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1246, 0, 0, 0, 549, 549,
  /* 49322 */ 1759, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1754, 549, 549, 549, 1772, 549,
  /* 49342 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1785, 549, 549, 549, 549, 1308, 549, 549, 549, 549,
  /* 49363 */ 549, 549, 549, 549, 549, 549, 1319, 1903, 571, 571, 571, 571, 571, 571, 571, 571, 571, 1913, 571, 571,
  /* 49383 */ 571, 571, 571, 571, 2635, 571, 571, 571, 571, 571, 571, 571, 571, 0, 0, 0, 2051, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49408 */ 0, 0, 0, 0, 0, 2124, 0, 0, 0, 0, 2238, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 49432 */ 2278, 571, 571, 0, 0, 2325, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 3343, 595,
  /* 49453 */ 549, 549, 571, 571, 0, 0, 0, 2446, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1262, 0, 0, 0, 0, 2506, 0, 0, 0, 0,
  /* 49483 */ 0, 0, 0, 0, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2518, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 49505 */ 549, 549, 549, 549, 549, 549, 549, 3304, 549, 549, 549, 549, 2793, 549, 549, 549, 549, 549, 549, 2800,
  /* 49525 */ 549, 2802, 549, 549, 549, 549, 549, 1745, 549, 549, 549, 549, 1751, 549, 549, 549, 549, 549, 549, 549,
  /* 49545 */ 3484, 571, 571, 571, 571, 571, 571, 571, 571, 1847, 571, 571, 571, 571, 571, 571, 571, 0, 0, 595, 595,
  /* 49566 */ 595, 595, 2889, 595, 595, 595, 595, 595, 595, 2896, 595, 2898, 549, 549, 549, 3297, 549, 549, 549, 549,
  /* 49586 */ 549, 549, 549, 549, 549, 549, 549, 549, 3200, 549, 549, 549, 0, 0, 549, 549, 549, 549, 3611, 549, 571,
  /* 49607 */ 571, 571, 571, 3615, 571, 595, 595, 595, 595, 3247, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 49628 */ 3511, 0, 0, 3514, 3515, 0, 0, 0, 549, 549, 595, 595, 3619, 595, 0, 0, 0, 549, 549, 549, 549, 571, 571,
  /* 49651 */ 571, 571, 595, 0, 0, 0, 0, 0, 0, 0, 0, 3158, 0, 3414, 0, 3416, 549, 65536, 382, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49679 */ 0, 0, 0, 0, 0, 2491, 2492, 0, 372, 0, 0, 0, 382, 0, 0, 382, 0, 0, 0, 0, 0, 0, 0, 341, 0, 0, 0, 0, 0, 0, 0,
  /* 49710 */ 0, 0, 69632, 73728, 0, 432, 432, 0, 0, 591, 568, 568, 591, 568, 568, 615, 591, 591, 591, 591, 591, 591,
  /* 49732 */ 568, 591, 591, 615, 615, 568, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 615, 591, 568, 591, 591,
  /* 49753 */ 615, 615, 1, 12290, 3, 78123, 78123, 301, 6, 6, 0, 942, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 49775 */ 571, 571, 571, 571, 571, 1918, 549, 549, 1340, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 49796 */ 549, 1769, 549, 549, 595, 595, 1484, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 49816 */ 3100, 595, 595, 595, 595, 595, 595, 595, 595, 595, 2011, 595, 595, 595, 595, 1750, 1941, 549, 549, 1773,
  /* 49836 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 1817, 549, 549, 3276, 0, 0, 0, 0, 3158,
  /* 49858 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2055, 0, 2056, 0, 0, 0, 0, 373, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49890 */ 2750, 0, 0, 373, 0, 374, 0, 373, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 440, 65536, 0, 440, 440, 0, 440, 0,
  /* 49915 */ 374, 440, 463, 0, 0, 0, 0, 0, 0, 0, 2091, 0, 0, 0, 0, 2095, 0, 0, 0, 513, 533, 533, 533, 533, 533, 533,
  /* 49941 */ 463, 463, 463, 463, 463, 463, 463, 533, 463, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533,
  /* 49962 */ 569, 592, 569, 569, 592, 569, 569, 616, 592, 592, 592, 592, 592, 592, 569, 592, 592, 592, 616, 616, 569,
  /* 49983 */ 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 616, 592, 629, 634, 634, 616, 640, 1, 12290, 3, 78123,
  /* 50004 */ 78123, 301, 6, 6, 0, 549, 549, 906, 549, 549, 571, 571, 980, 571, 571, 0, 595, 595, 1055, 595, 595, 595,
  /* 50026 */ 595, 3327, 595, 595, 595, 3331, 595, 595, 595, 595, 595, 595, 595, 2371, 595, 595, 595, 595, 595, 595,
  /* 50046 */ 595, 595, 595, 1549, 595, 0, 0, 549, 595, 571, 0, 0, 0, 571, 2240, 571, 571, 571, 571, 571, 571, 571, 571,
  /* 50069 */ 571, 571, 571, 571, 3064, 571, 571, 571, 0, 0, 0, 595, 2327, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 50091 */ 595, 595, 3114, 595, 595, 3116, 595, 595, 595, 595, 595, 595, 1959, 595, 595, 595, 595, 595, 595, 595,
  /* 50111 */ 595, 595, 2372, 595, 595, 595, 595, 595, 595, 595, 595, 2373, 2374, 595, 595, 595, 595, 595, 595, 2603,
  /* 50131 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2280, 593, 570, 570, 593, 570,
  /* 50152 */ 570, 617, 593, 593, 593, 593, 593, 593, 570, 593, 593, 617, 617, 570, 617, 617, 617, 617, 617, 617, 617,
  /* 50173 */ 617, 617, 617, 617, 593, 570, 593, 593, 617, 617, 1, 12290, 3, 78123, 78123, 301, 6, 6, 0, 0, 0, 746, 0,
  /* 50196 */ 802, 0, 0, 0, 0, 0, 0, 0, 0, 802, 0, 0, 0, 0, 0, 2497, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672, 0, 0, 0, 0, 0,
  /* 50228 */ 943, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2292, 549, 549, 549, 1323,
  /* 50249 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 3302, 549, 549, 549, 0, 1567, 0, 0, 0, 1573,
  /* 50271 */ 0, 0, 0, 1579, 0, 0, 0, 1585, 0, 0, 0, 0, 0, 2509, 0, 0, 0, 0, 549, 2513, 549, 549, 549, 549, 549, 549,
  /* 50297 */ 1365, 920, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2315, 571, 571, 571, 571, 571, 0, 0, 0, 0, 658, 0,
  /* 50320 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1601, 0, 0, 0, 658, 0, 0, 754, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 50347 */ 549, 549, 549, 549, 3188, 549, 549, 549, 549, 1073, 549, 549, 911, 549, 1078, 571, 571, 985, 571, 0, 1083,
  /* 50368 */ 595, 595, 1060, 595, 595, 595, 1940, 595, 595, 595, 595, 595, 595, 595, 595, 595, 1951, 595, 595, 595,
  /* 50388 */ 595, 2397, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 549, 595, 571, 3131, 549, 3133, 571, 3135,
  /* 50408 */ 595, 0, 1266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 549, 571, 549, 595, 1538, 595, 595, 595, 595, 595,
  /* 50435 */ 595, 595, 595, 595, 0, 0, 549, 595, 571, 571, 571, 571, 3597, 571, 571, 595, 595, 595, 595, 595, 3603,
  /* 50456 */ 595, 595, 3605, 1704, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2764, 549, 549, 1789, 549, 549, 549,
  /* 50482 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2203, 549, 549, 549, 2182, 549, 2184, 549, 549, 549,
  /* 50502 */ 549, 549, 549, 549, 549, 549, 549, 549, 549, 2215, 549, 549, 549, 549, 549, 0, 0, 0, 571, 571, 571, 571,
  /* 50524 */ 2243, 571, 571, 571, 571, 571, 571, 571, 571, 2843, 571, 571, 571, 571, 571, 571, 2851, 2267, 571, 2269,
  /* 50544 */ 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 2304, 2305, 2306, 0, 0, 0, 595, 595, 595,
  /* 50566 */ 595, 2330, 595, 595, 595, 595, 595, 595, 595, 595, 3249, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 50586 */ 2402, 595, 595, 595, 595, 595, 2407, 2354, 595, 2356, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 50606 */ 595, 595, 595, 3399, 595, 3401, 595, 595, 595, 595, 595, 595, 549, 0, 0, 0, 0, 2496, 0, 0, 0, 0, 0, 0, 0,
  /* 50631 */ 0, 0, 0, 0, 698, 699, 0, 0, 0, 595, 595, 2678, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595, 595,
  /* 50655 */ 595, 3456, 595, 3458, 3459, 595, 3461, 595, 3463, 0, 0, 0, 3157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50682 */ 2778, 0, 549, 549, 3191, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 2217, 549, 549,
  /* 50703 */ 65536, 0, 0, 0, 0, 0, 450, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2120, 0, 0, 0, 0, 0, 0, 0, 0, 1159168, 0, 1159168,
  /* 50731 */ 0, 0, 0, 1159168, 1159596, 1159596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1159168, 0, 0, 0, 1159168,
  /* 50756 */ 0, 0, 0, 0, 0, 1159168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1159168, 0, 377, 0, 0, 0, 1159168, 0, 0, 1159168, 0, 0,
  /* 50783 */ 0, 0, 1159168, 0, 0, 0, 1159168, 1159168, 0, 0, 1159168, 0, 0, 1159168, 0, 0, 1159168, 1159168, 0, 0, 0,
  /* 50804 */ 0, 0, 0, 0, 2105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 172032, 0, 0, 0, 0, 1159788, 1159788, 1159788,
  /* 50828 */ 1159168, 1159788, 1159788, 1159788, 1159788, 1159788, 1159788, 1159788, 1159788, 1159788, 1159788, 0,
  /* 50840 */ 1159168, 1159788, 1159168, 1159168, 1159168, 1159168, 1159788, 1159788, 1, 12290, 3, 0, 0, 2183168, 6,
  /* 50855 */ 4284416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2960, 0, 0, 0, 0, 307200, 0, 311, 312, 0, 2134016,
  /* 50882 */ 315, 316, 0, 0, 0, 0, 0, 0, 2435, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1697, 1698, 1699, 1700, 0, 0, 0, 0, 0,
  /* 50909 */ 2134016, 0, 0, 0, 0, 0, 0, 0, 0, 1163264, 0, 0, 0, 0, 0, 0, 2458, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2707456,
  /* 50937 */ 2756608, 0, 0, 2551808, 2727936, 0, 0, 4284416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2445312, 2453504, 0, 0, 0,
  /* 50960 */ 0, 2115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2451, 0, 0, 0, 0, 0, 0, 2125824, 2125824, 2125824, 2125824,
  /* 50985 */ 2125824, 2445312, 2453504, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2953216, 2125824,
  /* 50996 */ 2125824, 2125824, 3022848, 2125824, 2125824, 2125824, 2125824, 3084288, 2125824, 2125824, 2125824, 65536,
  /* 51008 */ 0, 0, 0, 0, 0, 0, 0, 0, 464, 1171939, 1171939, 1171939, 1171939, 1171939, 1171939, 464, 464, 1171939, 464,
  /* 51027 */ 464, 464, 464, 464, 464, 464, 464, 1171990, 1171990, 1171990, 1171990, 1171990, 1171990, 1171990, 1171990,
  /* 51042 */ 1171990, 1171990, 1171990, 1171990, 1171990, 1171990, 1171990, 0, 0, 0, 0, 0, 0, 1171939, 0, 0, 0, 0, 0,
  /* 51061 */ 464, 0, 0, 0, 0, 1171939, 1171939, 1171939, 1171939, 1171939, 1171939, 1171939, 1171939, 1171939, 1171939,
  /* 51076 */ 1171939, 1171939, 1171939, 1171939, 1171939, 1171939, 0, 1171939, 1171990, 1171990, 1171990, 1171939,
  /* 51088 */ 1171990, 1, 12290, 3, 0, 0, 2183168, 6, 6, 0, 0, 0, 0, 2135, 549, 549, 549, 549, 549, 549, 549, 549, 549,
  /* 51111 */ 549, 549, 571, 571, 571, 571, 571, 571, 571, 429, 0, 0, 0, 0, 0, 0, 0, 0, 1184209, 0, 1183744, 0, 0, 0, 0,
  /* 51136 */ 0, 0, 2473, 0, 0, 0, 0, 0, 0, 0, 0, 0, 409, 0, 0, 0, 0, 0, 409, 1183744, 0, 0, 1183744, 1183744, 1183744,
  /* 51161 */ 0, 1183744, 1183744, 0, 1183744, 1183744, 0, 1183744, 1183744, 1183744, 1183744, 1183744, 0, 1184209,
  /* 51175 */ 1184209, 0, 1184209, 1184209, 1184209, 1184209, 1184209, 1184209, 1184209, 1184209, 1184209, 1184209,
  /* 51187 */ 1184209, 1184209, 1184209, 1184209, 1184209, 1184209, 0, 0, 0, 0, 0, 0, 1183744, 0, 0, 0, 0, 0, 0,
  /* 51206 */ 1183744, 465, 0, 1183744, 1183744, 1183744, 1184209, 1184209, 1184209, 1183744, 1184209, 1, 12290, 3, 0,
  /* 51221 */ 0, 2183168, 6, 6, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1191936, 0, 0, 0, 0, 0, 705, 0, 0, 0, 788,
  /* 51249 */ 0, 0, 0, 0, 807, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1221, 0, 0, 0, 0, 0, 0, 0, 994, 2125824, 2125824, 2125824,
  /* 51276 */ 2125824, 2125824, 2445312, 2453504, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3149824,
  /* 51287 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 51298 */ 2125824, 2179072, 2125824, 0, 0, 0, 110592, 0, 0, 0, 0, 0, 0, 0, 0, 110592, 0, 110592, 110592, 110592,
  /* 51318 */ 110592, 0, 110592, 110592, 110592, 110592, 110592, 110592, 110592, 110592, 110592, 110592, 110592, 110592,
  /* 51332 */ 110592, 110592, 110592, 110592, 0, 0, 0, 110592, 110592, 110592, 110592, 110592, 110592, 110592, 0, 0, 0,
  /* 51349 */ 0, 0, 2183168, 0, 0, 0, 0, 0, 708, 709, 0, 377, 377, 377, 0, 0, 0, 0, 0, 0, 0, 2936832, 0, 3231744,
  /* 51373 */ 2486272, 0, 0, 2740224, 0, 0, 0, 3174400, 2961408, 0, 2781184, 0, 0, 0, 0, 0, 2977792, 0, 0, 2846720,
  /* 51393 */ 3182592, 2449408, 2965504, 2965504, 0, 0, 0, 0, 0, 2768896, 2904064, 0, 0, 0, 0, 0, 0, 2179072, 2179072,
  /* 51412 */ 2179072, 3203072, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2126743, 2515863,
  /* 51423 */ 2126743, 2126743, 2536343
];

XQueryParser.EXPECTED =
[
  /*    0 */ 143, 159, 173, 189, 204, 233, 220, 295, 402, 249, 280, 264, 311, 327, 343, 359, 390, 1400, 430, 1404, 1404,
  /*   21 */ 1404, 1404, 1404, 1404, 1404, 1404, 1404, 474, 418, 446, 889, 462, 1387, 521, 490, 643, 1340, 1237, 506,
  /*   40 */ 537, 553, 569, 1115, 690, 599, 615, 631, 659, 935, 945, 676, 706, 722, 738, 754, 770, 799, 583, 815, 831,
  /*   61 */ 783, 1900, 1193, 861, 877, 905, 921, 961, 1146, 977, 1940, 993, 1009, 1025, 1592, 1055, 1912, 1071, 1638,
  /*   80 */ 1856, 1100, 1131, 1162, 1178, 1711, 1222, 1266, 1297, 1282, 1326, 845, 1356, 1372, 1545, 1420, 1436, 374,
  /*   98 */ 1452, 1468, 1484, 1500, 1741, 1516, 1532, 1561, 1577, 1084, 1623, 1654, 1670, 1686, 1772, 1702, 1727, 1802,
  /*  116 */ 1757, 1206, 1039, 1788, 1818, 1828, 1844, 1872, 1310, 1607, 1888, 1404, 1250, 1928, 1404, 1404, 1404, 1404,
  /*  134 */ 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 674, 1956, 1960, 1962, 1962, 1962, 1967, 1962, 1962, 1974,
  /*  152 */ 1963, 1971, 1978, 1982, 1985, 1988, 1992, 1996, 2000, 2004, 4014, 2368, 2368, 2368, 4349, 2368, 2368, 2008,
  /*  170 */ 3015, 2368, 2012, 2368, 2368, 2260, 2613, 2096, 2017, 2023, 2027, 2034, 2368, 2368, 2368, 2038, 2368, 4172,
  /*  188 */ 4020, 2065, 2368, 2368, 2368, 3406, 2261, 2261, 2261, 2261, 2614, 2096, 2096, 2096, 2096, 2044, 2018, 2018,
  /*  206 */ 2153, 2049, 2053, 2057, 2368, 2368, 2368, 2368, 4022, 2062, 2368, 2368, 2368, 2245, 2045, 2103, 2070, 2056,
  /*  224 */ 2368, 2368, 2368, 2368, 4532, 3016, 2368, 2368, 2610, 2261, 2261, 2261, 2261, 2261, 2095, 2096, 2096, 2096,
  /*  242 */ 2096, 2096, 2017, 2018, 2018, 2018, 2018, 2097, 2018, 2018, 2018, 2018, 2018, 2101, 2107, 2368, 2368, 2769,
  /*  260 */ 2368, 2368, 2261, 2261, 2261, 2095, 2096, 2096, 2268, 2018, 2018, 2113, 2368, 2368, 2118, 3407, 2261, 2261,
  /*  278 */ 2265, 2096, 2612, 2096, 2096, 2096, 2096, 2018, 2018, 2018, 2018, 2114, 2368, 2368, 2770, 2368, 2610, 2261,
  /*  296 */ 2262, 2096, 2096, 2096, 2096, 2096, 2097, 2018, 2018, 2018, 2018, 2018, 2019, 2074, 2078, 2266, 2018, 2018,
  /*  314 */ 2123, 2368, 2064, 3408, 2261, 2615, 2097, 2018, 2030, 2144, 3408, 2127, 2616, 2019, 2134, 2612, 2130, 2141,
  /*  332 */ 2259, 2264, 2151, 2163, 2263, 2267, 2163, 2613, 2151, 2157, 2161, 2247, 2167, 2171, 2175, 2179, 2183, 2185,
  /*  350 */ 2185, 2185, 2189, 2193, 2185, 2197, 2201, 2205, 2209, 2213, 2217, 2221, 2225, 2229, 2233, 2790, 2237, 2368,
  /*  368 */ 2368, 3828, 2243, 2368, 2368, 4027, 2368, 2040, 2368, 2368, 3881, 2368, 4622, 2598, 3887, 3893, 3237, 3888,
  /*  386 */ 2368, 3889, 2368, 3897, 2239, 2368, 2368, 2368, 2368, 2368, 2368, 2368, 2368, 4664, 3827, 2251, 2368, 2368,
  /*  404 */ 2368, 2368, 2089, 2368, 2245, 2261, 2261, 2261, 2261, 2094, 2096, 2096, 2096, 2096, 2288, 2292, 2299, 2303,
  /*  422 */ 2307, 2311, 2315, 2319, 2323, 2327, 2331, 2336, 2368, 2368, 2368, 2368, 2368, 2368, 2272, 2368, 2368, 2368,
  /*  440 */ 2368, 2368, 2368, 2368, 2368, 2277, 4334, 2783, 2628, 2335, 2341, 4299, 3032, 2844, 2383, 2346, 2435, 2368,
  /*  458 */ 2437, 2567, 2351, 2357, 3760, 2368, 2368, 2368, 2090, 2380, 2368, 2368, 2368, 3677, 2387, 2776, 2368, 2368,
  /*  476 */ 2368, 2368, 2368, 2368, 2368, 4155, 2457, 2282, 2368, 2368, 2368, 4201, 2368, 2273, 2491, 4490, 2368, 2416,
  /*  494 */ 2368, 2368, 2368, 2368, 2090, 2420, 2368, 2368, 2368, 2368, 2090, 2420, 4565, 2368, 2368, 2410, 4170, 3901,
  /*  512 */ 2368, 2368, 2470, 2368, 2368, 3901, 2368, 2368, 4564, 2368, 2090, 2397, 2368, 2368, 2368, 2368, 2368, 2368,
  /*  530 */ 2368, 2404, 2368, 2368, 2368, 2368, 2410, 3860, 4181, 2480, 2368, 3833, 2482, 2368, 3899, 2368, 2368, 3489,
  /*  548 */ 2368, 3812, 2489, 3877, 2495, 2526, 2368, 4515, 2368, 3175, 2500, 3465, 4515, 3173, 3450, 3450, 4516, 3466,
  /*  566 */ 3175, 3175, 3118, 3174, 2500, 3118, 3451, 3175, 2506, 2508, 2513, 2368, 2368, 2368, 2368, 2109, 2523, 2368,
  /*  584 */ 2368, 2389, 2368, 2368, 2721, 2368, 3008, 3747, 2711, 3013, 3022, 4007, 3026, 4428, 4297, 2539, 2597, 2368,
  /*  602 */ 3121, 2602, 2368, 3578, 2368, 4269, 2683, 3778, 3604, 2670, 2607, 3875, 3069, 2620, 2368, 2368, 2368, 2625,
  /*  620 */ 2368, 2368, 2368, 2368, 2642, 2368, 2368, 2496, 2648, 2368, 2085, 2703, 2368, 2368, 2368, 2653, 2463, 2658,
  /*  638 */ 2668, 2677, 2368, 2284, 2681, 2368, 2368, 2368, 2368, 2368, 2368, 2427, 2368, 2368, 2368, 2433, 2502, 3228,
  /*  656 */ 2442, 2456, 2368, 2664, 2687, 2368, 2368, 2368, 2368, 2693, 2456, 2368, 2368, 2368, 2697, 2368, 2084, 2702,
  /*  674 */ 2368, 2369, 3176, 3596, 2754, 2368, 2368, 2368, 2283, 2761, 2368, 2368, 2368, 2368, 3597, 2755, 2368, 2368,
  /*  692 */ 2576, 4268, 2368, 2581, 2585, 3214, 4673, 2589, 2593, 3349, 4329, 2368, 3405, 3403, 4447, 3483, 2768, 2368,
  /*  710 */ 2774, 2780, 2787, 3700, 2797, 2368, 2368, 3700, 2797, 2368, 2368, 2734, 2805, 2368, 2368, 4448, 3123, 2368,
  /*  728 */ 2813, 2746, 2821, 2825, 2368, 2438, 2834, 2368, 2347, 2825, 2368, 4447, 2841, 2368, 2815, 2850, 3731, 2368,
  /*  746 */ 3729, 3733, 2368, 2857, 2368, 4418, 2841, 4313, 2861, 2865, 3789, 2368, 2863, 2368, 4136, 2871, 2875, 2879,
  /*  764 */ 2884, 2891, 2911, 2900, 2900, 2905, 2909, 4610, 3715, 2931, 2901, 2918, 2928, 2942, 2939, 2946, 2921, 2953,
  /*  782 */ 2962, 2368, 2368, 2368, 2412, 2368, 2913, 3067, 4454, 3607, 2710, 2368, 3073, 3077, 2368, 3229, 3083, 2406,
  /*  800 */ 2368, 2368, 4279, 2764, 2969, 2975, 2979, 2983, 2987, 2991, 2995, 2998, 3001, 3003, 3004, 3030, 4252, 2368,
  /*  818 */ 4254, 2368, 2368, 2368, 4492, 2368, 2368, 3039, 4221, 3009, 4479, 2368, 4084, 4290, 2368, 3046, 4047, 3052,
  /*  836 */ 2368, 2368, 2368, 3059, 2602, 2368, 2368, 3440, 3063, 2368, 2368, 2649, 3787, 2368, 3793, 2368, 2368, 2368,
  /*  854 */ 3797, 2368, 4095, 3395, 2698, 3803, 3674, 2368, 4227, 3092, 2368, 2368, 2368, 2368, 4227, 3092, 2368, 2368,
  /*  872 */ 2368, 2368, 3936, 2368, 3147, 3042, 3160, 2368, 3170, 2368, 3471, 3181, 2368, 2368, 2368, 2368, 3187, 2368,
  /*  890 */ 2368, 2368, 2368, 2368, 3860, 2368, 2361, 2365, 2368, 2353, 2295, 2373, 2368, 2368, 2368, 3472, 3182, 2368,
  /*  908 */ 2368, 2368, 3202, 2887, 4237, 3613, 3143, 3017, 2466, 3200, 2368, 2368, 2466, 3200, 2368, 2368, 2368, 3212,
  /*  926 */ 2368, 2368, 2572, 2914, 4243, 2711, 2368, 2368, 3868, 2368, 2368, 2775, 2708, 2715, 3934, 2368, 2725, 2682,
  /*  944 */ 2368, 2368, 2368, 2368, 2729, 2602, 2368, 2368, 2368, 2733, 2084, 2738, 2368, 2368, 3727, 2744, 2750, 3218,
  /*  962 */ 2368, 2368, 3868, 2368, 2572, 3366, 4558, 2368, 2368, 3233, 2368, 2429, 3235, 2368, 3867, 2756, 2756, 4558,
  /*  980 */ 3671, 3502, 3502, 3245, 2757, 3671, 3249, 3671, 3516, 3259, 4472, 3266, 3252, 3298, 3302, 3306, 3310, 2368,
  /*  998 */ 2368, 3316, 2368, 2368, 3326, 2532, 3946, 3331, 3338, 3132, 3343, 3353, 3664, 3359, 3156, 2368, 4327, 4325,
  /* 1016 */ 2368, 2368, 2368, 2368, 3363, 2368, 2525, 3327, 2533, 3375, 4539, 3339, 3383, 3387, 3392, 2368, 2066, 3401,
  /* 1034 */ 2368, 2368, 2368, 2519, 3439, 2368, 2368, 3817, 4509, 3355, 3534, 4553, 4599, 4362, 4461, 2368, 2368, 2368,
  /* 1052 */ 2368, 2368, 3055, 3431, 2368, 2368, 3436, 2368, 2368, 2368, 2368, 2405, 3444, 2368, 2368, 2368, 2368, 2451,
  /* 1070 */ 3455, 3481, 2368, 2368, 2368, 2368, 4483, 3487, 2368, 2368, 2368, 2368, 4483, 3487, 2368, 2368, 2368, 3054,
  /* 1088 */ 4176, 3554, 4185, 2368, 2846, 4017, 4191, 4195, 2671, 3582, 4205, 2368, 3488, 2368, 2368, 4121, 3522, 2368,
  /* 1106 */ 2368, 3018, 3532, 2368, 2368, 3087, 3541, 2673, 3610, 2368, 2530, 4631, 2537, 3432, 2543, 2546, 2549, 2553,
  /* 1124 */ 2554, 2560, 2558, 2564, 2368, 3567, 2571, 3682, 3034, 2368, 2638, 3034, 2368, 3682, 3553, 2368, 3087, 3771,
  /* 1142 */ 3547, 3527, 3828, 3572, 2368, 2572, 3537, 2368, 3107, 2368, 4310, 2368, 3109, 2368, 4481, 3515, 3501, 2756,
  /* 1160 */ 2368, 3241, 2661, 2368, 2368, 3552, 2368, 3558, 3564, 3508, 3571, 2671, 3577, 4206, 2368, 2830, 2368, 2456,
  /* 1178 */ 3228, 3582, 4075, 3227, 3582, 3582, 3528, 3523, 3523, 2368, 3587, 3583, 2368, 4116, 3035, 2368, 2644, 2368,
  /* 1196 */ 2886, 3105, 4238, 3115, 2368, 3127, 3136, 2368, 4212, 3141, 2368, 2368, 2368, 2867, 4496, 2368, 2368, 2368,
  /* 1214 */ 2423, 2368, 2368, 2368, 2368, 4502, 4575, 2368, 3627, 3630, 3634, 3638, 3642, 3643, 3647, 2368, 2368, 2368,
  /* 1232 */ 3654, 2368, 3078, 3661, 3206, 2368, 2933, 3166, 3183, 2455, 2368, 2368, 3183, 2455, 2368, 2368, 3388, 2461,
  /* 1250 */ 2368, 2368, 2368, 2368, 4640, 2368, 2368, 2368, 2278, 4645, 4651, 4655, 4659, 4659, 4663, 3101, 3668, 3681,
  /* 1268 */ 3686, 3690, 3694, 3698, 2368, 3704, 2080, 2368, 2082, 3710, 3719, 2368, 2368, 3724, 4101, 2368, 2368, 2368,
  /* 1286 */ 2368, 3757, 2368, 3764, 2368, 2368, 2368, 3768, 2368, 3560, 3395, 2368, 3079, 3662, 3416, 3137, 4078, 2654,
  /* 1304 */ 4616, 3739, 2368, 2368, 3417, 3751, 2368, 2368, 2368, 3457, 4591, 2572, 4510, 4596, 2896, 2956, 2368, 2740,
  /* 1322 */ 4603, 2368, 2688, 4608, 3799, 2828, 2853, 3775, 2368, 2368, 2368, 3840, 2368, 2368, 2368, 2368, 2368, 3782,
  /* 1340 */ 2368, 2368, 4187, 3745, 2368, 2368, 2368, 2368, 2446, 2368, 2368, 2368, 2368, 2368, 2450, 2368, 3810, 2368,
  /* 1358 */ 2368, 2649, 3787, 2368, 2368, 2368, 2368, 2704, 3783, 2368, 2368, 2368, 2368, 2704, 3783, 2368, 3806, 2368,
  /* 1376 */ 4592, 3816, 3753, 3204, 4062, 2368, 3821, 2368, 2368, 4319, 3832, 2368, 3260, 2630, 3616, 2367, 3177, 3742,
  /* 1394 */ 2374, 2368, 2368, 2368, 2368, 2393, 2368, 2368, 2368, 2257, 2368, 2368, 2368, 2368, 2368, 2368, 2368, 2368,
  /* 1412 */ 2368, 2368, 2368, 2368, 2368, 2368, 2368, 2368, 2058, 3859, 2368, 2965, 2368, 2368, 2368, 2949, 3093, 2368,
  /* 1430 */ 2368, 4641, 3832, 2958, 4604, 2369, 3864, 4064, 4179, 2368, 3872, 2368, 2368, 3872, 2368, 2368, 4142, 2957,
  /* 1448 */ 3851, 3095, 3397, 3236, 3907, 3843, 3918, 3912, 2484, 2137, 3911, 2484, 2484, 3883, 3923, 3913, 3913, 3917,
  /* 1466 */ 2485, 3923, 3922, 3923, 3193, 3927, 3190, 3319, 3322, 3931, 2368, 2368, 2368, 2368, 3940, 4256, 2368, 3950,
  /* 1484 */ 3959, 3963, 3967, 3971, 3975, 3979, 3983, 3987, 3991, 3995, 3999, 2368, 2368, 2368, 4004, 4107, 2808, 4011,
  /* 1502 */ 4061, 3663, 4250, 2971, 4045, 4026, 4031, 4035, 3903, 2368, 2474, 2472, 2476, 4039, 4082, 2368, 2368, 2368,
  /* 1520 */ 4088, 2456, 2368, 2368, 2368, 4092, 3735, 4099, 2368, 2368, 2342, 4105, 3427, 4111, 3235, 4232, 3220, 4115,
  /* 1538 */ 4120, 2637, 2368, 2368, 2368, 4125, 2456, 2368, 2368, 2368, 3837, 2368, 2368, 2368, 2368, 4498, 2368, 2603,
  /* 1556 */ 3850, 4139, 3094, 3855, 4063, 2405, 4129, 2368, 2368, 2368, 2368, 4636, 4133, 3573, 2636, 2368, 2368, 2337,
  /* 1574 */ 4149, 3377, 4159, 4163, 2368, 3226, 2632, 2368, 2368, 2368, 4636, 4167, 2368, 2368, 2368, 2368, 3054, 4176,
  /* 1592 */ 2368, 3412, 2368, 2368, 2368, 2368, 2368, 3363, 2368, 3196, 3416, 3421, 3426, 3548, 4372, 2368, 2428, 4614,
  /* 1610 */ 2572, 2253, 4598, 2368, 2368, 2740, 4621, 2368, 3657, 2368, 2368, 4620, 2577, 2368, 4145, 4210, 2368, 2368,
  /* 1628 */ 2368, 2405, 4216, 2368, 2368, 2368, 2368, 3619, 4220, 2634, 2368, 3493, 2368, 3499, 3153, 3333, 3506, 2368,
  /* 1646 */ 2368, 2375, 3513, 2368, 2368, 2368, 2368, 3520, 4225, 3379, 4231, 3224, 2935, 2368, 2368, 2400, 2368, 2368,
  /* 1664 */ 2368, 3650, 4236, 2368, 2368, 2924, 4242, 4284, 4247, 2837, 2368, 3824, 2368, 2368, 4260, 2368, 2368, 4266,
  /* 1682 */ 2368, 2368, 4273, 4283, 4247, 4425, 2672, 2464, 2368, 4288, 2368, 3706, 4318, 2368, 3953, 4294, 4303, 2672,
  /* 1700 */ 2465, 3943, 4342, 4347, 3955, 4342, 4353, 3371, 3208, 3369, 4357, 2368, 2368, 2368, 2368, 2368, 2368, 2368,
  /* 1718 */ 2368, 2516, 2368, 2368, 2119, 3593, 2793, 3601, 3623, 4366, 4370, 3163, 4376, 4380, 4384, 4388, 4392, 4396,
  /* 1736 */ 4400, 4404, 4408, 4412, 4416, 2368, 2368, 4255, 4051, 4152, 2809, 4058, 3202, 2368, 3222, 4068, 4077, 4072,
  /* 1754 */ 2368, 2368, 3509, 4318, 2801, 4465, 2368, 2368, 2368, 3828, 4469, 2671, 4583, 4476, 4487, 4360, 2880, 4198,
  /* 1772 */ 2368, 3954, 3422, 4307, 3130, 2769, 3945, 4317, 4323, 4333, 4277, 4323, 4338, 3495, 4343, 4275, 4514, 2368,
  /* 1790 */ 2368, 2368, 2368, 4520, 4318, 2368, 2368, 2368, 2368, 4524, 4528, 2368, 2368, 2368, 4422, 3261, 4582, 4054,
  /* 1808 */ 4432, 4437, 2368, 4441, 3346, 4445, 4452, 3536, 4458, 2799, 3720, 4536, 3312, 3543, 4433, 2718, 2147, 2368,
  /* 1826 */ 2368, 2368, 2368, 2368, 4543, 2368, 2368, 2368, 2368, 2368, 4543, 2817, 2368, 2368, 4547, 2621, 4551, 2894,
  /* 1844 */ 3014, 4557, 2368, 2368, 2368, 2013, 4562, 2368, 2368, 2368, 2368, 4569, 2368, 2368, 2368, 2368, 2376, 3488,
  /* 1862 */ 2368, 2368, 2368, 3494, 4042, 3224, 3334, 3527, 2368, 4121, 2689, 4573, 4530, 4000, 4579, 4587, 2895, 3447,
  /* 1880 */ 2368, 2368, 2368, 3458, 2368, 2368, 2368, 3255, 4626, 2368, 2368, 4630, 3477, 2368, 4262, 2368, 4635, 3770,
  /* 1898 */ 3589, 3078, 2368, 2368, 2368, 2368, 3111, 3091, 2368, 2368, 2368, 2368, 4647, 3099, 2368, 2368, 2368, 2368,
  /* 1916 */ 2368, 3462, 2368, 2509, 3470, 3048, 4505, 3846, 3476, 2368, 2368, 3262, 4668, 2368, 2368, 2368, 2368, 2368,
  /* 1934 */ 2368, 2368, 2368, 4672, 2368, 3713, 2368, 2368, 2368, 2368, 3270, 2368, 3086, 2368, 3274, 3150, 2533, 3278,
  /* 1952 */ 3282, 3286, 3290, 3294, 4779, 6827, 6050, 4677, 4687, 4704, 4718, 4718, 4718, 4718, 4716, 4718, 4718, 4724,
  /* 1970 */ 4708, 4718, 4717, 4690, 4718, 4718, 4719, 4712, 4723, 4718, 4693, 4728, 4732, 4744, 4698, 4698, 4734, 4735,
  /* 1988 */ 4736, 4737, 4698, 4700, 4741, 4696, 4696, 4747, 4751, 4761, 4757, 4754, 4765, 4769, 4769, 4773, 4784, 4776,
  /* 2006 */ 4780, 4788, 4815, 5327, 4827, 5325, 5650, 5327, 5327, 5327, 4907, 4864, 4894, 4894, 4894, 4894, 4895, 4894,
  /* 2024 */ 4894, 5145, 4835, 5136, 5139, 4842, 4894, 4894, 4894, 5138, 7088, 4856, 4802, 4810, 5327, 6137, 5327, 5327,
  /* 2042 */ 4831, 5327, 4865, 4894, 4894, 4894, 4942, 5136, 5139, 5142, 4845, 5394, 4857, 4802, 4803, 4810, 5327, 5327,
  /* 2060 */ 5327, 5110, 4879, 5327, 5327, 5654, 5327, 5327, 5327, 5103, 4857, 4857, 4802, 4803, 4837, 5138, 5142, 4945,
  /* 2078 */ 4801, 4809, 5327, 5327, 4872, 6400, 5327, 5327, 4904, 4908, 4912, 5653, 5327, 5327, 5327, 5126, 5136, 5136,
  /* 2096 */ 5140, 5140, 5140, 5140, 5141, 4894, 4942, 4883, 5139, 4893, 4946, 4893, 5145, 5327, 5327, 4906, 4910, 4894,
  /* 2114 */ 4942, 4838, 5143, 5327, 5652, 5327, 5327, 5327, 5127, 4894, 4895, 4837, 5142, 5136, 5136, 5139, 5140, 5140,
  /* 2132 */ 5140, 5142, 4902, 5327, 5653, 5480, 4885, 5327, 5655, 4894, 4894, 4894, 5144, 5327, 5327, 5654, 5327, 7078,
  /* 2150 */ 7071, 5140, 5141, 4894, 4894, 4866, 4861, 4894, 5327, 5136, 5137, 5140, 5141, 4894, 4866, 5327, 5134, 4894,
  /* 2168 */ 5480, 5137, 5141, 4866, 5138, 4896, 4897, 4898, 4902, 5327, 4921, 7081, 4925, 4956, 4939, 4950, 4954, 4987,
  /* 2186 */ 4987, 4987, 4987, 4960, 4967, 4964, 4974, 4978, 4985, 4987, 4987, 4988, 4970, 7014, 4987, 4994, 4992, 5065,
  /* 2204 */ 4995, 4999, 5003, 5007, 4981, 5012, 5011, 5021, 5016, 5019, 5025, 5026, 5030, 5033, 5034, 5038, 5042, 5043,
  /* 2222 */ 5047, 5055, 5049, 5051, 5148, 5059, 5063, 5069, 5073, 5077, 5081, 5083, 5087, 5091, 5095, 7143, 5427, 5327,
  /* 2240 */ 5327, 5107, 5327, 5483, 5100, 5327, 5327, 5134, 5136, 5140, 5142, 5117, 5327, 5186, 5327, 5485, 5338, 5327,
  /* 2258 */ 6353, 5327, 5327, 5136, 5136, 5136, 5136, 5137, 5140, 5140, 5140, 4893, 4894, 4894, 6355, 5327, 5327, 5327,
  /* 2276 */ 5152, 6354, 5327, 5327, 5327, 5154, 5353, 5327, 5327, 5327, 5156, 5554, 5162, 6045, 5875, 5167, 5181, 5656,
  /* 2294 */ 6163, 5327, 4887, 5126, 6430, 5192, 5196, 5198, 5198, 5204, 5198, 5198, 5198, 5200, 5208, 5209, 5213, 5217,
  /* 2312 */ 5220, 5222, 5226, 5231, 5229, 5235, 5237, 5238, 5244, 5242, 5248, 5253, 5252, 5257, 5261, 5264, 5327, 5327,
  /* 2330 */ 6266, 4871, 5327, 5528, 5348, 5822, 5354, 5327, 5327, 5327, 5172, 5276, 5327, 5327, 5327, 5173, 5307, 5327,
  /* 2348 */ 5327, 5327, 5271, 5321, 6639, 5327, 5327, 5184, 5373, 5431, 5327, 5346, 5352, 5359, 5327, 5327, 6792, 5364,
  /* 2366 */ 5327, 5278, 5327, 5327, 5327, 5327, 4851, 5984, 5681, 5327, 5327, 5327, 5290, 6251, 5387, 5983, 5680, 5327,
  /* 2384 */ 4889, 5327, 5301, 5650, 5649, 5327, 5327, 5280, 5284, 5905, 4794, 5676, 5680, 4793, 5675, 5679, 5327, 4904,
  /* 2402 */ 6522, 6812, 5580, 5327, 5327, 5327, 5332, 5283, 5327, 6169, 5327, 5327, 5281, 5472, 4791, 5708, 6480, 5331,
  /* 2420 */ 5672, 5676, 6481, 5327, 4904, 7060, 7066, 5961, 5327, 5327, 5327, 5336, 5516, 5327, 6168, 5327, 5327, 5311,
  /* 2438 */ 5327, 5327, 5327, 5272, 5327, 5905, 5707, 5678, 5906, 5674, 5678, 6049, 5962, 5327, 5327, 5327, 5368, 5677,
  /* 2456 */ 6049, 5327, 5327, 5327, 5347, 5708, 5986, 5327, 5327, 5326, 5327, 5327, 5327, 5513, 5829, 6179, 5327, 5327,
  /* 2474 */ 5327, 6685, 5327, 5327, 5327, 6694, 5327, 6166, 5830, 5987, 5327, 5327, 5327, 6707, 5327, 6730, 5405, 5327,
  /* 2492 */ 5327, 5327, 6725, 5406, 5327, 5327, 5327, 5374, 5327, 7105, 5327, 5327, 5327, 6727, 5327, 6733, 6730, 5327,
  /* 2510 */ 5327, 6731, 6239, 5327, 6733, 6731, 5327, 4928, 6459, 5327, 5101, 6183, 6176, 4914, 6049, 5327, 5327, 5327,
  /* 2528 */ 6730, 5405, 5327, 6898, 5327, 5327, 5327, 6737, 5327, 5470, 6079, 5327, 5327, 5327, 6805, 5410, 5419, 5436,
  /* 2546 */ 5440, 5440, 5440, 5440, 5441, 5445, 5448, 5449, 5453, 5453, 5453, 5454, 5464, 5462, 5464, 5464, 5464, 5464,
  /* 2564 */ 5460, 5458, 5468, 5327, 5111, 4683, 5322, 4915, 5327, 5327, 5327, 5469, 6101, 5327, 5327, 5327, 5472, 6170,
  /* 2582 */ 5326, 5355, 5422, 5327, 6100, 7020, 6049, 5360, 5496, 5327, 5303, 5327, 6829, 5327, 5502, 5511, 5327, 5327,
  /* 2600 */ 5327, 5481, 4917, 5327, 5327, 5327, 5482, 6671, 5327, 5302, 5327, 5135, 5136, 5136, 5136, 5138, 5140, 5140,
  /* 2618 */ 5140, 4894, 5534, 5327, 5327, 5327, 5487, 5327, 6688, 5532, 5327, 5146, 5327, 5327, 5147, 5327, 5327, 6073,
  /* 2636 */ 6073, 6073, 5327, 5327, 5327, 6251, 6689, 5533, 5327, 5327, 5327, 6910, 5538, 5327, 5327, 5327, 5489, 5967,
  /* 2654 */ 5327, 5327, 5327, 5498, 5415, 5327, 6099, 5327, 5146, 6252, 5327, 5155, 5553, 5559, 6045, 5327, 5478, 5327,
  /* 2672 */ 5327, 5327, 5484, 5327, 5854, 4820, 5963, 5327, 5544, 5560, 5566, 5327, 5327, 5327, 5520, 5565, 5327, 5327,
  /* 2690 */ 5327, 5522, 5686, 5154, 5552, 5558, 5564, 5570, 5327, 5327, 5327, 5573, 4912, 4916, 5327, 5327, 5327, 5490,
  /* 2708 */ 5324, 6734, 6729, 5327, 6407, 5327, 5327, 6100, 6042, 5327, 5430, 5327, 5124, 5327, 5168, 5659, 5791, 5332,
  /* 2726 */ 5157, 5584, 6925, 5154, 5158, 5585, 6926, 5592, 5327, 5327, 5327, 5609, 4912, 5605, 5327, 5327, 5327, 7002,
  /* 2744 */ 5326, 5415, 5327, 6098, 6042, 5429, 5327, 6044, 5430, 6353, 5587, 6928, 5327, 5327, 5327, 5631, 5327, 5612,
  /* 2762 */ 5586, 6927, 5327, 5171, 6049, 6798, 5604, 5327, 5327, 5327, 5652, 5327, 5327, 5966, 5327, 5327, 5327, 5580,
  /* 2780 */ 6735, 5327, 6098, 5327, 5183, 5327, 6165, 6045, 5431, 5963, 5327, 5185, 5327, 5147, 5327, 5327, 6292, 5400,
  /* 2798 */ 6927, 5327, 5327, 5327, 7043, 5648, 5327, 5398, 6925, 6929, 5327, 5185, 5327, 6166, 6878, 5327, 5967, 5327,
  /* 2816 */ 6735, 5327, 6099, 6099, 6099, 5962, 5327, 5327, 5271, 5639, 5400, 6928, 5327, 5187, 5327, 5327, 5663, 6367,
  /* 2834 */ 5397, 5401, 6929, 5327, 5187, 6820, 5110, 5660, 5617, 6733, 5327, 5297, 5327, 5327, 5174, 6790, 6043, 5430,
  /* 2852 */ 5963, 5327, 5327, 6442, 6358, 5327, 5939, 5626, 6433, 6043, 6355, 5327, 5637, 6392, 5354, 5327, 5327, 5327,
  /* 2870 */ 7058, 6737, 5692, 5484, 6391, 6395, 5327, 5327, 5703, 6393, 5327, 5327, 5327, 5654, 5618, 6394, 5327, 5327,
  /* 2888 */ 5327, 7072, 5929, 5327, 6390, 5327, 6736, 5327, 6366, 5428, 5327, 5327, 6389, 5621, 5327, 5327, 5716, 6390,
  /* 2906 */ 6735, 5327, 5619, 5354, 5327, 6357, 5620, 5327, 5327, 5327, 7073, 5792, 5354, 5327, 6416, 6736, 5426, 5808,
  /* 2924 */ 5327, 5327, 6519, 6809, 6416, 5427, 5327, 6416, 5622, 5327, 6166, 5327, 5327, 5325, 5327, 5327, 6820, 6166,
  /* 2942 */ 5427, 5327, 6166, 5718, 6855, 5327, 6855, 5327, 5327, 6556, 6485, 5426, 6735, 5426, 5426, 5327, 5327, 5327,
  /* 2960 */ 6490, 5482, 5426, 5425, 7090, 5327, 5327, 6557, 6486, 5726, 6049, 5327, 5327, 5329, 5328, 5327, 6246, 5327,
  /* 2978 */ 5730, 4850, 5327, 6049, 4848, 5125, 5734, 5743, 5747, 5737, 5739, 5739, 5739, 5763, 5739, 5739, 5766, 5774,
  /* 2996 */ 5778, 5769, 5770, 5782, 5782, 5770, 5785, 5786, 5786, 5786, 5786, 5787, 6279, 6359, 5327, 5528, 5327, 5949,
  /* 3014 */ 5327, 5327, 5327, 5655, 5327, 5327, 5327, 4852, 5797, 5327, 5327, 6569, 5750, 5756, 5699, 5814, 5840, 5845,
  /* 3032 */ 5327, 5327, 5331, 5327, 5327, 5327, 6049, 7072, 5659, 5791, 5327, 5327, 6662, 6282, 5327, 5873, 5327, 5327,
  /* 3050 */ 5332, 5487, 5887, 6747, 5327, 5327, 5332, 6521, 5600, 5856, 5879, 5885, 6745, 5880, 5886, 6746, 6049, 5127,
  /* 3068 */ 5793, 5327, 5327, 5332, 6690, 5891, 5327, 5327, 5655, 5269, 5327, 5327, 5327, 5661, 5546, 6845, 6849, 5900,
  /* 3086 */ 5327, 5327, 6663, 5327, 5327, 6848, 5899, 5109, 5327, 5327, 5327, 5662, 6510, 5898, 4935, 5327, 5327, 5334,
  /* 3104 */ 5327, 5904, 5792, 5327, 5327, 5336, 5937, 5327, 5327, 5341, 6801, 5123, 5327, 6368, 6405, 5327, 7104, 5327,
  /* 3122 */ 4905, 4909, 4913, 5109, 5327, 5327, 5891, 5327, 5653, 5111, 5327, 5327, 6066, 5327, 5267, 5327, 5327, 5327,
  /* 3140 */ 5695, 5915, 4935, 5327, 5327, 5428, 5327, 6042, 7074, 5920, 5327, 5327, 6664, 5327, 5327, 6702, 5327, 5327,
  /* 3158 */ 6719, 6121, 5123, 6366, 5327, 6407, 6167, 5964, 5327, 5327, 6728, 6048, 5431, 5652, 5481, 5327, 5327, 6730,
  /* 3176 */ 5964, 5327, 5327, 5327, 5378, 5925, 5916, 5327, 5327, 5327, 5706, 5341, 5924, 5915, 5109, 5426, 6706, 6444,
  /* 3194 */ 5109, 5808, 5327, 5327, 6732, 6240, 5935, 5947, 5327, 5327, 5471, 5327, 5327, 5354, 5327, 5327, 5431, 5428,
  /* 3212 */ 5933, 5945, 5327, 5327, 5477, 5327, 5515, 5954, 5327, 5327, 5484, 6717, 5327, 5327, 5485, 5327, 6047, 5327,
  /* 3230 */ 5327, 5327, 5342, 5336, 5516, 6045, 5327, 5327, 5327, 5722, 5327, 5327, 5964, 5327, 5630, 5327, 5964, 5327,
  /* 3248 */ 5632, 5327, 5964, 5336, 6169, 6169, 5633, 5327, 5327, 7003, 7111, 6166, 5327, 6167, 5327, 5327, 5327, 5292,
  /* 3266 */ 6167, 5327, 6169, 6407, 5327, 6655, 4931, 4935, 5327, 6730, 5803, 5958, 6737, 5971, 6383, 6492, 5979, 5991,
  /* 3284 */ 5997, 5996, 5995, 5996, 6001, 6004, 6007, 6011, 6014, 6015, 6019, 6020, 6021, 6021, 6019, 6019, 6025, 6029,
  /* 3302 */ 6030, 6036, 6037, 6036, 6034, 6036, 6036, 6036, 6035, 6041, 5327, 5327, 5485, 5336, 5327, 6656, 4932, 5109,
  /* 3320 */ 6706, 5425, 6706, 6706, 6530, 6532, 6730, 6238, 6054, 5327, 5327, 5480, 5327, 5327, 5854, 5323, 6045, 6446,
  /* 3338 */ 6060, 5327, 6446, 5327, 5327, 6077, 6084, 6092, 5327, 5327, 7018, 5327, 5327, 7026, 6047, 5118, 6096, 5327,
  /* 3356 */ 5327, 5486, 5337, 5327, 6113, 4823, 6114, 5428, 4930, 4934, 5327, 5327, 7073, 6356, 5428, 6356, 5327, 5428,
  /* 3374 */ 6861, 5327, 6374, 5327, 5483, 5327, 5186, 6166, 6737, 5096, 6126, 5327, 6134, 6143, 5327, 5327, 5327, 5827,
  /* 3392 */ 6160, 5432, 5432, 5327, 5327, 7080, 5327, 5327, 5575, 6174, 5710, 5327, 5327, 5507, 5327, 5327, 5327, 5480,
  /* 3410 */ 5136, 5136, 5102, 6184, 5709, 5331, 6056, 5327, 5327, 5327, 5867, 6735, 5327, 5327, 5327, 5893, 6702, 5480,
  /* 3428 */ 5327, 5327, 5187, 6160, 5327, 5327, 5327, 5894, 5366, 6204, 6215, 5712, 5327, 5327, 5327, 5857, 5369, 6214,
  /* 3446 */ 5711, 5327, 5327, 7095, 5327, 5327, 7104, 5327, 5327, 6213, 6219, 5327, 5327, 5522, 5687, 7102, 5327, 6656,
  /* 3464 */ 4933, 5327, 5327, 7106, 5327, 5327, 6055, 5327, 5327, 5327, 5910, 5925, 6198, 5327, 5327, 5327, 5940, 6657,
  /* 3482 */ 6223, 5327, 5327, 5596, 4911, 6229, 6224, 5327, 5327, 5327, 5964, 5327, 6244, 5327, 5327, 5327, 5973, 6238,
  /* 3500 */ 5662, 5327, 5327, 5630, 5327, 5327, 6445, 5146, 6360, 5327, 5327, 5327, 6088, 6109, 6225, 5327, 5327, 5632,
  /* 3518 */ 5327, 6406, 5332, 6250, 6260, 5327, 5327, 5327, 6047, 6145, 5327, 5327, 5327, 6046, 6258, 6225, 5327, 5327,
  /* 3536 */ 5656, 5327, 5327, 5327, 6405, 5327, 6264, 5327, 5327, 5658, 6357, 5327, 5854, 6889, 5327, 6446, 6108, 6254,
  /* 3554 */ 5327, 5327, 5327, 6072, 5327, 6663, 5327, 5663, 5548, 5802, 5485, 6367, 6042, 5327, 5332, 4907, 4911, 5327,
  /* 3572 */ 6273, 5327, 5327, 5327, 6073, 6253, 5327, 5327, 5327, 6101, 5327, 6048, 5327, 5327, 6046, 5327, 6049, 5327,
  /* 3590 */ 5327, 5660, 5327, 5662, 7011, 6286, 5327, 5332, 5157, 5613, 5587, 5327, 6294, 6290, 5327, 5332, 5758, 5327,
  /* 3608 */ 5125, 5327, 5323, 6045, 5146, 6360, 5327, 6407, 5327, 5126, 6728, 5327, 4904, 6522, 6779, 7117, 6417, 7119,
  /* 3626 */ 6207, 6209, 6209, 6209, 6209, 6302, 6306, 6313, 6309, 6317, 6318, 6325, 6322, 6329, 6330, 6330, 6334, 6335,
  /* 3644 */ 6335, 6335, 6335, 6335, 6339, 6342, 5327, 5332, 6521, 6811, 5146, 4929, 6460, 5327, 5336, 5638, 5187, 5546,
  /* 3662 */ 5800, 5472, 5327, 5327, 5327, 6105, 5327, 6352, 5659, 5327, 5336, 6169, 5327, 5327, 6738, 5327, 5327, 6804,
  /* 3680 */ 5651, 6365, 5327, 5327, 5327, 6108, 5498, 5327, 5335, 6372, 7049, 5327, 5380, 6361, 5473, 6381, 5327, 6831,
  /* 3698 */ 5327, 6387, 5327, 5327, 5660, 5611, 5327, 6399, 5327, 5327, 5660, 6844, 5327, 6346, 6345, 5327, 5337, 5327,
  /* 3716 */ 5327, 6416, 6736, 6347, 5327, 5327, 5327, 6150, 4927, 5399, 6729, 5327, 5379, 5327, 5327, 5327, 7004, 6392,
  /* 3734 */ 6435, 5327, 5327, 5327, 7038, 5113, 6355, 6411, 5327, 5384, 5391, 5677, 5865, 5327, 5327, 5323, 6729, 5492,
  /* 3752 */ 6423, 5327, 5327, 5661, 6465, 5332, 5491, 6422, 5327, 5386, 5982, 5679, 5327, 6438, 6437, 6436, 6427, 6460,
  /* 3770 */ 5327, 5327, 5663, 5327, 5484, 5112, 6354, 5482, 5327, 5413, 6729, 6097, 5490, 6451, 5109, 5327, 5327, 6450,
  /* 3788 */ 5108, 5327, 5327, 5669, 6393, 5327, 6438, 6438, 6438, 6107, 6459, 5327, 5327, 5697, 5327, 6100, 5327, 5184,
  /* 3806 */ 5327, 5481, 5481, 5481, 5112, 6473, 5327, 5327, 5808, 5327, 6461, 5327, 5327, 5327, 6151, 5327, 6443, 6471,
  /* 3824 */ 5327, 5487, 5327, 5324, 5327, 5327, 5327, 5146, 6453, 5327, 5327, 5327, 6166, 6296, 6451, 5109, 5327, 5491,
  /* 3842 */ 6452, 5327, 5426, 5721, 5327, 5479, 5327, 6147, 5482, 5482, 5327, 5327, 6496, 6466, 5472, 5327, 6276, 6472,
  /* 3860 */ 5327, 5327, 5327, 6169, 6467, 5327, 7080, 5327, 5514, 5953, 5327, 5327, 5327, 6734, 6506, 5327, 5527, 5327,
  /* 3878 */ 5327, 5327, 6869, 4830, 5109, 5327, 5327, 5809, 5327, 6491, 5327, 5327, 5327, 6192, 5327, 5662, 6516, 5327,
  /* 3896 */ 5574, 5327, 6191, 5327, 5327, 5828, 6178, 5327, 5327, 5327, 6681, 6491, 5483, 5327, 6080, 5810, 5327, 5327,
  /* 3914 */ 6706, 5327, 5327, 5426, 5327, 6444, 5109, 5327, 5426, 5327, 6705, 5327, 5327, 6707, 6444, 5109, 6444, 6533,
  /* 3932 */ 6533, 6901, 5327, 5579, 5327, 5327, 5327, 6911, 5172, 5176, 6129, 5327, 5596, 6803, 5327, 5327, 5327, 6376,
  /* 3950 */ 5482, 5169, 6537, 5327, 5596, 6860, 5327, 5327, 6903, 6543, 5327, 6736, 6804, 6651, 6644, 5169, 6554, 6653,
  /* 3968 */ 5327, 6567, 6565, 6573, 6586, 6577, 6586, 6585, 6581, 6579, 6590, 6594, 6597, 6598, 6602, 6610, 6613, 6607,
  /* 3986 */ 6617, 6603, 6619, 6633, 6634, 6625, 6626, 6625, 6623, 6625, 6625, 6625, 6630, 6638, 5327, 5327, 5327, 6200,
  /* 4004 */ 5173, 5177, 6130, 5327, 5650, 4811, 5807, 6878, 5111, 6643, 6043, 4799, 4807, 5327, 4871, 5481, 5327, 4878,
  /* 4022 */ 5327, 5327, 4870, 4876, 5314, 5327, 5327, 5327, 6235, 5657, 5327, 5327, 6649, 4818, 6661, 6668, 6675, 6699,
  /* 4040 */ 6348, 6695, 5327, 5657, 5663, 5327, 5330, 5327, 5327, 5858, 5881, 5175, 6711, 5109, 5327, 5658, 6444, 6357,
  /* 4058 */ 5111, 6774, 5327, 7079, 5327, 5327, 5327, 6232, 5327, 5327, 5327, 6047, 5327, 5488, 6072, 5327, 6723, 5327,
  /* 4076 */ 5662, 5327, 5327, 5659, 5327, 5187, 6742, 6758, 5327, 5327, 5862, 5651, 5327, 6086, 6751, 6756, 6087, 6752,
  /* 4094 */ 6757, 5327, 5662, 5547, 5801, 7037, 7036, 5327, 5327, 5869, 6421, 5177, 6713, 5327, 5170, 5327, 5482, 5327,
  /* 4112 */ 6876, 5327, 6868, 5327, 6046, 5327, 5327, 6046, 5359, 5327, 5327, 5327, 6250, 4904, 6522, 6526, 6762, 6521,
  /* 4130 */ 6525, 6768, 5987, 6524, 6767, 5986, 5327, 5685, 5628, 5327, 5327, 6477, 5327, 5327, 6505, 5327, 5327, 6519,
  /* 4148 */ 6523, 5176, 6712, 5327, 5169, 5327, 5482, 5327, 5661, 5661, 4822, 5327, 6875, 6737, 6772, 6045, 5327, 5327,
  /* 4166 */ 5472, 6524, 6924, 6763, 5327, 5719, 5327, 5327, 5327, 6677, 6525, 5588, 5985, 5327, 5720, 5327, 5327, 5808,
  /* 4184 */ 6047, 6072, 6072, 5327, 5327, 5905, 5673, 5185, 5327, 6877, 5110, 6044, 5327, 5470, 5327, 5753, 5323, 6044,
  /* 4202 */ 5122, 5131, 5163, 6071, 5327, 5327, 5327, 6252, 4795, 5825, 5327, 5327, 5910, 6846, 6521, 6778, 6783, 6049,
  /* 4220 */ 6784, 5327, 5327, 5327, 6279, 5172, 6788, 5327, 5327, 5911, 6847, 6796, 5327, 5472, 5327, 5327, 6818, 5327,
  /* 4238 */ 5327, 5327, 6280, 6360, 6816, 5327, 5327, 5327, 6282, 5327, 6824, 5651, 5327, 5759, 5327, 5327, 5841, 5327,
  /* 4256 */ 5327, 5327, 5656, 4871, 5523, 6840, 5327, 5327, 5939, 5327, 5523, 6835, 5327, 5327, 5965, 5327, 5327, 5522,
  /* 4274 */ 6839, 6356, 5327, 5327, 5974, 5327, 5327, 6042, 5327, 5327, 7097, 5326, 5327, 5327, 5893, 6802, 5327, 5327,
  /* 4292 */ 6062, 5815, 5327, 7098, 5325, 5327, 5834, 5327, 5327, 5331, 5288, 5660, 6853, 5186, 6867, 6859, 5323, 7098,
  /* 4310 */ 5327, 5836, 5472, 5327, 5327, 6737, 6098, 5974, 6356, 5327, 5327, 5327, 6298, 5327, 5975, 5327, 5327, 6118,
  /* 4328 */ 6122, 5327, 5327, 5506, 5327, 6865, 5327, 5327, 5327, 6377, 5327, 5975, 5327, 6873, 6356, 6804, 5327, 5327,
  /* 4346 */ 5974, 5428, 6804, 5327, 5327, 6139, 5327, 6903, 5327, 5327, 6903, 5430, 5428, 5327, 5430, 5327, 5528, 5327,
  /* 4364 */ 5327, 5653, 6149, 6153, 5406, 6405, 5327, 6882, 5327, 5327, 6188, 6196, 6732, 6887, 4680, 6883, 5327, 6406,
  /* 4382 */ 6730, 6407, 6895, 6069, 6907, 6915, 6921, 6917, 6546, 6549, 6548, 6933, 6939, 6550, 6936, 6943, 6947, 6955,
  /* 4400 */ 6950, 6951, 6959, 6962, 6966, 6969, 6969, 6973, 6974, 6975, 6979, 6981, 6988, 6987, 6985, 6992, 6996, 6999,
  /* 4418 */ 5327, 5327, 6268, 5327, 6150, 6154, 5327, 5186, 6167, 6804, 5327, 5819, 5327, 5649, 5327, 6734, 5327, 5327,
  /* 4436 */ 6368, 6368, 5430, 5327, 5317, 7008, 5338, 5656, 5188, 7024, 7030, 5327, 5327, 6269, 5327, 5660, 5327, 7034,
  /* 4454 */ 5327, 5327, 6281, 5327, 5327, 7042, 7047, 5327, 5846, 5327, 7071, 5664, 7054, 7053, 5665, 6152, 6156, 5185,
  /* 4472 */ 6167, 5327, 5964, 6169, 5658, 5327, 6359, 5327, 5850, 5327, 6405, 5327, 5327, 5332, 5293, 6737, 5327, 5327,
  /* 4490 */ 6729, 5329, 5327, 5327, 5282, 6049, 7062, 5647, 5327, 5327, 6297, 6452, 6519, 7061, 7067, 5327, 5852, 5327,
  /* 4508 */ 6890, 6155, 5186, 6169, 5327, 5485, 5645, 5327, 5327, 5327, 6406, 5327, 5327, 6520, 5599, 5644, 6519, 5598,
  /* 4526 */ 5643, 5647, 5327, 6100, 6100, 6100, 5327, 5327, 6353, 5187, 6154, 5185, 6168, 5327, 5852, 5327, 6891, 5540,
  /* 4544 */ 5686, 5642, 5646, 5327, 7085, 6156, 6415, 5338, 5327, 5327, 6359, 6734, 5327, 7091, 5327, 5327, 5327, 6407,
  /* 4562 */ 5640, 6559, 5327, 5327, 6353, 5964, 5327, 5336, 4908, 5641, 6560, 5642, 6561, 5327, 6100, 6099, 6098, 6413,
  /* 4580 */ 6168, 5327, 5484, 5327, 5339, 5327, 5327, 5336, 5327, 5327, 6359, 7102, 5327, 5327, 5327, 6457, 5337, 5327,
  /* 4598 */ 6358, 5327, 6367, 5429, 5327, 7110, 5327, 5327, 5327, 6496, 5687, 6169, 5327, 5327, 6357, 5620, 5638, 7115,
  /* 4616 */ 5327, 5327, 6404, 6539, 7002, 5688, 5327, 5327, 5327, 6506, 5486, 5327, 6366, 5429, 5941, 5327, 5327, 5327,
  /* 4634 */ 6512, 6367, 5327, 5327, 5327, 6520, 5335, 5327, 5327, 5327, 6558, 5659, 5657, 5327, 5340, 6800, 6847, 5334,
  /* 4652 */ 5333, 6499, 7137, 6501, 7132, 6500, 7125, 7123, 7123, 7123, 7123, 7124, 5327, 5327, 5327, 6645, 7135, 7132,
  /* 4670 */ 7129, 7141, 5657, 5327, 5327, 5327, 6670, 4194304, 4194304, 4194304, 536870912, 2, 603979776, 0,
  /* 4684 */ -536870912, -536870912, -536870912, 0, 8388736, 8388864, 8390656, 553725952, 16928768, 8388608, 75497472,
  /* 4695 */ 1484783616, 478150656, 478150656, 1551892480, 1551892480, 1551892480, 1551892480, 343932928, 1551892480,
  /* 4704 */ 541065216, 4194304, 1082130432, 8388608, 8388736, 5242880, 1082130432, 1082130432, 75497472, 1082130432,
  /* 4714 */ 8388608, 8388608, 8392448, 8390656, 8388608, 8388608, 8388608, 8388608, 8388736, 16814096, 8388608,
  /* 4725 */ 8388608, 8388608, 33554432, 1484783616, 1484783616, 1484783616, 1484783616, 1551892480, 1484783616,
  /* 4734 */ 1551892480, 1551892480, 343932928, 343932928, 343932928, 343932928, 1551892480, 1551892480, 478150656,
  /* 4743 */ 343932928, 1551892480, 478150656, 1484783616, 1551892480, 8912896, 64, 8912896, 4194368, 8914944,
  /* 4753 */ 1082654720, 8388672, 8913152, 8388672, 8388672, 1082130496, 8388672, 8388672, 8913152, 1082654720, 8388704,
  /* 4764 */ 8388672, 8392512, 8392544, 8392544, 1552416768, 8392544, 8392544, 8392544, 8392544, 75501408, 8392544,
  /* 4775 */ 1551892576, 1551892544, 478154592, 478154592, 2, 4, 8, 262144, 262144, 75501408, 1551892544, 1552416768,
  /* 4787 */ 1551892544, 1048576, 2097152, 2097152, 0x80000000, 2048, 8192, 49152, 65536, 262144, 524288, 4194304, 0,
  /* 4800 */ 8388608, 128, 128, 2048, 2048, 2048, 2048, 0, 256, 2048, 2048, 0, 0, 0, 57, 0, 1536, 1792, 0, -536870912,
  /* 4820 */ 0, 0, 1280, 0, 0, 0, 928, 0, 8192, 16781312, 0, 0, 131072, 201326592, 1073741824, 1536, 524288, 96, 64,
  /* 4839 */ 524288, 524288, 64, 64, 64, 0, 96, 96, 96, 1048576, 0, 0x80000000, 8, 0, 0, 16, 32, 0, 128, 128, 128, 128,
  /* 4861 */ 0, 524288, 96, 64, 32, 96, 96, 96, 0, 1024, 1024, 0, 0, 0, 97, 0, 16777216, 16777216, 4096, 4096, 4096, 0,
  /* 4883 */ 64, 524288, 524288, 524288, 0, 0, -1610612736, -536870912, 0, 7415808, 64, 96, 96, 96, 96, 524288, 64, 96,
  /* 4901 */ 524288, 64, 96, 0, 0, 1, 2, 8, 16, 64, 128, 512, 1024, 8192, 32768, 262144, 1073741824, 0x80000000, 0, 0,
  /* 4921 */ 0, 4096, 536870912, 0x80000000, 0, 4, 0, 32, 64, 1024, 2048, 8192, 1048576, 2097152, 268435456, 1073741824,
  /* 4937 */ 0, 0, 32, 33, 40, 96, 96, 524288, 96, 96, 128, 128, 128, 160, 1056, 1048608, 2097184, 4194336, 536870944,
  /* 4956 */ 32, 32, 4, -2147352576, 32, 524320, 32, -2147352576, 33, 34, 34, 40, 32, 97, 33, 33, 40, 1120, 48, 1120,
  /* 4976 */ 96, 4195360, 6291488, 2097184, 2097184, 4194336, 32, 2098208, 4457568, 4194336, 4194336, 32, 32, 32, 32,
  /* 4991 */ 40, 4195104, 6292512, 32, 32, 32, 56, 0, 4, 4196128, 34, 42, 32, 32, 327155712, 34, 1056, 1056, 32, 1056,
  /* 5011 */ -322860376, -322860376, -322859360, -322860375, -322860376, -322860375, -322859351, -321810776, -322859352,
  /* 5020 */ -322859352, -322859352, -322859352, -322859360, -322859352, -322859352, -322859351, -322859352, -322859352,
  /* 5029 */ -322859350, -1396439968, -1396439968, -322859350, -1396439968, -1396439968, -1396439968, -1396439968,
  /* 5037 */ -1396437280, -1396437280, -1396437280, -1396437280, -1396437280, -322695456, -322597144, -322597143,
  /* 5045 */ -322597144, -322597144, -1394340000, -322597143, -322597144, -322597152, -321548568, -322597144,
  /* 5053 */ -322597144, 32, -1394339992, -322597152, -322597144, -321548576, 32, 32, 168, 40, 32, 160, 32, 32, 56, 33,
  /* 5069 */ 41, 42, 224, 1256, 43, 106, 293609515, 293625899, 293724203, -322859352, 293726779, 293726843, 297921083,
  /* 5082 */ 830597691, 293726779, 293726779, 297921083, 297921083, -322859480, -322859352, 297921083, -321810776,
  /* 5091 */ -322597144, -322597144, -321548568, -37720533, -37458325, 0, 0, 0, 160, 48, 0, 0, 0, 497, 512, 1024, 65536,
  /* 5108 */ 201326592, 1073741824, 0, 0, 0, 512, 0, 0x80000000, 0, 486539264, 0, 0, 0, 768, 4, 0, 0, 1048576, 0, 0, 0,
  /* 5129 */ 2048, 0, 0, 1048576, 4194304, 0, 0, 524288, 524288, 524288, 524288, 64, 64, 64, 64, 96, 96, 0, 0, 0, 32, 0,
  /* 5151 */ 96, 4194304, 1048576, 0, 0, 1, 4, 8, 32, 192, 3072, 0, 1048576, 1048576, 4194304, 536870912, 4202496,
  /* 5168 */ 4194304, 0, 0, 1024, 0, 0, 4, 8, 16, 128, 1048576, 2097152, 67108864, 0, 4194304, 5251072, 0, 0, 0, 4096,
  /* 5188 */ 0, 0, 0, 144, 83886080, 0, 32, 536870912, 1048576, 577767552, -1073676221, -1073676221, -1073676221,
  /* 5201 */ -1073676221, 577833091, 577833091, -1073676221, -1073676217, -1073676221, -1073676221, -989790141,
  /* 5209 */ 577833091, 577833091, 577833091, 577833091, 577968259, 577833091, 577833091, 577833091, -1569650557,
  /* 5218 */ -1569650553, -495908733, -495908669, -495908669, -495908669, -495908669, 577841287, -495908669, -495908669,
  /* 5227 */ -227473213, 577841287, -227473213, -227473209, -227473213, -227473213, -227473213, -227473213, -495908669,
  /* 5236 */ -269096960, -268572672, -269096960, -269096960, -268572672, -268572672, -268572672, -269096960, -268572672,
  /* 5245 */ -268572672, -268572672, -268572672, -268572092, -268572076, -268572076, -269096893, -268571948, -268572076,
  /* 5254 */ -268572076, -268572076, -268572076, -268572076, -268572076, -268572605, -268572605, -268572076, -268572605,
  /* 5263 */ -661309, -137021, -268572073, -136489, 0, 0, 524288, 2097152, 0, 0, 8, 32, 64, 0, 3, 65536, -1073741824, 0,
  /* 5281 */ 0, 1, 8, 131072, 262144, 0x80000000, 0, 7407616, 536870912, 0, 0, 1, 16, 32, 192, 256, 0, 7542784, 0,
  /* 5300 */ 536870912, 301989888, 0, 0, 0, 9616, 134512640, 0, 16115712, 251658240, -536870912, 16640000, 251658240,
  /* 5313 */ -536870912, 0, 0, 786528, 0, 0, 1114112, 0x80000000, 0, 520093696, 0, 0, 0, 16384, 0, 0, 0, 0, -1073741824,
  /* 5332 */ 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 4, 8, 0, 1048576, 4194304, 16777216, 67108864, 268435456, 67108864,
  /* 5353 */ 268435456, 536870912, 0, 0, 0, 1040, 32, 0, 0, 0, 16392, 33554432, 536870912, 0, 0, 1, 48, 448, 1024, 6144,
  /* 5373 */ 196608, 0, 0, 0, 32232, 4096, 131072, 0, 0, 0, 118784, -1610612736, -536870912, 2048, 8192, 114688, 262144,
  /* 5390 */ 524288, 49152, 65536, 262144, 2097152, 128, 128, 128, 1024, 2048, 8192, 32768, 131072, 262144, 7340032,
  /* 5405 */ 2097152, 8388608, 67108864, 0, 0, 303232, 16384, 0, 1040, 16392, 0, 65536, 33554432, 0, 16384, 16392,
  /* 5421 */ 303232, 16392, 0, 33619968, 0, 0, 2097152, 0, 0, 0, 256, 0, 0, 0, 416, 33619968, 8388608, 16392,
  /* 5439 */ -2143010807, 134217984, 134217984, 134217984, 134217984, 134219024, -2059124728, -2059124728, 134522256,
  /* 5448 */ -2059124728, -2059124728, -2059124728, -2059124728, -2008792824, -2008792824, -2008792824, -2008792824,
  /* 5456 */ -2008792824, -125895443, -125895187, -125895187, -125895187, -125895187, -125895443, -125895187,
  /* 5464 */ -125895443, -125895443, -125895443, -125895443, -125895187, 0, 0, 0, 262144, 0, 0, 0, 155648, 0, 256,
  /* 5479 */ 134217728, 0, 0, 0, 524288, 0, 0, 0, 64, 0, 0, 0, 96, 256, 4096, 8192, 245760, 88342528, 0x80000000, 0, 0,
  /* 5500 */ 1, 16384, 0, 16648, 138674176, 0x80000000, 0, 31981, 947814400, -1073741824, 0, 32237, 32237, 0, 0, 2, 4,
  /* 5517 */ 1024, 12288, 262144, 8320, 16384, 0, 0, 2, 8, 16, 16648, 0, 0, 0, 1048576, 8290304, 134217728, 805306368,
  /* 5535 */ -1073741824, 0, 0, 32232, 32232, 0, 0, 2, 12, 0, 1408, 0, 0, 2, 16, 268435456, 96, 8, 32, 3264, 12288,
  /* 5556 */ 16384, 163840, 16384, 163840, 262144, 524288, 7340032, 134217728, 7340032, 134217728, 805306368,
  /* 5567 */ 1073741824, 0x80000000, 0, 3520, 3520, 3520, 0, 0, 2097152, 4194304, 0, 0, 1280, 0, 16777216, 67108864,
  /* 5583 */ 536870912, 3072, 12288, 16384, 32768, 131072, 262144, 524288, 4194304, 0, 3328, 3328, 3328, 0, 8, 16, 64,
  /* 5600 */ 128, 3072, 4096, 8192, 32768, 262144, 1073741824, 0, 0, 0, 8, 32, 192, 1024, 2048, 8192, 16384, 16, 64,
  /* 5619 */ 128, 8192, 32768, 2097152, 536870912, 0, 0, 128, 2048, 8192, 32768, 0, 0, 2, 8192, 0, 0, 67108864, 0, 8,
  /* 5639 */ 64, 128, 1024, 2048, 4096, 8192, 65536, 131072, 1048576, 16777216, 0, 0, 268435456, 0, 0, 0, 16, 0, 0, 0,
  /* 5659 */ 4, 0, 0, 0, 8, 0, 0, 0, 15, 9633792, 8, 64, 128, 8192, 49152, 262144, 524288, 2097152, 8388608, 16777216,
  /* 5679 */ 33554432, 67108864, 134217728, -536870912, 0, 0, 0, 16, 64, 128, 1024, 4096, 0, 0, 8388608, 4194304, 0, 0,
  /* 5697 */ 2097152, 12582912, 0, 0, 185, 2768896, 0, 64, 128, 8192, 49152, 262144, 2097152, 8388608, 16777216,
  /* 5712 */ 469762048, -1073741824, 0, 0, 0, 8192, 32768, 2097152, 0, 0, 0x80000000, 524288, 0, 0, 1024, 2048, 65536,
  /* 5729 */ 16777216, 0, 1024, 1024, 131200, 4194304, 4194304, 0, 33570816, 33570825, 411042080, 411042080, 411042080,
  /* 5742 */ 411042080, 0, 4194304, 33570816, 33570816, 262144, 33570817, 67108864, 0, 0, 2637824, 0, 0, 3670016, 0, 0,
  /* 5758 */ 4456448, 0, 0, 0, 786496, 411042080, 411042084, 411042080, 411042080, 415236384, 176177209, 178798649,
  /* 5770 */ 444612905, 444612905, 444612905, 444612905, 415498528, 178798649, 178798649, 178929849, 178798905,
  /* 5779 */ 178798649, 178798649, 178929849, 444612905, 444612905, -1702869719, 444612905, -87785617, -87785617,
  /* 5788 */ -87785617, -87785617, 0, 2048, 0, 65536, 16777216, 0, 0, 0, 288, 142606336, 268435456, 96, 65536, 0,
  /* 5804 */ 262144, 0, 4, 176160768, 0, 0, 0, 2097152, 0x80000000, 0, 313, 0, 0, 0, 2621440, 0, 297, 268435456, 0, 0,
  /* 5824 */ 7342080, 33554432, 0x80000000, 0, 0, 8192, 49152, 2097152, 8388608, 16777216, 1321, -1879048192, 0, 0, 2,
  /* 5839 */ 12288, 0, 1903, 4487168, 176160768, -268435456, -268435456, 0, 0, 0, 3145728, 16384, 33554432, 0, 0, 2,
  /* 5855 */ 33554432, 0, 0, 3, 12, 32, 64, 32, 256, 8388608, 134217728, 0x80000000, 0, 0, 1, 96, 256, 4096, 1280,
  /* 5874 */ 0x80000000, 0, 0, 4, 1048576, 32, 64, 1792, 2048, 28672, 262144, 28672, 262144, 4194304, 8388608, 33554432,
  /* 5890 */ 134217728, 256, 268435456, 0, 0, 8, 16, 16, 16384, 262144, 4194304, 33554432, 268435456, 1073741824, 4, 0,
  /* 5906 */ 0, 2048, 8192, 49152, 0, 3, 4, 64, 256, 12288, 262144, 4194304, 33554432, 1073741824, 0, 2048, 65536,
  /* 5923 */ 16777216, 64, 256, 1024, 2048, 12288, 4, 0, 65536, 16777216, 2, 4, 256, 1024, 12288, 262144, 0, 0, 8, 64,
  /* 5943 */ 0, 0, 12288, 262144, 4194304, 1073741824, 0, 0, 9, 0, 12288, 262144, 4194304, 0, 0, 8, 537133056,
  /* 5960 */ 268435456, 0, 0, 16777216, 67108864, 0, 0, 0, 131072, 0, 0, 0, 537133056, 0, 0, 16, 256, 512, 16777216,
  /* 5979 */ 524288, 524288, 1073741824, 524288, 3145728, 12582912, 16777216, 33554432, 67108864, 0x80000000, 0, 0,
  /* 5991 */ 33554434, 4210688, 524288, 134742272, 1149371040, 75629216, 75629216, 75629216, 75629216, 77726368,
  /* 6001 */ 75631264, 77726368, 344064672, 75629216, 75629216, 75631264, 75629216, 75631264, 75694752, 75629281,
  /* 6011 */ 143262464, 143262464, 1149371105, 143262464, 143262464, 143262464, 143262464, 210371456, 210371488,
  /* 6020 */ 210371488, 210371488, 210371488, 210373536, 210371488, 210371488, 210371488, 210437024, -575959055,
  /* 6029 */ -575954959, -575959055, -575954959, -575959055, -575959055, -575954959, -575959055, -575954959, -575954959,
  /* 6038 */ -575954959, -575954959, -575959055, -575954959, 0, 0, 0, 4194304, 0, 0, 0, 0x80000000, 0, 0, 0,
  /* 6053 */ -2143289344, 0, 8, 0, 536870912, 0, 0, 0, 4210688, 0, 0, 24, 0, 0, 672, 8519680, 67108864, 32768, 0, 0,
  /* 6073 */ 16384, 536870912, 0, 0, 0, 10616832, 1073741824, 0, 8, 0, 16, 0, 335544320, 0, 0, 31, 64, 1920, 2048,
  /* 6092 */ 8585216, 0, 0, 737, 9043968, 0, 0, 0, 8388608, 0, 0, 0, 294912, 896, 201326592, 0, 0, 32, 64, 128,
  /* 6112 */ 134217728, 928, 0, 0, 0, 9109504, 0, 2033, 6144, 11239424, 486539264, -1073741824, 0, 0, 512, 131072,
  /* 6128 */ 8388608, 67108864, 134217728, 268435456, 1073741824, 0, 335544320, 0, 225, 0, 0, 33554432, 33554432,
  /* 6141 */ 33554432, 0, 0, 655360, 0, 0, 32, 128, 0, 0, 32, 512, 2048, 32768, 262144, 524288, 8388608, 0, 0, 0, 384,
  /* 6162 */ 201326592, 0, 0, 83886080, 0, 0, 0, 8192, 0, 0, 0, 8320, 2048, 98304, 655360, 2097152, 8388608, 16777216,
  /* 6180 */ 67108864, 0x80000000, 0, 512, 1024, 6144, 98304, 655360, 32, 128, 67108864, 0, 0, 201326592, 1073741824, 0,
  /* 6196 */ 0, 335544320, 0, 192, 0, 0, 32, 262144, 448, 1024, 2048, 32768, 36864, 16385, 16385, 16385, 16385, 6144,
  /* 6214 */ 32768, 65536, 524288, 2097152, 16777216, 2097152, 16777216, 469762048, -1073741824, 2097152, 134217728,
  /* 6225 */ 268435456, -1073741824, 0, 0, 1024, 6144, 32768, 2097152, 4194304, 8388608, 0, 0, 318767104, 0, 0, 262144,
  /* 6241 */ 4, 0, 8, 1048576, 268435456, 1073741824, 0, 32768, 0, 16, 32, 64, 128, 4096, -1073741824, 0, 0, 64, 128,
  /* 6260 */ 4096, 134217728, 268435456, -1073741824, 0, 4, 0, 8, 0, 256, 256, 256, 0, 64, 128, -1073741824, 0, 0,
  /* 6278 */ 536870912, 0, 0, 1073741824, 32768, 0, 128, 0, 32, 65536, 262144, 268435456, 0, 536870914, 0, 33554432, 0,
  /* 6295 */ 536870914, 0, 0, 64, 256, 8192, 229376, 16417, 16417, 16385, 16481, 16385, 24577, 118785, 118913, 119425,
  /* 6311 */ 119425, -2147364735, 155649, 118913, 119425, 118913, 16896641, 577537, 577537, 577537, 53249, 53281, 53281,
  /* 6324 */ 577537, 53249, 53249, 53249, 53249, 53345, 577537, 577537, 577537, 577537, 577537, 1276375393, 1276375393,
  /* 6337 */ 1276375393, 1276375393, 1276375393, 1276375393, 1276899681, 1276899681, 1276375393, 1276899681, 0, 0,
  /* 6347 */ 1276641280, 0, 0, 0, 55529408, 14680064, 0, 0, 0, 16777216, 0, 0, 0, 128, 0, 0, 0, 129, 36864, 0, 0, 0,
  /* 6369 */ 33554432, 0, 0, 33, 97, 0, 0, 65, 0, 0, 0, 4202496, 0, 119296, 0, 0, 65, 65, 53248, 524288, 0, 0, 128,
  /* 6392 */ 8192, 32768, 3145728, 4194304, 536870912, 0, 0, 97, 258304, 1276116992, 0, 0, 114688, 0, 0, 0, 67108864, 0,
  /* 6410 */ 0, 0, 49152, 524288, 0, 4096, 0, 0, 8192, 32768, 32768, 8192, 245760, 1048576, 1275068416, 0, 0, 0, 32, 64,
  /* 6430 */ 8192, 114688, 262144, 3145728, 4194304, 805306368, 0, 0, 0, 1572864, 0, 0, 0, 98304, 0, 0, 0, 134217728, 0,
  /* 6449 */ 0, 4096, 8192, 229376, 1048576, 201326592, 1073741824, 0, 0, 64, 8192, 32768, 131072, 33554432, 0, 0, 0,
  /* 6466 */ 16, 268435456, 65536, 0, 262144, 512, 0x80000000, 16777216, 524288, 0, 0, 0, 8192, 131072, 33554432,
  /* 6481 */ 67108864, 134217728, 536870912, -1073741824, 65536, 131072, 1048576, 201326592, 1073741824, 0, 524288, 0,
  /* 6493 */ 524288, 0, 65, 0, 131072, 33554432, 0, 1, 1, 1, 0, 1, 65536, 131072, 201326592, 1073741824, 0, 16,
  /* 6511 */ 268435456, 0, 262144, 131072, 0, 16, 0, 262144, 0, 1, 2, 12, 16, 64, 896, 1024, 2048, 65536, 131072, 0,
  /* 6531 */ 1073741824, 0, 1073741824, 1073741824, 1073741824, 1073741824, 4096, 0, 128, 0, 147456, 0, 8192, 8388608,
  /* 6545 */ 4, 65536, -2146369536, 1610612752, 1610612752, 1610612752, 1610612752, 1677721616, 1610612752, 4194304,
  /* 6555 */ 271581184, 0, 0, 256, 8192, 65536, 131072, 16777216, 0, 0, 262148, 262148, 16, 262148, 0, 0, 292, 0, 0,
  /* 6574 */ 271581184, 262148, 786500, -1073741816, -1073741824, -1073741824, -1073740800, -1073741824, -1073741824,
  /* 6583 */ -1073741696, -1073741816, -1073676288, -1073741824, -1073741824, -1073741824, -1073741824, -1073676288,
  /* 6591 */ -1073741824, -1069547520, -1073741824, 786532, 786532, -1073741808, 786532, 786532, 786532, 786532,
  /* 6601 */ 1611415620, 1611415620, -536068028, -536068028, -536068028, -536068028, 1611416644, -1072889788,
  /* 6609 */ -1072955324, -536068028, -1072955324, -1072955324, -1072955324, -1072954300, -1072955324, -1072955324,
  /* 6617 */ 1611416644, -536068028, -536068028, -536068028, -531873724, -967897121, -951119905, -967897121, -951119905,
  /* 6626 */ -951119905, -951119905, -951119905, -967897121, -431009825, -414232609, -414232609, -951119905, -967897121,
  /* 6635 */ -951119905, -967897121, -967897121, -414232609, 0, 0, 0, 520093696, 0, 4227072, 0, 0, 0, 285212672, 802880,
  /* 6650 */ 1610612736, 0, 0, 1024, 524288, 0, 0, 256, 1024, 2048, 32768, 787520, 0, 0, 0, 1073741824, 0, 0, 803904,
  /* 6669 */ 852032, 0, 0, 1296, 0, 83886080, 4997184, -536870912, 0, 0, 1536, 1024, 0, 31, 38735808, -1006632960, 31,
  /* 6686 */ 55513024, -1006632960, 0, 1, 4, 31976, 8290304, 134217728, 38752192, -469762048, 0, 0, 0, 0, 55529408,
  /* 6701 */ -469762048, 0, 1, 64, 0, 0, 134217728, 1073741824, 0, 0, 2097152, 67108864, 134217728, 268435456, 0, 0,
  /* 6717 */ 786432, 0, 0, 0, 2033, 2048, 4980736, 0, 0, 0, 2048, 2097152, 33554432, 0, 0, 0, 32768, 0, 0, 0, 65536, 0,
  /* 6739 */ 0, 0, 98304, 65536, 131072, 4980736, 33554432, 134217728, 268435456, 536870912, 1073741824, 0x80000000,
  /* 6751 */ 1920, 2048, 65536, 131072, 21757952, 21757952, 33554432, 67108864, 1073741824, 0x80000000, 0, 786432,
  /* 6763 */ 4194304, 33554432, 67108864, 0x80000000, 65536, 131072, 786432, 20971520, 33554432, 0, 512, 0, 32768,
  /* 6776 */ 4194304, 0, 896, 1024, 65536, 262144, 524288, 524288, 4194304, 16777216, 33554432, 0x80000000, 16, 128,
  /* 6790 */ 1048576, 268435456, 0, 0, 2048, 3145728, 0, 512, 0, 4194304, 4, 8, 64, 256, 512, 0, 0, 0, 32237, 16, 64,
  /* 6811 */ 896, 65536, 262144, 4194304, 33554432, 262144, 4194304, 16777216, 33554432, 0, 0, 8192, 65536, 0, 8, 16,
  /* 6827 */ 1048576, 2097152, 0x80000000, 0, 0x80000000, 0, 16777216, 0, 64, 768, 65536, 16777216, 16, 64, 768, 65536,
  /* 6843 */ 0, 16, 64, 256, 512, 1024, 2048, 12288, 16384, 262144, 16, 268435456, 0, 0, 8192, 2097152, 64, 256, 512,
  /* 6862 */ 16777216, 0, 0, 16, 0, 0, 512, 0, 0, 32768, 2097152, 16, 512, 0, 0, 8192, 8388608, 65536, 0, 0, 4096, 0,
  /* 6884 */ 67108864, 0, 2, 2048, 64, 0, 0, 16384, 4194304, 0, 0, 0, 32768, 67108868, 262144, 262144, 294912,
  /* 6901 */ 1073741824, 1073741824, 0, 0, 256, 512, 67108864, 201326592, 201326592, 0, 1, 262144, 0, 0, 4224, 4224, 0,
  /* 6918 */ 65536, 33554432, 262400, 201326592, 4224, 65536, 65536, 131072, 262144, 524288, 7340032, 805306368,
  /* 6930 */ 1073741824, 0, 0, 1677721616, 1610612752, 1610612754, 1610612752, 1610614800, 1610612754, 1610612752,
  /* 6940 */ 1610620944, 1610612752, 1610612752, 1677721620, 1610616976, -2143748096, -2143748096, 1610616976,
  /* 6948 */ -2143731200, -2143731200, -2143731200, -527368176, -527368176, -527368176, -535756784, -2143731184,
  /* 6956 */ -2139536896, -2135342592, -2143731200, -535756784, -535756784, -468647920, -535756784, -535754736,
  /* 6964 */ -460259312, -535756782, -535756784, -527368176, -460259312, -527368176, -527368176, -527368176, -460259312,
  /* 6973 */ -460259308, 18037983, 18037983, 85146847, 18037983, 18037983, 85146847, 85146847, 18037983, 18037983,
  /* 6983 */ 18037983, 18037983, 353582303, -1793901345, 353582303, 353582303, 353582303, 353582303, 1695759583,
  /* 6992 */ 353582303, 353582303, 1628650719, 1695759583, 353582303, 1695759583, -443335457, -443335457, 1964195039,
  /* 7001 */ -174900001, 0, 2, 8, 64, 128, 2048, 0, 16, 1073741824, 0, 2, 268435472, 96, 6292512, 4195360, 2097184, 0,
  /* 7019 */ 3735552, 0, 0, 16393, 4456448, 3751936, 0, 0, 0, 16648, 16648, 0, 528, 7946240, 12140544, 9502720,
  /* 7035 */ -1073741824, 0, 0, 18432, 536870912, 0, 0, 0, 15, 208, 15360, 1245184, 1245184, 16777216, 0, 0, 24576, 0,
  /* 7053 */ 15, 9633792, 0, 0, 0, 1, 2, 12, 80, 128, 7168, 8192, 196608, 8192, 196608, 1048576, 16777216, 0, 16384, 0,
  /* 7073 */ 4194304, 0, 1024, 4, 0, 0, 3145728, 0, 0, 0, 536870912, 0x80000000, 32, 512, 2048, 262144, 1048576,
  /* 7090 */ 2097152, 0, 2097152, 0, 16384, 0, 2097152, 16384, 0, 16384, 0, 16384, 8192, 16777216, 0, 0, 32768,
  /* 7107 */ 67108864, 0, 0, 128, 1024, 4096, 8192, 16777216, 4096, 8192, 0, 0, 131072, 32768, 14680064, 8196, 3, 3, 3,
  /* 7126 */ 3, 0, 3, 3, 3, 3, 1, 1, 1, 1, 2, 0, 1, 1, 0, 3, 0, 0, 0, 131072, 1048576
];

XQueryParser.TOKEN =
[
  "(0)",
  "PragmaContents",
  "DirCommentContents",
  "DirPIContents",
  "CDataSection",
  "Wildcard",
  "EQName",
  "URILiteral",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "NCName",
  "QName",
  "StringConstructorChars",
  "S",
  "S",
  "CharRef",
  "CommentContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'=>'",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "']``'",
  "'``['",
  "'`{'",
  "'after'",
  "'all'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'append'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'break'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'check'",
  "'child'",
  "'collation'",
  "'collection'",
  "'comment'",
  "'constraint'",
  "'construction'",
  "'contains'",
  "'content'",
  "'context'",
  "'continue'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'diacritics'",
  "'different'",
  "'digit'",
  "'distance'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'exit'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'foreach'",
  "'foreign'",
  "'from'",
  "'ft-option'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'index'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'insert'",
  "'instance'",
  "'integrity'",
  "'intersect'",
  "'into'",
  "'is'",
  "'item'",
  "'json'",
  "'json-item'",
  "'key'",
  "'language'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'levels'",
  "'loop'",
  "'lowercase'",
  "'lt'",
  "'map'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'most'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'not'",
  "'object'",
  "'occurs'",
  "'of'",
  "'on'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'position'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'relationship'",
  "'rename'",
  "'replace'",
  "'return'",
  "'returning'",
  "'revalidation'",
  "'same'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'strict'",
  "'strip'",
  "'structured-item'",
  "'switch'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unique'",
  "'unordered'",
  "'updating'",
  "'uppercase'",
  "'using'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'weight'",
  "'when'",
  "'where'",
  "'while'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'{|'",
  "'|'",
  "'||'",
  "'|}'",
  "'}'",
  "'}`'",
  "'}}'"
];

// End
