// This file was generated on Sun Apr 17, 2016 16:59 (UTC+01) by REx v5.39 which is Copyright (c) 1979-2016 by Gunther Rademacher <grd@gmx.net>
// REx command line: XQueryParser.ebnf -ll 2 -backtrack -tree -javascript -a xqlint

                                                            // line 2 "XQueryParser.ebnf"
                                                            var XQueryParser = exports.XQueryParser = function XQueryParser(string, parsingEventHandler)
                                                            {
                                                              init(string, parsingEventHandler);
                                                            // line 9 "XQueryParser.js"
  var self = this;

  this.ParseException = function(b, e, s, o, x)
  {
    var
      begin = b,
      end = e,
      state = s,
      offending = o,
      expected = x;

    this.getBegin = function() {return begin;};
    this.getEnd = function() {return end;};
    this.getState = function() {return state;};
    this.getExpected = function() {return expected;};
    this.getOffending = function() {return offending;};

    this.getMessage = function()
    {
      return offending < 0 ? "lexical analysis failed" : "syntax error";
    };
  };

  function init(string, parsingEventHandler)
  {
    eventHandler = parsingEventHandler;
    input = string;
    size = string.length;
    reset(0, 0, 0);
  }

  this.getInput = function()
  {
    return input;
  };

  function reset(l, b, e)
  {
            b0 = b; e0 = b;
    l1 = l; b1 = b; e1 = e;
    l2 = 0;
    end = e;
    ex = -1;
    memo = {};
    eventHandler.reset(input);
  }

  this.getOffendingToken = function(e)
  {
    var o = e.getOffending();
    return o >= 0 ? XQueryParser.TOKEN[o] : null;
  };

  this.getExpectedTokenSet = function(e)
  {
    var expected;
    if (e.getExpected() < 0)
    {
      expected = XQueryParser.getTokenSet(- e.getState());
    }
    else
    {
      expected = [XQueryParser.TOKEN[e.getExpected()]];
    }
    return expected;
  };

  this.getErrorMessage = function(e)
  {
    var tokenSet = this.getExpectedTokenSet(e);
    var found = this.getOffendingToken(e);
    var prefix = input.substring(0, e.getBegin());
    var lines = prefix.split("\n");
    var line = lines.length;
    var column = lines[line - 1].length + 1;
    var size = e.getEnd() - e.getBegin();
    return e.getMessage()
         + (found == null ? "" : ", found " + found)
         + "\nwhile expecting "
         + (tokenSet.length == 1 ? tokenSet[0] : ("[" + tokenSet.join(", ") + "]"))
         + "\n"
         + (size == 0 || found != null ? "" : "after successfully scanning " + size + " characters beginning ")
         + "at line " + line + ", column " + column + ":\n..."
         + input.substring(e.getBegin(), Math.min(input.length, e.getBegin() + 64))
         + "...";
  };

  this.parse_XQuery = function()
  {
    eventHandler.startNonterminal("XQuery", e0);
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_Module();
    consume(25);                    // EOF
    eventHandler.endNonterminal("XQuery", e0);
  };

  function parse_Module()
  {
    eventHandler.startNonterminal("Module", e0);
    switch (l1)
    {
    case 275:                       // 'xquery'
      lookahead2W(198);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'encoding' | 'eq' | 'except' | 'ge' | 'gt' |
                                    // 'idiv' | 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'version' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 64275                 // 'xquery' 'encoding'
     || lk == 135443)               // 'xquery' 'version'
    {
      parse_VersionDecl();
    }
    lookahead1W(278);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    switch (l1)
    {
    case 183:                       // 'module'
      lookahead2W(192);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'namespace' | 'ne' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 94903:                     // 'module' 'namespace'
      whitespace();
      parse_LibraryModule();
      break;
    default:
      whitespace();
      parse_MainModule();
    }
    eventHandler.endNonterminal("Module", e0);
  }

  function parse_VersionDecl()
  {
    eventHandler.startNonterminal("VersionDecl", e0);
    consume(275);                   // 'xquery'
    lookahead1W(116);               // S^WS | '(:' | 'encoding' | 'version'
    switch (l1)
    {
    case 125:                       // 'encoding'
      consume(125);                 // 'encoding'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      break;
    default:
      consume(264);                 // 'version'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      lookahead1W(109);             // S^WS | '(:' | ';' | 'encoding'
      if (l1 == 125)                // 'encoding'
      {
        consume(125);               // 'encoding'
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consume(11);                // StringLiteral
      }
    }
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("VersionDecl", e0);
  }

  function parse_LibraryModule()
  {
    eventHandler.startNonterminal("LibraryModule", e0);
    parse_ModuleDecl();
    lookahead1W(138);               // S^WS | EOF | '(:' | 'declare' | 'import'
    whitespace();
    parse_Prolog();
    eventHandler.endNonterminal("LibraryModule", e0);
  }

  function parse_ModuleDecl()
  {
    eventHandler.startNonterminal("ModuleDecl", e0);
    consume(183);                   // 'module'
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consume(185);                   // 'namespace'
    lookahead1W(249);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(28);                // S^WS | '(:' | ';'
    whitespace();
    parse_Separator();
    eventHandler.endNonterminal("ModuleDecl", e0);
  }

  function parse_Prolog()
  {
    eventHandler.startNonterminal("Prolog", e0);
    for (;;)
    {
      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(213);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' |
                                    // 'base-uri' | 'boundary-space' | 'cast' | 'castable' | 'collection' |
                                    // 'construction' | 'contains' | 'context' | 'copy-namespaces' | 'decimal-format' |
                                    // 'default' | 'div' | 'eq' | 'except' | 'ft-option' | 'function' | 'ge' | 'gt' |
                                    // 'idiv' | 'index' | 'instance' | 'integrity' | 'intersect' | 'is' | 'le' | 'lt' |
                                    // 'mod' | 'namespace' | 'ne' | 'option' | 'or' | 'ordering' | 'revalidation' |
                                    // 'to' | 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      case 153:                     // 'import'
        lookahead2W(201);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'module' | 'ne' | 'or' |
                                    // 'schema' | 'to' | 'treat' | 'union' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 42604               // 'declare' 'base-uri'
       && lk != 43628               // 'declare' 'boundary-space'
       && lk != 50284               // 'declare' 'construction'
       && lk != 53356               // 'declare' 'copy-namespaces'
       && lk != 54380               // 'declare' 'decimal-format'
       && lk != 55916               // 'declare' 'default'
       && lk != 72300               // 'declare' 'ft-option'
       && lk != 93849               // 'import' 'module'
       && lk != 94828               // 'declare' 'namespace'
       && lk != 104556              // 'declare' 'ordering'
       && lk != 114284              // 'declare' 'revalidation'
       && lk != 115865)             // 'import' 'schema'
      {
        break;
      }
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(178);           // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ft-option' | 'namespace' |
                                    // 'ordering' | 'revalidation'
        break;
      default:
        lk = l1;
      }
      if (lk == 55916)              // 'declare' 'default'
      {
        lk = memoized(0, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_DefaultNamespaceDecl();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(0, e0, lk);
        }
      }
      switch (lk)
      {
      case -1:
        whitespace();
        parse_DefaultNamespaceDecl();
        break;
      case 94828:                   // 'declare' 'namespace'
        whitespace();
        parse_NamespaceDecl();
        break;
      case 153:                     // 'import'
        whitespace();
        parse_Import();
        break;
      case 72300:                   // 'declare' 'ft-option'
        whitespace();
        parse_FTOptionDecl();
        break;
      default:
        whitespace();
        parse_Setter();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    for (;;)
    {
      lookahead1W(278);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(210);           // S^WS | EOF | '!' | '!=' | '#' | '%' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'collection' | 'contains' | 'context' | 'div' | 'eq' | 'except' |
                                    // 'function' | 'ge' | 'gt' | 'idiv' | 'index' | 'instance' | 'integrity' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'option' | 'or' | 'to' |
                                    // 'treat' | 'union' | 'updating' | 'variable' | '|' | '||'
        break;
      default:
        lk = l1;
      }
      if (lk != 16492               // 'declare' '%'
       && lk != 48748               // 'declare' 'collection'
       && lk != 51820               // 'declare' 'context'
       && lk != 74348               // 'declare' 'function'
       && lk != 79468               // 'declare' 'index'
       && lk != 82540               // 'declare' 'integrity'
       && lk != 102508              // 'declare' 'option'
       && lk != 132204              // 'declare' 'updating'
       && lk != 134764)             // 'declare' 'variable'
      {
        break;
      }
      switch (l1)
      {
      case 108:                     // 'declare'
        lookahead2W(175);           // S^WS | '%' | '(:' | 'collection' | 'context' | 'function' | 'index' |
                                    // 'integrity' | 'option' | 'updating' | 'variable'
        break;
      default:
        lk = l1;
      }
      switch (lk)
      {
      case 51820:                   // 'declare' 'context'
        whitespace();
        parse_ContextItemDecl();
        break;
      case 102508:                  // 'declare' 'option'
        whitespace();
        parse_OptionDecl();
        break;
      default:
        whitespace();
        parse_AnnotatedDecl();
      }
      lookahead1W(28);              // S^WS | '(:' | ';'
      whitespace();
      parse_Separator();
    }
    eventHandler.endNonterminal("Prolog", e0);
  }

  function parse_Separator()
  {
    eventHandler.startNonterminal("Separator", e0);
    consume(53);                    // ';'
    eventHandler.endNonterminal("Separator", e0);
  }

  function parse_Setter()
  {
    eventHandler.startNonterminal("Setter", e0);
    switch (l1)
    {
    case 108:                       // 'declare'
      lookahead2W(172);             // S^WS | '(:' | 'base-uri' | 'boundary-space' | 'construction' |
                                    // 'copy-namespaces' | 'decimal-format' | 'default' | 'ordering' | 'revalidation'
      break;
    default:
      lk = l1;
    }
    if (lk == 55916)                // 'declare' 'default'
    {
      lk = memoized(1, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_DefaultCollationDecl();
          lk = -2;
        }
        catch (p2A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_EmptyOrderDecl();
            lk = -6;
          }
          catch (p6A)
          {
            lk = -9;
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(1, e0, lk);
      }
    }
    switch (lk)
    {
    case 43628:                     // 'declare' 'boundary-space'
      parse_BoundarySpaceDecl();
      break;
    case -2:
      parse_DefaultCollationDecl();
      break;
    case 42604:                     // 'declare' 'base-uri'
      parse_BaseURIDecl();
      break;
    case 50284:                     // 'declare' 'construction'
      parse_ConstructionDecl();
      break;
    case 104556:                    // 'declare' 'ordering'
      parse_OrderingModeDecl();
      break;
    case -6:
      parse_EmptyOrderDecl();
      break;
    case 114284:                    // 'declare' 'revalidation'
      parse_RevalidationDecl();
      break;
    case 53356:                     // 'declare' 'copy-namespaces'
      parse_CopyNamespacesDecl();
      break;
    default:
      parse_DecimalFormatDecl();
    }
    eventHandler.endNonterminal("Setter", e0);
  }

  function parse_BoundarySpaceDecl()
  {
    eventHandler.startNonterminal("BoundarySpaceDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(33);                // S^WS | '(:' | 'boundary-space'
    consume(85);                    // 'boundary-space'
    lookahead1W(133);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 215:                       // 'preserve'
      consume(215);                 // 'preserve'
      break;
    default:
      consume(242);                 // 'strip'
    }
    eventHandler.endNonterminal("BoundarySpaceDecl", e0);
  }

  function parse_DefaultCollationDecl()
  {
    eventHandler.startNonterminal("DefaultCollationDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(109);                   // 'default'
    lookahead1W(38);                // S^WS | '(:' | 'collation'
    consume(94);                    // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("DefaultCollationDecl", e0);
  }

  function try_DefaultCollationDecl()
  {
    consumeT(108);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(109);                  // 'default'
    lookahead1W(38);                // S^WS | '(:' | 'collation'
    consumeT(94);                   // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
  }

  function parse_BaseURIDecl()
  {
    eventHandler.startNonterminal("BaseURIDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(32);                // S^WS | '(:' | 'base-uri'
    consume(83);                    // 'base-uri'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("BaseURIDecl", e0);
  }

  function parse_ConstructionDecl()
  {
    eventHandler.startNonterminal("ConstructionDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(41);                // S^WS | '(:' | 'construction'
    consume(98);                    // 'construction'
    lookahead1W(133);               // S^WS | '(:' | 'preserve' | 'strip'
    switch (l1)
    {
    case 242:                       // 'strip'
      consume(242);                 // 'strip'
      break;
    default:
      consume(215);                 // 'preserve'
    }
    eventHandler.endNonterminal("ConstructionDecl", e0);
  }

  function parse_OrderingModeDecl()
  {
    eventHandler.startNonterminal("OrderingModeDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(68);                // S^WS | '(:' | 'ordering'
    consume(204);                   // 'ordering'
    lookahead1W(131);               // S^WS | '(:' | 'ordered' | 'unordered'
    switch (l1)
    {
    case 203:                       // 'ordered'
      consume(203);                 // 'ordered'
      break;
    default:
      consume(257);                 // 'unordered'
    }
    eventHandler.endNonterminal("OrderingModeDecl", e0);
  }

  function parse_EmptyOrderDecl()
  {
    eventHandler.startNonterminal("EmptyOrderDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(109);                   // 'default'
    lookahead1W(67);                // S^WS | '(:' | 'order'
    consume(202);                   // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(123);                   // 'empty'
    lookahead1W(121);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 147:                       // 'greatest'
      consume(147);                 // 'greatest'
      break;
    default:
      consume(173);                 // 'least'
    }
    eventHandler.endNonterminal("EmptyOrderDecl", e0);
  }

  function try_EmptyOrderDecl()
  {
    consumeT(108);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(109);                  // 'default'
    lookahead1W(67);                // S^WS | '(:' | 'order'
    consumeT(202);                  // 'order'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(123);                  // 'empty'
    lookahead1W(121);               // S^WS | '(:' | 'greatest' | 'least'
    switch (l1)
    {
    case 147:                       // 'greatest'
      consumeT(147);                // 'greatest'
      break;
    default:
      consumeT(173);                // 'least'
    }
  }

  function parse_CopyNamespacesDecl()
  {
    eventHandler.startNonterminal("CopyNamespacesDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(44);                // S^WS | '(:' | 'copy-namespaces'
    consume(104);                   // 'copy-namespaces'
    lookahead1W(128);               // S^WS | '(:' | 'no-preserve' | 'preserve'
    whitespace();
    parse_PreserveMode();
    lookahead1W(25);                // S^WS | '(:' | ','
    consume(41);                    // ','
    lookahead1W(123);               // S^WS | '(:' | 'inherit' | 'no-inherit'
    whitespace();
    parse_InheritMode();
    eventHandler.endNonterminal("CopyNamespacesDecl", e0);
  }

  function parse_PreserveMode()
  {
    eventHandler.startNonterminal("PreserveMode", e0);
    switch (l1)
    {
    case 215:                       // 'preserve'
      consume(215);                 // 'preserve'
      break;
    default:
      consume(191);                 // 'no-preserve'
    }
    eventHandler.endNonterminal("PreserveMode", e0);
  }

  function parse_InheritMode()
  {
    eventHandler.startNonterminal("InheritMode", e0);
    switch (l1)
    {
    case 157:                       // 'inherit'
      consume(157);                 // 'inherit'
      break;
    default:
      consume(190);                 // 'no-inherit'
    }
    eventHandler.endNonterminal("InheritMode", e0);
  }

  function parse_DecimalFormatDecl()
  {
    eventHandler.startNonterminal("DecimalFormatDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(114);               // S^WS | '(:' | 'decimal-format' | 'default'
    switch (l1)
    {
    case 106:                       // 'decimal-format'
      consume(106);                 // 'decimal-format'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_EQName();
      break;
    default:
      consume(109);                 // 'default'
      lookahead1W(45);              // S^WS | '(:' | 'decimal-format'
      consume(106);                 // 'decimal-format'
    }
    for (;;)
    {
      lookahead1W(180);             // S^WS | '(:' | ';' | 'NaN' | 'decimal-separator' | 'digit' |
                                    // 'grouping-separator' | 'infinity' | 'minus-sign' | 'pattern-separator' |
                                    // 'per-mille' | 'percent' | 'zero-digit'
      if (l1 == 53)                 // ';'
      {
        break;
      }
      whitespace();
      parse_DFPropertyName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(60);                  // '='
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
    }
    eventHandler.endNonterminal("DecimalFormatDecl", e0);
  }

  function parse_DFPropertyName()
  {
    eventHandler.startNonterminal("DFPropertyName", e0);
    switch (l1)
    {
    case 107:                       // 'decimal-separator'
      consume(107);                 // 'decimal-separator'
      break;
    case 149:                       // 'grouping-separator'
      consume(149);                 // 'grouping-separator'
      break;
    case 156:                       // 'infinity'
      consume(156);                 // 'infinity'
      break;
    case 180:                       // 'minus-sign'
      consume(180);                 // 'minus-sign'
      break;
    case 67:                        // 'NaN'
      consume(67);                  // 'NaN'
      break;
    case 210:                       // 'percent'
      consume(210);                 // 'percent'
      break;
    case 209:                       // 'per-mille'
      consume(209);                 // 'per-mille'
      break;
    case 276:                       // 'zero-digit'
      consume(276);                 // 'zero-digit'
      break;
    case 116:                       // 'digit'
      consume(116);                 // 'digit'
      break;
    default:
      consume(208);                 // 'pattern-separator'
    }
    eventHandler.endNonterminal("DFPropertyName", e0);
  }

  function parse_Import()
  {
    eventHandler.startNonterminal("Import", e0);
    switch (l1)
    {
    case 153:                       // 'import'
      lookahead2W(126);             // S^WS | '(:' | 'module' | 'schema'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 115865:                    // 'import' 'schema'
      parse_SchemaImport();
      break;
    default:
      parse_ModuleImport();
    }
    eventHandler.endNonterminal("Import", e0);
  }

  function parse_SchemaImport()
  {
    eventHandler.startNonterminal("SchemaImport", e0);
    consume(153);                   // 'import'
    lookahead1W(73);                // S^WS | '(:' | 'schema'
    consume(226);                   // 'schema'
    lookahead1W(137);               // URILiteral | S^WS | '(:' | 'default' | 'namespace'
    if (l1 != 7)                    // URILiteral
    {
      whitespace();
      parse_SchemaPrefix();
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(108);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 81)                   // 'at'
    {
      consume(81);                  // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consume(7);                 // URILiteral
      }
    }
    eventHandler.endNonterminal("SchemaImport", e0);
  }

  function parse_SchemaPrefix()
  {
    eventHandler.startNonterminal("SchemaPrefix", e0);
    switch (l1)
    {
    case 185:                       // 'namespace'
      consume(185);                 // 'namespace'
      lookahead1W(249);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(60);                  // '='
      break;
    default:
      consume(109);                 // 'default'
      lookahead1W(47);              // S^WS | '(:' | 'element'
      consume(121);                 // 'element'
      lookahead1W(61);              // S^WS | '(:' | 'namespace'
      consume(185);                 // 'namespace'
    }
    eventHandler.endNonterminal("SchemaPrefix", e0);
  }

  function parse_ModuleImport()
  {
    eventHandler.startNonterminal("ModuleImport", e0);
    consume(153);                   // 'import'
    lookahead1W(60);                // S^WS | '(:' | 'module'
    consume(183);                   // 'module'
    lookahead1W(90);                // URILiteral | S^WS | '(:' | 'namespace'
    if (l1 == 185)                  // 'namespace'
    {
      consume(185);                 // 'namespace'
      lookahead1W(249);             // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      whitespace();
      parse_NCName();
      lookahead1W(29);              // S^WS | '(:' | '='
      consume(60);                  // '='
    }
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(108);               // S^WS | '(:' | ';' | 'at'
    if (l1 == 81)                   // 'at'
    {
      consume(81);                  // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      for (;;)
      {
        lookahead1W(103);           // S^WS | '(:' | ',' | ';'
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consume(7);                 // URILiteral
      }
    }
    eventHandler.endNonterminal("ModuleImport", e0);
  }

  function parse_NamespaceDecl()
  {
    eventHandler.startNonterminal("NamespaceDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consume(185);                   // 'namespace'
    lookahead1W(249);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_NCName();
    lookahead1W(29);                // S^WS | '(:' | '='
    consume(60);                    // '='
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("NamespaceDecl", e0);
  }

  function parse_DefaultNamespaceDecl()
  {
    eventHandler.startNonterminal("DefaultNamespaceDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consume(109);                   // 'default'
    lookahead1W(115);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 121:                       // 'element'
      consume(121);                 // 'element'
      break;
    default:
      consume(145);                 // 'function'
    }
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consume(185);                   // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("DefaultNamespaceDecl", e0);
  }

  function try_DefaultNamespaceDecl()
  {
    consumeT(108);                  // 'declare'
    lookahead1W(46);                // S^WS | '(:' | 'default'
    consumeT(109);                  // 'default'
    lookahead1W(115);               // S^WS | '(:' | 'element' | 'function'
    switch (l1)
    {
    case 121:                       // 'element'
      consumeT(121);                // 'element'
      break;
    default:
      consumeT(145);                // 'function'
    }
    lookahead1W(61);                // S^WS | '(:' | 'namespace'
    consumeT(185);                  // 'namespace'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
  }

  function parse_FTOptionDecl()
  {
    eventHandler.startNonterminal("FTOptionDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(52);                // S^WS | '(:' | 'ft-option'
    consume(141);                   // 'ft-option'
    lookahead1W(81);                // S^WS | '(:' | 'using'
    whitespace();
    parse_FTMatchOptions();
    eventHandler.endNonterminal("FTOptionDecl", e0);
  }

  function parse_AnnotatedDecl()
  {
    eventHandler.startNonterminal("AnnotatedDecl", e0);
    consume(108);                   // 'declare'
    for (;;)
    {
      lookahead1W(170);             // S^WS | '%' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
      if (l1 != 32                  // '%'
       && l1 != 258)                // 'updating'
      {
        break;
      }
      switch (l1)
      {
      case 258:                     // 'updating'
        whitespace();
        parse_CompatibilityAnnotation();
        break;
      default:
        whitespace();
        parse_Annotation();
      }
    }
    switch (l1)
    {
    case 263:                       // 'variable'
      whitespace();
      parse_VarDecl();
      break;
    case 145:                       // 'function'
      whitespace();
      parse_FunctionDecl();
      break;
    case 95:                        // 'collection'
      whitespace();
      parse_CollectionDecl();
      break;
    case 155:                       // 'index'
      whitespace();
      parse_IndexDecl();
      break;
    default:
      whitespace();
      parse_ICDecl();
    }
    eventHandler.endNonterminal("AnnotatedDecl", e0);
  }

  function parse_CompatibilityAnnotation()
  {
    eventHandler.startNonterminal("CompatibilityAnnotation", e0);
    consume(258);                   // 'updating'
    eventHandler.endNonterminal("CompatibilityAnnotation", e0);
  }

  function parse_Annotation()
  {
    eventHandler.startNonterminal("Annotation", e0);
    consume(32);                    // '%'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(171);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consume(34);                  // '('
      lookahead1W(154);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      whitespace();
      parse_Literal();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(154);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        whitespace();
        parse_Literal();
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("Annotation", e0);
  }

  function try_Annotation()
  {
    consumeT(32);                   // '%'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(171);               // S^WS | '%' | '(' | '(:' | 'collection' | 'function' | 'index' | 'integrity' |
                                    // 'updating' | 'variable'
    if (l1 == 34)                   // '('
    {
      consumeT(34);                 // '('
      lookahead1W(154);             // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
      try_Literal();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(154);           // IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral | S^WS | '(:'
        try_Literal();
      }
      consumeT(37);                 // ')'
    }
  }

  function parse_VarDecl()
  {
    eventHandler.startNonterminal("VarDecl", e0);
    consume(263);                   // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(147);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(106);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 52:                        // ':='
      consume(52);                  // ':='
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(133);                 // 'external'
      lookahead1W(104);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consume(52);                // ':='
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("VarDecl", e0);
  }

  function parse_VarValue()
  {
    eventHandler.startNonterminal("VarValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarValue", e0);
  }

  function parse_VarDefaultValue()
  {
    eventHandler.startNonterminal("VarDefaultValue", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("VarDefaultValue", e0);
  }

  function parse_ContextItemDecl()
  {
    eventHandler.startNonterminal("ContextItemDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(43);                // S^WS | '(:' | 'context'
    consume(101);                   // 'context'
    lookahead1W(55);                // S^WS | '(:' | 'item'
    consume(165);                   // 'item'
    lookahead1W(147);               // S^WS | '(:' | ':=' | 'as' | 'external'
    if (l1 == 79)                   // 'as'
    {
      consume(79);                  // 'as'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_ItemType();
    }
    lookahead1W(106);               // S^WS | '(:' | ':=' | 'external'
    switch (l1)
    {
    case 52:                        // ':='
      consume(52);                  // ':='
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_VarValue();
      break;
    default:
      consume(133);                 // 'external'
      lookahead1W(104);             // S^WS | '(:' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consume(52);                // ':='
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_VarDefaultValue();
      }
    }
    eventHandler.endNonterminal("ContextItemDecl", e0);
  }

  function parse_ParamList()
  {
    eventHandler.startNonterminal("ParamList", e0);
    parse_Param();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_Param();
    }
    eventHandler.endNonterminal("ParamList", e0);
  }

  function try_ParamList()
  {
    try_Param();
    for (;;)
    {
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_Param();
    }
  }

  function parse_Param()
  {
    eventHandler.startNonterminal("Param", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(143);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    eventHandler.endNonterminal("Param", e0);
  }

  function try_Param()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(143);               // S^WS | '(:' | ')' | ',' | 'as'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
  }

  function parse_FunctionBody()
  {
    eventHandler.startNonterminal("FunctionBody", e0);
    parse_EnclosedExpr();
    eventHandler.endNonterminal("FunctionBody", e0);
  }

  function try_FunctionBody()
  {
    try_EnclosedExpr();
  }

  function parse_EnclosedExpr()
  {
    eventHandler.startNonterminal("EnclosedExpr", e0);
    consume(277);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("EnclosedExpr", e0);
  }

  function try_EnclosedExpr()
  {
    consumeT(277);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(283);                  // '}'
  }

  function parse_OptionDecl()
  {
    eventHandler.startNonterminal("OptionDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(66);                // S^WS | '(:' | 'option'
    consume(200);                   // 'option'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("OptionDecl", e0);
  }

  function parse_Expr()
  {
    eventHandler.startNonterminal("Expr", e0);
    parse_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Expr", e0);
  }

  function try_Expr()
  {
    try_ExprSingle();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_FLWORExpr()
  {
    eventHandler.startNonterminal("FLWORExpr", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 221)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnClause();
    eventHandler.endNonterminal("FLWORExpr", e0);
  }

  function try_FLWORExpr()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 221)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnClause();
  }

  function parse_InitialClause()
  {
    eventHandler.startNonterminal("InitialClause", e0);
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(141);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
      parse_ForClause();
      break;
    case 174:                       // 'let'
      parse_LetClause();
      break;
    default:
      parse_WindowClause();
    }
    eventHandler.endNonterminal("InitialClause", e0);
  }

  function try_InitialClause()
  {
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(141);             // S^WS | '$' | '(:' | 'sliding' | 'tumbling'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
      try_ForClause();
      break;
    case 174:                       // 'let'
      try_LetClause();
      break;
    default:
      try_WindowClause();
    }
  }

  function parse_IntermediateClause()
  {
    eventHandler.startNonterminal("IntermediateClause", e0);
    switch (l1)
    {
    case 137:                       // 'for'
    case 174:                       // 'let'
      parse_InitialClause();
      break;
    case 267:                       // 'where'
      parse_WhereClause();
      break;
    case 148:                       // 'group'
      parse_GroupByClause();
      break;
    case 105:                       // 'count'
      parse_CountClause();
      break;
    default:
      parse_OrderByClause();
    }
    eventHandler.endNonterminal("IntermediateClause", e0);
  }

  function try_IntermediateClause()
  {
    switch (l1)
    {
    case 137:                       // 'for'
    case 174:                       // 'let'
      try_InitialClause();
      break;
    case 267:                       // 'where'
      try_WhereClause();
      break;
    case 148:                       // 'group'
      try_GroupByClause();
      break;
    case 105:                       // 'count'
      try_CountClause();
      break;
    default:
      try_OrderByClause();
    }
  }

  function parse_ForClause()
  {
    eventHandler.startNonterminal("ForClause", e0);
    consume(137);                   // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_ForBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_ForBinding();
    }
    eventHandler.endNonterminal("ForClause", e0);
  }

  function try_ForClause()
  {
    consumeT(137);                  // 'for'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_ForBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_ForBinding();
    }
  }

  function parse_ForBinding()
  {
    eventHandler.startNonterminal("ForBinding", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(164);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(158);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 72)                   // 'allowing'
    {
      whitespace();
      parse_AllowingEmpty();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 81)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(122);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 229)                  // 'score'
    {
      whitespace();
      parse_FTScoreVar();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(154);                   // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ForBinding", e0);
  }

  function try_ForBinding()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(164);               // S^WS | '(:' | 'allowing' | 'as' | 'at' | 'in' | 'score'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(158);               // S^WS | '(:' | 'allowing' | 'at' | 'in' | 'score'
    if (l1 == 72)                   // 'allowing'
    {
      try_AllowingEmpty();
    }
    lookahead1W(150);               // S^WS | '(:' | 'at' | 'in' | 'score'
    if (l1 == 81)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(122);               // S^WS | '(:' | 'in' | 'score'
    if (l1 == 229)                  // 'score'
    {
      try_FTScoreVar();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(154);                  // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_AllowingEmpty()
  {
    eventHandler.startNonterminal("AllowingEmpty", e0);
    consume(72);                    // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consume(123);                   // 'empty'
    eventHandler.endNonterminal("AllowingEmpty", e0);
  }

  function try_AllowingEmpty()
  {
    consumeT(72);                   // 'allowing'
    lookahead1W(49);                // S^WS | '(:' | 'empty'
    consumeT(123);                  // 'empty'
  }

  function parse_PositionalVar()
  {
    eventHandler.startNonterminal("PositionalVar", e0);
    consume(81);                    // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("PositionalVar", e0);
  }

  function try_PositionalVar()
  {
    consumeT(81);                   // 'at'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_FTScoreVar()
  {
    eventHandler.startNonterminal("FTScoreVar", e0);
    consume(229);                   // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("FTScoreVar", e0);
  }

  function try_FTScoreVar()
  {
    consumeT(229);                  // 'score'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_LetClause()
  {
    eventHandler.startNonterminal("LetClause", e0);
    consume(174);                   // 'let'
    lookahead1W(96);                // S^WS | '$' | '(:' | 'score'
    whitespace();
    parse_LetBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(96);              // S^WS | '$' | '(:' | 'score'
      whitespace();
      parse_LetBinding();
    }
    eventHandler.endNonterminal("LetClause", e0);
  }

  function try_LetClause()
  {
    consumeT(174);                  // 'let'
    lookahead1W(96);                // S^WS | '$' | '(:' | 'score'
    try_LetBinding();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(96);              // S^WS | '$' | '(:' | 'score'
      try_LetBinding();
    }
  }

  function parse_LetBinding()
  {
    eventHandler.startNonterminal("LetBinding", e0);
    switch (l1)
    {
    case 31:                        // '$'
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(105);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 79)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      break;
    default:
      parse_FTScoreVar();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(52);                    // ':='
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("LetBinding", e0);
  }

  function try_LetBinding()
  {
    switch (l1)
    {
    case 31:                        // '$'
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(105);             // S^WS | '(:' | ':=' | 'as'
      if (l1 == 79)                 // 'as'
      {
        try_TypeDeclaration();
      }
      break;
    default:
      try_FTScoreVar();
    }
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(52);                   // ':='
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowClause()
  {
    eventHandler.startNonterminal("WindowClause", e0);
    consume(137);                   // 'for'
    lookahead1W(135);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 252:                       // 'tumbling'
      whitespace();
      parse_TumblingWindowClause();
      break;
    default:
      whitespace();
      parse_SlidingWindowClause();
    }
    eventHandler.endNonterminal("WindowClause", e0);
  }

  function try_WindowClause()
  {
    consumeT(137);                  // 'for'
    lookahead1W(135);               // S^WS | '(:' | 'sliding' | 'tumbling'
    switch (l1)
    {
    case 252:                       // 'tumbling'
      try_TumblingWindowClause();
      break;
    default:
      try_SlidingWindowClause();
    }
  }

  function parse_TumblingWindowClause()
  {
    eventHandler.startNonterminal("TumblingWindowClause", e0);
    consume(252);                   // 'tumbling'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consume(270);                   // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(154);                   // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    if (l1 == 126                   // 'end'
     || l1 == 199)                  // 'only'
    {
      whitespace();
      parse_WindowEndCondition();
    }
    eventHandler.endNonterminal("TumblingWindowClause", e0);
  }

  function try_TumblingWindowClause()
  {
    consumeT(252);                  // 'tumbling'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consumeT(270);                  // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(154);                  // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    if (l1 == 126                   // 'end'
     || l1 == 199)                  // 'only'
    {
      try_WindowEndCondition();
    }
  }

  function parse_SlidingWindowClause()
  {
    eventHandler.startNonterminal("SlidingWindowClause", e0);
    consume(235);                   // 'sliding'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consume(270);                   // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(154);                   // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    whitespace();
    parse_WindowStartCondition();
    whitespace();
    parse_WindowEndCondition();
    eventHandler.endNonterminal("SlidingWindowClause", e0);
  }

  function try_SlidingWindowClause()
  {
    consumeT(235);                  // 'sliding'
    lookahead1W(85);                // S^WS | '(:' | 'window'
    consumeT(270);                  // 'window'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(154);                  // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    try_WindowStartCondition();
    try_WindowEndCondition();
  }

  function parse_WindowStartCondition()
  {
    eventHandler.startNonterminal("WindowStartCondition", e0);
    consume(238);                   // 'start'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consume(266);                   // 'when'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowStartCondition", e0);
  }

  function try_WindowStartCondition()
  {
    consumeT(238);                  // 'start'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consumeT(266);                  // 'when'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowEndCondition()
  {
    eventHandler.startNonterminal("WindowEndCondition", e0);
    if (l1 == 199)                  // 'only'
    {
      consume(199);                 // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consume(126);                   // 'end'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    whitespace();
    parse_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consume(266);                   // 'when'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WindowEndCondition", e0);
  }

  function try_WindowEndCondition()
  {
    if (l1 == 199)                  // 'only'
    {
      consumeT(199);                // 'only'
    }
    lookahead1W(50);                // S^WS | '(:' | 'end'
    consumeT(126);                  // 'end'
    lookahead1W(163);               // S^WS | '$' | '(:' | 'at' | 'next' | 'previous' | 'when'
    try_WindowVars();
    lookahead1W(83);                // S^WS | '(:' | 'when'
    consumeT(266);                  // 'when'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_WindowVars()
  {
    eventHandler.startNonterminal("WindowVars", e0);
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_CurrentItem();
    }
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 81)                   // 'at'
    {
      whitespace();
      parse_PositionalVar();
    }
    lookahead1W(153);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 216)                  // 'previous'
    {
      consume(216);                 // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_PreviousItem();
    }
    lookahead1W(127);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 188)                  // 'next'
    {
      consume(188);                 // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NextItem();
    }
    eventHandler.endNonterminal("WindowVars", e0);
  }

  function try_WindowVars()
  {
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_CurrentItem();
    }
    lookahead1W(159);               // S^WS | '(:' | 'at' | 'next' | 'previous' | 'when'
    if (l1 == 81)                   // 'at'
    {
      try_PositionalVar();
    }
    lookahead1W(153);               // S^WS | '(:' | 'next' | 'previous' | 'when'
    if (l1 == 216)                  // 'previous'
    {
      consumeT(216);                // 'previous'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_PreviousItem();
    }
    lookahead1W(127);               // S^WS | '(:' | 'next' | 'when'
    if (l1 == 188)                  // 'next'
    {
      consumeT(188);                // 'next'
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_NextItem();
    }
  }

  function parse_CurrentItem()
  {
    eventHandler.startNonterminal("CurrentItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("CurrentItem", e0);
  }

  function try_CurrentItem()
  {
    try_EQName();
  }

  function parse_PreviousItem()
  {
    eventHandler.startNonterminal("PreviousItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("PreviousItem", e0);
  }

  function try_PreviousItem()
  {
    try_EQName();
  }

  function parse_NextItem()
  {
    eventHandler.startNonterminal("NextItem", e0);
    parse_EQName();
    eventHandler.endNonterminal("NextItem", e0);
  }

  function try_NextItem()
  {
    try_EQName();
  }

  function parse_CountClause()
  {
    eventHandler.startNonterminal("CountClause", e0);
    consume(105);                   // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("CountClause", e0);
  }

  function try_CountClause()
  {
    consumeT(105);                  // 'count'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_WhereClause()
  {
    eventHandler.startNonterminal("WhereClause", e0);
    consume(267);                   // 'where'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("WhereClause", e0);
  }

  function try_WhereClause()
  {
    consumeT(267);                  // 'where'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_GroupByClause()
  {
    eventHandler.startNonterminal("GroupByClause", e0);
    consume(148);                   // 'group'
    lookahead1W(34);                // S^WS | '(:' | 'by'
    consume(87);                    // 'by'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_GroupingSpecList();
    eventHandler.endNonterminal("GroupByClause", e0);
  }

  function try_GroupByClause()
  {
    consumeT(148);                  // 'group'
    lookahead1W(34);                // S^WS | '(:' | 'by'
    consumeT(87);                   // 'by'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_GroupingSpecList();
  }

  function parse_GroupingSpecList()
  {
    eventHandler.startNonterminal("GroupingSpecList", e0);
    parse_GroupingSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_GroupingSpec();
    }
    eventHandler.endNonterminal("GroupingSpecList", e0);
  }

  function try_GroupingSpecList()
  {
    try_GroupingSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_GroupingSpec();
    }
  }

  function parse_GroupingSpec()
  {
    eventHandler.startNonterminal("GroupingSpec", e0);
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 3103                  // '$' EQName^Token
     || lk == 35871                 // '$' 'after'
     || lk == 36895                 // '$' 'allowing'
     || lk == 37407                 // '$' 'ancestor'
     || lk == 37919                 // '$' 'ancestor-or-self'
     || lk == 38431                 // '$' 'and'
     || lk == 39455                 // '$' 'append'
     || lk == 39967                 // '$' 'array'
     || lk == 40479                 // '$' 'as'
     || lk == 40991                 // '$' 'ascending'
     || lk == 41503                 // '$' 'at'
     || lk == 42015                 // '$' 'attribute'
     || lk == 42527                 // '$' 'base-uri'
     || lk == 43039                 // '$' 'before'
     || lk == 43551                 // '$' 'boundary-space'
     || lk == 44063                 // '$' 'break'
     || lk == 45087                 // '$' 'case'
     || lk == 45599                 // '$' 'cast'
     || lk == 46111                 // '$' 'castable'
     || lk == 46623                 // '$' 'catch'
     || lk == 47647                 // '$' 'child'
     || lk == 48159                 // '$' 'collation'
     || lk == 49183                 // '$' 'comment'
     || lk == 49695                 // '$' 'constraint'
     || lk == 50207                 // '$' 'construction'
     || lk == 51743                 // '$' 'context'
     || lk == 52255                 // '$' 'continue'
     || lk == 52767                 // '$' 'copy'
     || lk == 53279                 // '$' 'copy-namespaces'
     || lk == 53791                 // '$' 'count'
     || lk == 54303                 // '$' 'decimal-format'
     || lk == 55327                 // '$' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 64031                 // '$' 'encoding'
     || lk == 64543                 // '$' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 67615                 // '$' 'exit'
     || lk == 68127                 // '$' 'external'
     || lk == 68639                 // '$' 'first'
     || lk == 69151                 // '$' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 72223                 // '$' 'ft-option'
     || lk == 74271                 // '$' 'function'
     || lk == 74783                 // '$' 'ge'
     || lk == 75807                 // '$' 'group'
     || lk == 76831                 // '$' 'gt'
     || lk == 77343                 // '$' 'idiv'
     || lk == 77855                 // '$' 'if'
     || lk == 78367                 // '$' 'import'
     || lk == 78879                 // '$' 'in'
     || lk == 79391                 // '$' 'index'
     || lk == 81439                 // '$' 'insert'
     || lk == 81951                 // '$' 'instance'
     || lk == 82463                 // '$' 'integrity'
     || lk == 82975                 // '$' 'intersect'
     || lk == 83487                 // '$' 'into'
     || lk == 83999                 // '$' 'is'
     || lk == 84511                 // '$' 'item'
     || lk == 85023                 // '$' 'json'
     || lk == 85535                 // '$' 'json-item'
     || lk == 87071                 // '$' 'last'
     || lk == 87583                 // '$' 'lax'
     || lk == 88095                 // '$' 'le'
     || lk == 89119                 // '$' 'let'
     || lk == 90143                 // '$' 'loop'
     || lk == 91167                 // '$' 'lt'
     || lk == 91679                 // '$' 'map'
     || lk == 92703                 // '$' 'mod'
     || lk == 93215                 // '$' 'modify'
     || lk == 93727                 // '$' 'module'
     || lk == 94751                 // '$' 'namespace'
     || lk == 95263                 // '$' 'namespace-node'
     || lk == 95775                 // '$' 'ne'
     || lk == 98335                 // '$' 'node'
     || lk == 98847                 // '$' 'nodes'
     || lk == 99871                 // '$' 'object'
     || lk == 101919                // '$' 'only'
     || lk == 102431                // '$' 'option'
     || lk == 102943                // '$' 'or'
     || lk == 103455                // '$' 'order'
     || lk == 103967                // '$' 'ordered'
     || lk == 104479                // '$' 'ordering'
     || lk == 106015                // '$' 'parent'
     || lk == 109087                // '$' 'preceding'
     || lk == 109599                // '$' 'preceding-sibling'
     || lk == 111135                // '$' 'processing-instruction'
     || lk == 112159                // '$' 'rename'
     || lk == 112671                // '$' 'replace'
     || lk == 113183                // '$' 'return'
     || lk == 113695                // '$' 'returning'
     || lk == 114207                // '$' 'revalidation'
     || lk == 115231                // '$' 'satisfies'
     || lk == 115743                // '$' 'schema'
     || lk == 116255                // '$' 'schema-attribute'
     || lk == 116767                // '$' 'schema-element'
     || lk == 117279                // '$' 'score'
     || lk == 117791                // '$' 'self'
     || lk == 120351                // '$' 'sliding'
     || lk == 120863                // '$' 'some'
     || lk == 121375                // '$' 'stable'
     || lk == 121887                // '$' 'start'
     || lk == 123423                // '$' 'strict'
     || lk == 124447                // '$' 'structured-item'
     || lk == 124959                // '$' 'switch'
     || lk == 125471                // '$' 'text'
     || lk == 127519                // '$' 'to'
     || lk == 128031                // '$' 'treat'
     || lk == 128543                // '$' 'try'
     || lk == 129055                // '$' 'tumbling'
     || lk == 129567                // '$' 'type'
     || lk == 130079                // '$' 'typeswitch'
     || lk == 130591                // '$' 'union'
     || lk == 131615                // '$' 'unordered'
     || lk == 132127                // '$' 'updating'
     || lk == 133663                // '$' 'validate'
     || lk == 134175                // '$' 'value'
     || lk == 134687                // '$' 'variable'
     || lk == 135199                // '$' 'version'
     || lk == 136735                // '$' 'where'
     || lk == 137247                // '$' 'while'
     || lk == 138783                // '$' 'with'
     || lk == 140831)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(182);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 52              // ':='
           || l1 == 79)             // 'as'
          {
            if (l1 == 79)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(27);        // S^WS | '(:' | ':='
            consumeT(52);           // ':='
            lookahead1W(271);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_ExprSingle();
          }
          if (l1 == 94)             // 'collation'
          {
            consumeT(94);           // 'collation'
            lookahead1W(15);        // URILiteral | S^WS | '(:'
            consumeT(7);            // URILiteral
          }
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(2, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      parse_GroupingVariable();
      lookahead1W(182);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 52                  // ':='
       || l1 == 79)                 // 'as'
      {
        if (l1 == 79)               // 'as'
        {
          whitespace();
          parse_TypeDeclaration();
        }
        lookahead1W(27);            // S^WS | '(:' | ':='
        consume(52);                // ':='
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
      if (l1 == 94)                 // 'collation'
      {
        consume(94);                // 'collation'
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consume(7);                 // URILiteral
      }
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("GroupingSpec", e0);
  }

  function try_GroupingSpec()
  {
    switch (l1)
    {
    case 31:                        // '$'
      lookahead2W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      break;
    default:
      lk = l1;
    }
    if (lk == 3103                  // '$' EQName^Token
     || lk == 35871                 // '$' 'after'
     || lk == 36895                 // '$' 'allowing'
     || lk == 37407                 // '$' 'ancestor'
     || lk == 37919                 // '$' 'ancestor-or-self'
     || lk == 38431                 // '$' 'and'
     || lk == 39455                 // '$' 'append'
     || lk == 39967                 // '$' 'array'
     || lk == 40479                 // '$' 'as'
     || lk == 40991                 // '$' 'ascending'
     || lk == 41503                 // '$' 'at'
     || lk == 42015                 // '$' 'attribute'
     || lk == 42527                 // '$' 'base-uri'
     || lk == 43039                 // '$' 'before'
     || lk == 43551                 // '$' 'boundary-space'
     || lk == 44063                 // '$' 'break'
     || lk == 45087                 // '$' 'case'
     || lk == 45599                 // '$' 'cast'
     || lk == 46111                 // '$' 'castable'
     || lk == 46623                 // '$' 'catch'
     || lk == 47647                 // '$' 'child'
     || lk == 48159                 // '$' 'collation'
     || lk == 49183                 // '$' 'comment'
     || lk == 49695                 // '$' 'constraint'
     || lk == 50207                 // '$' 'construction'
     || lk == 51743                 // '$' 'context'
     || lk == 52255                 // '$' 'continue'
     || lk == 52767                 // '$' 'copy'
     || lk == 53279                 // '$' 'copy-namespaces'
     || lk == 53791                 // '$' 'count'
     || lk == 54303                 // '$' 'decimal-format'
     || lk == 55327                 // '$' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 64031                 // '$' 'encoding'
     || lk == 64543                 // '$' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 67615                 // '$' 'exit'
     || lk == 68127                 // '$' 'external'
     || lk == 68639                 // '$' 'first'
     || lk == 69151                 // '$' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 72223                 // '$' 'ft-option'
     || lk == 74271                 // '$' 'function'
     || lk == 74783                 // '$' 'ge'
     || lk == 75807                 // '$' 'group'
     || lk == 76831                 // '$' 'gt'
     || lk == 77343                 // '$' 'idiv'
     || lk == 77855                 // '$' 'if'
     || lk == 78367                 // '$' 'import'
     || lk == 78879                 // '$' 'in'
     || lk == 79391                 // '$' 'index'
     || lk == 81439                 // '$' 'insert'
     || lk == 81951                 // '$' 'instance'
     || lk == 82463                 // '$' 'integrity'
     || lk == 82975                 // '$' 'intersect'
     || lk == 83487                 // '$' 'into'
     || lk == 83999                 // '$' 'is'
     || lk == 84511                 // '$' 'item'
     || lk == 85023                 // '$' 'json'
     || lk == 85535                 // '$' 'json-item'
     || lk == 87071                 // '$' 'last'
     || lk == 87583                 // '$' 'lax'
     || lk == 88095                 // '$' 'le'
     || lk == 89119                 // '$' 'let'
     || lk == 90143                 // '$' 'loop'
     || lk == 91167                 // '$' 'lt'
     || lk == 91679                 // '$' 'map'
     || lk == 92703                 // '$' 'mod'
     || lk == 93215                 // '$' 'modify'
     || lk == 93727                 // '$' 'module'
     || lk == 94751                 // '$' 'namespace'
     || lk == 95263                 // '$' 'namespace-node'
     || lk == 95775                 // '$' 'ne'
     || lk == 98335                 // '$' 'node'
     || lk == 98847                 // '$' 'nodes'
     || lk == 99871                 // '$' 'object'
     || lk == 101919                // '$' 'only'
     || lk == 102431                // '$' 'option'
     || lk == 102943                // '$' 'or'
     || lk == 103455                // '$' 'order'
     || lk == 103967                // '$' 'ordered'
     || lk == 104479                // '$' 'ordering'
     || lk == 106015                // '$' 'parent'
     || lk == 109087                // '$' 'preceding'
     || lk == 109599                // '$' 'preceding-sibling'
     || lk == 111135                // '$' 'processing-instruction'
     || lk == 112159                // '$' 'rename'
     || lk == 112671                // '$' 'replace'
     || lk == 113183                // '$' 'return'
     || lk == 113695                // '$' 'returning'
     || lk == 114207                // '$' 'revalidation'
     || lk == 115231                // '$' 'satisfies'
     || lk == 115743                // '$' 'schema'
     || lk == 116255                // '$' 'schema-attribute'
     || lk == 116767                // '$' 'schema-element'
     || lk == 117279                // '$' 'score'
     || lk == 117791                // '$' 'self'
     || lk == 120351                // '$' 'sliding'
     || lk == 120863                // '$' 'some'
     || lk == 121375                // '$' 'stable'
     || lk == 121887                // '$' 'start'
     || lk == 123423                // '$' 'strict'
     || lk == 124447                // '$' 'structured-item'
     || lk == 124959                // '$' 'switch'
     || lk == 125471                // '$' 'text'
     || lk == 127519                // '$' 'to'
     || lk == 128031                // '$' 'treat'
     || lk == 128543                // '$' 'try'
     || lk == 129055                // '$' 'tumbling'
     || lk == 129567                // '$' 'type'
     || lk == 130079                // '$' 'typeswitch'
     || lk == 130591                // '$' 'union'
     || lk == 131615                // '$' 'unordered'
     || lk == 132127                // '$' 'updating'
     || lk == 133663                // '$' 'validate'
     || lk == 134175                // '$' 'value'
     || lk == 134687                // '$' 'variable'
     || lk == 135199                // '$' 'version'
     || lk == 136735                // '$' 'where'
     || lk == 137247                // '$' 'while'
     || lk == 138783                // '$' 'with'
     || lk == 140831)               // '$' 'xquery'
    {
      lk = memoized(2, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_GroupingVariable();
          lookahead1W(182);         // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
          if (l1 == 52              // ':='
           || l1 == 79)             // 'as'
          {
            if (l1 == 79)           // 'as'
            {
              try_TypeDeclaration();
            }
            lookahead1W(27);        // S^WS | '(:' | ':='
            consumeT(52);           // ':='
            lookahead1W(271);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_ExprSingle();
          }
          if (l1 == 94)             // 'collation'
          {
            consumeT(94);           // 'collation'
            lookahead1W(15);        // URILiteral | S^WS | '(:'
            consumeT(7);            // URILiteral
          }
          memoize(2, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(2, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      try_GroupingVariable();
      lookahead1W(182);             // S^WS | '(:' | ',' | ':=' | 'as' | 'collation' | 'count' | 'for' | 'group' |
                                    // 'let' | 'order' | 'return' | 'stable' | 'where'
      if (l1 == 52                  // ':='
       || l1 == 79)                 // 'as'
      {
        if (l1 == 79)               // 'as'
        {
          try_TypeDeclaration();
        }
        lookahead1W(27);            // S^WS | '(:' | ':='
        consumeT(52);               // ':='
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
      if (l1 == 94)                 // 'collation'
      {
        consumeT(94);               // 'collation'
        lookahead1W(15);            // URILiteral | S^WS | '(:'
        consumeT(7);                // URILiteral
      }
      break;
    case -3:
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_GroupingVariable()
  {
    eventHandler.startNonterminal("GroupingVariable", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("GroupingVariable", e0);
  }

  function try_GroupingVariable()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_OrderByClause()
  {
    eventHandler.startNonterminal("OrderByClause", e0);
    switch (l1)
    {
    case 202:                       // 'order'
      consume(202);                 // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consume(87);                  // 'by'
      break;
    default:
      consume(237);                 // 'stable'
      lookahead1W(67);              // S^WS | '(:' | 'order'
      consume(202);                 // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consume(87);                  // 'by'
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_OrderSpecList();
    eventHandler.endNonterminal("OrderByClause", e0);
  }

  function try_OrderByClause()
  {
    switch (l1)
    {
    case 202:                       // 'order'
      consumeT(202);                // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consumeT(87);                 // 'by'
      break;
    default:
      consumeT(237);                // 'stable'
      lookahead1W(67);              // S^WS | '(:' | 'order'
      consumeT(202);                // 'order'
      lookahead1W(34);              // S^WS | '(:' | 'by'
      consumeT(87);                 // 'by'
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_OrderSpecList();
  }

  function parse_OrderSpecList()
  {
    eventHandler.startNonterminal("OrderSpecList", e0);
    parse_OrderSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_OrderSpec();
    }
    eventHandler.endNonterminal("OrderSpecList", e0);
  }

  function try_OrderSpecList()
  {
    try_OrderSpec();
    for (;;)
    {
      lookahead1W(176);             // S^WS | '(:' | ',' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' |
                                    // 'stable' | 'where'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_OrderSpec();
    }
  }

  function parse_OrderSpec()
  {
    eventHandler.startNonterminal("OrderSpec", e0);
    parse_ExprSingle();
    whitespace();
    parse_OrderModifier();
    eventHandler.endNonterminal("OrderSpec", e0);
  }

  function try_OrderSpec()
  {
    try_ExprSingle();
    try_OrderModifier();
  }

  function parse_OrderModifier()
  {
    eventHandler.startNonterminal("OrderModifier", e0);
    if (l1 == 80                    // 'ascending'
     || l1 == 113)                  // 'descending'
    {
      switch (l1)
      {
      case 80:                      // 'ascending'
        consume(80);                // 'ascending'
        break;
      default:
        consume(113);               // 'descending'
      }
    }
    lookahead1W(179);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 123)                  // 'empty'
    {
      consume(123);                 // 'empty'
      lookahead1W(121);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 147:                     // 'greatest'
        consume(147);               // 'greatest'
        break;
      default:
        consume(173);               // 'least'
      }
    }
    lookahead1W(177);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 94)                   // 'collation'
    {
      consume(94);                  // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
    }
    eventHandler.endNonterminal("OrderModifier", e0);
  }

  function try_OrderModifier()
  {
    if (l1 == 80                    // 'ascending'
     || l1 == 113)                  // 'descending'
    {
      switch (l1)
      {
      case 80:                      // 'ascending'
        consumeT(80);               // 'ascending'
        break;
      default:
        consumeT(113);              // 'descending'
      }
    }
    lookahead1W(179);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'empty' | 'for' | 'group' | 'let' |
                                    // 'order' | 'return' | 'stable' | 'where'
    if (l1 == 123)                  // 'empty'
    {
      consumeT(123);                // 'empty'
      lookahead1W(121);             // S^WS | '(:' | 'greatest' | 'least'
      switch (l1)
      {
      case 147:                     // 'greatest'
        consumeT(147);              // 'greatest'
        break;
      default:
        consumeT(173);              // 'least'
      }
    }
    lookahead1W(177);               // S^WS | '(:' | ',' | 'collation' | 'count' | 'for' | 'group' | 'let' | 'order' |
                                    // 'return' | 'stable' | 'where'
    if (l1 == 94)                   // 'collation'
    {
      consumeT(94);                 // 'collation'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consumeT(7);                  // URILiteral
    }
  }

  function parse_ReturnClause()
  {
    eventHandler.startNonterminal("ReturnClause", e0);
    consume(221);                   // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReturnClause", e0);
  }

  function try_ReturnClause()
  {
    consumeT(221);                  // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_QuantifiedExpr()
  {
    eventHandler.startNonterminal("QuantifiedExpr", e0);
    switch (l1)
    {
    case 236:                       // 'some'
      consume(236);                 // 'some'
      break;
    default:
      consume(129);                 // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_QuantifiedVarDecl();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_QuantifiedVarDecl();
    }
    consume(225);                   // 'satisfies'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedExpr", e0);
  }

  function try_QuantifiedExpr()
  {
    switch (l1)
    {
    case 236:                       // 'some'
      consumeT(236);                // 'some'
      break;
    default:
      consumeT(129);                // 'every'
    }
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_QuantifiedVarDecl();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_QuantifiedVarDecl();
    }
    consumeT(225);                  // 'satisfies'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_QuantifiedVarDecl()
  {
    eventHandler.startNonterminal("QuantifiedVarDecl", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consume(154);                   // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("QuantifiedVarDecl", e0);
  }

  function try_QuantifiedVarDecl()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(110);               // S^WS | '(:' | 'as' | 'in'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(53);                // S^WS | '(:' | 'in'
    consumeT(154);                  // 'in'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchExpr()
  {
    eventHandler.startNonterminal("SwitchExpr", e0);
    consume(244);                   // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consume(109);                   // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(221);                   // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchExpr", e0);
  }

  function try_SwitchExpr()
  {
    consumeT(244);                  // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_SwitchCaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consumeT(109);                  // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(221);                  // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseClause()
  {
    eventHandler.startNonterminal("SwitchCaseClause", e0);
    for (;;)
    {
      consume(88);                  // 'case'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consume(221);                   // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseClause", e0);
  }

  function try_SwitchCaseClause()
  {
    for (;;)
    {
      consumeT(88);                 // 'case'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consumeT(221);                  // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SwitchCaseOperand()
  {
    eventHandler.startNonterminal("SwitchCaseOperand", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SwitchCaseOperand", e0);
  }

  function try_SwitchCaseOperand()
  {
    try_ExprSingle();
  }

  function parse_TypeswitchExpr()
  {
    eventHandler.startNonterminal("TypeswitchExpr", e0);
    consume(254);                   // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consume(109);                   // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(221);                   // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TypeswitchExpr", e0);
  }

  function try_TypeswitchExpr()
  {
    consumeT(254);                  // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_CaseClause();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consumeT(109);                  // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(221);                  // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CaseClause()
  {
    eventHandler.startNonterminal("CaseClause", e0);
    consume(88);                    // 'case'
    lookahead1W(265);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(79);                  // 'as'
    }
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceTypeUnion();
    consume(221);                   // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("CaseClause", e0);
  }

  function try_CaseClause()
  {
    consumeT(88);                   // 'case'
    lookahead1W(265);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(79);                 // 'as'
    }
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceTypeUnion();
    consumeT(221);                  // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_SequenceTypeUnion()
  {
    eventHandler.startNonterminal("SequenceTypeUnion", e0);
    parse_SequenceType();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 280)                // '|'
      {
        break;
      }
      consume(280);                 // '|'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("SequenceTypeUnion", e0);
  }

  function try_SequenceTypeUnion()
  {
    try_SequenceType();
    for (;;)
    {
      lookahead1W(134);             // S^WS | '(:' | 'return' | '|'
      if (l1 != 280)                // '|'
      {
        break;
      }
      consumeT(280);                // '|'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_IfExpr()
  {
    eventHandler.startNonterminal("IfExpr", e0);
    consume(152);                   // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consume(246);                   // 'then'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(122);                   // 'else'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("IfExpr", e0);
  }

  function try_IfExpr()
  {
    consumeT(152);                  // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consumeT(246);                  // 'then'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(122);                  // 'else'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_TryCatchExpr()
  {
    eventHandler.startNonterminal("TryCatchExpr", e0);
    parse_TryClause();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      whitespace();
      parse_CatchClause();
      lookahead1W(183);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
      if (l1 != 91)                 // 'catch'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchExpr", e0);
  }

  function try_TryCatchExpr()
  {
    try_TryClause();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      try_CatchClause();
      lookahead1W(183);             // S^WS | EOF | '(:' | ')' | ',' | ':' | ';' | ']' | 'after' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'catch' | 'collation' | 'count' | 'default' |
                                    // 'descending' | 'else' | 'empty' | 'end' | 'for' | 'group' | 'into' | 'let' |
                                    // 'modify' | 'only' | 'order' | 'return' | 'satisfies' | 'stable' | 'start' |
                                    // 'where' | 'with' | '|}' | '}'
      if (l1 != 91)                 // 'catch'
      {
        break;
      }
    }
  }

  function parse_TryClause()
  {
    eventHandler.startNonterminal("TryClause", e0);
    consume(251);                   // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TryTargetExpr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("TryClause", e0);
  }

  function try_TryClause()
  {
    consumeT(251);                  // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TryTargetExpr();
    consumeT(283);                  // '}'
  }

  function parse_TryTargetExpr()
  {
    eventHandler.startNonterminal("TryTargetExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("TryTargetExpr", e0);
  }

  function try_TryTargetExpr()
  {
    try_Expr();
  }

  function parse_CatchClause()
  {
    eventHandler.startNonterminal("CatchClause", e0);
    consume(91);                    // 'catch'
    lookahead1W(258);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_CatchErrorList();
    consume(277);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("CatchClause", e0);
  }

  function try_CatchClause()
  {
    consumeT(91);                   // 'catch'
    lookahead1W(258);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_CatchErrorList();
    consumeT(277);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(283);                  // '}'
  }

  function parse_CatchErrorList()
  {
    eventHandler.startNonterminal("CatchErrorList", e0);
    parse_NameTest();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | '{' | '|'
      if (l1 != 280)                // '|'
      {
        break;
      }
      consume(280);                 // '|'
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NameTest();
    }
    eventHandler.endNonterminal("CatchErrorList", e0);
  }

  function try_CatchErrorList()
  {
    try_NameTest();
    for (;;)
    {
      lookahead1W(136);             // S^WS | '(:' | '{' | '|'
      if (l1 != 280)                // '|'
      {
        break;
      }
      consumeT(280);                // '|'
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_NameTest();
    }
  }

  function parse_OrExpr()
  {
    eventHandler.startNonterminal("OrExpr", e0);
    parse_AndExpr();
    for (;;)
    {
      if (l1 != 201)                // 'or'
      {
        break;
      }
      consume(201);                 // 'or'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AndExpr();
    }
    eventHandler.endNonterminal("OrExpr", e0);
  }

  function try_OrExpr()
  {
    try_AndExpr();
    for (;;)
    {
      if (l1 != 201)                // 'or'
      {
        break;
      }
      consumeT(201);                // 'or'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AndExpr();
    }
  }

  function parse_AndExpr()
  {
    eventHandler.startNonterminal("AndExpr", e0);
    parse_ComparisonExpr();
    for (;;)
    {
      if (l1 != 75)                 // 'and'
      {
        break;
      }
      consume(75);                  // 'and'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ComparisonExpr();
    }
    eventHandler.endNonterminal("AndExpr", e0);
  }

  function try_AndExpr()
  {
    try_ComparisonExpr();
    for (;;)
    {
      if (l1 != 75)                 // 'and'
      {
        break;
      }
      consumeT(75);                 // 'and'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ComparisonExpr();
    }
  }

  function parse_ComparisonExpr()
  {
    eventHandler.startNonterminal("ComparisonExpr", e0);
    parse_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 54                    // '<'
     || l1 == 57                    // '<<'
     || l1 == 58                    // '<='
     || l1 == 60                    // '='
     || l1 == 61                    // '>'
     || l1 == 62                    // '>='
     || l1 == 63                    // '>>'
     || l1 == 128                   // 'eq'
     || l1 == 146                   // 'ge'
     || l1 == 150                   // 'gt'
     || l1 == 164                   // 'is'
     || l1 == 172                   // 'le'
     || l1 == 178                   // 'lt'
     || l1 == 187)                  // 'ne'
    {
      switch (l1)
      {
      case 128:                     // 'eq'
      case 146:                     // 'ge'
      case 150:                     // 'gt'
      case 172:                     // 'le'
      case 178:                     // 'lt'
      case 187:                     // 'ne'
        whitespace();
        parse_ValueComp();
        break;
      case 57:                      // '<<'
      case 63:                      // '>>'
      case 164:                     // 'is'
        whitespace();
        parse_NodeComp();
        break;
      default:
        whitespace();
        parse_GeneralComp();
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_FTContainsExpr();
    }
    eventHandler.endNonterminal("ComparisonExpr", e0);
  }

  function try_ComparisonExpr()
  {
    try_FTContainsExpr();
    if (l1 == 27                    // '!='
     || l1 == 54                    // '<'
     || l1 == 57                    // '<<'
     || l1 == 58                    // '<='
     || l1 == 60                    // '='
     || l1 == 61                    // '>'
     || l1 == 62                    // '>='
     || l1 == 63                    // '>>'
     || l1 == 128                   // 'eq'
     || l1 == 146                   // 'ge'
     || l1 == 150                   // 'gt'
     || l1 == 164                   // 'is'
     || l1 == 172                   // 'le'
     || l1 == 178                   // 'lt'
     || l1 == 187)                  // 'ne'
    {
      switch (l1)
      {
      case 128:                     // 'eq'
      case 146:                     // 'ge'
      case 150:                     // 'gt'
      case 172:                     // 'le'
      case 178:                     // 'lt'
      case 187:                     // 'ne'
        try_ValueComp();
        break;
      case 57:                      // '<<'
      case 63:                      // '>>'
      case 164:                     // 'is'
        try_NodeComp();
        break;
      default:
        try_GeneralComp();
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_FTContainsExpr();
    }
  }

  function parse_FTContainsExpr()
  {
    eventHandler.startNonterminal("FTContainsExpr", e0);
    parse_StringConcatExpr();
    if (l1 == 99)                   // 'contains'
    {
      consume(99);                  // 'contains'
      lookahead1W(76);              // S^WS | '(:' | 'text'
      consume(245);                 // 'text'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      if (l1 == 272)                // 'without'
      {
        whitespace();
        parse_FTIgnoreOption();
      }
    }
    eventHandler.endNonterminal("FTContainsExpr", e0);
  }

  function try_FTContainsExpr()
  {
    try_StringConcatExpr();
    if (l1 == 99)                   // 'contains'
    {
      consumeT(99);                 // 'contains'
      lookahead1W(76);              // S^WS | '(:' | 'text'
      consumeT(245);                // 'text'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      if (l1 == 272)                // 'without'
      {
        try_FTIgnoreOption();
      }
    }
  }

  function parse_StringConcatExpr()
  {
    eventHandler.startNonterminal("StringConcatExpr", e0);
    parse_RangeExpr();
    for (;;)
    {
      if (l1 != 281)                // '||'
      {
        break;
      }
      consume(281);                 // '||'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_RangeExpr();
    }
    eventHandler.endNonterminal("StringConcatExpr", e0);
  }

  function try_StringConcatExpr()
  {
    try_RangeExpr();
    for (;;)
    {
      if (l1 != 281)                // '||'
      {
        break;
      }
      consumeT(281);                // '||'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_RangeExpr();
    }
  }

  function parse_RangeExpr()
  {
    eventHandler.startNonterminal("RangeExpr", e0);
    parse_AdditiveExpr();
    if (l1 == 249)                  // 'to'
    {
      consume(249);                 // 'to'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("RangeExpr", e0);
  }

  function try_RangeExpr()
  {
    try_AdditiveExpr();
    if (l1 == 249)                  // 'to'
    {
      consumeT(249);                // 'to'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_AdditiveExpr()
  {
    eventHandler.startNonterminal("AdditiveExpr", e0);
    parse_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        consume(40);                // '+'
        break;
      default:
        consume(42);                // '-'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_MultiplicativeExpr();
    }
    eventHandler.endNonterminal("AdditiveExpr", e0);
  }

  function try_AdditiveExpr()
  {
    try_MultiplicativeExpr();
    for (;;)
    {
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 40:                      // '+'
        consumeT(40);               // '+'
        break;
      default:
        consumeT(42);               // '-'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_MultiplicativeExpr();
    }
  }

  function parse_MultiplicativeExpr()
  {
    eventHandler.startNonterminal("MultiplicativeExpr", e0);
    parse_UnionExpr();
    for (;;)
    {
      if (l1 != 38                  // '*'
       && l1 != 118                 // 'div'
       && l1 != 151                 // 'idiv'
       && l1 != 181)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consume(38);                // '*'
        break;
      case 118:                     // 'div'
        consume(118);               // 'div'
        break;
      case 151:                     // 'idiv'
        consume(151);               // 'idiv'
        break;
      default:
        consume(181);               // 'mod'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_UnionExpr();
    }
    eventHandler.endNonterminal("MultiplicativeExpr", e0);
  }

  function try_MultiplicativeExpr()
  {
    try_UnionExpr();
    for (;;)
    {
      if (l1 != 38                  // '*'
       && l1 != 118                 // 'div'
       && l1 != 151                 // 'idiv'
       && l1 != 181)                // 'mod'
      {
        break;
      }
      switch (l1)
      {
      case 38:                      // '*'
        consumeT(38);               // '*'
        break;
      case 118:                     // 'div'
        consumeT(118);              // 'div'
        break;
      case 151:                     // 'idiv'
        consumeT(151);              // 'idiv'
        break;
      default:
        consumeT(181);              // 'mod'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_UnionExpr();
    }
  }

  function parse_UnionExpr()
  {
    eventHandler.startNonterminal("UnionExpr", e0);
    parse_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 255                 // 'union'
       && l1 != 280)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 255:                     // 'union'
        consume(255);               // 'union'
        break;
      default:
        consume(280);               // '|'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_IntersectExceptExpr();
    }
    eventHandler.endNonterminal("UnionExpr", e0);
  }

  function try_UnionExpr()
  {
    try_IntersectExceptExpr();
    for (;;)
    {
      if (l1 != 255                 // 'union'
       && l1 != 280)                // '|'
      {
        break;
      }
      switch (l1)
      {
      case 255:                     // 'union'
        consumeT(255);              // 'union'
        break;
      default:
        consumeT(280);              // '|'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_IntersectExceptExpr();
    }
  }

  function parse_IntersectExceptExpr()
  {
    eventHandler.startNonterminal("IntersectExceptExpr", e0);
    parse_InstanceofExpr();
    for (;;)
    {
      lookahead1W(222);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 131                 // 'except'
       && l1 != 162)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 162:                     // 'intersect'
        consume(162);               // 'intersect'
        break;
      default:
        consume(131);               // 'except'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_InstanceofExpr();
    }
    eventHandler.endNonterminal("IntersectExceptExpr", e0);
  }

  function try_IntersectExceptExpr()
  {
    try_InstanceofExpr();
    for (;;)
    {
      lookahead1W(222);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'intersect' | 'into' | 'is' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 131                 // 'except'
       && l1 != 162)                // 'intersect'
      {
        break;
      }
      switch (l1)
      {
      case 162:                     // 'intersect'
        consumeT(162);              // 'intersect'
        break;
      default:
        consumeT(131);              // 'except'
      }
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_InstanceofExpr();
    }
  }

  function parse_InstanceofExpr()
  {
    eventHandler.startNonterminal("InstanceofExpr", e0);
    parse_TreatExpr();
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 160)                  // 'instance'
    {
      consume(160);                 // 'instance'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consume(197);                 // 'of'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("InstanceofExpr", e0);
  }

  function try_InstanceofExpr()
  {
    try_TreatExpr();
    lookahead1W(223);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    if (l1 == 160)                  // 'instance'
    {
      consumeT(160);                // 'instance'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consumeT(197);                // 'of'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_TreatExpr()
  {
    eventHandler.startNonterminal("TreatExpr", e0);
    parse_CastableExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 250)                  // 'treat'
    {
      consume(250);                 // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(79);                  // 'as'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    eventHandler.endNonterminal("TreatExpr", e0);
  }

  function try_TreatExpr()
  {
    try_CastableExpr();
    lookahead1W(224);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 250)                  // 'treat'
    {
      consumeT(250);                // 'treat'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(79);                 // 'as'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
  }

  function parse_CastableExpr()
  {
    eventHandler.startNonterminal("CastableExpr", e0);
    parse_CastExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 90)                   // 'castable'
    {
      consume(90);                  // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(79);                  // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastableExpr", e0);
  }

  function try_CastableExpr()
  {
    try_CastExpr();
    lookahead1W(225);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' | 'count' |
                                    // 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' |
                                    // 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
    if (l1 == 90)                   // 'castable'
    {
      consumeT(90);                 // 'castable'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(79);                 // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_CastExpr()
  {
    eventHandler.startNonterminal("CastExpr", e0);
    parse_UnaryExpr();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 89)                   // 'cast'
    {
      consume(89);                  // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(79);                  // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SingleType();
    }
    eventHandler.endNonterminal("CastExpr", e0);
  }

  function try_CastExpr()
  {
    try_UnaryExpr();
    lookahead1W(227);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'cast' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 89)                   // 'cast'
    {
      consumeT(89);                 // 'cast'
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(79);                 // 'as'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SingleType();
    }
  }

  function parse_UnaryExpr()
  {
    eventHandler.startNonterminal("UnaryExpr", e0);
    for (;;)
    {
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        consume(42);                // '-'
        break;
      default:
        consume(40);                // '+'
      }
    }
    whitespace();
    parse_ValueExpr();
    eventHandler.endNonterminal("UnaryExpr", e0);
  }

  function try_UnaryExpr()
  {
    for (;;)
    {
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      if (l1 != 40                  // '+'
       && l1 != 42)                 // '-'
      {
        break;
      }
      switch (l1)
      {
      case 42:                      // '-'
        consumeT(42);               // '-'
        break;
      default:
        consumeT(40);               // '+'
      }
    }
    try_ValueExpr();
  }

  function parse_ValueExpr()
  {
    eventHandler.startNonterminal("ValueExpr", e0);
    switch (l1)
    {
    case 261:                       // 'validate'
      lookahead2W(248);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 87813:                     // 'validate' 'lax'
    case 123653:                    // 'validate' 'strict'
    case 129797:                    // 'validate' 'type'
    case 142085:                    // 'validate' '{'
      parse_ValidateExpr();
      break;
    case 35:                        // '(#'
      parse_ExtensionExpr();
      break;
    default:
      parse_SimpleMapExpr();
    }
    eventHandler.endNonterminal("ValueExpr", e0);
  }

  function try_ValueExpr()
  {
    switch (l1)
    {
    case 261:                       // 'validate'
      lookahead2W(248);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'lax' | 'le' | 'let' |
                                    // 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' |
                                    // 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' | 'strict' | 'times' |
                                    // 'to' | 'treat' | 'type' | 'union' | 'where' | 'with' | 'words' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 87813:                     // 'validate' 'lax'
    case 123653:                    // 'validate' 'strict'
    case 129797:                    // 'validate' 'type'
    case 142085:                    // 'validate' '{'
      try_ValidateExpr();
      break;
    case 35:                        // '(#'
      try_ExtensionExpr();
      break;
    default:
      try_SimpleMapExpr();
    }
  }

  function parse_SimpleMapExpr()
  {
    eventHandler.startNonterminal("SimpleMapExpr", e0);
    parse_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consume(26);                  // '!'
      lookahead1W(269);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PathExpr();
    }
    eventHandler.endNonterminal("SimpleMapExpr", e0);
  }

  function try_SimpleMapExpr()
  {
    try_PathExpr();
    for (;;)
    {
      if (l1 != 26)                 // '!'
      {
        break;
      }
      consumeT(26);                 // '!'
      lookahead1W(269);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_PathExpr();
    }
  }

  function parse_GeneralComp()
  {
    eventHandler.startNonterminal("GeneralComp", e0);
    switch (l1)
    {
    case 60:                        // '='
      consume(60);                  // '='
      break;
    case 27:                        // '!='
      consume(27);                  // '!='
      break;
    case 54:                        // '<'
      consume(54);                  // '<'
      break;
    case 58:                        // '<='
      consume(58);                  // '<='
      break;
    case 61:                        // '>'
      consume(61);                  // '>'
      break;
    default:
      consume(62);                  // '>='
    }
    eventHandler.endNonterminal("GeneralComp", e0);
  }

  function try_GeneralComp()
  {
    switch (l1)
    {
    case 60:                        // '='
      consumeT(60);                 // '='
      break;
    case 27:                        // '!='
      consumeT(27);                 // '!='
      break;
    case 54:                        // '<'
      consumeT(54);                 // '<'
      break;
    case 58:                        // '<='
      consumeT(58);                 // '<='
      break;
    case 61:                        // '>'
      consumeT(61);                 // '>'
      break;
    default:
      consumeT(62);                 // '>='
    }
  }

  function parse_ValueComp()
  {
    eventHandler.startNonterminal("ValueComp", e0);
    switch (l1)
    {
    case 128:                       // 'eq'
      consume(128);                 // 'eq'
      break;
    case 187:                       // 'ne'
      consume(187);                 // 'ne'
      break;
    case 178:                       // 'lt'
      consume(178);                 // 'lt'
      break;
    case 172:                       // 'le'
      consume(172);                 // 'le'
      break;
    case 150:                       // 'gt'
      consume(150);                 // 'gt'
      break;
    default:
      consume(146);                 // 'ge'
    }
    eventHandler.endNonterminal("ValueComp", e0);
  }

  function try_ValueComp()
  {
    switch (l1)
    {
    case 128:                       // 'eq'
      consumeT(128);                // 'eq'
      break;
    case 187:                       // 'ne'
      consumeT(187);                // 'ne'
      break;
    case 178:                       // 'lt'
      consumeT(178);                // 'lt'
      break;
    case 172:                       // 'le'
      consumeT(172);                // 'le'
      break;
    case 150:                       // 'gt'
      consumeT(150);                // 'gt'
      break;
    default:
      consumeT(146);                // 'ge'
    }
  }

  function parse_NodeComp()
  {
    eventHandler.startNonterminal("NodeComp", e0);
    switch (l1)
    {
    case 164:                       // 'is'
      consume(164);                 // 'is'
      break;
    case 57:                        // '<<'
      consume(57);                  // '<<'
      break;
    default:
      consume(63);                  // '>>'
    }
    eventHandler.endNonterminal("NodeComp", e0);
  }

  function try_NodeComp()
  {
    switch (l1)
    {
    case 164:                       // 'is'
      consumeT(164);                // 'is'
      break;
    case 57:                        // '<<'
      consumeT(57);                 // '<<'
      break;
    default:
      consumeT(63);                 // '>>'
    }
  }

  function parse_ValidateExpr()
  {
    eventHandler.startNonterminal("ValidateExpr", e0);
    consume(261);                   // 'validate'
    lookahead1W(160);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 277)                  // '{'
    {
      switch (l1)
      {
      case 253:                     // 'type'
        consume(253);               // 'type'
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        break;
      default:
        whitespace();
        parse_ValidationMode();
      }
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("ValidateExpr", e0);
  }

  function try_ValidateExpr()
  {
    consumeT(261);                  // 'validate'
    lookahead1W(160);               // S^WS | '(:' | 'lax' | 'strict' | 'type' | '{'
    if (l1 != 277)                  // '{'
    {
      switch (l1)
      {
      case 253:                     // 'type'
        consumeT(253);              // 'type'
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        try_TypeName();
        break;
      default:
        try_ValidationMode();
      }
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(283);                  // '}'
  }

  function parse_ValidationMode()
  {
    eventHandler.startNonterminal("ValidationMode", e0);
    switch (l1)
    {
    case 171:                       // 'lax'
      consume(171);                 // 'lax'
      break;
    default:
      consume(241);                 // 'strict'
    }
    eventHandler.endNonterminal("ValidationMode", e0);
  }

  function try_ValidationMode()
  {
    switch (l1)
    {
    case 171:                       // 'lax'
      consumeT(171);                // 'lax'
      break;
    default:
      consumeT(241);                // 'strict'
    }
  }

  function parse_ExtensionExpr()
  {
    eventHandler.startNonterminal("ExtensionExpr", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(277);                   // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    consume(283);                   // '}'
    eventHandler.endNonterminal("ExtensionExpr", e0);
  }

  function try_ExtensionExpr()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(277);                  // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      try_Expr();
    }
    consumeT(283);                  // '}'
  }

  function parse_Pragma()
  {
    eventHandler.startNonterminal("Pragma", e0);
    consume(35);                    // '(#'
    lookahead1(252);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 21)                   // S
    {
      consume(21);                  // S
    }
    parse_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      consume(21);                  // S
      lookahead1(0);                // PragmaContents
      consume(1);                   // PragmaContents
    }
    lookahead1(5);                  // '#)'
    consume(30);                    // '#)'
    eventHandler.endNonterminal("Pragma", e0);
  }

  function try_Pragma()
  {
    consumeT(35);                   // '(#'
    lookahead1(252);                // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
    if (l1 == 21)                   // S
    {
      consumeT(21);                 // S
    }
    try_EQName();
    lookahead1(10);                 // S | '#)'
    if (l1 == 21)                   // S
    {
      consumeT(21);                 // S
      lookahead1(0);                // PragmaContents
      consumeT(1);                  // PragmaContents
    }
    lookahead1(5);                  // '#)'
    consumeT(30);                   // '#)'
  }

  function parse_PathExpr()
  {
    eventHandler.startNonterminal("PathExpr", e0);
    switch (l1)
    {
    case 46:                        // '/'
      consume(46);                  // '/'
      lookahead1W(288);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '>' | '>=' | '>>' | '?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '{|' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 49:                      // ':'
      case 53:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '>'
      case 62:                      // '>='
      case 63:                      // '>>'
      case 69:                      // ']'
      case 87:                      // 'by'
      case 99:                      // 'contains'
      case 206:                     // 'paragraphs'
      case 233:                     // 'sentences'
      case 248:                     // 'times'
      case 274:                     // 'words'
      case 280:                     // '|'
      case 281:                     // '||'
      case 282:                     // '|}'
      case 283:                     // '}'
        break;
      default:
        whitespace();
        parse_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      consume(47);                  // '//'
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_RelativePathExpr();
      break;
    default:
      parse_RelativePathExpr();
    }
    eventHandler.endNonterminal("PathExpr", e0);
  }

  function try_PathExpr()
  {
    switch (l1)
    {
    case 46:                        // '/'
      consumeT(46);                 // '/'
      lookahead1W(288);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | ')' | '*' |
                                    // '+' | ',' | '-' | '.' | '..' | ':' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' |
                                    // '=' | '>' | '>=' | '>>' | '?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'by' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'contains' | 'context' | 'continue' |
                                    // 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '{|' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 25:                      // EOF
      case 26:                      // '!'
      case 27:                      // '!='
      case 37:                      // ')'
      case 38:                      // '*'
      case 40:                      // '+'
      case 41:                      // ','
      case 42:                      // '-'
      case 49:                      // ':'
      case 53:                      // ';'
      case 57:                      // '<<'
      case 58:                      // '<='
      case 60:                      // '='
      case 61:                      // '>'
      case 62:                      // '>='
      case 63:                      // '>>'
      case 69:                      // ']'
      case 87:                      // 'by'
      case 99:                      // 'contains'
      case 206:                     // 'paragraphs'
      case 233:                     // 'sentences'
      case 248:                     // 'times'
      case 274:                     // 'words'
      case 280:                     // '|'
      case 281:                     // '||'
      case 282:                     // '|}'
      case 283:                     // '}'
        break;
      default:
        try_RelativePathExpr();
      }
      break;
    case 47:                        // '//'
      consumeT(47);                 // '//'
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_RelativePathExpr();
      break;
    default:
      try_RelativePathExpr();
    }
  }

  function parse_RelativePathExpr()
  {
    eventHandler.startNonterminal("RelativePathExpr", e0);
    parse_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(269);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // '+'
       && lk != 41                  // ','
       && lk != 42                  // '-'
       && lk != 46                  // '/'
       && lk != 47                  // '//'
       && lk != 49                  // ':'
       && lk != 53                  // ';'
       && lk != 54                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '>'
       && lk != 62                  // '>='
       && lk != 63                  // '>>'
       && lk != 69                  // ']'
       && lk != 70                  // 'after'
       && lk != 75                  // 'and'
       && lk != 79                  // 'as'
       && lk != 80                  // 'ascending'
       && lk != 81                  // 'at'
       && lk != 84                  // 'before'
       && lk != 87                  // 'by'
       && lk != 88                  // 'case'
       && lk != 89                  // 'cast'
       && lk != 90                  // 'castable'
       && lk != 94                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 105                 // 'count'
       && lk != 109                 // 'default'
       && lk != 113                 // 'descending'
       && lk != 118                 // 'div'
       && lk != 122                 // 'else'
       && lk != 123                 // 'empty'
       && lk != 126                 // 'end'
       && lk != 128                 // 'eq'
       && lk != 131                 // 'except'
       && lk != 137                 // 'for'
       && lk != 146                 // 'ge'
       && lk != 148                 // 'group'
       && lk != 150                 // 'gt'
       && lk != 151                 // 'idiv'
       && lk != 160                 // 'instance'
       && lk != 162                 // 'intersect'
       && lk != 163                 // 'into'
       && lk != 164                 // 'is'
       && lk != 172                 // 'le'
       && lk != 174                 // 'let'
       && lk != 178                 // 'lt'
       && lk != 181                 // 'mod'
       && lk != 182                 // 'modify'
       && lk != 187                 // 'ne'
       && lk != 199                 // 'only'
       && lk != 201                 // 'or'
       && lk != 202                 // 'order'
       && lk != 206                 // 'paragraphs'
       && lk != 221                 // 'return'
       && lk != 225                 // 'satisfies'
       && lk != 233                 // 'sentences'
       && lk != 237                 // 'stable'
       && lk != 238                 // 'start'
       && lk != 248                 // 'times'
       && lk != 249                 // 'to'
       && lk != 250                 // 'treat'
       && lk != 255                 // 'union'
       && lk != 267                 // 'where'
       && lk != 271                 // 'with'
       && lk != 274                 // 'words'
       && lk != 280                 // '|'
       && lk != 281                 // '||'
       && lk != 282                 // '|}'
       && lk != 283                 // '}'
       && lk != 23578               // '!' '/'
       && lk != 24090)              // '!' '//'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 46:                // '/'
              consumeT(46);         // '/'
              break;
            case 47:                // '//'
              consumeT(47);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(268);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
            try_StepExpr();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(3, e0, lk);
        }
      }
      if (lk != -1
       && lk != 46                  // '/'
       && lk != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        consume(46);                // '/'
        break;
      case 47:                      // '//'
        consume(47);                // '//'
        break;
      default:
        consume(26);                // '!'
      }
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_StepExpr();
    }
    eventHandler.endNonterminal("RelativePathExpr", e0);
  }

  function try_RelativePathExpr()
  {
    try_StepExpr();
    for (;;)
    {
      switch (l1)
      {
      case 26:                      // '!'
        lookahead2W(269);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 27                  // '!='
       && lk != 37                  // ')'
       && lk != 38                  // '*'
       && lk != 40                  // '+'
       && lk != 41                  // ','
       && lk != 42                  // '-'
       && lk != 46                  // '/'
       && lk != 47                  // '//'
       && lk != 49                  // ':'
       && lk != 53                  // ';'
       && lk != 54                  // '<'
       && lk != 57                  // '<<'
       && lk != 58                  // '<='
       && lk != 60                  // '='
       && lk != 61                  // '>'
       && lk != 62                  // '>='
       && lk != 63                  // '>>'
       && lk != 69                  // ']'
       && lk != 70                  // 'after'
       && lk != 75                  // 'and'
       && lk != 79                  // 'as'
       && lk != 80                  // 'ascending'
       && lk != 81                  // 'at'
       && lk != 84                  // 'before'
       && lk != 87                  // 'by'
       && lk != 88                  // 'case'
       && lk != 89                  // 'cast'
       && lk != 90                  // 'castable'
       && lk != 94                  // 'collation'
       && lk != 99                  // 'contains'
       && lk != 105                 // 'count'
       && lk != 109                 // 'default'
       && lk != 113                 // 'descending'
       && lk != 118                 // 'div'
       && lk != 122                 // 'else'
       && lk != 123                 // 'empty'
       && lk != 126                 // 'end'
       && lk != 128                 // 'eq'
       && lk != 131                 // 'except'
       && lk != 137                 // 'for'
       && lk != 146                 // 'ge'
       && lk != 148                 // 'group'
       && lk != 150                 // 'gt'
       && lk != 151                 // 'idiv'
       && lk != 160                 // 'instance'
       && lk != 162                 // 'intersect'
       && lk != 163                 // 'into'
       && lk != 164                 // 'is'
       && lk != 172                 // 'le'
       && lk != 174                 // 'let'
       && lk != 178                 // 'lt'
       && lk != 181                 // 'mod'
       && lk != 182                 // 'modify'
       && lk != 187                 // 'ne'
       && lk != 199                 // 'only'
       && lk != 201                 // 'or'
       && lk != 202                 // 'order'
       && lk != 206                 // 'paragraphs'
       && lk != 221                 // 'return'
       && lk != 225                 // 'satisfies'
       && lk != 233                 // 'sentences'
       && lk != 237                 // 'stable'
       && lk != 238                 // 'start'
       && lk != 248                 // 'times'
       && lk != 249                 // 'to'
       && lk != 250                 // 'treat'
       && lk != 255                 // 'union'
       && lk != 267                 // 'where'
       && lk != 271                 // 'with'
       && lk != 274                 // 'words'
       && lk != 280                 // '|'
       && lk != 281                 // '||'
       && lk != 282                 // '|}'
       && lk != 283                 // '}'
       && lk != 23578               // '!' '/'
       && lk != 24090)              // '!' '//'
      {
        lk = memoized(3, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            switch (l1)
            {
            case 46:                // '/'
              consumeT(46);         // '/'
              break;
            case 47:                // '//'
              consumeT(47);         // '//'
              break;
            default:
              consumeT(26);         // '!'
            }
            lookahead1W(268);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
            try_StepExpr();
            memoize(3, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(3, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 46                  // '/'
       && lk != 47)                 // '//'
      {
        break;
      }
      switch (l1)
      {
      case 46:                      // '/'
        consumeT(46);               // '/'
        break;
      case 47:                      // '//'
        consumeT(47);               // '//'
        break;
      default:
        consumeT(26);               // '!'
      }
      lookahead1W(268);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
      try_StepExpr();
    }
  }

  function parse_StepExpr()
  {
    eventHandler.startNonterminal("StepExpr", e0);
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(286);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 121:                       // 'element'
      lookahead2W(285);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 185:                       // 'namespace'
    case 217:                       // 'processing-instruction'
      lookahead2W(284);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 96:                        // 'comment'
    case 119:                       // 'document'
    case 179:                       // 'map'
    case 203:                       // 'ordered'
    case 245:                       // 'text'
    case 257:                       // 'unordered'
      lookahead2W(247);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 78:                        // 'array'
    case 124:                       // 'empty-sequence'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 243:                       // 'structured-item'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
      lookahead2W(239);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 207:                       // 'parent'
    case 213:                       // 'preceding'
    case 214:                       // 'preceding-sibling'
    case 230:                       // 'self'
      lookahead2W(246);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 75:                        // 'and'
    case 77:                        // 'append'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 120:                       // 'document-node'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 145:                       // 'function'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 166:                       // 'json'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 181:                       // 'mod'
    case 182:                       // 'modify'
    case 183:                       // 'module'
    case 186:                       // 'namespace-node'
    case 187:                       // 'ne'
    case 192:                       // 'node'
    case 193:                       // 'nodes'
    case 195:                       // 'object'
    case 199:                       // 'only'
    case 200:                       // 'option'
    case 201:                       // 'or'
    case 202:                       // 'order'
    case 204:                       // 'ordering'
    case 219:                       // 'rename'
    case 220:                       // 'replace'
    case 221:                       // 'return'
    case 222:                       // 'returning'
    case 223:                       // 'revalidation'
    case 225:                       // 'satisfies'
    case 226:                       // 'schema'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 229:                       // 'score'
    case 235:                       // 'sliding'
    case 236:                       // 'some'
    case 237:                       // 'stable'
    case 238:                       // 'start'
    case 241:                       // 'strict'
    case 249:                       // 'to'
    case 250:                       // 'treat'
    case 251:                       // 'try'
    case 252:                       // 'tumbling'
    case 253:                       // 'type'
    case 255:                       // 'union'
    case 258:                       // 'updating'
    case 261:                       // 'validate'
    case 262:                       // 'value'
    case 263:                       // 'variable'
    case 264:                       // 'version'
    case 267:                       // 'where'
    case 268:                       // 'while'
    case 271:                       // 'with'
    case 275:                       // 'xquery'
      lookahead2W(243);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 35922                 // 'attribute' 'after'
     || lk == 35961                 // 'element' 'after'
     || lk == 36025                 // 'namespace' 'after'
     || lk == 36057                 // 'processing-instruction' 'after'
     || lk == 38482                 // 'attribute' 'and'
     || lk == 38521                 // 'element' 'and'
     || lk == 38585                 // 'namespace' 'and'
     || lk == 38617                 // 'processing-instruction' 'and'
     || lk == 40530                 // 'attribute' 'as'
     || lk == 40569                 // 'element' 'as'
     || lk == 40633                 // 'namespace' 'as'
     || lk == 40665                 // 'processing-instruction' 'as'
     || lk == 41042                 // 'attribute' 'ascending'
     || lk == 41081                 // 'element' 'ascending'
     || lk == 41145                 // 'namespace' 'ascending'
     || lk == 41177                 // 'processing-instruction' 'ascending'
     || lk == 41554                 // 'attribute' 'at'
     || lk == 41593                 // 'element' 'at'
     || lk == 41657                 // 'namespace' 'at'
     || lk == 41689                 // 'processing-instruction' 'at'
     || lk == 43090                 // 'attribute' 'before'
     || lk == 43129                 // 'element' 'before'
     || lk == 43193                 // 'namespace' 'before'
     || lk == 43225                 // 'processing-instruction' 'before'
     || lk == 45138                 // 'attribute' 'case'
     || lk == 45177                 // 'element' 'case'
     || lk == 45241                 // 'namespace' 'case'
     || lk == 45273                 // 'processing-instruction' 'case'
     || lk == 45650                 // 'attribute' 'cast'
     || lk == 45689                 // 'element' 'cast'
     || lk == 45753                 // 'namespace' 'cast'
     || lk == 45785                 // 'processing-instruction' 'cast'
     || lk == 46162                 // 'attribute' 'castable'
     || lk == 46201                 // 'element' 'castable'
     || lk == 46265                 // 'namespace' 'castable'
     || lk == 46297                 // 'processing-instruction' 'castable'
     || lk == 48210                 // 'attribute' 'collation'
     || lk == 48249                 // 'element' 'collation'
     || lk == 48313                 // 'namespace' 'collation'
     || lk == 48345                 // 'processing-instruction' 'collation'
     || lk == 53842                 // 'attribute' 'count'
     || lk == 53881                 // 'element' 'count'
     || lk == 53945                 // 'namespace' 'count'
     || lk == 53977                 // 'processing-instruction' 'count'
     || lk == 55890                 // 'attribute' 'default'
     || lk == 55929                 // 'element' 'default'
     || lk == 55993                 // 'namespace' 'default'
     || lk == 56025                 // 'processing-instruction' 'default'
     || lk == 57938                 // 'attribute' 'descending'
     || lk == 57977                 // 'element' 'descending'
     || lk == 58041                 // 'namespace' 'descending'
     || lk == 58073                 // 'processing-instruction' 'descending'
     || lk == 60498                 // 'attribute' 'div'
     || lk == 60537                 // 'element' 'div'
     || lk == 60601                 // 'namespace' 'div'
     || lk == 60633                 // 'processing-instruction' 'div'
     || lk == 62546                 // 'attribute' 'else'
     || lk == 62585                 // 'element' 'else'
     || lk == 62649                 // 'namespace' 'else'
     || lk == 62681                 // 'processing-instruction' 'else'
     || lk == 63058                 // 'attribute' 'empty'
     || lk == 63097                 // 'element' 'empty'
     || lk == 63161                 // 'namespace' 'empty'
     || lk == 63193                 // 'processing-instruction' 'empty'
     || lk == 64594                 // 'attribute' 'end'
     || lk == 64633                 // 'element' 'end'
     || lk == 64697                 // 'namespace' 'end'
     || lk == 64729                 // 'processing-instruction' 'end'
     || lk == 65618                 // 'attribute' 'eq'
     || lk == 65657                 // 'element' 'eq'
     || lk == 65721                 // 'namespace' 'eq'
     || lk == 65753                 // 'processing-instruction' 'eq'
     || lk == 67154                 // 'attribute' 'except'
     || lk == 67193                 // 'element' 'except'
     || lk == 67257                 // 'namespace' 'except'
     || lk == 67289                 // 'processing-instruction' 'except'
     || lk == 70226                 // 'attribute' 'for'
     || lk == 70265                 // 'element' 'for'
     || lk == 70329                 // 'namespace' 'for'
     || lk == 70361                 // 'processing-instruction' 'for'
     || lk == 74834                 // 'attribute' 'ge'
     || lk == 74873                 // 'element' 'ge'
     || lk == 74937                 // 'namespace' 'ge'
     || lk == 74969                 // 'processing-instruction' 'ge'
     || lk == 75858                 // 'attribute' 'group'
     || lk == 75897                 // 'element' 'group'
     || lk == 75961                 // 'namespace' 'group'
     || lk == 75993                 // 'processing-instruction' 'group'
     || lk == 76882                 // 'attribute' 'gt'
     || lk == 76921                 // 'element' 'gt'
     || lk == 76985                 // 'namespace' 'gt'
     || lk == 77017                 // 'processing-instruction' 'gt'
     || lk == 77394                 // 'attribute' 'idiv'
     || lk == 77433                 // 'element' 'idiv'
     || lk == 77497                 // 'namespace' 'idiv'
     || lk == 77529                 // 'processing-instruction' 'idiv'
     || lk == 82002                 // 'attribute' 'instance'
     || lk == 82041                 // 'element' 'instance'
     || lk == 82105                 // 'namespace' 'instance'
     || lk == 82137                 // 'processing-instruction' 'instance'
     || lk == 83026                 // 'attribute' 'intersect'
     || lk == 83065                 // 'element' 'intersect'
     || lk == 83129                 // 'namespace' 'intersect'
     || lk == 83161                 // 'processing-instruction' 'intersect'
     || lk == 83538                 // 'attribute' 'into'
     || lk == 83577                 // 'element' 'into'
     || lk == 83641                 // 'namespace' 'into'
     || lk == 83673                 // 'processing-instruction' 'into'
     || lk == 84050                 // 'attribute' 'is'
     || lk == 84089                 // 'element' 'is'
     || lk == 84153                 // 'namespace' 'is'
     || lk == 84185                 // 'processing-instruction' 'is'
     || lk == 88146                 // 'attribute' 'le'
     || lk == 88185                 // 'element' 'le'
     || lk == 88249                 // 'namespace' 'le'
     || lk == 88281                 // 'processing-instruction' 'le'
     || lk == 89170                 // 'attribute' 'let'
     || lk == 89209                 // 'element' 'let'
     || lk == 89273                 // 'namespace' 'let'
     || lk == 89305                 // 'processing-instruction' 'let'
     || lk == 91218                 // 'attribute' 'lt'
     || lk == 91257                 // 'element' 'lt'
     || lk == 91321                 // 'namespace' 'lt'
     || lk == 91353                 // 'processing-instruction' 'lt'
     || lk == 92754                 // 'attribute' 'mod'
     || lk == 92793                 // 'element' 'mod'
     || lk == 92857                 // 'namespace' 'mod'
     || lk == 92889                 // 'processing-instruction' 'mod'
     || lk == 93266                 // 'attribute' 'modify'
     || lk == 93305                 // 'element' 'modify'
     || lk == 93369                 // 'namespace' 'modify'
     || lk == 93401                 // 'processing-instruction' 'modify'
     || lk == 95826                 // 'attribute' 'ne'
     || lk == 95865                 // 'element' 'ne'
     || lk == 95929                 // 'namespace' 'ne'
     || lk == 95961                 // 'processing-instruction' 'ne'
     || lk == 101970                // 'attribute' 'only'
     || lk == 102009                // 'element' 'only'
     || lk == 102073                // 'namespace' 'only'
     || lk == 102105                // 'processing-instruction' 'only'
     || lk == 102994                // 'attribute' 'or'
     || lk == 103033                // 'element' 'or'
     || lk == 103097                // 'namespace' 'or'
     || lk == 103129                // 'processing-instruction' 'or'
     || lk == 103506                // 'attribute' 'order'
     || lk == 103545                // 'element' 'order'
     || lk == 103609                // 'namespace' 'order'
     || lk == 103641                // 'processing-instruction' 'order'
     || lk == 113234                // 'attribute' 'return'
     || lk == 113273                // 'element' 'return'
     || lk == 113337                // 'namespace' 'return'
     || lk == 113369                // 'processing-instruction' 'return'
     || lk == 115282                // 'attribute' 'satisfies'
     || lk == 115321                // 'element' 'satisfies'
     || lk == 115385                // 'namespace' 'satisfies'
     || lk == 115417                // 'processing-instruction' 'satisfies'
     || lk == 121426                // 'attribute' 'stable'
     || lk == 121465                // 'element' 'stable'
     || lk == 121529                // 'namespace' 'stable'
     || lk == 121561                // 'processing-instruction' 'stable'
     || lk == 121938                // 'attribute' 'start'
     || lk == 121977                // 'element' 'start'
     || lk == 122041                // 'namespace' 'start'
     || lk == 122073                // 'processing-instruction' 'start'
     || lk == 127570                // 'attribute' 'to'
     || lk == 127609                // 'element' 'to'
     || lk == 127673                // 'namespace' 'to'
     || lk == 127705                // 'processing-instruction' 'to'
     || lk == 128082                // 'attribute' 'treat'
     || lk == 128121                // 'element' 'treat'
     || lk == 128185                // 'namespace' 'treat'
     || lk == 128217                // 'processing-instruction' 'treat'
     || lk == 130642                // 'attribute' 'union'
     || lk == 130681                // 'element' 'union'
     || lk == 130745                // 'namespace' 'union'
     || lk == 130777                // 'processing-instruction' 'union'
     || lk == 136786                // 'attribute' 'where'
     || lk == 136825                // 'element' 'where'
     || lk == 136889                // 'namespace' 'where'
     || lk == 136921                // 'processing-instruction' 'where'
     || lk == 138834                // 'attribute' 'with'
     || lk == 138873                // 'element' 'with'
     || lk == 138937                // 'namespace' 'with'
     || lk == 138969)               // 'processing-instruction' 'with'
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(4, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 44:                        // '.'
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
    case 64:                        // '?'
    case 68:                        // '['
    case 277:                       // '{'
    case 279:                       // '{|'
    case 3154:                      // 'attribute' EQName^Token
    case 3193:                      // 'element' EQName^Token
    case 9913:                      // 'namespace' NCName^Token
    case 9945:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14925:                     // 'append' '#'
    case 14926:                     // 'array' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14968:                     // 'document-node' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14972:                     // 'empty-sequence' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14993:                     // 'function' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15000:                     // 'if' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15013:                     // 'item' '#'
    case 15014:                     // 'json' '#'
    case 15015:                     // 'json-item' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15027:                     // 'map' '#'
    case 15029:                     // 'mod' '#'
    case 15030:                     // 'modify' '#'
    case 15031:                     // 'module' '#'
    case 15033:                     // 'namespace' '#'
    case 15034:                     // 'namespace-node' '#'
    case 15035:                     // 'ne' '#'
    case 15040:                     // 'node' '#'
    case 15041:                     // 'nodes' '#'
    case 15043:                     // 'object' '#'
    case 15047:                     // 'only' '#'
    case 15048:                     // 'option' '#'
    case 15049:                     // 'or' '#'
    case 15050:                     // 'order' '#'
    case 15051:                     // 'ordered' '#'
    case 15052:                     // 'ordering' '#'
    case 15055:                     // 'parent' '#'
    case 15061:                     // 'preceding' '#'
    case 15062:                     // 'preceding-sibling' '#'
    case 15065:                     // 'processing-instruction' '#'
    case 15067:                     // 'rename' '#'
    case 15068:                     // 'replace' '#'
    case 15069:                     // 'return' '#'
    case 15070:                     // 'returning' '#'
    case 15071:                     // 'revalidation' '#'
    case 15073:                     // 'satisfies' '#'
    case 15074:                     // 'schema' '#'
    case 15075:                     // 'schema-attribute' '#'
    case 15076:                     // 'schema-element' '#'
    case 15077:                     // 'score' '#'
    case 15078:                     // 'self' '#'
    case 15083:                     // 'sliding' '#'
    case 15084:                     // 'some' '#'
    case 15085:                     // 'stable' '#'
    case 15086:                     // 'start' '#'
    case 15089:                     // 'strict' '#'
    case 15091:                     // 'structured-item' '#'
    case 15092:                     // 'switch' '#'
    case 15093:                     // 'text' '#'
    case 15097:                     // 'to' '#'
    case 15098:                     // 'treat' '#'
    case 15099:                     // 'try' '#'
    case 15100:                     // 'tumbling' '#'
    case 15101:                     // 'type' '#'
    case 15102:                     // 'typeswitch' '#'
    case 15103:                     // 'union' '#'
    case 15105:                     // 'unordered' '#'
    case 15106:                     // 'updating' '#'
    case 15109:                     // 'validate' '#'
    case 15110:                     // 'value' '#'
    case 15111:                     // 'variable' '#'
    case 15112:                     // 'version' '#'
    case 15115:                     // 'where' '#'
    case 15116:                     // 'while' '#'
    case 15119:                     // 'with' '#'
    case 15123:                     // 'xquery' '#'
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17485:                     // 'append' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17553:                     // 'function' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17574:                     // 'json' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17587:                     // 'map' '('
    case 17589:                     // 'mod' '('
    case 17590:                     // 'modify' '('
    case 17591:                     // 'module' '('
    case 17593:                     // 'namespace' '('
    case 17595:                     // 'ne' '('
    case 17601:                     // 'nodes' '('
    case 17603:                     // 'object' '('
    case 17607:                     // 'only' '('
    case 17608:                     // 'option' '('
    case 17609:                     // 'or' '('
    case 17610:                     // 'order' '('
    case 17611:                     // 'ordered' '('
    case 17612:                     // 'ordering' '('
    case 17615:                     // 'parent' '('
    case 17621:                     // 'preceding' '('
    case 17622:                     // 'preceding-sibling' '('
    case 17627:                     // 'rename' '('
    case 17628:                     // 'replace' '('
    case 17629:                     // 'return' '('
    case 17630:                     // 'returning' '('
    case 17631:                     // 'revalidation' '('
    case 17633:                     // 'satisfies' '('
    case 17634:                     // 'schema' '('
    case 17637:                     // 'score' '('
    case 17638:                     // 'self' '('
    case 17643:                     // 'sliding' '('
    case 17644:                     // 'some' '('
    case 17645:                     // 'stable' '('
    case 17646:                     // 'start' '('
    case 17649:                     // 'strict' '('
    case 17657:                     // 'to' '('
    case 17658:                     // 'treat' '('
    case 17659:                     // 'try' '('
    case 17660:                     // 'tumbling' '('
    case 17661:                     // 'type' '('
    case 17663:                     // 'union' '('
    case 17665:                     // 'unordered' '('
    case 17666:                     // 'updating' '('
    case 17669:                     // 'validate' '('
    case 17670:                     // 'value' '('
    case 17671:                     // 'variable' '('
    case 17672:                     // 'version' '('
    case 17675:                     // 'where' '('
    case 17676:                     // 'while' '('
    case 17679:                     // 'with' '('
    case 17683:                     // 'xquery' '('
    case 36946:                     // 'attribute' 'allowing'
    case 36985:                     // 'element' 'allowing'
    case 37049:                     // 'namespace' 'allowing'
    case 37081:                     // 'processing-instruction' 'allowing'
    case 37458:                     // 'attribute' 'ancestor'
    case 37497:                     // 'element' 'ancestor'
    case 37561:                     // 'namespace' 'ancestor'
    case 37593:                     // 'processing-instruction' 'ancestor'
    case 37970:                     // 'attribute' 'ancestor-or-self'
    case 38009:                     // 'element' 'ancestor-or-self'
    case 38073:                     // 'namespace' 'ancestor-or-self'
    case 38105:                     // 'processing-instruction' 'ancestor-or-self'
    case 39506:                     // 'attribute' 'append'
    case 39545:                     // 'element' 'append'
    case 39609:                     // 'namespace' 'append'
    case 39641:                     // 'processing-instruction' 'append'
    case 40018:                     // 'attribute' 'array'
    case 40057:                     // 'element' 'array'
    case 42066:                     // 'attribute' 'attribute'
    case 42105:                     // 'element' 'attribute'
    case 42169:                     // 'namespace' 'attribute'
    case 42201:                     // 'processing-instruction' 'attribute'
    case 42578:                     // 'attribute' 'base-uri'
    case 42617:                     // 'element' 'base-uri'
    case 42681:                     // 'namespace' 'base-uri'
    case 42713:                     // 'processing-instruction' 'base-uri'
    case 43602:                     // 'attribute' 'boundary-space'
    case 43641:                     // 'element' 'boundary-space'
    case 43705:                     // 'namespace' 'boundary-space'
    case 43737:                     // 'processing-instruction' 'boundary-space'
    case 44114:                     // 'attribute' 'break'
    case 44153:                     // 'element' 'break'
    case 44217:                     // 'namespace' 'break'
    case 44249:                     // 'processing-instruction' 'break'
    case 46674:                     // 'attribute' 'catch'
    case 46713:                     // 'element' 'catch'
    case 46777:                     // 'namespace' 'catch'
    case 46809:                     // 'processing-instruction' 'catch'
    case 47698:                     // 'attribute' 'child'
    case 47737:                     // 'element' 'child'
    case 47801:                     // 'namespace' 'child'
    case 47833:                     // 'processing-instruction' 'child'
    case 49234:                     // 'attribute' 'comment'
    case 49273:                     // 'element' 'comment'
    case 49337:                     // 'namespace' 'comment'
    case 49369:                     // 'processing-instruction' 'comment'
    case 49746:                     // 'attribute' 'constraint'
    case 49785:                     // 'element' 'constraint'
    case 49849:                     // 'namespace' 'constraint'
    case 49881:                     // 'processing-instruction' 'constraint'
    case 50258:                     // 'attribute' 'construction'
    case 50297:                     // 'element' 'construction'
    case 50361:                     // 'namespace' 'construction'
    case 50393:                     // 'processing-instruction' 'construction'
    case 51794:                     // 'attribute' 'context'
    case 51833:                     // 'element' 'context'
    case 51897:                     // 'namespace' 'context'
    case 51929:                     // 'processing-instruction' 'context'
    case 52306:                     // 'attribute' 'continue'
    case 52345:                     // 'element' 'continue'
    case 52409:                     // 'namespace' 'continue'
    case 52441:                     // 'processing-instruction' 'continue'
    case 52818:                     // 'attribute' 'copy'
    case 52857:                     // 'element' 'copy'
    case 52921:                     // 'namespace' 'copy'
    case 52953:                     // 'processing-instruction' 'copy'
    case 53330:                     // 'attribute' 'copy-namespaces'
    case 53369:                     // 'element' 'copy-namespaces'
    case 53433:                     // 'namespace' 'copy-namespaces'
    case 53465:                     // 'processing-instruction' 'copy-namespaces'
    case 54354:                     // 'attribute' 'decimal-format'
    case 54393:                     // 'element' 'decimal-format'
    case 54457:                     // 'namespace' 'decimal-format'
    case 54489:                     // 'processing-instruction' 'decimal-format'
    case 55378:                     // 'attribute' 'declare'
    case 55417:                     // 'element' 'declare'
    case 55481:                     // 'namespace' 'declare'
    case 55513:                     // 'processing-instruction' 'declare'
    case 56402:                     // 'attribute' 'delete'
    case 56441:                     // 'element' 'delete'
    case 56505:                     // 'namespace' 'delete'
    case 56537:                     // 'processing-instruction' 'delete'
    case 56914:                     // 'attribute' 'descendant'
    case 56953:                     // 'element' 'descendant'
    case 57017:                     // 'namespace' 'descendant'
    case 57049:                     // 'processing-instruction' 'descendant'
    case 57426:                     // 'attribute' 'descendant-or-self'
    case 57465:                     // 'element' 'descendant-or-self'
    case 57529:                     // 'namespace' 'descendant-or-self'
    case 57561:                     // 'processing-instruction' 'descendant-or-self'
    case 61010:                     // 'attribute' 'document'
    case 61049:                     // 'element' 'document'
    case 61113:                     // 'namespace' 'document'
    case 61145:                     // 'processing-instruction' 'document'
    case 61522:                     // 'attribute' 'document-node'
    case 61561:                     // 'element' 'document-node'
    case 61625:                     // 'namespace' 'document-node'
    case 61657:                     // 'processing-instruction' 'document-node'
    case 62034:                     // 'attribute' 'element'
    case 62073:                     // 'element' 'element'
    case 62137:                     // 'namespace' 'element'
    case 62169:                     // 'processing-instruction' 'element'
    case 63570:                     // 'attribute' 'empty-sequence'
    case 63609:                     // 'element' 'empty-sequence'
    case 63673:                     // 'namespace' 'empty-sequence'
    case 63705:                     // 'processing-instruction' 'empty-sequence'
    case 64082:                     // 'attribute' 'encoding'
    case 64121:                     // 'element' 'encoding'
    case 64185:                     // 'namespace' 'encoding'
    case 64217:                     // 'processing-instruction' 'encoding'
    case 66130:                     // 'attribute' 'every'
    case 66169:                     // 'element' 'every'
    case 66233:                     // 'namespace' 'every'
    case 66265:                     // 'processing-instruction' 'every'
    case 67666:                     // 'attribute' 'exit'
    case 67705:                     // 'element' 'exit'
    case 67769:                     // 'namespace' 'exit'
    case 67801:                     // 'processing-instruction' 'exit'
    case 68178:                     // 'attribute' 'external'
    case 68217:                     // 'element' 'external'
    case 68281:                     // 'namespace' 'external'
    case 68313:                     // 'processing-instruction' 'external'
    case 68690:                     // 'attribute' 'first'
    case 68729:                     // 'element' 'first'
    case 68793:                     // 'namespace' 'first'
    case 68825:                     // 'processing-instruction' 'first'
    case 69202:                     // 'attribute' 'following'
    case 69241:                     // 'element' 'following'
    case 69305:                     // 'namespace' 'following'
    case 69337:                     // 'processing-instruction' 'following'
    case 69714:                     // 'attribute' 'following-sibling'
    case 69753:                     // 'element' 'following-sibling'
    case 69817:                     // 'namespace' 'following-sibling'
    case 69849:                     // 'processing-instruction' 'following-sibling'
    case 72274:                     // 'attribute' 'ft-option'
    case 72313:                     // 'element' 'ft-option'
    case 72377:                     // 'namespace' 'ft-option'
    case 72409:                     // 'processing-instruction' 'ft-option'
    case 74322:                     // 'attribute' 'function'
    case 74361:                     // 'element' 'function'
    case 74425:                     // 'namespace' 'function'
    case 74457:                     // 'processing-instruction' 'function'
    case 77906:                     // 'attribute' 'if'
    case 77945:                     // 'element' 'if'
    case 78009:                     // 'namespace' 'if'
    case 78041:                     // 'processing-instruction' 'if'
    case 78418:                     // 'attribute' 'import'
    case 78457:                     // 'element' 'import'
    case 78521:                     // 'namespace' 'import'
    case 78553:                     // 'processing-instruction' 'import'
    case 78930:                     // 'attribute' 'in'
    case 78969:                     // 'element' 'in'
    case 79033:                     // 'namespace' 'in'
    case 79065:                     // 'processing-instruction' 'in'
    case 79442:                     // 'attribute' 'index'
    case 79481:                     // 'element' 'index'
    case 79545:                     // 'namespace' 'index'
    case 79577:                     // 'processing-instruction' 'index'
    case 81490:                     // 'attribute' 'insert'
    case 81529:                     // 'element' 'insert'
    case 81593:                     // 'namespace' 'insert'
    case 81625:                     // 'processing-instruction' 'insert'
    case 82514:                     // 'attribute' 'integrity'
    case 82553:                     // 'element' 'integrity'
    case 82617:                     // 'namespace' 'integrity'
    case 82649:                     // 'processing-instruction' 'integrity'
    case 84562:                     // 'attribute' 'item'
    case 84601:                     // 'element' 'item'
    case 84665:                     // 'namespace' 'item'
    case 84697:                     // 'processing-instruction' 'item'
    case 85074:                     // 'attribute' 'json'
    case 85113:                     // 'element' 'json'
    case 85177:                     // 'namespace' 'json'
    case 85209:                     // 'processing-instruction' 'json'
    case 85586:                     // 'attribute' 'json-item'
    case 85625:                     // 'element' 'json-item'
    case 87122:                     // 'attribute' 'last'
    case 87161:                     // 'element' 'last'
    case 87225:                     // 'namespace' 'last'
    case 87257:                     // 'processing-instruction' 'last'
    case 87634:                     // 'attribute' 'lax'
    case 87673:                     // 'element' 'lax'
    case 87737:                     // 'namespace' 'lax'
    case 87769:                     // 'processing-instruction' 'lax'
    case 90194:                     // 'attribute' 'loop'
    case 90233:                     // 'element' 'loop'
    case 90297:                     // 'namespace' 'loop'
    case 90329:                     // 'processing-instruction' 'loop'
    case 91730:                     // 'attribute' 'map'
    case 91769:                     // 'element' 'map'
    case 91833:                     // 'namespace' 'map'
    case 91865:                     // 'processing-instruction' 'map'
    case 93778:                     // 'attribute' 'module'
    case 93817:                     // 'element' 'module'
    case 93881:                     // 'namespace' 'module'
    case 93913:                     // 'processing-instruction' 'module'
    case 94802:                     // 'attribute' 'namespace'
    case 94841:                     // 'element' 'namespace'
    case 94905:                     // 'namespace' 'namespace'
    case 94937:                     // 'processing-instruction' 'namespace'
    case 95314:                     // 'attribute' 'namespace-node'
    case 95353:                     // 'element' 'namespace-node'
    case 95417:                     // 'namespace' 'namespace-node'
    case 95449:                     // 'processing-instruction' 'namespace-node'
    case 98386:                     // 'attribute' 'node'
    case 98425:                     // 'element' 'node'
    case 98489:                     // 'namespace' 'node'
    case 98521:                     // 'processing-instruction' 'node'
    case 98898:                     // 'attribute' 'nodes'
    case 98937:                     // 'element' 'nodes'
    case 99001:                     // 'namespace' 'nodes'
    case 99033:                     // 'processing-instruction' 'nodes'
    case 99922:                     // 'attribute' 'object'
    case 99961:                     // 'element' 'object'
    case 100025:                    // 'namespace' 'object'
    case 100057:                    // 'processing-instruction' 'object'
    case 102482:                    // 'attribute' 'option'
    case 102521:                    // 'element' 'option'
    case 102585:                    // 'namespace' 'option'
    case 102617:                    // 'processing-instruction' 'option'
    case 104018:                    // 'attribute' 'ordered'
    case 104057:                    // 'element' 'ordered'
    case 104121:                    // 'namespace' 'ordered'
    case 104153:                    // 'processing-instruction' 'ordered'
    case 104530:                    // 'attribute' 'ordering'
    case 104569:                    // 'element' 'ordering'
    case 104633:                    // 'namespace' 'ordering'
    case 104665:                    // 'processing-instruction' 'ordering'
    case 106066:                    // 'attribute' 'parent'
    case 106105:                    // 'element' 'parent'
    case 106169:                    // 'namespace' 'parent'
    case 106201:                    // 'processing-instruction' 'parent'
    case 109138:                    // 'attribute' 'preceding'
    case 109177:                    // 'element' 'preceding'
    case 109241:                    // 'namespace' 'preceding'
    case 109273:                    // 'processing-instruction' 'preceding'
    case 109650:                    // 'attribute' 'preceding-sibling'
    case 109689:                    // 'element' 'preceding-sibling'
    case 109753:                    // 'namespace' 'preceding-sibling'
    case 109785:                    // 'processing-instruction' 'preceding-sibling'
    case 111186:                    // 'attribute' 'processing-instruction'
    case 111225:                    // 'element' 'processing-instruction'
    case 111289:                    // 'namespace' 'processing-instruction'
    case 111321:                    // 'processing-instruction' 'processing-instruction'
    case 112210:                    // 'attribute' 'rename'
    case 112249:                    // 'element' 'rename'
    case 112313:                    // 'namespace' 'rename'
    case 112345:                    // 'processing-instruction' 'rename'
    case 112722:                    // 'attribute' 'replace'
    case 112761:                    // 'element' 'replace'
    case 112825:                    // 'namespace' 'replace'
    case 112857:                    // 'processing-instruction' 'replace'
    case 113746:                    // 'attribute' 'returning'
    case 113785:                    // 'element' 'returning'
    case 113849:                    // 'namespace' 'returning'
    case 113881:                    // 'processing-instruction' 'returning'
    case 114258:                    // 'attribute' 'revalidation'
    case 114297:                    // 'element' 'revalidation'
    case 114361:                    // 'namespace' 'revalidation'
    case 114393:                    // 'processing-instruction' 'revalidation'
    case 115794:                    // 'attribute' 'schema'
    case 115833:                    // 'element' 'schema'
    case 115897:                    // 'namespace' 'schema'
    case 115929:                    // 'processing-instruction' 'schema'
    case 116306:                    // 'attribute' 'schema-attribute'
    case 116345:                    // 'element' 'schema-attribute'
    case 116409:                    // 'namespace' 'schema-attribute'
    case 116441:                    // 'processing-instruction' 'schema-attribute'
    case 116818:                    // 'attribute' 'schema-element'
    case 116857:                    // 'element' 'schema-element'
    case 116921:                    // 'namespace' 'schema-element'
    case 116953:                    // 'processing-instruction' 'schema-element'
    case 117330:                    // 'attribute' 'score'
    case 117369:                    // 'element' 'score'
    case 117433:                    // 'namespace' 'score'
    case 117465:                    // 'processing-instruction' 'score'
    case 117842:                    // 'attribute' 'self'
    case 117881:                    // 'element' 'self'
    case 117945:                    // 'namespace' 'self'
    case 117977:                    // 'processing-instruction' 'self'
    case 120402:                    // 'attribute' 'sliding'
    case 120441:                    // 'element' 'sliding'
    case 120505:                    // 'namespace' 'sliding'
    case 120537:                    // 'processing-instruction' 'sliding'
    case 120914:                    // 'attribute' 'some'
    case 120953:                    // 'element' 'some'
    case 121017:                    // 'namespace' 'some'
    case 121049:                    // 'processing-instruction' 'some'
    case 123474:                    // 'attribute' 'strict'
    case 123513:                    // 'element' 'strict'
    case 123577:                    // 'namespace' 'strict'
    case 123609:                    // 'processing-instruction' 'strict'
    case 124498:                    // 'attribute' 'structured-item'
    case 124537:                    // 'element' 'structured-item'
    case 125010:                    // 'attribute' 'switch'
    case 125049:                    // 'element' 'switch'
    case 125113:                    // 'namespace' 'switch'
    case 125145:                    // 'processing-instruction' 'switch'
    case 125522:                    // 'attribute' 'text'
    case 125561:                    // 'element' 'text'
    case 125625:                    // 'namespace' 'text'
    case 125657:                    // 'processing-instruction' 'text'
    case 128594:                    // 'attribute' 'try'
    case 128633:                    // 'element' 'try'
    case 128697:                    // 'namespace' 'try'
    case 128729:                    // 'processing-instruction' 'try'
    case 129106:                    // 'attribute' 'tumbling'
    case 129145:                    // 'element' 'tumbling'
    case 129209:                    // 'namespace' 'tumbling'
    case 129241:                    // 'processing-instruction' 'tumbling'
    case 129618:                    // 'attribute' 'type'
    case 129657:                    // 'element' 'type'
    case 129721:                    // 'namespace' 'type'
    case 129753:                    // 'processing-instruction' 'type'
    case 130130:                    // 'attribute' 'typeswitch'
    case 130169:                    // 'element' 'typeswitch'
    case 130233:                    // 'namespace' 'typeswitch'
    case 130265:                    // 'processing-instruction' 'typeswitch'
    case 131666:                    // 'attribute' 'unordered'
    case 131705:                    // 'element' 'unordered'
    case 131769:                    // 'namespace' 'unordered'
    case 131801:                    // 'processing-instruction' 'unordered'
    case 132178:                    // 'attribute' 'updating'
    case 132217:                    // 'element' 'updating'
    case 132281:                    // 'namespace' 'updating'
    case 132313:                    // 'processing-instruction' 'updating'
    case 133714:                    // 'attribute' 'validate'
    case 133753:                    // 'element' 'validate'
    case 133817:                    // 'namespace' 'validate'
    case 133849:                    // 'processing-instruction' 'validate'
    case 134226:                    // 'attribute' 'value'
    case 134265:                    // 'element' 'value'
    case 134329:                    // 'namespace' 'value'
    case 134361:                    // 'processing-instruction' 'value'
    case 134738:                    // 'attribute' 'variable'
    case 134777:                    // 'element' 'variable'
    case 134841:                    // 'namespace' 'variable'
    case 134873:                    // 'processing-instruction' 'variable'
    case 135250:                    // 'attribute' 'version'
    case 135289:                    // 'element' 'version'
    case 135353:                    // 'namespace' 'version'
    case 135385:                    // 'processing-instruction' 'version'
    case 137298:                    // 'attribute' 'while'
    case 137337:                    // 'element' 'while'
    case 137401:                    // 'namespace' 'while'
    case 137433:                    // 'processing-instruction' 'while'
    case 140882:                    // 'attribute' 'xquery'
    case 140921:                    // 'element' 'xquery'
    case 140985:                    // 'namespace' 'xquery'
    case 141017:                    // 'processing-instruction' 'xquery'
    case 141906:                    // 'attribute' '{'
    case 141920:                    // 'comment' '{'
    case 141943:                    // 'document' '{'
    case 141945:                    // 'element' '{'
    case 142003:                    // 'map' '{'
    case 142009:                    // 'namespace' '{'
    case 142027:                    // 'ordered' '{'
    case 142041:                    // 'processing-instruction' '{'
    case 142069:                    // 'text' '{'
    case 142081:                    // 'unordered' '{'
      parse_PostfixExpr();
      break;
    default:
      parse_AxisStep();
    }
    eventHandler.endNonterminal("StepExpr", e0);
  }

  function try_StepExpr()
  {
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(286);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' |
                                    // '>=' | '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' |
                                    // 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 121:                       // 'element'
      lookahead2W(285);             // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'paragraphs' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sentences' | 'sliding' | 'some' | 'stable' | 'start' |
                                    // 'strict' | 'structured-item' | 'switch' | 'text' | 'times' | 'to' | 'treat' |
                                    // 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 185:                       // 'namespace'
    case 217:                       // 'processing-instruction'
      lookahead2W(284);             // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' |
                                    // ',' | '-' | '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | ']' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'catch' | 'child' | 'collation' | 'comment' | 'constraint' | 'construction' |
                                    // 'contains' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'paragraphs' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sentences' |
                                    // 'sliding' | 'some' | 'stable' | 'start' | 'strict' | 'switch' | 'text' |
                                    // 'times' | 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'words' | 'xquery' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 96:                        // 'comment'
    case 119:                       // 'document'
    case 179:                       // 'map'
    case 203:                       // 'ordered'
    case 245:                       // 'text'
    case 257:                       // 'unordered'
      lookahead2W(247);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    case 78:                        // 'array'
    case 124:                       // 'empty-sequence'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 243:                       // 'structured-item'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
      lookahead2W(239);             // S^WS | EOF | '!' | '!=' | '#' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 207:                       // 'parent'
    case 213:                       // 'preceding'
    case 214:                       // 'preceding-sibling'
    case 230:                       // 'self'
      lookahead2W(246);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' |
                                    // 'cast' | 'castable' | 'collation' | 'contains' | 'count' | 'default' |
                                    // 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' |
                                    // 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' | 'start' |
                                    // 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' | '||' |
                                    // '|}' | '}'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 75:                        // 'and'
    case 77:                        // 'append'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 120:                       // 'document-node'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 145:                       // 'function'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 166:                       // 'json'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 181:                       // 'mod'
    case 182:                       // 'modify'
    case 183:                       // 'module'
    case 186:                       // 'namespace-node'
    case 187:                       // 'ne'
    case 192:                       // 'node'
    case 193:                       // 'nodes'
    case 195:                       // 'object'
    case 199:                       // 'only'
    case 200:                       // 'option'
    case 201:                       // 'or'
    case 202:                       // 'order'
    case 204:                       // 'ordering'
    case 219:                       // 'rename'
    case 220:                       // 'replace'
    case 221:                       // 'return'
    case 222:                       // 'returning'
    case 223:                       // 'revalidation'
    case 225:                       // 'satisfies'
    case 226:                       // 'schema'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 229:                       // 'score'
    case 235:                       // 'sliding'
    case 236:                       // 'some'
    case 237:                       // 'stable'
    case 238:                       // 'start'
    case 241:                       // 'strict'
    case 249:                       // 'to'
    case 250:                       // 'treat'
    case 251:                       // 'try'
    case 252:                       // 'tumbling'
    case 253:                       // 'type'
    case 255:                       // 'union'
    case 258:                       // 'updating'
    case 261:                       // 'validate'
    case 262:                       // 'value'
    case 263:                       // 'variable'
    case 264:                       // 'version'
    case 267:                       // 'where'
    case 268:                       // 'while'
    case 271:                       // 'with'
    case 275:                       // 'xquery'
      lookahead2W(243);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 35922                 // 'attribute' 'after'
     || lk == 35961                 // 'element' 'after'
     || lk == 36025                 // 'namespace' 'after'
     || lk == 36057                 // 'processing-instruction' 'after'
     || lk == 38482                 // 'attribute' 'and'
     || lk == 38521                 // 'element' 'and'
     || lk == 38585                 // 'namespace' 'and'
     || lk == 38617                 // 'processing-instruction' 'and'
     || lk == 40530                 // 'attribute' 'as'
     || lk == 40569                 // 'element' 'as'
     || lk == 40633                 // 'namespace' 'as'
     || lk == 40665                 // 'processing-instruction' 'as'
     || lk == 41042                 // 'attribute' 'ascending'
     || lk == 41081                 // 'element' 'ascending'
     || lk == 41145                 // 'namespace' 'ascending'
     || lk == 41177                 // 'processing-instruction' 'ascending'
     || lk == 41554                 // 'attribute' 'at'
     || lk == 41593                 // 'element' 'at'
     || lk == 41657                 // 'namespace' 'at'
     || lk == 41689                 // 'processing-instruction' 'at'
     || lk == 43090                 // 'attribute' 'before'
     || lk == 43129                 // 'element' 'before'
     || lk == 43193                 // 'namespace' 'before'
     || lk == 43225                 // 'processing-instruction' 'before'
     || lk == 45138                 // 'attribute' 'case'
     || lk == 45177                 // 'element' 'case'
     || lk == 45241                 // 'namespace' 'case'
     || lk == 45273                 // 'processing-instruction' 'case'
     || lk == 45650                 // 'attribute' 'cast'
     || lk == 45689                 // 'element' 'cast'
     || lk == 45753                 // 'namespace' 'cast'
     || lk == 45785                 // 'processing-instruction' 'cast'
     || lk == 46162                 // 'attribute' 'castable'
     || lk == 46201                 // 'element' 'castable'
     || lk == 46265                 // 'namespace' 'castable'
     || lk == 46297                 // 'processing-instruction' 'castable'
     || lk == 48210                 // 'attribute' 'collation'
     || lk == 48249                 // 'element' 'collation'
     || lk == 48313                 // 'namespace' 'collation'
     || lk == 48345                 // 'processing-instruction' 'collation'
     || lk == 53842                 // 'attribute' 'count'
     || lk == 53881                 // 'element' 'count'
     || lk == 53945                 // 'namespace' 'count'
     || lk == 53977                 // 'processing-instruction' 'count'
     || lk == 55890                 // 'attribute' 'default'
     || lk == 55929                 // 'element' 'default'
     || lk == 55993                 // 'namespace' 'default'
     || lk == 56025                 // 'processing-instruction' 'default'
     || lk == 57938                 // 'attribute' 'descending'
     || lk == 57977                 // 'element' 'descending'
     || lk == 58041                 // 'namespace' 'descending'
     || lk == 58073                 // 'processing-instruction' 'descending'
     || lk == 60498                 // 'attribute' 'div'
     || lk == 60537                 // 'element' 'div'
     || lk == 60601                 // 'namespace' 'div'
     || lk == 60633                 // 'processing-instruction' 'div'
     || lk == 62546                 // 'attribute' 'else'
     || lk == 62585                 // 'element' 'else'
     || lk == 62649                 // 'namespace' 'else'
     || lk == 62681                 // 'processing-instruction' 'else'
     || lk == 63058                 // 'attribute' 'empty'
     || lk == 63097                 // 'element' 'empty'
     || lk == 63161                 // 'namespace' 'empty'
     || lk == 63193                 // 'processing-instruction' 'empty'
     || lk == 64594                 // 'attribute' 'end'
     || lk == 64633                 // 'element' 'end'
     || lk == 64697                 // 'namespace' 'end'
     || lk == 64729                 // 'processing-instruction' 'end'
     || lk == 65618                 // 'attribute' 'eq'
     || lk == 65657                 // 'element' 'eq'
     || lk == 65721                 // 'namespace' 'eq'
     || lk == 65753                 // 'processing-instruction' 'eq'
     || lk == 67154                 // 'attribute' 'except'
     || lk == 67193                 // 'element' 'except'
     || lk == 67257                 // 'namespace' 'except'
     || lk == 67289                 // 'processing-instruction' 'except'
     || lk == 70226                 // 'attribute' 'for'
     || lk == 70265                 // 'element' 'for'
     || lk == 70329                 // 'namespace' 'for'
     || lk == 70361                 // 'processing-instruction' 'for'
     || lk == 74834                 // 'attribute' 'ge'
     || lk == 74873                 // 'element' 'ge'
     || lk == 74937                 // 'namespace' 'ge'
     || lk == 74969                 // 'processing-instruction' 'ge'
     || lk == 75858                 // 'attribute' 'group'
     || lk == 75897                 // 'element' 'group'
     || lk == 75961                 // 'namespace' 'group'
     || lk == 75993                 // 'processing-instruction' 'group'
     || lk == 76882                 // 'attribute' 'gt'
     || lk == 76921                 // 'element' 'gt'
     || lk == 76985                 // 'namespace' 'gt'
     || lk == 77017                 // 'processing-instruction' 'gt'
     || lk == 77394                 // 'attribute' 'idiv'
     || lk == 77433                 // 'element' 'idiv'
     || lk == 77497                 // 'namespace' 'idiv'
     || lk == 77529                 // 'processing-instruction' 'idiv'
     || lk == 82002                 // 'attribute' 'instance'
     || lk == 82041                 // 'element' 'instance'
     || lk == 82105                 // 'namespace' 'instance'
     || lk == 82137                 // 'processing-instruction' 'instance'
     || lk == 83026                 // 'attribute' 'intersect'
     || lk == 83065                 // 'element' 'intersect'
     || lk == 83129                 // 'namespace' 'intersect'
     || lk == 83161                 // 'processing-instruction' 'intersect'
     || lk == 83538                 // 'attribute' 'into'
     || lk == 83577                 // 'element' 'into'
     || lk == 83641                 // 'namespace' 'into'
     || lk == 83673                 // 'processing-instruction' 'into'
     || lk == 84050                 // 'attribute' 'is'
     || lk == 84089                 // 'element' 'is'
     || lk == 84153                 // 'namespace' 'is'
     || lk == 84185                 // 'processing-instruction' 'is'
     || lk == 88146                 // 'attribute' 'le'
     || lk == 88185                 // 'element' 'le'
     || lk == 88249                 // 'namespace' 'le'
     || lk == 88281                 // 'processing-instruction' 'le'
     || lk == 89170                 // 'attribute' 'let'
     || lk == 89209                 // 'element' 'let'
     || lk == 89273                 // 'namespace' 'let'
     || lk == 89305                 // 'processing-instruction' 'let'
     || lk == 91218                 // 'attribute' 'lt'
     || lk == 91257                 // 'element' 'lt'
     || lk == 91321                 // 'namespace' 'lt'
     || lk == 91353                 // 'processing-instruction' 'lt'
     || lk == 92754                 // 'attribute' 'mod'
     || lk == 92793                 // 'element' 'mod'
     || lk == 92857                 // 'namespace' 'mod'
     || lk == 92889                 // 'processing-instruction' 'mod'
     || lk == 93266                 // 'attribute' 'modify'
     || lk == 93305                 // 'element' 'modify'
     || lk == 93369                 // 'namespace' 'modify'
     || lk == 93401                 // 'processing-instruction' 'modify'
     || lk == 95826                 // 'attribute' 'ne'
     || lk == 95865                 // 'element' 'ne'
     || lk == 95929                 // 'namespace' 'ne'
     || lk == 95961                 // 'processing-instruction' 'ne'
     || lk == 101970                // 'attribute' 'only'
     || lk == 102009                // 'element' 'only'
     || lk == 102073                // 'namespace' 'only'
     || lk == 102105                // 'processing-instruction' 'only'
     || lk == 102994                // 'attribute' 'or'
     || lk == 103033                // 'element' 'or'
     || lk == 103097                // 'namespace' 'or'
     || lk == 103129                // 'processing-instruction' 'or'
     || lk == 103506                // 'attribute' 'order'
     || lk == 103545                // 'element' 'order'
     || lk == 103609                // 'namespace' 'order'
     || lk == 103641                // 'processing-instruction' 'order'
     || lk == 113234                // 'attribute' 'return'
     || lk == 113273                // 'element' 'return'
     || lk == 113337                // 'namespace' 'return'
     || lk == 113369                // 'processing-instruction' 'return'
     || lk == 115282                // 'attribute' 'satisfies'
     || lk == 115321                // 'element' 'satisfies'
     || lk == 115385                // 'namespace' 'satisfies'
     || lk == 115417                // 'processing-instruction' 'satisfies'
     || lk == 121426                // 'attribute' 'stable'
     || lk == 121465                // 'element' 'stable'
     || lk == 121529                // 'namespace' 'stable'
     || lk == 121561                // 'processing-instruction' 'stable'
     || lk == 121938                // 'attribute' 'start'
     || lk == 121977                // 'element' 'start'
     || lk == 122041                // 'namespace' 'start'
     || lk == 122073                // 'processing-instruction' 'start'
     || lk == 127570                // 'attribute' 'to'
     || lk == 127609                // 'element' 'to'
     || lk == 127673                // 'namespace' 'to'
     || lk == 127705                // 'processing-instruction' 'to'
     || lk == 128082                // 'attribute' 'treat'
     || lk == 128121                // 'element' 'treat'
     || lk == 128185                // 'namespace' 'treat'
     || lk == 128217                // 'processing-instruction' 'treat'
     || lk == 130642                // 'attribute' 'union'
     || lk == 130681                // 'element' 'union'
     || lk == 130745                // 'namespace' 'union'
     || lk == 130777                // 'processing-instruction' 'union'
     || lk == 136786                // 'attribute' 'where'
     || lk == 136825                // 'element' 'where'
     || lk == 136889                // 'namespace' 'where'
     || lk == 136921                // 'processing-instruction' 'where'
     || lk == 138834                // 'attribute' 'with'
     || lk == 138873                // 'element' 'with'
     || lk == 138937                // 'namespace' 'with'
     || lk == 138969)               // 'processing-instruction' 'with'
    {
      lk = memoized(4, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_PostfixExpr();
          memoize(4, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(4, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
    case 31:                        // '$'
    case 32:                        // '%'
    case 34:                        // '('
    case 44:                        // '.'
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
    case 64:                        // '?'
    case 68:                        // '['
    case 277:                       // '{'
    case 279:                       // '{|'
    case 3154:                      // 'attribute' EQName^Token
    case 3193:                      // 'element' EQName^Token
    case 9913:                      // 'namespace' NCName^Token
    case 9945:                      // 'processing-instruction' NCName^Token
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14925:                     // 'append' '#'
    case 14926:                     // 'array' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14968:                     // 'document-node' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14972:                     // 'empty-sequence' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14993:                     // 'function' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15000:                     // 'if' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15013:                     // 'item' '#'
    case 15014:                     // 'json' '#'
    case 15015:                     // 'json-item' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15027:                     // 'map' '#'
    case 15029:                     // 'mod' '#'
    case 15030:                     // 'modify' '#'
    case 15031:                     // 'module' '#'
    case 15033:                     // 'namespace' '#'
    case 15034:                     // 'namespace-node' '#'
    case 15035:                     // 'ne' '#'
    case 15040:                     // 'node' '#'
    case 15041:                     // 'nodes' '#'
    case 15043:                     // 'object' '#'
    case 15047:                     // 'only' '#'
    case 15048:                     // 'option' '#'
    case 15049:                     // 'or' '#'
    case 15050:                     // 'order' '#'
    case 15051:                     // 'ordered' '#'
    case 15052:                     // 'ordering' '#'
    case 15055:                     // 'parent' '#'
    case 15061:                     // 'preceding' '#'
    case 15062:                     // 'preceding-sibling' '#'
    case 15065:                     // 'processing-instruction' '#'
    case 15067:                     // 'rename' '#'
    case 15068:                     // 'replace' '#'
    case 15069:                     // 'return' '#'
    case 15070:                     // 'returning' '#'
    case 15071:                     // 'revalidation' '#'
    case 15073:                     // 'satisfies' '#'
    case 15074:                     // 'schema' '#'
    case 15075:                     // 'schema-attribute' '#'
    case 15076:                     // 'schema-element' '#'
    case 15077:                     // 'score' '#'
    case 15078:                     // 'self' '#'
    case 15083:                     // 'sliding' '#'
    case 15084:                     // 'some' '#'
    case 15085:                     // 'stable' '#'
    case 15086:                     // 'start' '#'
    case 15089:                     // 'strict' '#'
    case 15091:                     // 'structured-item' '#'
    case 15092:                     // 'switch' '#'
    case 15093:                     // 'text' '#'
    case 15097:                     // 'to' '#'
    case 15098:                     // 'treat' '#'
    case 15099:                     // 'try' '#'
    case 15100:                     // 'tumbling' '#'
    case 15101:                     // 'type' '#'
    case 15102:                     // 'typeswitch' '#'
    case 15103:                     // 'union' '#'
    case 15105:                     // 'unordered' '#'
    case 15106:                     // 'updating' '#'
    case 15109:                     // 'validate' '#'
    case 15110:                     // 'value' '#'
    case 15111:                     // 'variable' '#'
    case 15112:                     // 'version' '#'
    case 15115:                     // 'where' '#'
    case 15116:                     // 'while' '#'
    case 15119:                     // 'with' '#'
    case 15123:                     // 'xquery' '#'
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17485:                     // 'append' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17553:                     // 'function' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17574:                     // 'json' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17587:                     // 'map' '('
    case 17589:                     // 'mod' '('
    case 17590:                     // 'modify' '('
    case 17591:                     // 'module' '('
    case 17593:                     // 'namespace' '('
    case 17595:                     // 'ne' '('
    case 17601:                     // 'nodes' '('
    case 17603:                     // 'object' '('
    case 17607:                     // 'only' '('
    case 17608:                     // 'option' '('
    case 17609:                     // 'or' '('
    case 17610:                     // 'order' '('
    case 17611:                     // 'ordered' '('
    case 17612:                     // 'ordering' '('
    case 17615:                     // 'parent' '('
    case 17621:                     // 'preceding' '('
    case 17622:                     // 'preceding-sibling' '('
    case 17627:                     // 'rename' '('
    case 17628:                     // 'replace' '('
    case 17629:                     // 'return' '('
    case 17630:                     // 'returning' '('
    case 17631:                     // 'revalidation' '('
    case 17633:                     // 'satisfies' '('
    case 17634:                     // 'schema' '('
    case 17637:                     // 'score' '('
    case 17638:                     // 'self' '('
    case 17643:                     // 'sliding' '('
    case 17644:                     // 'some' '('
    case 17645:                     // 'stable' '('
    case 17646:                     // 'start' '('
    case 17649:                     // 'strict' '('
    case 17657:                     // 'to' '('
    case 17658:                     // 'treat' '('
    case 17659:                     // 'try' '('
    case 17660:                     // 'tumbling' '('
    case 17661:                     // 'type' '('
    case 17663:                     // 'union' '('
    case 17665:                     // 'unordered' '('
    case 17666:                     // 'updating' '('
    case 17669:                     // 'validate' '('
    case 17670:                     // 'value' '('
    case 17671:                     // 'variable' '('
    case 17672:                     // 'version' '('
    case 17675:                     // 'where' '('
    case 17676:                     // 'while' '('
    case 17679:                     // 'with' '('
    case 17683:                     // 'xquery' '('
    case 36946:                     // 'attribute' 'allowing'
    case 36985:                     // 'element' 'allowing'
    case 37049:                     // 'namespace' 'allowing'
    case 37081:                     // 'processing-instruction' 'allowing'
    case 37458:                     // 'attribute' 'ancestor'
    case 37497:                     // 'element' 'ancestor'
    case 37561:                     // 'namespace' 'ancestor'
    case 37593:                     // 'processing-instruction' 'ancestor'
    case 37970:                     // 'attribute' 'ancestor-or-self'
    case 38009:                     // 'element' 'ancestor-or-self'
    case 38073:                     // 'namespace' 'ancestor-or-self'
    case 38105:                     // 'processing-instruction' 'ancestor-or-self'
    case 39506:                     // 'attribute' 'append'
    case 39545:                     // 'element' 'append'
    case 39609:                     // 'namespace' 'append'
    case 39641:                     // 'processing-instruction' 'append'
    case 40018:                     // 'attribute' 'array'
    case 40057:                     // 'element' 'array'
    case 42066:                     // 'attribute' 'attribute'
    case 42105:                     // 'element' 'attribute'
    case 42169:                     // 'namespace' 'attribute'
    case 42201:                     // 'processing-instruction' 'attribute'
    case 42578:                     // 'attribute' 'base-uri'
    case 42617:                     // 'element' 'base-uri'
    case 42681:                     // 'namespace' 'base-uri'
    case 42713:                     // 'processing-instruction' 'base-uri'
    case 43602:                     // 'attribute' 'boundary-space'
    case 43641:                     // 'element' 'boundary-space'
    case 43705:                     // 'namespace' 'boundary-space'
    case 43737:                     // 'processing-instruction' 'boundary-space'
    case 44114:                     // 'attribute' 'break'
    case 44153:                     // 'element' 'break'
    case 44217:                     // 'namespace' 'break'
    case 44249:                     // 'processing-instruction' 'break'
    case 46674:                     // 'attribute' 'catch'
    case 46713:                     // 'element' 'catch'
    case 46777:                     // 'namespace' 'catch'
    case 46809:                     // 'processing-instruction' 'catch'
    case 47698:                     // 'attribute' 'child'
    case 47737:                     // 'element' 'child'
    case 47801:                     // 'namespace' 'child'
    case 47833:                     // 'processing-instruction' 'child'
    case 49234:                     // 'attribute' 'comment'
    case 49273:                     // 'element' 'comment'
    case 49337:                     // 'namespace' 'comment'
    case 49369:                     // 'processing-instruction' 'comment'
    case 49746:                     // 'attribute' 'constraint'
    case 49785:                     // 'element' 'constraint'
    case 49849:                     // 'namespace' 'constraint'
    case 49881:                     // 'processing-instruction' 'constraint'
    case 50258:                     // 'attribute' 'construction'
    case 50297:                     // 'element' 'construction'
    case 50361:                     // 'namespace' 'construction'
    case 50393:                     // 'processing-instruction' 'construction'
    case 51794:                     // 'attribute' 'context'
    case 51833:                     // 'element' 'context'
    case 51897:                     // 'namespace' 'context'
    case 51929:                     // 'processing-instruction' 'context'
    case 52306:                     // 'attribute' 'continue'
    case 52345:                     // 'element' 'continue'
    case 52409:                     // 'namespace' 'continue'
    case 52441:                     // 'processing-instruction' 'continue'
    case 52818:                     // 'attribute' 'copy'
    case 52857:                     // 'element' 'copy'
    case 52921:                     // 'namespace' 'copy'
    case 52953:                     // 'processing-instruction' 'copy'
    case 53330:                     // 'attribute' 'copy-namespaces'
    case 53369:                     // 'element' 'copy-namespaces'
    case 53433:                     // 'namespace' 'copy-namespaces'
    case 53465:                     // 'processing-instruction' 'copy-namespaces'
    case 54354:                     // 'attribute' 'decimal-format'
    case 54393:                     // 'element' 'decimal-format'
    case 54457:                     // 'namespace' 'decimal-format'
    case 54489:                     // 'processing-instruction' 'decimal-format'
    case 55378:                     // 'attribute' 'declare'
    case 55417:                     // 'element' 'declare'
    case 55481:                     // 'namespace' 'declare'
    case 55513:                     // 'processing-instruction' 'declare'
    case 56402:                     // 'attribute' 'delete'
    case 56441:                     // 'element' 'delete'
    case 56505:                     // 'namespace' 'delete'
    case 56537:                     // 'processing-instruction' 'delete'
    case 56914:                     // 'attribute' 'descendant'
    case 56953:                     // 'element' 'descendant'
    case 57017:                     // 'namespace' 'descendant'
    case 57049:                     // 'processing-instruction' 'descendant'
    case 57426:                     // 'attribute' 'descendant-or-self'
    case 57465:                     // 'element' 'descendant-or-self'
    case 57529:                     // 'namespace' 'descendant-or-self'
    case 57561:                     // 'processing-instruction' 'descendant-or-self'
    case 61010:                     // 'attribute' 'document'
    case 61049:                     // 'element' 'document'
    case 61113:                     // 'namespace' 'document'
    case 61145:                     // 'processing-instruction' 'document'
    case 61522:                     // 'attribute' 'document-node'
    case 61561:                     // 'element' 'document-node'
    case 61625:                     // 'namespace' 'document-node'
    case 61657:                     // 'processing-instruction' 'document-node'
    case 62034:                     // 'attribute' 'element'
    case 62073:                     // 'element' 'element'
    case 62137:                     // 'namespace' 'element'
    case 62169:                     // 'processing-instruction' 'element'
    case 63570:                     // 'attribute' 'empty-sequence'
    case 63609:                     // 'element' 'empty-sequence'
    case 63673:                     // 'namespace' 'empty-sequence'
    case 63705:                     // 'processing-instruction' 'empty-sequence'
    case 64082:                     // 'attribute' 'encoding'
    case 64121:                     // 'element' 'encoding'
    case 64185:                     // 'namespace' 'encoding'
    case 64217:                     // 'processing-instruction' 'encoding'
    case 66130:                     // 'attribute' 'every'
    case 66169:                     // 'element' 'every'
    case 66233:                     // 'namespace' 'every'
    case 66265:                     // 'processing-instruction' 'every'
    case 67666:                     // 'attribute' 'exit'
    case 67705:                     // 'element' 'exit'
    case 67769:                     // 'namespace' 'exit'
    case 67801:                     // 'processing-instruction' 'exit'
    case 68178:                     // 'attribute' 'external'
    case 68217:                     // 'element' 'external'
    case 68281:                     // 'namespace' 'external'
    case 68313:                     // 'processing-instruction' 'external'
    case 68690:                     // 'attribute' 'first'
    case 68729:                     // 'element' 'first'
    case 68793:                     // 'namespace' 'first'
    case 68825:                     // 'processing-instruction' 'first'
    case 69202:                     // 'attribute' 'following'
    case 69241:                     // 'element' 'following'
    case 69305:                     // 'namespace' 'following'
    case 69337:                     // 'processing-instruction' 'following'
    case 69714:                     // 'attribute' 'following-sibling'
    case 69753:                     // 'element' 'following-sibling'
    case 69817:                     // 'namespace' 'following-sibling'
    case 69849:                     // 'processing-instruction' 'following-sibling'
    case 72274:                     // 'attribute' 'ft-option'
    case 72313:                     // 'element' 'ft-option'
    case 72377:                     // 'namespace' 'ft-option'
    case 72409:                     // 'processing-instruction' 'ft-option'
    case 74322:                     // 'attribute' 'function'
    case 74361:                     // 'element' 'function'
    case 74425:                     // 'namespace' 'function'
    case 74457:                     // 'processing-instruction' 'function'
    case 77906:                     // 'attribute' 'if'
    case 77945:                     // 'element' 'if'
    case 78009:                     // 'namespace' 'if'
    case 78041:                     // 'processing-instruction' 'if'
    case 78418:                     // 'attribute' 'import'
    case 78457:                     // 'element' 'import'
    case 78521:                     // 'namespace' 'import'
    case 78553:                     // 'processing-instruction' 'import'
    case 78930:                     // 'attribute' 'in'
    case 78969:                     // 'element' 'in'
    case 79033:                     // 'namespace' 'in'
    case 79065:                     // 'processing-instruction' 'in'
    case 79442:                     // 'attribute' 'index'
    case 79481:                     // 'element' 'index'
    case 79545:                     // 'namespace' 'index'
    case 79577:                     // 'processing-instruction' 'index'
    case 81490:                     // 'attribute' 'insert'
    case 81529:                     // 'element' 'insert'
    case 81593:                     // 'namespace' 'insert'
    case 81625:                     // 'processing-instruction' 'insert'
    case 82514:                     // 'attribute' 'integrity'
    case 82553:                     // 'element' 'integrity'
    case 82617:                     // 'namespace' 'integrity'
    case 82649:                     // 'processing-instruction' 'integrity'
    case 84562:                     // 'attribute' 'item'
    case 84601:                     // 'element' 'item'
    case 84665:                     // 'namespace' 'item'
    case 84697:                     // 'processing-instruction' 'item'
    case 85074:                     // 'attribute' 'json'
    case 85113:                     // 'element' 'json'
    case 85177:                     // 'namespace' 'json'
    case 85209:                     // 'processing-instruction' 'json'
    case 85586:                     // 'attribute' 'json-item'
    case 85625:                     // 'element' 'json-item'
    case 87122:                     // 'attribute' 'last'
    case 87161:                     // 'element' 'last'
    case 87225:                     // 'namespace' 'last'
    case 87257:                     // 'processing-instruction' 'last'
    case 87634:                     // 'attribute' 'lax'
    case 87673:                     // 'element' 'lax'
    case 87737:                     // 'namespace' 'lax'
    case 87769:                     // 'processing-instruction' 'lax'
    case 90194:                     // 'attribute' 'loop'
    case 90233:                     // 'element' 'loop'
    case 90297:                     // 'namespace' 'loop'
    case 90329:                     // 'processing-instruction' 'loop'
    case 91730:                     // 'attribute' 'map'
    case 91769:                     // 'element' 'map'
    case 91833:                     // 'namespace' 'map'
    case 91865:                     // 'processing-instruction' 'map'
    case 93778:                     // 'attribute' 'module'
    case 93817:                     // 'element' 'module'
    case 93881:                     // 'namespace' 'module'
    case 93913:                     // 'processing-instruction' 'module'
    case 94802:                     // 'attribute' 'namespace'
    case 94841:                     // 'element' 'namespace'
    case 94905:                     // 'namespace' 'namespace'
    case 94937:                     // 'processing-instruction' 'namespace'
    case 95314:                     // 'attribute' 'namespace-node'
    case 95353:                     // 'element' 'namespace-node'
    case 95417:                     // 'namespace' 'namespace-node'
    case 95449:                     // 'processing-instruction' 'namespace-node'
    case 98386:                     // 'attribute' 'node'
    case 98425:                     // 'element' 'node'
    case 98489:                     // 'namespace' 'node'
    case 98521:                     // 'processing-instruction' 'node'
    case 98898:                     // 'attribute' 'nodes'
    case 98937:                     // 'element' 'nodes'
    case 99001:                     // 'namespace' 'nodes'
    case 99033:                     // 'processing-instruction' 'nodes'
    case 99922:                     // 'attribute' 'object'
    case 99961:                     // 'element' 'object'
    case 100025:                    // 'namespace' 'object'
    case 100057:                    // 'processing-instruction' 'object'
    case 102482:                    // 'attribute' 'option'
    case 102521:                    // 'element' 'option'
    case 102585:                    // 'namespace' 'option'
    case 102617:                    // 'processing-instruction' 'option'
    case 104018:                    // 'attribute' 'ordered'
    case 104057:                    // 'element' 'ordered'
    case 104121:                    // 'namespace' 'ordered'
    case 104153:                    // 'processing-instruction' 'ordered'
    case 104530:                    // 'attribute' 'ordering'
    case 104569:                    // 'element' 'ordering'
    case 104633:                    // 'namespace' 'ordering'
    case 104665:                    // 'processing-instruction' 'ordering'
    case 106066:                    // 'attribute' 'parent'
    case 106105:                    // 'element' 'parent'
    case 106169:                    // 'namespace' 'parent'
    case 106201:                    // 'processing-instruction' 'parent'
    case 109138:                    // 'attribute' 'preceding'
    case 109177:                    // 'element' 'preceding'
    case 109241:                    // 'namespace' 'preceding'
    case 109273:                    // 'processing-instruction' 'preceding'
    case 109650:                    // 'attribute' 'preceding-sibling'
    case 109689:                    // 'element' 'preceding-sibling'
    case 109753:                    // 'namespace' 'preceding-sibling'
    case 109785:                    // 'processing-instruction' 'preceding-sibling'
    case 111186:                    // 'attribute' 'processing-instruction'
    case 111225:                    // 'element' 'processing-instruction'
    case 111289:                    // 'namespace' 'processing-instruction'
    case 111321:                    // 'processing-instruction' 'processing-instruction'
    case 112210:                    // 'attribute' 'rename'
    case 112249:                    // 'element' 'rename'
    case 112313:                    // 'namespace' 'rename'
    case 112345:                    // 'processing-instruction' 'rename'
    case 112722:                    // 'attribute' 'replace'
    case 112761:                    // 'element' 'replace'
    case 112825:                    // 'namespace' 'replace'
    case 112857:                    // 'processing-instruction' 'replace'
    case 113746:                    // 'attribute' 'returning'
    case 113785:                    // 'element' 'returning'
    case 113849:                    // 'namespace' 'returning'
    case 113881:                    // 'processing-instruction' 'returning'
    case 114258:                    // 'attribute' 'revalidation'
    case 114297:                    // 'element' 'revalidation'
    case 114361:                    // 'namespace' 'revalidation'
    case 114393:                    // 'processing-instruction' 'revalidation'
    case 115794:                    // 'attribute' 'schema'
    case 115833:                    // 'element' 'schema'
    case 115897:                    // 'namespace' 'schema'
    case 115929:                    // 'processing-instruction' 'schema'
    case 116306:                    // 'attribute' 'schema-attribute'
    case 116345:                    // 'element' 'schema-attribute'
    case 116409:                    // 'namespace' 'schema-attribute'
    case 116441:                    // 'processing-instruction' 'schema-attribute'
    case 116818:                    // 'attribute' 'schema-element'
    case 116857:                    // 'element' 'schema-element'
    case 116921:                    // 'namespace' 'schema-element'
    case 116953:                    // 'processing-instruction' 'schema-element'
    case 117330:                    // 'attribute' 'score'
    case 117369:                    // 'element' 'score'
    case 117433:                    // 'namespace' 'score'
    case 117465:                    // 'processing-instruction' 'score'
    case 117842:                    // 'attribute' 'self'
    case 117881:                    // 'element' 'self'
    case 117945:                    // 'namespace' 'self'
    case 117977:                    // 'processing-instruction' 'self'
    case 120402:                    // 'attribute' 'sliding'
    case 120441:                    // 'element' 'sliding'
    case 120505:                    // 'namespace' 'sliding'
    case 120537:                    // 'processing-instruction' 'sliding'
    case 120914:                    // 'attribute' 'some'
    case 120953:                    // 'element' 'some'
    case 121017:                    // 'namespace' 'some'
    case 121049:                    // 'processing-instruction' 'some'
    case 123474:                    // 'attribute' 'strict'
    case 123513:                    // 'element' 'strict'
    case 123577:                    // 'namespace' 'strict'
    case 123609:                    // 'processing-instruction' 'strict'
    case 124498:                    // 'attribute' 'structured-item'
    case 124537:                    // 'element' 'structured-item'
    case 125010:                    // 'attribute' 'switch'
    case 125049:                    // 'element' 'switch'
    case 125113:                    // 'namespace' 'switch'
    case 125145:                    // 'processing-instruction' 'switch'
    case 125522:                    // 'attribute' 'text'
    case 125561:                    // 'element' 'text'
    case 125625:                    // 'namespace' 'text'
    case 125657:                    // 'processing-instruction' 'text'
    case 128594:                    // 'attribute' 'try'
    case 128633:                    // 'element' 'try'
    case 128697:                    // 'namespace' 'try'
    case 128729:                    // 'processing-instruction' 'try'
    case 129106:                    // 'attribute' 'tumbling'
    case 129145:                    // 'element' 'tumbling'
    case 129209:                    // 'namespace' 'tumbling'
    case 129241:                    // 'processing-instruction' 'tumbling'
    case 129618:                    // 'attribute' 'type'
    case 129657:                    // 'element' 'type'
    case 129721:                    // 'namespace' 'type'
    case 129753:                    // 'processing-instruction' 'type'
    case 130130:                    // 'attribute' 'typeswitch'
    case 130169:                    // 'element' 'typeswitch'
    case 130233:                    // 'namespace' 'typeswitch'
    case 130265:                    // 'processing-instruction' 'typeswitch'
    case 131666:                    // 'attribute' 'unordered'
    case 131705:                    // 'element' 'unordered'
    case 131769:                    // 'namespace' 'unordered'
    case 131801:                    // 'processing-instruction' 'unordered'
    case 132178:                    // 'attribute' 'updating'
    case 132217:                    // 'element' 'updating'
    case 132281:                    // 'namespace' 'updating'
    case 132313:                    // 'processing-instruction' 'updating'
    case 133714:                    // 'attribute' 'validate'
    case 133753:                    // 'element' 'validate'
    case 133817:                    // 'namespace' 'validate'
    case 133849:                    // 'processing-instruction' 'validate'
    case 134226:                    // 'attribute' 'value'
    case 134265:                    // 'element' 'value'
    case 134329:                    // 'namespace' 'value'
    case 134361:                    // 'processing-instruction' 'value'
    case 134738:                    // 'attribute' 'variable'
    case 134777:                    // 'element' 'variable'
    case 134841:                    // 'namespace' 'variable'
    case 134873:                    // 'processing-instruction' 'variable'
    case 135250:                    // 'attribute' 'version'
    case 135289:                    // 'element' 'version'
    case 135353:                    // 'namespace' 'version'
    case 135385:                    // 'processing-instruction' 'version'
    case 137298:                    // 'attribute' 'while'
    case 137337:                    // 'element' 'while'
    case 137401:                    // 'namespace' 'while'
    case 137433:                    // 'processing-instruction' 'while'
    case 140882:                    // 'attribute' 'xquery'
    case 140921:                    // 'element' 'xquery'
    case 140985:                    // 'namespace' 'xquery'
    case 141017:                    // 'processing-instruction' 'xquery'
    case 141906:                    // 'attribute' '{'
    case 141920:                    // 'comment' '{'
    case 141943:                    // 'document' '{'
    case 141945:                    // 'element' '{'
    case 142003:                    // 'map' '{'
    case 142009:                    // 'namespace' '{'
    case 142027:                    // 'ordered' '{'
    case 142041:                    // 'processing-instruction' '{'
    case 142069:                    // 'text' '{'
    case 142081:                    // 'unordered' '{'
      try_PostfixExpr();
      break;
    case -3:
      break;
    default:
      try_AxisStep();
    }
  }

  function parse_AxisStep()
  {
    eventHandler.startNonterminal("AxisStep", e0);
    switch (l1)
    {
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 207:                       // 'parent'
    case 213:                       // 'preceding'
    case 214:                       // 'preceding-sibling'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 26185:                     // 'ancestor' '::'
    case 26186:                     // 'ancestor-or-self' '::'
    case 26319:                     // 'parent' '::'
    case 26325:                     // 'preceding' '::'
    case 26326:                     // 'preceding-sibling' '::'
      parse_ReverseStep();
      break;
    default:
      parse_ForwardStep();
    }
    lookahead1W(237);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    whitespace();
    parse_PredicateList();
    eventHandler.endNonterminal("AxisStep", e0);
  }

  function try_AxisStep()
  {
    switch (l1)
    {
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 207:                       // 'parent'
    case 213:                       // 'preceding'
    case 214:                       // 'preceding-sibling'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 45:                        // '..'
    case 26185:                     // 'ancestor' '::'
    case 26186:                     // 'ancestor-or-self' '::'
    case 26319:                     // 'parent' '::'
    case 26325:                     // 'preceding' '::'
    case 26326:                     // 'preceding-sibling' '::'
      try_ReverseStep();
      break;
    default:
      try_ForwardStep();
    }
    lookahead1W(237);               // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
    try_PredicateList();
  }

  function parse_ForwardStep()
  {
    eventHandler.startNonterminal("ForwardStep", e0);
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(244);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 230:                       // 'self'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26194:                     // 'attribute' '::'
    case 26205:                     // 'child' '::'
    case 26223:                     // 'descendant' '::'
    case 26224:                     // 'descendant-or-self' '::'
    case 26247:                     // 'following' '::'
    case 26248:                     // 'following-sibling' '::'
    case 26342:                     // 'self' '::'
      parse_ForwardAxis();
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
      break;
    default:
      parse_AbbrevForwardStep();
    }
    eventHandler.endNonterminal("ForwardStep", e0);
  }

  function try_ForwardStep()
  {
    switch (l1)
    {
    case 82:                        // 'attribute'
      lookahead2W(244);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    case 93:                        // 'child'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 230:                       // 'self'
      lookahead2W(241);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 26194:                     // 'attribute' '::'
    case 26205:                     // 'child' '::'
    case 26223:                     // 'descendant' '::'
    case 26224:                     // 'descendant-or-self' '::'
    case 26247:                     // 'following' '::'
    case 26248:                     // 'following-sibling' '::'
    case 26342:                     // 'self' '::'
      try_ForwardAxis();
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_NodeTest();
      break;
    default:
      try_AbbrevForwardStep();
    }
  }

  function parse_ForwardAxis()
  {
    eventHandler.startNonterminal("ForwardAxis", e0);
    switch (l1)
    {
    case 93:                        // 'child'
      consume(93);                  // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 111:                       // 'descendant'
      consume(111);                 // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 82:                        // 'attribute'
      consume(82);                  // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 230:                       // 'self'
      consume(230);                 // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 112:                       // 'descendant-or-self'
      consume(112);                 // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 136:                       // 'following-sibling'
      consume(136);                 // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    default:
      consume(135);                 // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
    }
    eventHandler.endNonterminal("ForwardAxis", e0);
  }

  function try_ForwardAxis()
  {
    switch (l1)
    {
    case 93:                        // 'child'
      consumeT(93);                 // 'child'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 111:                       // 'descendant'
      consumeT(111);                // 'descendant'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 82:                        // 'attribute'
      consumeT(82);                 // 'attribute'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 230:                       // 'self'
      consumeT(230);                // 'self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 112:                       // 'descendant-or-self'
      consumeT(112);                // 'descendant-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 136:                       // 'following-sibling'
      consumeT(136);                // 'following-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    default:
      consumeT(135);                // 'following'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
    }
  }

  function parse_AbbrevForwardStep()
  {
    eventHandler.startNonterminal("AbbrevForwardStep", e0);
    if (l1 == 66)                   // '@'
    {
      consume(66);                  // '@'
    }
    lookahead1W(258);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_NodeTest();
    eventHandler.endNonterminal("AbbrevForwardStep", e0);
  }

  function try_AbbrevForwardStep()
  {
    if (l1 == 66)                   // '@'
    {
      consumeT(66);                 // '@'
    }
    lookahead1W(258);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_NodeTest();
  }

  function parse_ReverseStep()
  {
    eventHandler.startNonterminal("ReverseStep", e0);
    switch (l1)
    {
    case 45:                        // '..'
      parse_AbbrevReverseStep();
      break;
    default:
      parse_ReverseAxis();
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_NodeTest();
    }
    eventHandler.endNonterminal("ReverseStep", e0);
  }

  function try_ReverseStep()
  {
    switch (l1)
    {
    case 45:                        // '..'
      try_AbbrevReverseStep();
      break;
    default:
      try_ReverseAxis();
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_NodeTest();
    }
  }

  function parse_ReverseAxis()
  {
    eventHandler.startNonterminal("ReverseAxis", e0);
    switch (l1)
    {
    case 207:                       // 'parent'
      consume(207);                 // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 73:                        // 'ancestor'
      consume(73);                  // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 214:                       // 'preceding-sibling'
      consume(214);                 // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    case 213:                       // 'preceding'
      consume(213);                 // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
      break;
    default:
      consume(74);                  // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consume(51);                  // '::'
    }
    eventHandler.endNonterminal("ReverseAxis", e0);
  }

  function try_ReverseAxis()
  {
    switch (l1)
    {
    case 207:                       // 'parent'
      consumeT(207);                // 'parent'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 73:                        // 'ancestor'
      consumeT(73);                 // 'ancestor'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 214:                       // 'preceding-sibling'
      consumeT(214);                // 'preceding-sibling'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    case 213:                       // 'preceding'
      consumeT(213);                // 'preceding'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
      break;
    default:
      consumeT(74);                 // 'ancestor-or-self'
      lookahead1W(26);              // S^WS | '(:' | '::'
      consumeT(51);                 // '::'
    }
  }

  function parse_AbbrevReverseStep()
  {
    eventHandler.startNonterminal("AbbrevReverseStep", e0);
    consume(45);                    // '..'
    eventHandler.endNonterminal("AbbrevReverseStep", e0);
  }

  function try_AbbrevReverseStep()
  {
    consumeT(45);                   // '..'
  }

  function parse_NodeTest()
  {
    eventHandler.startNonterminal("NodeTest", e0);
    switch (l1)
    {
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 186:                       // 'namespace-node'
    case 192:                       // 'node'
    case 217:                       // 'processing-instruction'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 245:                       // 'text'
      lookahead2W(240);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17594:                     // 'namespace-node' '('
    case 17600:                     // 'node' '('
    case 17625:                     // 'processing-instruction' '('
    case 17635:                     // 'schema-attribute' '('
    case 17636:                     // 'schema-element' '('
    case 17653:                     // 'text' '('
      parse_KindTest();
      break;
    default:
      parse_NameTest();
    }
    eventHandler.endNonterminal("NodeTest", e0);
  }

  function try_NodeTest()
  {
    switch (l1)
    {
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 186:                       // 'namespace-node'
    case 192:                       // 'node'
    case 217:                       // 'processing-instruction'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 245:                       // 'text'
      lookahead2W(240);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17594:                     // 'namespace-node' '('
    case 17600:                     // 'node' '('
    case 17625:                     // 'processing-instruction' '('
    case 17635:                     // 'schema-attribute' '('
    case 17636:                     // 'schema-element' '('
    case 17653:                     // 'text' '('
      try_KindTest();
      break;
    default:
      try_NameTest();
    }
  }

  function parse_NameTest()
  {
    eventHandler.startNonterminal("NameTest", e0);
    switch (l1)
    {
    case 5:                         // Wildcard
      consume(5);                   // Wildcard
      break;
    default:
      parse_EQName();
    }
    eventHandler.endNonterminal("NameTest", e0);
  }

  function try_NameTest()
  {
    switch (l1)
    {
    case 5:                         // Wildcard
      consumeT(5);                  // Wildcard
      break;
    default:
      try_EQName();
    }
  }

  function parse_PostfixExpr()
  {
    eventHandler.startNonterminal("PostfixExpr", e0);
    parse_PrimaryExpr();
    for (;;)
    {
      lookahead1W(245);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 34                  // '('
       && l1 != 64                  // '?'
       && l1 != 68)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 68:                      // '['
        whitespace();
        parse_Predicate();
        break;
      case 34:                      // '('
        whitespace();
        parse_ArgumentList();
        break;
      default:
        whitespace();
        parse_Lookup();
      }
    }
    eventHandler.endNonterminal("PostfixExpr", e0);
  }

  function try_PostfixExpr()
  {
    try_PrimaryExpr();
    for (;;)
    {
      lookahead1W(245);             // S^WS | EOF | '!' | '!=' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 34                  // '('
       && l1 != 64                  // '?'
       && l1 != 68)                 // '['
      {
        break;
      }
      switch (l1)
      {
      case 68:                      // '['
        try_Predicate();
        break;
      case 34:                      // '('
        try_ArgumentList();
        break;
      default:
        try_Lookup();
      }
    }
  }

  function parse_ArgumentList()
  {
    eventHandler.startNonterminal("ArgumentList", e0);
    consume(34);                    // '('
    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Argument();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_Argument();
      }
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ArgumentList", e0);
  }

  function try_ArgumentList()
  {
    consumeT(34);                   // '('
    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 37)                   // ')'
    {
      try_Argument();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_Argument();
      }
    }
    consumeT(37);                   // ')'
  }

  function parse_PredicateList()
  {
    eventHandler.startNonterminal("PredicateList", e0);
    for (;;)
    {
      lookahead1W(237);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 68)                 // '['
      {
        break;
      }
      whitespace();
      parse_Predicate();
    }
    eventHandler.endNonterminal("PredicateList", e0);
  }

  function try_PredicateList()
  {
    for (;;)
    {
      lookahead1W(237);             // S^WS | EOF | '!' | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' | '//' | ':' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' | 'after' | 'and' |
                                    // 'as' | 'ascending' | 'at' | 'before' | 'by' | 'case' | 'cast' | 'castable' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'sentences' | 'stable' | 'start' | 'times' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | 'words' | '|' | '||' | '|}' | '}'
      if (l1 != 68)                 // '['
      {
        break;
      }
      try_Predicate();
    }
  }

  function parse_Predicate()
  {
    eventHandler.startNonterminal("Predicate", e0);
    consume(68);                    // '['
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(69);                    // ']'
    eventHandler.endNonterminal("Predicate", e0);
  }

  function try_Predicate()
  {
    consumeT(68);                   // '['
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(69);                   // ']'
  }

  function parse_Lookup()
  {
    eventHandler.startNonterminal("Lookup", e0);
    consume(64);                    // '?'
    lookahead1W(256);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("Lookup", e0);
  }

  function try_Lookup()
  {
    consumeT(64);                   // '?'
    lookahead1W(256);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_KeySpecifier();
  }

  function parse_UnaryLookup()
  {
    eventHandler.startNonterminal("UnaryLookup", e0);
    consume(64);                    // '?'
    lookahead1W(256);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    whitespace();
    parse_KeySpecifier();
    eventHandler.endNonterminal("UnaryLookup", e0);
  }

  function try_UnaryLookup()
  {
    consumeT(64);                   // '?'
    lookahead1W(256);               // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    try_KeySpecifier();
  }

  function parse_KeySpecifier()
  {
    eventHandler.startNonterminal("KeySpecifier", e0);
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consume(8);                   // IntegerLiteral
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_NCName();
    }
    eventHandler.endNonterminal("KeySpecifier", e0);
  }

  function try_KeySpecifier()
  {
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consumeT(8);                  // IntegerLiteral
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_NCName();
    }
  }

  function parse_Literal()
  {
    eventHandler.startNonterminal("Literal", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      consume(11);                  // StringLiteral
      break;
    default:
      parse_NumericLiteral();
    }
    eventHandler.endNonterminal("Literal", e0);
  }

  function try_Literal()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      consumeT(11);                 // StringLiteral
      break;
    default:
      try_NumericLiteral();
    }
  }

  function parse_NumericLiteral()
  {
    eventHandler.startNonterminal("NumericLiteral", e0);
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consume(8);                   // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      consume(9);                   // DecimalLiteral
      break;
    default:
      consume(10);                  // DoubleLiteral
    }
    eventHandler.endNonterminal("NumericLiteral", e0);
  }

  function try_NumericLiteral()
  {
    switch (l1)
    {
    case 8:                         // IntegerLiteral
      consumeT(8);                  // IntegerLiteral
      break;
    case 9:                         // DecimalLiteral
      consumeT(9);                  // DecimalLiteral
      break;
    default:
      consumeT(10);                 // DoubleLiteral
    }
  }

  function parse_VarRef()
  {
    eventHandler.startNonterminal("VarRef", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    eventHandler.endNonterminal("VarRef", e0);
  }

  function try_VarRef()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
  }

  function parse_VarName()
  {
    eventHandler.startNonterminal("VarName", e0);
    parse_EQName();
    eventHandler.endNonterminal("VarName", e0);
  }

  function try_VarName()
  {
    try_EQName();
  }

  function parse_ParenthesizedExpr()
  {
    eventHandler.startNonterminal("ParenthesizedExpr", e0);
    consume(34);                    // '('
    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_Expr();
    }
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedExpr", e0);
  }

  function try_ParenthesizedExpr()
  {
    consumeT(34);                   // '('
    lookahead1W(272);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    if (l1 != 37)                   // ')'
    {
      try_Expr();
    }
    consumeT(37);                   // ')'
  }

  function parse_ContextItemExpr()
  {
    eventHandler.startNonterminal("ContextItemExpr", e0);
    consume(44);                    // '.'
    eventHandler.endNonterminal("ContextItemExpr", e0);
  }

  function try_ContextItemExpr()
  {
    consumeT(44);                   // '.'
  }

  function parse_OrderedExpr()
  {
    eventHandler.startNonterminal("OrderedExpr", e0);
    consume(203);                   // 'ordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("OrderedExpr", e0);
  }

  function try_OrderedExpr()
  {
    consumeT(203);                  // 'ordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(283);                  // '}'
  }

  function parse_UnorderedExpr()
  {
    eventHandler.startNonterminal("UnorderedExpr", e0);
    consume(257);                   // 'unordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("UnorderedExpr", e0);
  }

  function try_UnorderedExpr()
  {
    consumeT(257);                  // 'unordered'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(283);                  // '}'
  }

  function parse_FunctionCall()
  {
    eventHandler.startNonterminal("FunctionCall", e0);
    parse_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    whitespace();
    parse_ArgumentList();
    eventHandler.endNonterminal("FunctionCall", e0);
  }

  function try_FunctionCall()
  {
    try_FunctionName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    try_ArgumentList();
  }

  function parse_Argument()
  {
    eventHandler.startNonterminal("Argument", e0);
    switch (l1)
    {
    case 64:                        // '?'
      lookahead2W(264);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19008:                     // '?' ')'
    case 21056:                     // '?' ','
      parse_ArgumentPlaceholder();
      break;
    default:
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("Argument", e0);
  }

  function try_Argument()
  {
    switch (l1)
    {
    case 64:                        // '?'
      lookahead2W(264);             // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | ')' | '*' | ',' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 19008:                     // '?' ')'
    case 21056:                     // '?' ','
      try_ArgumentPlaceholder();
      break;
    default:
      try_ExprSingle();
    }
  }

  function parse_ArgumentPlaceholder()
  {
    eventHandler.startNonterminal("ArgumentPlaceholder", e0);
    consume(64);                    // '?'
    eventHandler.endNonterminal("ArgumentPlaceholder", e0);
  }

  function try_ArgumentPlaceholder()
  {
    consumeT(64);                   // '?'
  }

  function parse_Constructor()
  {
    eventHandler.startNonterminal("Constructor", e0);
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    default:
      parse_ComputedConstructor();
    }
    eventHandler.endNonterminal("Constructor", e0);
  }

  function try_Constructor()
  {
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    default:
      try_ComputedConstructor();
    }
  }

  function parse_DirectConstructor()
  {
    eventHandler.startNonterminal("DirectConstructor", e0);
    switch (l1)
    {
    case 54:                        // '<'
      parse_DirElemConstructor();
      break;
    case 55:                        // '<!--'
      parse_DirCommentConstructor();
      break;
    default:
      parse_DirPIConstructor();
    }
    eventHandler.endNonterminal("DirectConstructor", e0);
  }

  function try_DirectConstructor()
  {
    switch (l1)
    {
    case 54:                        // '<'
      try_DirElemConstructor();
      break;
    case 55:                        // '<!--'
      try_DirCommentConstructor();
      break;
    default:
      try_DirPIConstructor();
    }
  }

  function parse_DirElemConstructor()
  {
    eventHandler.startNonterminal("DirElemConstructor", e0);
    consume(54);                    // '<'
    lookahead1(4);                  // QName
    consume(20);                    // QName
    parse_DirAttributeList();
    switch (l1)
    {
    case 48:                        // '/>'
      consume(48);                  // '/>'
      break;
    default:
      consume(61);                  // '>'
      for (;;)
      {
        lookahead1(174);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        parse_DirElemContent();
      }
      consume(56);                  // '</'
      lookahead1(4);                // QName
      consume(20);                  // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        consume(21);                // S
      }
      lookahead1(8);                // '>'
      consume(61);                  // '>'
    }
    eventHandler.endNonterminal("DirElemConstructor", e0);
  }

  function try_DirElemConstructor()
  {
    consumeT(54);                   // '<'
    lookahead1(4);                  // QName
    consumeT(20);                   // QName
    try_DirAttributeList();
    switch (l1)
    {
    case 48:                        // '/>'
      consumeT(48);                 // '/>'
      break;
    default:
      consumeT(61);                 // '>'
      for (;;)
      {
        lookahead1(174);            // CDataSection | PredefinedEntityRef | ElementContentChar | CharRef | '<' |
                                    // '<!--' | '</' | '<?' | '{' | '{{' | '}}'
        if (l1 == 56)               // '</'
        {
          break;
        }
        try_DirElemContent();
      }
      consumeT(56);                 // '</'
      lookahead1(4);                // QName
      consumeT(20);                 // QName
      lookahead1(12);               // S | '>'
      if (l1 == 21)                 // S
      {
        consumeT(21);               // S
      }
      lookahead1(8);                // '>'
      consumeT(61);                 // '>'
    }
  }

  function parse_DirAttributeList()
  {
    eventHandler.startNonterminal("DirAttributeList", e0);
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      consume(21);                  // S
      lookahead1(91);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        consume(20);                // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          consume(21);              // S
        }
        lookahead1(7);              // '='
        consume(60);                // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          consume(21);              // S
        }
        parse_DirAttributeValue();
      }
    }
    eventHandler.endNonterminal("DirAttributeList", e0);
  }

  function try_DirAttributeList()
  {
    for (;;)
    {
      lookahead1(19);               // S | '/>' | '>'
      if (l1 != 21)                 // S
      {
        break;
      }
      consumeT(21);                 // S
      lookahead1(91);               // QName | S | '/>' | '>'
      if (l1 == 20)                 // QName
      {
        consumeT(20);               // QName
        lookahead1(11);             // S | '='
        if (l1 == 21)               // S
        {
          consumeT(21);             // S
        }
        lookahead1(7);              // '='
        consumeT(60);               // '='
        lookahead1(18);             // S | '"' | "'"
        if (l1 == 21)               // S
        {
          consumeT(21);             // S
        }
        try_DirAttributeValue();
      }
    }
  }

  function parse_DirAttributeValue()
  {
    eventHandler.startNonterminal("DirAttributeValue", e0);
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consume(28);                  // '"'
      for (;;)
      {
        lookahead1(167);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          consume(13);              // EscapeQuot
          break;
        default:
          parse_QuotAttrValueContent();
        }
      }
      consume(28);                  // '"'
      break;
    default:
      consume(33);                  // "'"
      for (;;)
      {
        lookahead1(168);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          consume(14);              // EscapeApos
          break;
        default:
          parse_AposAttrValueContent();
        }
      }
      consume(33);                  // "'"
    }
    eventHandler.endNonterminal("DirAttributeValue", e0);
  }

  function try_DirAttributeValue()
  {
    lookahead1(14);                 // '"' | "'"
    switch (l1)
    {
    case 28:                        // '"'
      consumeT(28);                 // '"'
      for (;;)
      {
        lookahead1(167);            // PredefinedEntityRef | EscapeQuot | QuotAttrContentChar | CharRef | '"' | '{' |
                                    // '{{' | '}}'
        if (l1 == 28)               // '"'
        {
          break;
        }
        switch (l1)
        {
        case 13:                    // EscapeQuot
          consumeT(13);             // EscapeQuot
          break;
        default:
          try_QuotAttrValueContent();
        }
      }
      consumeT(28);                 // '"'
      break;
    default:
      consumeT(33);                 // "'"
      for (;;)
      {
        lookahead1(168);            // PredefinedEntityRef | EscapeApos | AposAttrContentChar | CharRef | "'" | '{' |
                                    // '{{' | '}}'
        if (l1 == 33)               // "'"
        {
          break;
        }
        switch (l1)
        {
        case 14:                    // EscapeApos
          consumeT(14);             // EscapeApos
          break;
        default:
          try_AposAttrValueContent();
        }
      }
      consumeT(33);                 // "'"
    }
  }

  function parse_QuotAttrValueContent()
  {
    eventHandler.startNonterminal("QuotAttrValueContent", e0);
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      consume(16);                  // QuotAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("QuotAttrValueContent", e0);
  }

  function try_QuotAttrValueContent()
  {
    switch (l1)
    {
    case 16:                        // QuotAttrContentChar
      consumeT(16);                 // QuotAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_AposAttrValueContent()
  {
    eventHandler.startNonterminal("AposAttrValueContent", e0);
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      consume(17);                  // AposAttrContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("AposAttrValueContent", e0);
  }

  function try_AposAttrValueContent()
  {
    switch (l1)
    {
    case 17:                        // AposAttrContentChar
      consumeT(17);                 // AposAttrContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirElemContent()
  {
    eventHandler.startNonterminal("DirElemContent", e0);
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      parse_DirectConstructor();
      break;
    case 4:                         // CDataSection
      consume(4);                   // CDataSection
      break;
    case 15:                        // ElementContentChar
      consume(15);                  // ElementContentChar
      break;
    default:
      parse_CommonContent();
    }
    eventHandler.endNonterminal("DirElemContent", e0);
  }

  function try_DirElemContent()
  {
    switch (l1)
    {
    case 54:                        // '<'
    case 55:                        // '<!--'
    case 59:                        // '<?'
      try_DirectConstructor();
      break;
    case 4:                         // CDataSection
      consumeT(4);                  // CDataSection
      break;
    case 15:                        // ElementContentChar
      consumeT(15);                 // ElementContentChar
      break;
    default:
      try_CommonContent();
    }
  }

  function parse_DirCommentConstructor()
  {
    eventHandler.startNonterminal("DirCommentConstructor", e0);
    consume(55);                    // '<!--'
    lookahead1(1);                  // DirCommentContents
    consume(2);                     // DirCommentContents
    lookahead1(6);                  // '-->'
    consume(43);                    // '-->'
    eventHandler.endNonterminal("DirCommentConstructor", e0);
  }

  function try_DirCommentConstructor()
  {
    consumeT(55);                   // '<!--'
    lookahead1(1);                  // DirCommentContents
    consumeT(2);                    // DirCommentContents
    lookahead1(6);                  // '-->'
    consumeT(43);                   // '-->'
  }

  function parse_DirPIConstructor()
  {
    eventHandler.startNonterminal("DirPIConstructor", e0);
    consume(59);                    // '<?'
    lookahead1(3);                  // PITarget
    consume(18);                    // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      consume(21);                  // S
      lookahead1(2);                // DirPIContents
      consume(3);                   // DirPIContents
    }
    lookahead1(9);                  // '?>'
    consume(65);                    // '?>'
    eventHandler.endNonterminal("DirPIConstructor", e0);
  }

  function try_DirPIConstructor()
  {
    consumeT(59);                   // '<?'
    lookahead1(3);                  // PITarget
    consumeT(18);                   // PITarget
    lookahead1(13);                 // S | '?>'
    if (l1 == 21)                   // S
    {
      consumeT(21);                 // S
      lookahead1(2);                // DirPIContents
      consumeT(3);                  // DirPIContents
    }
    lookahead1(9);                  // '?>'
    consumeT(65);                   // '?>'
  }

  function parse_ComputedConstructor()
  {
    eventHandler.startNonterminal("ComputedConstructor", e0);
    switch (l1)
    {
    case 119:                       // 'document'
      parse_CompDocConstructor();
      break;
    case 121:                       // 'element'
      parse_CompElemConstructor();
      break;
    case 82:                        // 'attribute'
      parse_CompAttrConstructor();
      break;
    case 185:                       // 'namespace'
      parse_CompNamespaceConstructor();
      break;
    case 245:                       // 'text'
      parse_CompTextConstructor();
      break;
    case 96:                        // 'comment'
      parse_CompCommentConstructor();
      break;
    default:
      parse_CompPIConstructor();
    }
    eventHandler.endNonterminal("ComputedConstructor", e0);
  }

  function try_ComputedConstructor()
  {
    switch (l1)
    {
    case 119:                       // 'document'
      try_CompDocConstructor();
      break;
    case 121:                       // 'element'
      try_CompElemConstructor();
      break;
    case 82:                        // 'attribute'
      try_CompAttrConstructor();
      break;
    case 185:                       // 'namespace'
      try_CompNamespaceConstructor();
      break;
    case 245:                       // 'text'
      try_CompTextConstructor();
      break;
    case 96:                        // 'comment'
      try_CompCommentConstructor();
      break;
    default:
      try_CompPIConstructor();
    }
  }

  function parse_CompElemConstructor()
  {
    eventHandler.startNonterminal("CompElemConstructor", e0);
    consume(121);                   // 'element'
    lookahead1W(260);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consume(277);                 // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(283);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      whitespace();
      parse_ContentExpr();
    }
    consume(283);                   // '}'
    eventHandler.endNonterminal("CompElemConstructor", e0);
  }

  function try_CompElemConstructor()
  {
    consumeT(121);                  // 'element'
    lookahead1W(260);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consumeT(277);                // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(283);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      try_ContentExpr();
    }
    consumeT(283);                  // '}'
  }

  function parse_CompNamespaceConstructor()
  {
    eventHandler.startNonterminal("CompNamespaceConstructor", e0);
    consume(185);                   // 'namespace'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consume(277);                 // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PrefixExpr();
      consume(283);                 // '}'
      break;
    default:
      whitespace();
      parse_Prefix();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_URIExpr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("CompNamespaceConstructor", e0);
  }

  function try_CompNamespaceConstructor()
  {
    consumeT(185);                  // 'namespace'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consumeT(277);                // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_PrefixExpr();
      consumeT(283);                // '}'
      break;
    default:
      try_Prefix();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_URIExpr();
    consumeT(283);                  // '}'
  }

  function parse_Prefix()
  {
    eventHandler.startNonterminal("Prefix", e0);
    parse_NCName();
    eventHandler.endNonterminal("Prefix", e0);
  }

  function try_Prefix()
  {
    try_NCName();
  }

  function parse_PrefixExpr()
  {
    eventHandler.startNonterminal("PrefixExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("PrefixExpr", e0);
  }

  function try_PrefixExpr()
  {
    try_Expr();
  }

  function parse_URIExpr()
  {
    eventHandler.startNonterminal("URIExpr", e0);
    parse_Expr();
    eventHandler.endNonterminal("URIExpr", e0);
  }

  function try_URIExpr()
  {
    try_Expr();
  }

  function parse_FunctionItemExpr()
  {
    eventHandler.startNonterminal("FunctionItemExpr", e0);
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      parse_InlineFunctionExpr();
      break;
    default:
      parse_NamedFunctionRef();
    }
    eventHandler.endNonterminal("FunctionItemExpr", e0);
  }

  function try_FunctionItemExpr()
  {
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      try_InlineFunctionExpr();
      break;
    default:
      try_NamedFunctionRef();
    }
  }

  function parse_NamedFunctionRef()
  {
    eventHandler.startNonterminal("NamedFunctionRef", e0);
    parse_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    consume(29);                    // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    consume(8);                     // IntegerLiteral
    eventHandler.endNonterminal("NamedFunctionRef", e0);
  }

  function try_NamedFunctionRef()
  {
    try_EQName();
    lookahead1W(20);                // S^WS | '#' | '(:'
    consumeT(29);                   // '#'
    lookahead1W(16);                // IntegerLiteral | S^WS | '(:'
    consumeT(8);                    // IntegerLiteral
  }

  function parse_InlineFunctionExpr()
  {
    eventHandler.startNonterminal("InlineFunctionExpr", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(145);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(111);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 79)                   // 'as'
    {
      consume(79);                  // 'as'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_FunctionBody();
    eventHandler.endNonterminal("InlineFunctionExpr", e0);
  }

  function try_InlineFunctionExpr()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(145);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      try_ParamList();
    }
    consumeT(37);                   // ')'
    lookahead1W(111);               // S^WS | '(:' | 'as' | '{'
    if (l1 == 79)                   // 'as'
    {
      consumeT(79);                 // 'as'
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_FunctionBody();
  }

  function parse_SingleType()
  {
    eventHandler.startNonterminal("SingleType", e0);
    parse_SimpleTypeName();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 64)                   // '?'
    {
      consume(64);                  // '?'
    }
    eventHandler.endNonterminal("SingleType", e0);
  }

  function try_SingleType()
  {
    try_SimpleTypeName();
    lookahead1W(226);               // S^WS | EOF | '!=' | '(:' | ')' | '*' | '+' | ',' | '-' | ':' | ';' | '<' | '<<' |
                                    // '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'and' | 'as' |
                                    // 'ascending' | 'at' | 'before' | 'case' | 'castable' | 'collation' | 'contains' |
                                    // 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' | 'end' | 'eq' |
                                    // 'except' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' | 'instance' | 'intersect' |
                                    // 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' |
                                    // 'order' | 'paragraphs' | 'return' | 'satisfies' | 'sentences' | 'stable' |
                                    // 'start' | 'times' | 'to' | 'treat' | 'union' | 'where' | 'with' | 'words' | '|' |
                                    // '||' | '|}' | '}'
    if (l1 == 64)                   // '?'
    {
      consumeT(64);                 // '?'
    }
  }

  function parse_TypeDeclaration()
  {
    eventHandler.startNonterminal("TypeDeclaration", e0);
    consume(79);                    // 'as'
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypeDeclaration", e0);
  }

  function try_TypeDeclaration()
  {
    consumeT(79);                   // 'as'
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_SequenceType()
  {
    eventHandler.startNonterminal("SequenceType", e0);
    switch (l1)
    {
    case 124:                       // 'empty-sequence'
      lookahead2W(242);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17532:                     // 'empty-sequence' '('
      consume(124);                 // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    default:
      parse_ItemType();
      lookahead1W(238);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 64:                      // '?'
        whitespace();
        parse_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
    eventHandler.endNonterminal("SequenceType", e0);
  }

  function try_SequenceType()
  {
    switch (l1)
    {
    case 124:                       // 'empty-sequence'
      lookahead2W(242);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17532:                     // 'empty-sequence' '('
      consumeT(124);                // 'empty-sequence'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    default:
      try_ItemType();
      lookahead1W(238);             // S^WS | EOF | '!=' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' | 'allowing' |
                                    // 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'collation' |
                                    // 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' | 'empty' |
                                    // 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' | 'idiv' |
                                    // 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'mod' |
                                    // 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      switch (l1)
      {
      case 39:                      // '*'
      case 40:                      // '+'
      case 64:                      // '?'
        try_OccurrenceIndicator();
        break;
      default:
        break;
      }
    }
  }

  function parse_OccurrenceIndicator()
  {
    eventHandler.startNonterminal("OccurrenceIndicator", e0);
    switch (l1)
    {
    case 64:                        // '?'
      consume(64);                  // '?'
      break;
    case 39:                        // '*'
      consume(39);                  // '*'
      break;
    default:
      consume(40);                  // '+'
    }
    eventHandler.endNonterminal("OccurrenceIndicator", e0);
  }

  function try_OccurrenceIndicator()
  {
    switch (l1)
    {
    case 64:                        // '?'
      consumeT(64);                 // '?'
      break;
    case 39:                        // '*'
      consumeT(39);                 // '*'
      break;
    default:
      consumeT(40);                 // '+'
    }
  }

  function parse_ItemType()
  {
    eventHandler.startNonterminal("ItemType", e0);
    switch (l1)
    {
    case 78:                        // 'array'
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 145:                       // 'function'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 179:                       // 'map'
    case 186:                       // 'namespace-node'
    case 192:                       // 'node'
    case 195:                       // 'object'
    case 217:                       // 'processing-instruction'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 243:                       // 'structured-item'
    case 245:                       // 'text'
      lookahead2W(242);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17594:                     // 'namespace-node' '('
    case 17600:                     // 'node' '('
    case 17625:                     // 'processing-instruction' '('
    case 17635:                     // 'schema-attribute' '('
    case 17636:                     // 'schema-element' '('
    case 17653:                     // 'text' '('
      parse_KindTest();
      break;
    case 17573:                     // 'item' '('
      consume(165);                 // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consume(34);                  // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consume(37);                  // ')'
      break;
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      parse_FunctionTest();
      break;
    case 34:                        // '('
      parse_ParenthesizedItemType();
      break;
    case 17486:                     // 'array' '('
    case 17575:                     // 'json-item' '('
    case 17603:                     // 'object' '('
      parse_JSONTest();
      break;
    case 17587:                     // 'map' '('
      parse_MapType();
      break;
    case 17651:                     // 'structured-item' '('
      parse_StructuredItemTest();
      break;
    default:
      parse_AtomicOrUnionType();
    }
    eventHandler.endNonterminal("ItemType", e0);
  }

  function try_ItemType()
  {
    switch (l1)
    {
    case 78:                        // 'array'
    case 82:                        // 'attribute'
    case 96:                        // 'comment'
    case 120:                       // 'document-node'
    case 121:                       // 'element'
    case 145:                       // 'function'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 179:                       // 'map'
    case 186:                       // 'namespace-node'
    case 192:                       // 'node'
    case 195:                       // 'object'
    case 217:                       // 'processing-instruction'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 243:                       // 'structured-item'
    case 245:                       // 'text'
      lookahead2W(242);             // S^WS | EOF | '!=' | '(' | '(:' | ')' | '*' | '*' | '+' | ',' | '-' | ':' | ':=' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | ']' | 'after' |
                                    // 'allowing' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' |
                                    // 'collation' | 'contains' | 'count' | 'default' | 'descending' | 'div' | 'else' |
                                    // 'empty' | 'end' | 'eq' | 'except' | 'external' | 'for' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'in' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'paragraphs' | 'return' |
                                    // 'satisfies' | 'score' | 'sentences' | 'stable' | 'start' | 'times' | 'to' |
                                    // 'union' | 'where' | 'with' | 'words' | '{' | '|' | '||' | '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 17490:                     // 'attribute' '('
    case 17504:                     // 'comment' '('
    case 17528:                     // 'document-node' '('
    case 17529:                     // 'element' '('
    case 17594:                     // 'namespace-node' '('
    case 17600:                     // 'node' '('
    case 17625:                     // 'processing-instruction' '('
    case 17635:                     // 'schema-attribute' '('
    case 17636:                     // 'schema-element' '('
    case 17653:                     // 'text' '('
      try_KindTest();
      break;
    case 17573:                     // 'item' '('
      consumeT(165);                // 'item'
      lookahead1W(22);              // S^WS | '(' | '(:'
      consumeT(34);                 // '('
      lookahead1W(23);              // S^WS | '(:' | ')'
      consumeT(37);                 // ')'
      break;
    case 32:                        // '%'
    case 17553:                     // 'function' '('
      try_FunctionTest();
      break;
    case 34:                        // '('
      try_ParenthesizedItemType();
      break;
    case 17486:                     // 'array' '('
    case 17575:                     // 'json-item' '('
    case 17603:                     // 'object' '('
      try_JSONTest();
      break;
    case 17587:                     // 'map' '('
      try_MapType();
      break;
    case 17651:                     // 'structured-item' '('
      try_StructuredItemTest();
      break;
    default:
      try_AtomicOrUnionType();
    }
  }

  function parse_MapType()
  {
    eventHandler.startNonterminal("MapType", e0);
    consume(179);                   // 'map'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      whitespace();
      parse_AtomicOrUnionType();
      lookahead1W(25);              // S^WS | '(:' | ','
      consume(41);                  // ','
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_SequenceType();
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("MapType", e0);
  }

  function try_MapType()
  {
    consumeT(179);                  // 'map'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(259);               // EQName^Token | S^WS | '(:' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AtomicOrUnionType();
      lookahead1W(25);              // S^WS | '(:' | ','
      consumeT(41);                 // ','
      lookahead1W(262);             // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_SequenceType();
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_MapConstructor()
  {
    eventHandler.startNonterminal("MapConstructor", e0);
    consume(179);                   // 'map'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      whitespace();
      parse_MapConstructorEntry();
      for (;;)
      {
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_MapConstructorEntry();
      }
    }
    consume(283);                   // '}'
    eventHandler.endNonterminal("MapConstructor", e0);
  }

  function try_MapConstructor()
  {
    consumeT(179);                  // 'map'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      try_MapConstructorEntry();
      for (;;)
      {
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_MapConstructorEntry();
      }
    }
    consumeT(283);                  // '}'
  }

  function parse_MapConstructorEntry()
  {
    eventHandler.startNonterminal("MapConstructorEntry", e0);
    parse_ExprSingle();
    consume(49);                    // ':'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '=' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 == 60)                   // '='
    {
      consume(60);                  // '='
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("MapConstructorEntry", e0);
  }

  function try_MapConstructorEntry()
  {
    try_ExprSingle();
    consumeT(49);                   // ':'
    lookahead1W(274);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '=' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 == 60)                   // '='
    {
      consumeT(60);                 // '='
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONTest()
  {
    eventHandler.startNonterminal("JSONTest", e0);
    switch (l1)
    {
    case 167:                       // 'json-item'
      parse_JSONItemTest();
      break;
    case 195:                       // 'object'
      parse_JSONObjectTest();
      break;
    default:
      parse_JSONArrayTest();
    }
    eventHandler.endNonterminal("JSONTest", e0);
  }

  function try_JSONTest()
  {
    switch (l1)
    {
    case 167:                       // 'json-item'
      try_JSONItemTest();
      break;
    case 195:                       // 'object'
      try_JSONObjectTest();
      break;
    default:
      try_JSONArrayTest();
    }
  }

  function parse_StructuredItemTest()
  {
    eventHandler.startNonterminal("StructuredItemTest", e0);
    consume(243);                   // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("StructuredItemTest", e0);
  }

  function try_StructuredItemTest()
  {
    consumeT(243);                  // 'structured-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_JSONItemTest()
  {
    eventHandler.startNonterminal("JSONItemTest", e0);
    consume(167);                   // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("JSONItemTest", e0);
  }

  function try_JSONItemTest()
  {
    consumeT(167);                  // 'json-item'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_JSONObjectTest()
  {
    eventHandler.startNonterminal("JSONObjectTest", e0);
    consume(195);                   // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("JSONObjectTest", e0);
  }

  function try_JSONObjectTest()
  {
    consumeT(195);                  // 'object'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_JSONArrayTest()
  {
    eventHandler.startNonterminal("JSONArrayTest", e0);
    consume(78);                    // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("JSONArrayTest", e0);
  }

  function try_JSONArrayTest()
  {
    consumeT(78);                   // 'array'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AtomicOrUnionType()
  {
    eventHandler.startNonterminal("AtomicOrUnionType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicOrUnionType", e0);
  }

  function try_AtomicOrUnionType()
  {
    try_EQName();
  }

  function parse_KindTest()
  {
    eventHandler.startNonterminal("KindTest", e0);
    switch (l1)
    {
    case 120:                       // 'document-node'
      parse_DocumentTest();
      break;
    case 121:                       // 'element'
      parse_ElementTest();
      break;
    case 82:                        // 'attribute'
      parse_AttributeTest();
      break;
    case 228:                       // 'schema-element'
      parse_SchemaElementTest();
      break;
    case 227:                       // 'schema-attribute'
      parse_SchemaAttributeTest();
      break;
    case 217:                       // 'processing-instruction'
      parse_PITest();
      break;
    case 96:                        // 'comment'
      parse_CommentTest();
      break;
    case 245:                       // 'text'
      parse_TextTest();
      break;
    case 186:                       // 'namespace-node'
      parse_NamespaceNodeTest();
      break;
    default:
      parse_AnyKindTest();
    }
    eventHandler.endNonterminal("KindTest", e0);
  }

  function try_KindTest()
  {
    switch (l1)
    {
    case 120:                       // 'document-node'
      try_DocumentTest();
      break;
    case 121:                       // 'element'
      try_ElementTest();
      break;
    case 82:                        // 'attribute'
      try_AttributeTest();
      break;
    case 228:                       // 'schema-element'
      try_SchemaElementTest();
      break;
    case 227:                       // 'schema-attribute'
      try_SchemaAttributeTest();
      break;
    case 217:                       // 'processing-instruction'
      try_PITest();
      break;
    case 96:                        // 'comment'
      try_CommentTest();
      break;
    case 245:                       // 'text'
      try_TextTest();
      break;
    case 186:                       // 'namespace-node'
      try_NamespaceNodeTest();
      break;
    default:
      try_AnyKindTest();
    }
  }

  function parse_AnyKindTest()
  {
    eventHandler.startNonterminal("AnyKindTest", e0);
    consume(192);                   // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyKindTest", e0);
  }

  function try_AnyKindTest()
  {
    consumeT(192);                  // 'node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_DocumentTest()
  {
    eventHandler.startNonterminal("DocumentTest", e0);
    consume(120);                   // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(144);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 121:                     // 'element'
        whitespace();
        parse_ElementTest();
        break;
      default:
        whitespace();
        parse_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("DocumentTest", e0);
  }

  function try_DocumentTest()
  {
    consumeT(120);                  // 'document-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(144);               // S^WS | '(:' | ')' | 'element' | 'schema-element'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 121:                     // 'element'
        try_ElementTest();
        break;
      default:
        try_SchemaElementTest();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TextTest()
  {
    eventHandler.startNonterminal("TextTest", e0);
    consume(245);                   // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("TextTest", e0);
  }

  function try_TextTest()
  {
    consumeT(245);                  // 'text'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_CommentTest()
  {
    eventHandler.startNonterminal("CommentTest", e0);
    consume(96);                    // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("CommentTest", e0);
  }

  function try_CommentTest()
  {
    consumeT(96);                   // 'comment'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_NamespaceNodeTest()
  {
    eventHandler.startNonterminal("NamespaceNodeTest", e0);
    consume(186);                   // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("NamespaceNodeTest", e0);
  }

  function try_NamespaceNodeTest()
  {
    consumeT(186);                  // 'namespace-node'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_PITest()
  {
    eventHandler.startNonterminal("PITest", e0);
    consume(217);                   // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(253);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        consume(11);                // StringLiteral
        break;
      default:
        whitespace();
        parse_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("PITest", e0);
  }

  function try_PITest()
  {
    consumeT(217);                  // 'processing-instruction'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(253);               // StringLiteral | NCName^Token | S^WS | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
    if (l1 != 37)                   // ')'
    {
      switch (l1)
      {
      case 11:                      // StringLiteral
        consumeT(11);               // StringLiteral
        break;
      default:
        try_NCName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttributeTest()
  {
    eventHandler.startNonterminal("AttributeTest", e0);
    consume(82);                    // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(263);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_AttribNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consume(41);                // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AttributeTest", e0);
  }

  function try_AttributeTest()
  {
    consumeT(82);                   // 'attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(263);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_AttribNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consumeT(41);               // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        try_TypeName();
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttribNameOrWildcard()
  {
    eventHandler.startNonterminal("AttribNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_AttributeName();
    }
    eventHandler.endNonterminal("AttribNameOrWildcard", e0);
  }

  function try_AttribNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_AttributeName();
    }
  }

  function parse_SchemaAttributeTest()
  {
    eventHandler.startNonterminal("SchemaAttributeTest", e0);
    consume(227);                   // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaAttributeTest", e0);
  }

  function try_SchemaAttributeTest()
  {
    consumeT(227);                  // 'schema-attribute'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_AttributeDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_AttributeDeclaration()
  {
    eventHandler.startNonterminal("AttributeDeclaration", e0);
    parse_AttributeName();
    eventHandler.endNonterminal("AttributeDeclaration", e0);
  }

  function try_AttributeDeclaration()
  {
    try_AttributeName();
  }

  function parse_ElementTest()
  {
    eventHandler.startNonterminal("ElementTest", e0);
    consume(121);                   // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(263);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_ElementNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consume(41);                // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        whitespace();
        parse_TypeName();
        lookahead1W(102);           // S^WS | '(:' | ')' | '?'
        if (l1 == 64)               // '?'
        {
          consume(64);              // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ElementTest", e0);
  }

  function try_ElementTest()
  {
    consumeT(121);                  // 'element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(263);               // EQName^Token | S^WS | '(:' | ')' | '*' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_ElementNameOrWildcard();
      lookahead1W(101);             // S^WS | '(:' | ')' | ','
      if (l1 == 41)                 // ','
      {
        consumeT(41);               // ','
        lookahead1W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        try_TypeName();
        lookahead1W(102);           // S^WS | '(:' | ')' | '?'
        if (l1 == 64)               // '?'
        {
          consumeT(64);             // '?'
        }
      }
    }
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ElementNameOrWildcard()
  {
    eventHandler.startNonterminal("ElementNameOrWildcard", e0);
    switch (l1)
    {
    case 38:                        // '*'
      consume(38);                  // '*'
      break;
    default:
      parse_ElementName();
    }
    eventHandler.endNonterminal("ElementNameOrWildcard", e0);
  }

  function try_ElementNameOrWildcard()
  {
    switch (l1)
    {
    case 38:                        // '*'
      consumeT(38);                 // '*'
      break;
    default:
      try_ElementName();
    }
  }

  function parse_SchemaElementTest()
  {
    eventHandler.startNonterminal("SchemaElementTest", e0);
    consume(228);                   // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("SchemaElementTest", e0);
  }

  function try_SchemaElementTest()
  {
    consumeT(228);                  // 'schema-element'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_ElementDeclaration();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_ElementDeclaration()
  {
    eventHandler.startNonterminal("ElementDeclaration", e0);
    parse_ElementName();
    eventHandler.endNonterminal("ElementDeclaration", e0);
  }

  function try_ElementDeclaration()
  {
    try_ElementName();
  }

  function parse_AttributeName()
  {
    eventHandler.startNonterminal("AttributeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("AttributeName", e0);
  }

  function try_AttributeName()
  {
    try_EQName();
  }

  function parse_ElementName()
  {
    eventHandler.startNonterminal("ElementName", e0);
    parse_EQName();
    eventHandler.endNonterminal("ElementName", e0);
  }

  function try_ElementName()
  {
    try_EQName();
  }

  function parse_SimpleTypeName()
  {
    eventHandler.startNonterminal("SimpleTypeName", e0);
    parse_TypeName();
    eventHandler.endNonterminal("SimpleTypeName", e0);
  }

  function try_SimpleTypeName()
  {
    try_TypeName();
  }

  function parse_TypeName()
  {
    eventHandler.startNonterminal("TypeName", e0);
    parse_EQName();
    eventHandler.endNonterminal("TypeName", e0);
  }

  function try_TypeName()
  {
    try_EQName();
  }

  function parse_FunctionTest()
  {
    eventHandler.startNonterminal("FunctionTest", e0);
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(5, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(5, e0, lk);
    }
    switch (lk)
    {
    case -1:
      whitespace();
      parse_AnyFunctionTest();
      break;
    default:
      whitespace();
      parse_TypedFunctionTest();
    }
    eventHandler.endNonterminal("FunctionTest", e0);
  }

  function try_FunctionTest()
  {
    for (;;)
    {
      lookahead1W(97);              // S^WS | '%' | '(:' | 'function'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    switch (l1)
    {
    case 145:                       // 'function'
      lookahead2W(22);              // S^WS | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    lk = memoized(5, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        try_AnyFunctionTest();
        memoize(5, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(5, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      try_AnyFunctionTest();
      break;
    case -3:
      break;
    default:
      try_TypedFunctionTest();
    }
  }

  function parse_AnyFunctionTest()
  {
    eventHandler.startNonterminal("AnyFunctionTest", e0);
    consume(145);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    consume(38);                    // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("AnyFunctionTest", e0);
  }

  function try_AnyFunctionTest()
  {
    consumeT(145);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(24);                // S^WS | '(:' | '*'
    consumeT(38);                   // '*'
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_TypedFunctionTest()
  {
    eventHandler.startNonterminal("TypedFunctionTest", e0);
    consume(145);                   // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(266);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      whitespace();
      parse_SequenceType();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(262);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        whitespace();
        parse_SequenceType();
      }
    }
    consume(37);                    // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    consume(79);                    // 'as'
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("TypedFunctionTest", e0);
  }

  function try_TypedFunctionTest()
  {
    consumeT(145);                  // 'function'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(266);               // EQName^Token | S^WS | '%' | '(' | '(:' | ')' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 != 37)                   // ')'
    {
      try_SequenceType();
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(262);           // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        try_SequenceType();
      }
    }
    consumeT(37);                   // ')'
    lookahead1W(30);                // S^WS | '(:' | 'as'
    consumeT(79);                   // 'as'
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceType();
  }

  function parse_ParenthesizedItemType()
  {
    eventHandler.startNonterminal("ParenthesizedItemType", e0);
    consume(34);                    // '('
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consume(37);                    // ')'
    eventHandler.endNonterminal("ParenthesizedItemType", e0);
  }

  function try_ParenthesizedItemType()
  {
    consumeT(34);                   // '('
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_ItemType();
    lookahead1W(23);                // S^WS | '(:' | ')'
    consumeT(37);                   // ')'
  }

  function parse_RevalidationDecl()
  {
    eventHandler.startNonterminal("RevalidationDecl", e0);
    consume(108);                   // 'declare'
    lookahead1W(72);                // S^WS | '(:' | 'revalidation'
    consume(223);                   // 'revalidation'
    lookahead1W(152);               // S^WS | '(:' | 'lax' | 'skip' | 'strict'
    switch (l1)
    {
    case 241:                       // 'strict'
      consume(241);                 // 'strict'
      break;
    case 171:                       // 'lax'
      consume(171);                 // 'lax'
      break;
    default:
      consume(234);                 // 'skip'
    }
    eventHandler.endNonterminal("RevalidationDecl", e0);
  }

  function parse_InsertExprTargetChoice()
  {
    eventHandler.startNonterminal("InsertExprTargetChoice", e0);
    switch (l1)
    {
    case 70:                        // 'after'
      consume(70);                  // 'after'
      break;
    case 84:                        // 'before'
      consume(84);                  // 'before'
      break;
    default:
      if (l1 == 79)                 // 'as'
      {
        consume(79);                // 'as'
        lookahead1W(119);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 134:                   // 'first'
          consume(134);             // 'first'
          break;
        default:
          consume(170);             // 'last'
        }
      }
      lookahead1W(54);              // S^WS | '(:' | 'into'
      consume(163);                 // 'into'
    }
    eventHandler.endNonterminal("InsertExprTargetChoice", e0);
  }

  function try_InsertExprTargetChoice()
  {
    switch (l1)
    {
    case 70:                        // 'after'
      consumeT(70);                 // 'after'
      break;
    case 84:                        // 'before'
      consumeT(84);                 // 'before'
      break;
    default:
      if (l1 == 79)                 // 'as'
      {
        consumeT(79);               // 'as'
        lookahead1W(119);           // S^WS | '(:' | 'first' | 'last'
        switch (l1)
        {
        case 134:                   // 'first'
          consumeT(134);            // 'first'
          break;
        default:
          consumeT(170);            // 'last'
        }
      }
      lookahead1W(54);              // S^WS | '(:' | 'into'
      consumeT(163);                // 'into'
    }
  }

  function parse_InsertExpr()
  {
    eventHandler.startNonterminal("InsertExpr", e0);
    consume(159);                   // 'insert'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 192:                       // 'node'
      consume(192);                 // 'node'
      break;
    default:
      consume(193);                 // 'nodes'
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_SourceExpr();
    whitespace();
    parse_InsertExprTargetChoice();
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("InsertExpr", e0);
  }

  function try_InsertExpr()
  {
    consumeT(159);                  // 'insert'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 192:                       // 'node'
      consumeT(192);                // 'node'
      break;
    default:
      consumeT(193);                // 'nodes'
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_SourceExpr();
    try_InsertExprTargetChoice();
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_DeleteExpr()
  {
    eventHandler.startNonterminal("DeleteExpr", e0);
    consume(110);                   // 'delete'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 192:                       // 'node'
      consume(192);                 // 'node'
      break;
    default:
      consume(193);                 // 'nodes'
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    eventHandler.endNonterminal("DeleteExpr", e0);
  }

  function try_DeleteExpr()
  {
    consumeT(110);                  // 'delete'
    lookahead1W(129);               // S^WS | '(:' | 'node' | 'nodes'
    switch (l1)
    {
    case 192:                       // 'node'
      consumeT(192);                // 'node'
      break;
    default:
      consumeT(193);                // 'nodes'
    }
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
  }

  function parse_ReplaceExpr()
  {
    eventHandler.startNonterminal("ReplaceExpr", e0);
    consume(220);                   // 'replace'
    lookahead1W(130);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 262)                  // 'value'
    {
      consume(262);                 // 'value'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consume(197);                 // 'of'
    }
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(192);                   // 'node'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    consume(271);                   // 'with'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ReplaceExpr", e0);
  }

  function try_ReplaceExpr()
  {
    consumeT(220);                  // 'replace'
    lookahead1W(130);               // S^WS | '(:' | 'node' | 'value'
    if (l1 == 262)                  // 'value'
    {
      consumeT(262);                // 'value'
      lookahead1W(64);              // S^WS | '(:' | 'of'
      consumeT(197);                // 'of'
    }
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consumeT(192);                  // 'node'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
    consumeT(271);                  // 'with'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_RenameExpr()
  {
    eventHandler.startNonterminal("RenameExpr", e0);
    consume(219);                   // 'rename'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(192);                   // 'node'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_TargetExpr();
    consume(79);                    // 'as'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_NewNameExpr();
    eventHandler.endNonterminal("RenameExpr", e0);
  }

  function try_RenameExpr()
  {
    consumeT(219);                  // 'rename'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consumeT(192);                  // 'node'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_TargetExpr();
    consumeT(79);                   // 'as'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_NewNameExpr();
  }

  function parse_SourceExpr()
  {
    eventHandler.startNonterminal("SourceExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("SourceExpr", e0);
  }

  function try_SourceExpr()
  {
    try_ExprSingle();
  }

  function parse_TargetExpr()
  {
    eventHandler.startNonterminal("TargetExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("TargetExpr", e0);
  }

  function try_TargetExpr()
  {
    try_ExprSingle();
  }

  function parse_NewNameExpr()
  {
    eventHandler.startNonterminal("NewNameExpr", e0);
    parse_ExprSingle();
    eventHandler.endNonterminal("NewNameExpr", e0);
  }

  function try_NewNameExpr()
  {
    try_ExprSingle();
  }

  function parse_TransformExpr()
  {
    eventHandler.startNonterminal("TransformExpr", e0);
    consume(103);                   // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_TransformSpec();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      whitespace();
      parse_TransformSpec();
    }
    consume(182);                   // 'modify'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(221);                   // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformExpr", e0);
  }

  function try_TransformExpr()
  {
    consumeT(103);                  // 'copy'
    lookahead1W(21);                // S^WS | '$' | '(:'
    try_TransformSpec();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      try_TransformSpec();
    }
    consumeT(182);                  // 'modify'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(221);                  // 'return'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_TransformSpec()
  {
    eventHandler.startNonterminal("TransformSpec", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(52);                    // ':='
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("TransformSpec", e0);
  }

  function try_TransformSpec()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(52);                   // ':='
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_FTSelection()
  {
    eventHandler.startNonterminal("FTSelection", e0);
    parse_FTOr();
    for (;;)
    {
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(151);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 115                 // 'different'
       && lk != 117                 // 'distance'
       && lk != 127                 // 'entire'
       && lk != 203                 // 'ordered'
       && lk != 224                 // 'same'
       && lk != 270                 // 'window'
       && lk != 64593               // 'at' 'end'
       && lk != 121937)             // 'at' 'start'
      {
        break;
      }
      whitespace();
      parse_FTPosFilter();
    }
    eventHandler.endNonterminal("FTSelection", e0);
  }

  function try_FTSelection()
  {
    try_FTOr();
    for (;;)
    {
      lookahead1W(211);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' |
                                    // 'only' | 'or' | 'order' | 'ordered' | 'return' | 'same' | 'satisfies' |
                                    // 'stable' | 'start' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(151);           // S^WS | '(:' | 'end' | 'position' | 'start'
        break;
      default:
        lk = l1;
      }
      if (lk != 115                 // 'different'
       && lk != 117                 // 'distance'
       && lk != 127                 // 'entire'
       && lk != 203                 // 'ordered'
       && lk != 224                 // 'same'
       && lk != 270                 // 'window'
       && lk != 64593               // 'at' 'end'
       && lk != 121937)             // 'at' 'start'
      {
        break;
      }
      try_FTPosFilter();
    }
  }

  function parse_FTWeight()
  {
    eventHandler.startNonterminal("FTWeight", e0);
    consume(265);                   // 'weight'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consume(277);                   // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("FTWeight", e0);
  }

  function try_FTWeight()
  {
    consumeT(265);                  // 'weight'
    lookahead1W(87);                // S^WS | '(:' | '{'
    consumeT(277);                  // '{'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(283);                  // '}'
  }

  function parse_FTOr()
  {
    eventHandler.startNonterminal("FTOr", e0);
    parse_FTAnd();
    for (;;)
    {
      if (l1 != 144)                // 'ftor'
      {
        break;
      }
      consume(144);                 // 'ftor'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTAnd();
    }
    eventHandler.endNonterminal("FTOr", e0);
  }

  function try_FTOr()
  {
    try_FTAnd();
    for (;;)
    {
      if (l1 != 144)                // 'ftor'
      {
        break;
      }
      consumeT(144);                // 'ftor'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTAnd();
    }
  }

  function parse_FTAnd()
  {
    eventHandler.startNonterminal("FTAnd", e0);
    parse_FTMildNot();
    for (;;)
    {
      if (l1 != 142)                // 'ftand'
      {
        break;
      }
      consume(142);                 // 'ftand'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTMildNot();
    }
    eventHandler.endNonterminal("FTAnd", e0);
  }

  function try_FTAnd()
  {
    try_FTMildNot();
    for (;;)
    {
      if (l1 != 142)                // 'ftand'
      {
        break;
      }
      consumeT(142);                // 'ftand'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTMildNot();
    }
  }

  function parse_FTMildNot()
  {
    eventHandler.startNonterminal("FTMildNot", e0);
    parse_FTUnaryNot();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
      if (l1 != 194)                // 'not'
      {
        break;
      }
      consume(194);                 // 'not'
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consume(154);                 // 'in'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTUnaryNot();
    }
    eventHandler.endNonterminal("FTMildNot", e0);
  }

  function try_FTMildNot()
  {
    try_FTUnaryNot();
    for (;;)
    {
      lookahead1W(212);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'where' | 'window' | 'with' |
                                    // 'without' | '|}' | '}'
      if (l1 != 194)                // 'not'
      {
        break;
      }
      consumeT(194);                // 'not'
      lookahead1W(53);              // S^WS | '(:' | 'in'
      consumeT(154);                // 'in'
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTUnaryNot();
    }
  }

  function parse_FTUnaryNot()
  {
    eventHandler.startNonterminal("FTUnaryNot", e0);
    if (l1 == 143)                  // 'ftnot'
    {
      consume(143);                 // 'ftnot'
    }
    lookahead1W(155);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    whitespace();
    parse_FTPrimaryWithOptions();
    eventHandler.endNonterminal("FTUnaryNot", e0);
  }

  function try_FTUnaryNot()
  {
    if (l1 == 143)                  // 'ftnot'
    {
      consumeT(143);                // 'ftnot'
    }
    lookahead1W(155);               // StringLiteral | S^WS | '(' | '(#' | '(:' | '{'
    try_FTPrimaryWithOptions();
  }

  function parse_FTPrimaryWithOptions()
  {
    eventHandler.startNonterminal("FTPrimaryWithOptions", e0);
    parse_FTPrimary();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 260)                  // 'using'
    {
      whitespace();
      parse_FTMatchOptions();
    }
    if (l1 == 265)                  // 'weight'
    {
      whitespace();
      parse_FTWeight();
    }
    eventHandler.endNonterminal("FTPrimaryWithOptions", e0);
  }

  function try_FTPrimaryWithOptions()
  {
    try_FTPrimary();
    lookahead1W(214);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 260)                  // 'using'
    {
      try_FTMatchOptions();
    }
    if (l1 == 265)                  // 'weight'
    {
      try_FTWeight();
    }
  }

  function parse_FTPrimary()
  {
    eventHandler.startNonterminal("FTPrimary", e0);
    switch (l1)
    {
    case 34:                        // '('
      consume(34);                  // '('
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      whitespace();
      parse_FTSelection();
      consume(37);                  // ')'
      break;
    case 35:                        // '(#'
      parse_FTExtensionSelection();
      break;
    default:
      parse_FTWords();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 196)                // 'occurs'
      {
        whitespace();
        parse_FTTimes();
      }
    }
    eventHandler.endNonterminal("FTPrimary", e0);
  }

  function try_FTPrimary()
  {
    switch (l1)
    {
    case 34:                        // '('
      consumeT(34);                 // '('
      lookahead1W(162);             // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{'
      try_FTSelection();
      consumeT(37);                 // ')'
      break;
    case 35:                        // '(#'
      try_FTExtensionSelection();
      break;
    default:
      try_FTWords();
      lookahead1W(215);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 == 196)                // 'occurs'
      {
        try_FTTimes();
      }
    }
  }

  function parse_FTWords()
  {
    eventHandler.startNonterminal("FTWords", e0);
    parse_FTWordsValue();
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 71                    // 'all'
     || l1 == 76                    // 'any'
     || l1 == 211)                  // 'phrase'
    {
      whitespace();
      parse_FTAnyallOption();
    }
    eventHandler.endNonterminal("FTWords", e0);
  }

  function try_FTWords()
  {
    try_FTWordsValue();
    lookahead1W(221);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'all' | 'and' | 'any' | 'as' | 'ascending' |
                                    // 'at' | 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'phrase' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    if (l1 == 71                    // 'all'
     || l1 == 76                    // 'any'
     || l1 == 211)                  // 'phrase'
    {
      try_FTAnyallOption();
    }
  }

  function parse_FTWordsValue()
  {
    eventHandler.startNonterminal("FTWordsValue", e0);
    switch (l1)
    {
    case 11:                        // StringLiteral
      consume(11);                  // StringLiteral
      break;
    default:
      consume(277);                 // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(283);                 // '}'
    }
    eventHandler.endNonterminal("FTWordsValue", e0);
  }

  function try_FTWordsValue()
  {
    switch (l1)
    {
    case 11:                        // StringLiteral
      consumeT(11);                 // StringLiteral
      break;
    default:
      consumeT(277);                // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(283);                // '}'
    }
  }

  function parse_FTExtensionSelection()
  {
    eventHandler.startNonterminal("FTExtensionSelection", e0);
    for (;;)
    {
      whitespace();
      parse_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consume(277);                   // '{'
    lookahead1W(166);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 283)                  // '}'
    {
      whitespace();
      parse_FTSelection();
    }
    consume(283);                   // '}'
    eventHandler.endNonterminal("FTExtensionSelection", e0);
  }

  function try_FTExtensionSelection()
  {
    for (;;)
    {
      try_Pragma();
      lookahead1W(100);             // S^WS | '(#' | '(:' | '{'
      if (l1 != 35)                 // '(#'
      {
        break;
      }
    }
    consumeT(277);                  // '{'
    lookahead1W(166);               // StringLiteral | S^WS | '(' | '(#' | '(:' | 'ftnot' | '{' | '}'
    if (l1 != 283)                  // '}'
    {
      try_FTSelection();
    }
    consumeT(283);                  // '}'
  }

  function parse_FTAnyallOption()
  {
    eventHandler.startNonterminal("FTAnyallOption", e0);
    switch (l1)
    {
    case 76:                        // 'any'
      consume(76);                  // 'any'
      lookahead1W(218);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
      if (l1 == 273)                // 'word'
      {
        consume(273);               // 'word'
      }
      break;
    case 71:                        // 'all'
      consume(71);                  // 'all'
      lookahead1W(219);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
      if (l1 == 274)                // 'words'
      {
        consume(274);               // 'words'
      }
      break;
    default:
      consume(211);                 // 'phrase'
    }
    eventHandler.endNonterminal("FTAnyallOption", e0);
  }

  function try_FTAnyallOption()
  {
    switch (l1)
    {
    case 76:                        // 'any'
      consumeT(76);                 // 'any'
      lookahead1W(218);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'word' | '|}' | '}'
      if (l1 == 273)                // 'word'
      {
        consumeT(273);              // 'word'
      }
      break;
    case 71:                        // 'all'
      consumeT(71);                 // 'all'
      lookahead1W(219);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'occurs' | 'only' | 'or' | 'order' | 'ordered' |
                                    // 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' |
                                    // 'where' | 'window' | 'with' | 'without' | 'words' | '|}' | '}'
      if (l1 == 274)                // 'words'
      {
        consumeT(274);              // 'words'
      }
      break;
    default:
      consumeT(211);                // 'phrase'
    }
  }

  function parse_FTTimes()
  {
    eventHandler.startNonterminal("FTTimes", e0);
    consume(196);                   // 'occurs'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    consume(248);                   // 'times'
    eventHandler.endNonterminal("FTTimes", e0);
  }

  function try_FTTimes()
  {
    consumeT(196);                  // 'occurs'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    consumeT(248);                  // 'times'
  }

  function parse_FTRange()
  {
    eventHandler.startNonterminal("FTRange", e0);
    switch (l1)
    {
    case 130:                       // 'exactly'
      consume(130);                 // 'exactly'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      break;
    case 81:                        // 'at'
      consume(81);                  // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        consume(173);               // 'least'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
        break;
      default:
        consume(184);               // 'most'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_AdditiveExpr();
      }
      break;
    default:
      consume(140);                 // 'from'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
      consume(249);                 // 'to'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_AdditiveExpr();
    }
    eventHandler.endNonterminal("FTRange", e0);
  }

  function try_FTRange()
  {
    switch (l1)
    {
    case 130:                       // 'exactly'
      consumeT(130);                // 'exactly'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      break;
    case 81:                        // 'at'
      consumeT(81);                 // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        consumeT(173);              // 'least'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_AdditiveExpr();
        break;
      default:
        consumeT(184);              // 'most'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_AdditiveExpr();
      }
      break;
    default:
      consumeT(140);                // 'from'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
      consumeT(249);                // 'to'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_AdditiveExpr();
    }
  }

  function parse_FTPosFilter()
  {
    eventHandler.startNonterminal("FTPosFilter", e0);
    switch (l1)
    {
    case 203:                       // 'ordered'
      parse_FTOrder();
      break;
    case 270:                       // 'window'
      parse_FTWindow();
      break;
    case 117:                       // 'distance'
      parse_FTDistance();
      break;
    case 115:                       // 'different'
    case 224:                       // 'same'
      parse_FTScope();
      break;
    default:
      parse_FTContent();
    }
    eventHandler.endNonterminal("FTPosFilter", e0);
  }

  function try_FTPosFilter()
  {
    switch (l1)
    {
    case 203:                       // 'ordered'
      try_FTOrder();
      break;
    case 270:                       // 'window'
      try_FTWindow();
      break;
    case 117:                       // 'distance'
      try_FTDistance();
      break;
    case 115:                       // 'different'
    case 224:                       // 'same'
      try_FTScope();
      break;
    default:
      try_FTContent();
    }
  }

  function parse_FTOrder()
  {
    eventHandler.startNonterminal("FTOrder", e0);
    consume(203);                   // 'ordered'
    eventHandler.endNonterminal("FTOrder", e0);
  }

  function try_FTOrder()
  {
    consumeT(203);                  // 'ordered'
  }

  function parse_FTWindow()
  {
    eventHandler.startNonterminal("FTWindow", e0);
    consume(270);                   // 'window'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_AdditiveExpr();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTWindow", e0);
  }

  function try_FTWindow()
  {
    consumeT(270);                  // 'window'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_AdditiveExpr();
    try_FTUnit();
  }

  function parse_FTDistance()
  {
    eventHandler.startNonterminal("FTDistance", e0);
    consume(117);                   // 'distance'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    whitespace();
    parse_FTRange();
    whitespace();
    parse_FTUnit();
    eventHandler.endNonterminal("FTDistance", e0);
  }

  function try_FTDistance()
  {
    consumeT(117);                  // 'distance'
    lookahead1W(149);               // S^WS | '(:' | 'at' | 'exactly' | 'from'
    try_FTRange();
    try_FTUnit();
  }

  function parse_FTUnit()
  {
    eventHandler.startNonterminal("FTUnit", e0);
    switch (l1)
    {
    case 274:                       // 'words'
      consume(274);                 // 'words'
      break;
    case 233:                       // 'sentences'
      consume(233);                 // 'sentences'
      break;
    default:
      consume(206);                 // 'paragraphs'
    }
    eventHandler.endNonterminal("FTUnit", e0);
  }

  function try_FTUnit()
  {
    switch (l1)
    {
    case 274:                       // 'words'
      consumeT(274);                // 'words'
      break;
    case 233:                       // 'sentences'
      consumeT(233);                // 'sentences'
      break;
    default:
      consumeT(206);                // 'paragraphs'
    }
  }

  function parse_FTScope()
  {
    eventHandler.startNonterminal("FTScope", e0);
    switch (l1)
    {
    case 224:                       // 'same'
      consume(224);                 // 'same'
      break;
    default:
      consume(115);                 // 'different'
    }
    lookahead1W(132);               // S^WS | '(:' | 'paragraph' | 'sentence'
    whitespace();
    parse_FTBigUnit();
    eventHandler.endNonterminal("FTScope", e0);
  }

  function try_FTScope()
  {
    switch (l1)
    {
    case 224:                       // 'same'
      consumeT(224);                // 'same'
      break;
    default:
      consumeT(115);                // 'different'
    }
    lookahead1W(132);               // S^WS | '(:' | 'paragraph' | 'sentence'
    try_FTBigUnit();
  }

  function parse_FTBigUnit()
  {
    eventHandler.startNonterminal("FTBigUnit", e0);
    switch (l1)
    {
    case 232:                       // 'sentence'
      consume(232);                 // 'sentence'
      break;
    default:
      consume(205);                 // 'paragraph'
    }
    eventHandler.endNonterminal("FTBigUnit", e0);
  }

  function try_FTBigUnit()
  {
    switch (l1)
    {
    case 232:                       // 'sentence'
      consumeT(232);                // 'sentence'
      break;
    default:
      consumeT(205);                // 'paragraph'
    }
  }

  function parse_FTContent()
  {
    eventHandler.startNonterminal("FTContent", e0);
    switch (l1)
    {
    case 81:                        // 'at'
      consume(81);                  // 'at'
      lookahead1W(117);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 238:                     // 'start'
        consume(238);               // 'start'
        break;
      default:
        consume(126);               // 'end'
      }
      break;
    default:
      consume(127);                 // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consume(100);                 // 'content'
    }
    eventHandler.endNonterminal("FTContent", e0);
  }

  function try_FTContent()
  {
    switch (l1)
    {
    case 81:                        // 'at'
      consumeT(81);                 // 'at'
      lookahead1W(117);             // S^WS | '(:' | 'end' | 'start'
      switch (l1)
      {
      case 238:                     // 'start'
        consumeT(238);              // 'start'
        break;
      default:
        consumeT(126);              // 'end'
      }
      break;
    default:
      consumeT(127);                // 'entire'
      lookahead1W(42);              // S^WS | '(:' | 'content'
      consumeT(100);                // 'content'
    }
  }

  function parse_FTMatchOptions()
  {
    eventHandler.startNonterminal("FTMatchOptions", e0);
    for (;;)
    {
      consume(260);                 // 'using'
      lookahead1W(181);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      whitespace();
      parse_FTMatchOption();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 260)                // 'using'
      {
        break;
      }
    }
    eventHandler.endNonterminal("FTMatchOptions", e0);
  }

  function try_FTMatchOptions()
  {
    for (;;)
    {
      consumeT(260);                // 'using'
      lookahead1W(181);             // S^WS | '(:' | 'case' | 'diacritics' | 'language' | 'lowercase' | 'no' |
                                    // 'option' | 'stemming' | 'stop' | 'thesaurus' | 'uppercase' | 'wildcards'
      try_FTMatchOption();
      lookahead1W(214);             // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' | 'for' |
                                    // 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' | 'ordered' | 'return' |
                                    // 'same' | 'satisfies' | 'stable' | 'start' | 'using' | 'weight' | 'where' |
                                    // 'window' | 'with' | 'without' | '|}' | '}'
      if (l1 != 260)                // 'using'
      {
        break;
      }
    }
  }

  function parse_FTMatchOption()
  {
    eventHandler.startNonterminal("FTMatchOption", e0);
    switch (l1)
    {
    case 189:                       // 'no'
      lookahead2W(161);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 169:                       // 'language'
      parse_FTLanguageOption();
      break;
    case 269:                       // 'wildcards'
    case 137917:                    // 'no' 'wildcards'
      parse_FTWildCardOption();
      break;
    case 247:                       // 'thesaurus'
    case 126653:                    // 'no' 'thesaurus'
      parse_FTThesaurusOption();
      break;
    case 239:                       // 'stemming'
    case 122557:                    // 'no' 'stemming'
      parse_FTStemOption();
      break;
    case 114:                       // 'diacritics'
      parse_FTDiacriticsOption();
      break;
    case 240:                       // 'stop'
    case 123069:                    // 'no' 'stop'
      parse_FTStopWordOption();
      break;
    case 200:                       // 'option'
      parse_FTExtensionOption();
      break;
    default:
      parse_FTCaseOption();
    }
    eventHandler.endNonterminal("FTMatchOption", e0);
  }

  function try_FTMatchOption()
  {
    switch (l1)
    {
    case 189:                       // 'no'
      lookahead2W(161);             // S^WS | '(:' | 'stemming' | 'stop' | 'thesaurus' | 'wildcards'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 169:                       // 'language'
      try_FTLanguageOption();
      break;
    case 269:                       // 'wildcards'
    case 137917:                    // 'no' 'wildcards'
      try_FTWildCardOption();
      break;
    case 247:                       // 'thesaurus'
    case 126653:                    // 'no' 'thesaurus'
      try_FTThesaurusOption();
      break;
    case 239:                       // 'stemming'
    case 122557:                    // 'no' 'stemming'
      try_FTStemOption();
      break;
    case 114:                       // 'diacritics'
      try_FTDiacriticsOption();
      break;
    case 240:                       // 'stop'
    case 123069:                    // 'no' 'stop'
      try_FTStopWordOption();
      break;
    case 200:                       // 'option'
      try_FTExtensionOption();
      break;
    default:
      try_FTCaseOption();
    }
  }

  function parse_FTCaseOption()
  {
    eventHandler.startNonterminal("FTCaseOption", e0);
    switch (l1)
    {
    case 88:                        // 'case'
      consume(88);                  // 'case'
      lookahead1W(124);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 158:                     // 'insensitive'
        consume(158);               // 'insensitive'
        break;
      default:
        consume(231);               // 'sensitive'
      }
      break;
    case 177:                       // 'lowercase'
      consume(177);                 // 'lowercase'
      break;
    default:
      consume(259);                 // 'uppercase'
    }
    eventHandler.endNonterminal("FTCaseOption", e0);
  }

  function try_FTCaseOption()
  {
    switch (l1)
    {
    case 88:                        // 'case'
      consumeT(88);                 // 'case'
      lookahead1W(124);             // S^WS | '(:' | 'insensitive' | 'sensitive'
      switch (l1)
      {
      case 158:                     // 'insensitive'
        consumeT(158);              // 'insensitive'
        break;
      default:
        consumeT(231);              // 'sensitive'
      }
      break;
    case 177:                       // 'lowercase'
      consumeT(177);                // 'lowercase'
      break;
    default:
      consumeT(259);                // 'uppercase'
    }
  }

  function parse_FTDiacriticsOption()
  {
    eventHandler.startNonterminal("FTDiacriticsOption", e0);
    consume(114);                   // 'diacritics'
    lookahead1W(124);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 158:                       // 'insensitive'
      consume(158);                 // 'insensitive'
      break;
    default:
      consume(231);                 // 'sensitive'
    }
    eventHandler.endNonterminal("FTDiacriticsOption", e0);
  }

  function try_FTDiacriticsOption()
  {
    consumeT(114);                  // 'diacritics'
    lookahead1W(124);               // S^WS | '(:' | 'insensitive' | 'sensitive'
    switch (l1)
    {
    case 158:                       // 'insensitive'
      consumeT(158);                // 'insensitive'
      break;
    default:
      consumeT(231);                // 'sensitive'
    }
  }

  function parse_FTStemOption()
  {
    eventHandler.startNonterminal("FTStemOption", e0);
    switch (l1)
    {
    case 239:                       // 'stemming'
      consume(239);                 // 'stemming'
      break;
    default:
      consume(189);                 // 'no'
      lookahead1W(74);              // S^WS | '(:' | 'stemming'
      consume(239);                 // 'stemming'
    }
    eventHandler.endNonterminal("FTStemOption", e0);
  }

  function try_FTStemOption()
  {
    switch (l1)
    {
    case 239:                       // 'stemming'
      consumeT(239);                // 'stemming'
      break;
    default:
      consumeT(189);                // 'no'
      lookahead1W(74);              // S^WS | '(:' | 'stemming'
      consumeT(239);                // 'stemming'
    }
  }

  function parse_FTThesaurusOption()
  {
    eventHandler.startNonterminal("FTThesaurusOption", e0);
    switch (l1)
    {
    case 247:                       // 'thesaurus'
      consume(247);                 // 'thesaurus'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 81:                      // 'at'
        whitespace();
        parse_FTThesaurusID();
        break;
      case 109:                     // 'default'
        consume(109);               // 'default'
        break;
      default:
        consume(34);                // '('
        lookahead1W(112);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 81:                    // 'at'
          whitespace();
          parse_FTThesaurusID();
          break;
        default:
          consume(109);             // 'default'
        }
        for (;;)
        {
          lookahead1W(101);         // S^WS | '(:' | ')' | ','
          if (l1 != 41)             // ','
          {
            break;
          }
          consume(41);              // ','
          lookahead1W(31);          // S^WS | '(:' | 'at'
          whitespace();
          parse_FTThesaurusID();
        }
        consume(37);                // ')'
      }
      break;
    default:
      consume(189);                 // 'no'
      lookahead1W(78);              // S^WS | '(:' | 'thesaurus'
      consume(247);                 // 'thesaurus'
    }
    eventHandler.endNonterminal("FTThesaurusOption", e0);
  }

  function try_FTThesaurusOption()
  {
    switch (l1)
    {
    case 247:                       // 'thesaurus'
      consumeT(247);                // 'thesaurus'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 81:                      // 'at'
        try_FTThesaurusID();
        break;
      case 109:                     // 'default'
        consumeT(109);              // 'default'
        break;
      default:
        consumeT(34);               // '('
        lookahead1W(112);           // S^WS | '(:' | 'at' | 'default'
        switch (l1)
        {
        case 81:                    // 'at'
          try_FTThesaurusID();
          break;
        default:
          consumeT(109);            // 'default'
        }
        for (;;)
        {
          lookahead1W(101);         // S^WS | '(:' | ')' | ','
          if (l1 != 41)             // ','
          {
            break;
          }
          consumeT(41);             // ','
          lookahead1W(31);          // S^WS | '(:' | 'at'
          try_FTThesaurusID();
        }
        consumeT(37);               // ')'
      }
      break;
    default:
      consumeT(189);                // 'no'
      lookahead1W(78);              // S^WS | '(:' | 'thesaurus'
      consumeT(247);                // 'thesaurus'
    }
  }

  function parse_FTThesaurusID()
  {
    eventHandler.startNonterminal("FTThesaurusID", e0);
    consume(81);                    // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    lookahead1W(220);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 218)                  // 'relationship'
    {
      consume(218);                 // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 81:                        // 'at'
      lookahead2W(165);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 130                   // 'exactly'
     || lk == 140                   // 'from'
     || lk == 88657                 // 'at' 'least'
     || lk == 94289)                // 'at' 'most'
    {
      whitespace();
      parse_FTLiteralRange();
      lookahead1W(58);              // S^WS | '(:' | 'levels'
      consume(175);                 // 'levels'
    }
    eventHandler.endNonterminal("FTThesaurusID", e0);
  }

  function try_FTThesaurusID()
  {
    consumeT(81);                   // 'at'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consumeT(7);                    // URILiteral
    lookahead1W(220);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'relationship' | 'return' | 'same' | 'satisfies' | 'stable' |
                                    // 'start' | 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' |
                                    // '}'
    if (l1 == 218)                  // 'relationship'
    {
      consumeT(218);                // 'relationship'
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consumeT(11);                 // StringLiteral
    }
    lookahead1W(216);               // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'exactly' | 'for' | 'from' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' |
                                    // 'is' | 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'using' |
                                    // 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
    switch (l1)
    {
    case 81:                        // 'at'
      lookahead2W(165);             // S^WS | '(:' | 'end' | 'least' | 'most' | 'position' | 'start'
      break;
    default:
      lk = l1;
    }
    if (lk == 130                   // 'exactly'
     || lk == 140                   // 'from'
     || lk == 88657                 // 'at' 'least'
     || lk == 94289)                // 'at' 'most'
    {
      try_FTLiteralRange();
      lookahead1W(58);              // S^WS | '(:' | 'levels'
      consumeT(175);                // 'levels'
    }
  }

  function parse_FTLiteralRange()
  {
    eventHandler.startNonterminal("FTLiteralRange", e0);
    switch (l1)
    {
    case 130:                       // 'exactly'
      consume(130);                 // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
      break;
    case 81:                        // 'at'
      consume(81);                  // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        consume(173);               // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consume(8);                 // IntegerLiteral
        break;
      default:
        consume(184);               // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consume(8);                 // IntegerLiteral
      }
      break;
    default:
      consume(140);                 // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
      lookahead1W(79);              // S^WS | '(:' | 'to'
      consume(249);                 // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consume(8);                   // IntegerLiteral
    }
    eventHandler.endNonterminal("FTLiteralRange", e0);
  }

  function try_FTLiteralRange()
  {
    switch (l1)
    {
    case 130:                       // 'exactly'
      consumeT(130);                // 'exactly'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
      break;
    case 81:                        // 'at'
      consumeT(81);                 // 'at'
      lookahead1W(125);             // S^WS | '(:' | 'least' | 'most'
      switch (l1)
      {
      case 173:                     // 'least'
        consumeT(173);              // 'least'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consumeT(8);                // IntegerLiteral
        break;
      default:
        consumeT(184);              // 'most'
        lookahead1W(16);            // IntegerLiteral | S^WS | '(:'
        consumeT(8);                // IntegerLiteral
      }
      break;
    default:
      consumeT(140);                // 'from'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
      lookahead1W(79);              // S^WS | '(:' | 'to'
      consumeT(249);                // 'to'
      lookahead1W(16);              // IntegerLiteral | S^WS | '(:'
      consumeT(8);                  // IntegerLiteral
    }
  }

  function parse_FTStopWordOption()
  {
    eventHandler.startNonterminal("FTStopWordOption", e0);
    switch (l1)
    {
    case 240:                       // 'stop'
      consume(240);                 // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consume(274);                 // 'words'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 109:                     // 'default'
        consume(109);               // 'default'
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 255)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
        break;
      default:
        whitespace();
        parse_FTStopWords();
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 255)            // 'union'
          {
            break;
          }
          whitespace();
          parse_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consume(189);                 // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stop'
      consume(240);                 // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consume(274);                 // 'words'
    }
    eventHandler.endNonterminal("FTStopWordOption", e0);
  }

  function try_FTStopWordOption()
  {
    switch (l1)
    {
    case 240:                       // 'stop'
      consumeT(240);                // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consumeT(274);                // 'words'
      lookahead1W(142);             // S^WS | '(' | '(:' | 'at' | 'default'
      switch (l1)
      {
      case 109:                     // 'default'
        consumeT(109);              // 'default'
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 255)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
        break;
      default:
        try_FTStopWords();
        for (;;)
        {
          lookahead1W(217);         // S^WS | EOF | '!=' | '(:' | ')' | ',' | ':' | ';' | '<' | '<<' | '<=' | '=' |
                                    // '>' | '>=' | '>>' | ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' |
                                    // 'before' | 'case' | 'collation' | 'count' | 'default' | 'descending' |
                                    // 'different' | 'distance' | 'else' | 'empty' | 'end' | 'entire' | 'eq' |
                                    // 'except' | 'for' | 'ftand' | 'ftor' | 'ge' | 'group' | 'gt' | 'into' | 'is' |
                                    // 'le' | 'let' | 'lt' | 'modify' | 'ne' | 'not' | 'only' | 'or' | 'order' |
                                    // 'ordered' | 'return' | 'same' | 'satisfies' | 'stable' | 'start' | 'union' |
                                    // 'using' | 'weight' | 'where' | 'window' | 'with' | 'without' | '|}' | '}'
          if (l1 != 131             // 'except'
           && l1 != 255)            // 'union'
          {
            break;
          }
          try_FTStopWordsInclExcl();
        }
      }
      break;
    default:
      consumeT(189);                // 'no'
      lookahead1W(75);              // S^WS | '(:' | 'stop'
      consumeT(240);                // 'stop'
      lookahead1W(86);              // S^WS | '(:' | 'words'
      consumeT(274);                // 'words'
    }
  }

  function parse_FTStopWords()
  {
    eventHandler.startNonterminal("FTStopWords", e0);
    switch (l1)
    {
    case 81:                        // 'at'
      consume(81);                  // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consume(7);                   // URILiteral
      break;
    default:
      consume(34);                  // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consume(11);                  // StringLiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consume(41);                // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consume(11);                // StringLiteral
      }
      consume(37);                  // ')'
    }
    eventHandler.endNonterminal("FTStopWords", e0);
  }

  function try_FTStopWords()
  {
    switch (l1)
    {
    case 81:                        // 'at'
      consumeT(81);                 // 'at'
      lookahead1W(15);              // URILiteral | S^WS | '(:'
      consumeT(7);                  // URILiteral
      break;
    default:
      consumeT(34);                 // '('
      lookahead1W(17);              // StringLiteral | S^WS | '(:'
      consumeT(11);                 // StringLiteral
      for (;;)
      {
        lookahead1W(101);           // S^WS | '(:' | ')' | ','
        if (l1 != 41)               // ','
        {
          break;
        }
        consumeT(41);               // ','
        lookahead1W(17);            // StringLiteral | S^WS | '(:'
        consumeT(11);               // StringLiteral
      }
      consumeT(37);                 // ')'
    }
  }

  function parse_FTStopWordsInclExcl()
  {
    eventHandler.startNonterminal("FTStopWordsInclExcl", e0);
    switch (l1)
    {
    case 255:                       // 'union'
      consume(255);                 // 'union'
      break;
    default:
      consume(131);                 // 'except'
    }
    lookahead1W(99);                // S^WS | '(' | '(:' | 'at'
    whitespace();
    parse_FTStopWords();
    eventHandler.endNonterminal("FTStopWordsInclExcl", e0);
  }

  function try_FTStopWordsInclExcl()
  {
    switch (l1)
    {
    case 255:                       // 'union'
      consumeT(255);                // 'union'
      break;
    default:
      consumeT(131);                // 'except'
    }
    lookahead1W(99);                // S^WS | '(' | '(:' | 'at'
    try_FTStopWords();
  }

  function parse_FTLanguageOption()
  {
    eventHandler.startNonterminal("FTLanguageOption", e0);
    consume(169);                   // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("FTLanguageOption", e0);
  }

  function try_FTLanguageOption()
  {
    consumeT(169);                  // 'language'
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consumeT(11);                   // StringLiteral
  }

  function parse_FTWildCardOption()
  {
    eventHandler.startNonterminal("FTWildCardOption", e0);
    switch (l1)
    {
    case 269:                       // 'wildcards'
      consume(269);                 // 'wildcards'
      break;
    default:
      consume(189);                 // 'no'
      lookahead1W(84);              // S^WS | '(:' | 'wildcards'
      consume(269);                 // 'wildcards'
    }
    eventHandler.endNonterminal("FTWildCardOption", e0);
  }

  function try_FTWildCardOption()
  {
    switch (l1)
    {
    case 269:                       // 'wildcards'
      consumeT(269);                // 'wildcards'
      break;
    default:
      consumeT(189);                // 'no'
      lookahead1W(84);              // S^WS | '(:' | 'wildcards'
      consumeT(269);                // 'wildcards'
    }
  }

  function parse_FTExtensionOption()
  {
    eventHandler.startNonterminal("FTExtensionOption", e0);
    consume(200);                   // 'option'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consume(11);                    // StringLiteral
    eventHandler.endNonterminal("FTExtensionOption", e0);
  }

  function try_FTExtensionOption()
  {
    consumeT(200);                  // 'option'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_EQName();
    lookahead1W(17);                // StringLiteral | S^WS | '(:'
    consumeT(11);                   // StringLiteral
  }

  function parse_FTIgnoreOption()
  {
    eventHandler.startNonterminal("FTIgnoreOption", e0);
    consume(272);                   // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consume(100);                   // 'content'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_UnionExpr();
    eventHandler.endNonterminal("FTIgnoreOption", e0);
  }

  function try_FTIgnoreOption()
  {
    consumeT(272);                  // 'without'
    lookahead1W(42);                // S^WS | '(:' | 'content'
    consumeT(100);                  // 'content'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_UnionExpr();
  }

  function parse_CollectionDecl()
  {
    eventHandler.startNonterminal("CollectionDecl", e0);
    consume(95);                    // 'collection'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(107);               // S^WS | '(:' | ';' | 'as'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_CollectionTypeDecl();
    }
    eventHandler.endNonterminal("CollectionDecl", e0);
  }

  function parse_CollectionTypeDecl()
  {
    eventHandler.startNonterminal("CollectionTypeDecl", e0);
    consume(79);                    // 'as'
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_ItemType();
    lookahead1W(156);               // S^WS | '(:' | '*' | '+' | ';' | '?'
    if (l1 != 53)                   // ';'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("CollectionTypeDecl", e0);
  }

  function parse_IndexName()
  {
    eventHandler.startNonterminal("IndexName", e0);
    parse_EQName();
    eventHandler.endNonterminal("IndexName", e0);
  }

  function parse_IndexDomainExpr()
  {
    eventHandler.startNonterminal("IndexDomainExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexDomainExpr", e0);
  }

  function parse_IndexKeySpec()
  {
    eventHandler.startNonterminal("IndexKeySpec", e0);
    parse_IndexKeyExpr();
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_IndexKeyTypeDecl();
    }
    lookahead1W(146);               // S^WS | '(:' | ',' | ';' | 'collation'
    if (l1 == 94)                   // 'collation'
    {
      whitespace();
      parse_IndexKeyCollation();
    }
    eventHandler.endNonterminal("IndexKeySpec", e0);
  }

  function parse_IndexKeyExpr()
  {
    eventHandler.startNonterminal("IndexKeyExpr", e0);
    parse_PathExpr();
    eventHandler.endNonterminal("IndexKeyExpr", e0);
  }

  function parse_IndexKeyTypeDecl()
  {
    eventHandler.startNonterminal("IndexKeyTypeDecl", e0);
    consume(79);                    // 'as'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_AtomicType();
    lookahead1W(169);               // S^WS | '(:' | '*' | '+' | ',' | ';' | '?' | 'collation'
    if (l1 == 39                    // '*'
     || l1 == 40                    // '+'
     || l1 == 64)                   // '?'
    {
      whitespace();
      parse_OccurrenceIndicator();
    }
    eventHandler.endNonterminal("IndexKeyTypeDecl", e0);
  }

  function parse_AtomicType()
  {
    eventHandler.startNonterminal("AtomicType", e0);
    parse_EQName();
    eventHandler.endNonterminal("AtomicType", e0);
  }

  function parse_IndexKeyCollation()
  {
    eventHandler.startNonterminal("IndexKeyCollation", e0);
    consume(94);                    // 'collation'
    lookahead1W(15);                // URILiteral | S^WS | '(:'
    consume(7);                     // URILiteral
    eventHandler.endNonterminal("IndexKeyCollation", e0);
  }

  function parse_IndexDecl()
  {
    eventHandler.startNonterminal("IndexDecl", e0);
    consume(155);                   // 'index'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_IndexName();
    lookahead1W(65);                // S^WS | '(:' | 'on'
    consume(198);                   // 'on'
    lookahead1W(63);                // S^WS | '(:' | 'nodes'
    consume(193);                   // 'nodes'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexDomainExpr();
    consume(87);                    // 'by'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_IndexKeySpec();
    for (;;)
    {
      lookahead1W(103);             // S^WS | '(:' | ',' | ';'
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(269);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_IndexKeySpec();
    }
    eventHandler.endNonterminal("IndexDecl", e0);
  }

  function parse_ICDecl()
  {
    eventHandler.startNonterminal("ICDecl", e0);
    consume(161);                   // 'integrity'
    lookahead1W(40);                // S^WS | '(:' | 'constraint'
    consume(97);                    // 'constraint'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(120);               // S^WS | '(:' | 'foreign' | 'on'
    switch (l1)
    {
    case 198:                       // 'on'
      whitespace();
      parse_ICCollection();
      break;
    default:
      whitespace();
      parse_ICForeignKey();
    }
    eventHandler.endNonterminal("ICDecl", e0);
  }

  function parse_ICCollection()
  {
    eventHandler.startNonterminal("ICCollection", e0);
    consume(198);                   // 'on'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    consume(95);                    // 'collection'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(140);               // S^WS | '$' | '(:' | 'foreach' | 'node'
    switch (l1)
    {
    case 31:                        // '$'
      whitespace();
      parse_ICCollSequence();
      break;
    case 192:                       // 'node'
      whitespace();
      parse_ICCollSequenceUnique();
      break;
    default:
      whitespace();
      parse_ICCollNode();
    }
    eventHandler.endNonterminal("ICCollection", e0);
  }

  function parse_ICCollSequence()
  {
    eventHandler.startNonterminal("ICCollSequence", e0);
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(92);                    // 'check'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollSequence", e0);
  }

  function parse_ICCollSequenceUnique()
  {
    eventHandler.startNonterminal("ICCollSequenceUnique", e0);
    consume(192);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(92);                    // 'check'
    lookahead1W(80);                // S^WS | '(:' | 'unique'
    consume(256);                   // 'unique'
    lookahead1W(57);                // S^WS | '(:' | 'key'
    consume(168);                   // 'key'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICCollSequenceUnique", e0);
  }

  function parse_ICCollNode()
  {
    eventHandler.startNonterminal("ICCollNode", e0);
    consume(138);                   // 'foreach'
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(192);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(37);                // S^WS | '(:' | 'check'
    consume(92);                    // 'check'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("ICCollNode", e0);
  }

  function parse_ICForeignKey()
  {
    eventHandler.startNonterminal("ICForeignKey", e0);
    consume(139);                   // 'foreign'
    lookahead1W(57);                // S^WS | '(:' | 'key'
    consume(168);                   // 'key'
    lookahead1W(51);                // S^WS | '(:' | 'from'
    whitespace();
    parse_ICForeignKeySource();
    whitespace();
    parse_ICForeignKeyTarget();
    eventHandler.endNonterminal("ICForeignKey", e0);
  }

  function parse_ICForeignKeySource()
  {
    eventHandler.startNonterminal("ICForeignKeySource", e0);
    consume(140);                   // 'from'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeySource", e0);
  }

  function parse_ICForeignKeyTarget()
  {
    eventHandler.startNonterminal("ICForeignKeyTarget", e0);
    consume(249);                   // 'to'
    lookahead1W(39);                // S^WS | '(:' | 'collection'
    whitespace();
    parse_ICForeignKeyValues();
    eventHandler.endNonterminal("ICForeignKeyTarget", e0);
  }

  function parse_ICForeignKeyValues()
  {
    eventHandler.startNonterminal("ICForeignKeyValues", e0);
    consume(95);                    // 'collection'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(62);                // S^WS | '(:' | 'node'
    consume(192);                   // 'node'
    lookahead1W(21);                // S^WS | '$' | '(:'
    whitespace();
    parse_VarRef();
    lookahead1W(57);                // S^WS | '(:' | 'key'
    consume(168);                   // 'key'
    lookahead1W(269);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '/' | '//' | '<' |
                                    // '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_PathExpr();
    eventHandler.endNonterminal("ICForeignKeyValues", e0);
  }

  function try_Comment()
  {
    consumeT(36);                   // '(:'
    for (;;)
    {
      lookahead1(89);               // CommentContents | '(:' | ':)'
      if (l1 == 50)                 // ':)'
      {
        break;
      }
      switch (l1)
      {
      case 24:                      // CommentContents
        consumeT(24);               // CommentContents
        break;
      default:
        try_Comment();
      }
    }
    consumeT(50);                   // ':)'
  }

  function try_Whitespace()
  {
    switch (l1)
    {
    case 22:                        // S^WS
      consumeT(22);                 // S^WS
      break;
    default:
      try_Comment();
    }
  }

  function parse_EQName()
  {
    eventHandler.startNonterminal("EQName", e0);
    lookahead1(250);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 82:                        // 'attribute'
      consume(82);                  // 'attribute'
      break;
    case 96:                        // 'comment'
      consume(96);                  // 'comment'
      break;
    case 120:                       // 'document-node'
      consume(120);                 // 'document-node'
      break;
    case 121:                       // 'element'
      consume(121);                 // 'element'
      break;
    case 124:                       // 'empty-sequence'
      consume(124);                 // 'empty-sequence'
      break;
    case 145:                       // 'function'
      consume(145);                 // 'function'
      break;
    case 152:                       // 'if'
      consume(152);                 // 'if'
      break;
    case 165:                       // 'item'
      consume(165);                 // 'item'
      break;
    case 186:                       // 'namespace-node'
      consume(186);                 // 'namespace-node'
      break;
    case 192:                       // 'node'
      consume(192);                 // 'node'
      break;
    case 217:                       // 'processing-instruction'
      consume(217);                 // 'processing-instruction'
      break;
    case 227:                       // 'schema-attribute'
      consume(227);                 // 'schema-attribute'
      break;
    case 228:                       // 'schema-element'
      consume(228);                 // 'schema-element'
      break;
    case 244:                       // 'switch'
      consume(244);                 // 'switch'
      break;
    case 245:                       // 'text'
      consume(245);                 // 'text'
      break;
    case 254:                       // 'typeswitch'
      consume(254);                 // 'typeswitch'
      break;
    case 78:                        // 'array'
      consume(78);                  // 'array'
      break;
    case 167:                       // 'json-item'
      consume(167);                 // 'json-item'
      break;
    case 243:                       // 'structured-item'
      consume(243);                 // 'structured-item'
      break;
    default:
      parse_FunctionName();
    }
    eventHandler.endNonterminal("EQName", e0);
  }

  function try_EQName()
  {
    lookahead1(250);                // EQName^Token | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery'
    switch (l1)
    {
    case 82:                        // 'attribute'
      consumeT(82);                 // 'attribute'
      break;
    case 96:                        // 'comment'
      consumeT(96);                 // 'comment'
      break;
    case 120:                       // 'document-node'
      consumeT(120);                // 'document-node'
      break;
    case 121:                       // 'element'
      consumeT(121);                // 'element'
      break;
    case 124:                       // 'empty-sequence'
      consumeT(124);                // 'empty-sequence'
      break;
    case 145:                       // 'function'
      consumeT(145);                // 'function'
      break;
    case 152:                       // 'if'
      consumeT(152);                // 'if'
      break;
    case 165:                       // 'item'
      consumeT(165);                // 'item'
      break;
    case 186:                       // 'namespace-node'
      consumeT(186);                // 'namespace-node'
      break;
    case 192:                       // 'node'
      consumeT(192);                // 'node'
      break;
    case 217:                       // 'processing-instruction'
      consumeT(217);                // 'processing-instruction'
      break;
    case 227:                       // 'schema-attribute'
      consumeT(227);                // 'schema-attribute'
      break;
    case 228:                       // 'schema-element'
      consumeT(228);                // 'schema-element'
      break;
    case 244:                       // 'switch'
      consumeT(244);                // 'switch'
      break;
    case 245:                       // 'text'
      consumeT(245);                // 'text'
      break;
    case 254:                       // 'typeswitch'
      consumeT(254);                // 'typeswitch'
      break;
    case 78:                        // 'array'
      consumeT(78);                 // 'array'
      break;
    case 167:                       // 'json-item'
      consumeT(167);                // 'json-item'
      break;
    case 243:                       // 'structured-item'
      consumeT(243);                // 'structured-item'
      break;
    default:
      try_FunctionName();
    }
  }

  function parse_FunctionName()
  {
    eventHandler.startNonterminal("FunctionName", e0);
    switch (l1)
    {
    case 6:                         // EQName^Token
      consume(6);                   // EQName^Token
      break;
    case 70:                        // 'after'
      consume(70);                  // 'after'
      break;
    case 73:                        // 'ancestor'
      consume(73);                  // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      consume(74);                  // 'ancestor-or-self'
      break;
    case 75:                        // 'and'
      consume(75);                  // 'and'
      break;
    case 79:                        // 'as'
      consume(79);                  // 'as'
      break;
    case 80:                        // 'ascending'
      consume(80);                  // 'ascending'
      break;
    case 84:                        // 'before'
      consume(84);                  // 'before'
      break;
    case 88:                        // 'case'
      consume(88);                  // 'case'
      break;
    case 89:                        // 'cast'
      consume(89);                  // 'cast'
      break;
    case 90:                        // 'castable'
      consume(90);                  // 'castable'
      break;
    case 93:                        // 'child'
      consume(93);                  // 'child'
      break;
    case 94:                        // 'collation'
      consume(94);                  // 'collation'
      break;
    case 103:                       // 'copy'
      consume(103);                 // 'copy'
      break;
    case 105:                       // 'count'
      consume(105);                 // 'count'
      break;
    case 108:                       // 'declare'
      consume(108);                 // 'declare'
      break;
    case 109:                       // 'default'
      consume(109);                 // 'default'
      break;
    case 110:                       // 'delete'
      consume(110);                 // 'delete'
      break;
    case 111:                       // 'descendant'
      consume(111);                 // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      consume(112);                 // 'descendant-or-self'
      break;
    case 113:                       // 'descending'
      consume(113);                 // 'descending'
      break;
    case 118:                       // 'div'
      consume(118);                 // 'div'
      break;
    case 119:                       // 'document'
      consume(119);                 // 'document'
      break;
    case 122:                       // 'else'
      consume(122);                 // 'else'
      break;
    case 123:                       // 'empty'
      consume(123);                 // 'empty'
      break;
    case 126:                       // 'end'
      consume(126);                 // 'end'
      break;
    case 128:                       // 'eq'
      consume(128);                 // 'eq'
      break;
    case 129:                       // 'every'
      consume(129);                 // 'every'
      break;
    case 131:                       // 'except'
      consume(131);                 // 'except'
      break;
    case 134:                       // 'first'
      consume(134);                 // 'first'
      break;
    case 135:                       // 'following'
      consume(135);                 // 'following'
      break;
    case 136:                       // 'following-sibling'
      consume(136);                 // 'following-sibling'
      break;
    case 137:                       // 'for'
      consume(137);                 // 'for'
      break;
    case 146:                       // 'ge'
      consume(146);                 // 'ge'
      break;
    case 148:                       // 'group'
      consume(148);                 // 'group'
      break;
    case 150:                       // 'gt'
      consume(150);                 // 'gt'
      break;
    case 151:                       // 'idiv'
      consume(151);                 // 'idiv'
      break;
    case 153:                       // 'import'
      consume(153);                 // 'import'
      break;
    case 159:                       // 'insert'
      consume(159);                 // 'insert'
      break;
    case 160:                       // 'instance'
      consume(160);                 // 'instance'
      break;
    case 162:                       // 'intersect'
      consume(162);                 // 'intersect'
      break;
    case 163:                       // 'into'
      consume(163);                 // 'into'
      break;
    case 164:                       // 'is'
      consume(164);                 // 'is'
      break;
    case 170:                       // 'last'
      consume(170);                 // 'last'
      break;
    case 172:                       // 'le'
      consume(172);                 // 'le'
      break;
    case 174:                       // 'let'
      consume(174);                 // 'let'
      break;
    case 178:                       // 'lt'
      consume(178);                 // 'lt'
      break;
    case 179:                       // 'map'
      consume(179);                 // 'map'
      break;
    case 181:                       // 'mod'
      consume(181);                 // 'mod'
      break;
    case 182:                       // 'modify'
      consume(182);                 // 'modify'
      break;
    case 183:                       // 'module'
      consume(183);                 // 'module'
      break;
    case 185:                       // 'namespace'
      consume(185);                 // 'namespace'
      break;
    case 187:                       // 'ne'
      consume(187);                 // 'ne'
      break;
    case 199:                       // 'only'
      consume(199);                 // 'only'
      break;
    case 201:                       // 'or'
      consume(201);                 // 'or'
      break;
    case 202:                       // 'order'
      consume(202);                 // 'order'
      break;
    case 203:                       // 'ordered'
      consume(203);                 // 'ordered'
      break;
    case 207:                       // 'parent'
      consume(207);                 // 'parent'
      break;
    case 213:                       // 'preceding'
      consume(213);                 // 'preceding'
      break;
    case 214:                       // 'preceding-sibling'
      consume(214);                 // 'preceding-sibling'
      break;
    case 219:                       // 'rename'
      consume(219);                 // 'rename'
      break;
    case 220:                       // 'replace'
      consume(220);                 // 'replace'
      break;
    case 221:                       // 'return'
      consume(221);                 // 'return'
      break;
    case 225:                       // 'satisfies'
      consume(225);                 // 'satisfies'
      break;
    case 230:                       // 'self'
      consume(230);                 // 'self'
      break;
    case 236:                       // 'some'
      consume(236);                 // 'some'
      break;
    case 237:                       // 'stable'
      consume(237);                 // 'stable'
      break;
    case 238:                       // 'start'
      consume(238);                 // 'start'
      break;
    case 249:                       // 'to'
      consume(249);                 // 'to'
      break;
    case 250:                       // 'treat'
      consume(250);                 // 'treat'
      break;
    case 251:                       // 'try'
      consume(251);                 // 'try'
      break;
    case 255:                       // 'union'
      consume(255);                 // 'union'
      break;
    case 257:                       // 'unordered'
      consume(257);                 // 'unordered'
      break;
    case 261:                       // 'validate'
      consume(261);                 // 'validate'
      break;
    case 267:                       // 'where'
      consume(267);                 // 'where'
      break;
    case 271:                       // 'with'
      consume(271);                 // 'with'
      break;
    case 275:                       // 'xquery'
      consume(275);                 // 'xquery'
      break;
    case 72:                        // 'allowing'
      consume(72);                  // 'allowing'
      break;
    case 81:                        // 'at'
      consume(81);                  // 'at'
      break;
    case 83:                        // 'base-uri'
      consume(83);                  // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      consume(85);                  // 'boundary-space'
      break;
    case 86:                        // 'break'
      consume(86);                  // 'break'
      break;
    case 91:                        // 'catch'
      consume(91);                  // 'catch'
      break;
    case 98:                        // 'construction'
      consume(98);                  // 'construction'
      break;
    case 101:                       // 'context'
      consume(101);                 // 'context'
      break;
    case 102:                       // 'continue'
      consume(102);                 // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      consume(104);                 // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      consume(106);                 // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      consume(125);                 // 'encoding'
      break;
    case 132:                       // 'exit'
      consume(132);                 // 'exit'
      break;
    case 133:                       // 'external'
      consume(133);                 // 'external'
      break;
    case 141:                       // 'ft-option'
      consume(141);                 // 'ft-option'
      break;
    case 154:                       // 'in'
      consume(154);                 // 'in'
      break;
    case 155:                       // 'index'
      consume(155);                 // 'index'
      break;
    case 161:                       // 'integrity'
      consume(161);                 // 'integrity'
      break;
    case 171:                       // 'lax'
      consume(171);                 // 'lax'
      break;
    case 193:                       // 'nodes'
      consume(193);                 // 'nodes'
      break;
    case 200:                       // 'option'
      consume(200);                 // 'option'
      break;
    case 204:                       // 'ordering'
      consume(204);                 // 'ordering'
      break;
    case 223:                       // 'revalidation'
      consume(223);                 // 'revalidation'
      break;
    case 226:                       // 'schema'
      consume(226);                 // 'schema'
      break;
    case 229:                       // 'score'
      consume(229);                 // 'score'
      break;
    case 235:                       // 'sliding'
      consume(235);                 // 'sliding'
      break;
    case 241:                       // 'strict'
      consume(241);                 // 'strict'
      break;
    case 252:                       // 'tumbling'
      consume(252);                 // 'tumbling'
      break;
    case 253:                       // 'type'
      consume(253);                 // 'type'
      break;
    case 258:                       // 'updating'
      consume(258);                 // 'updating'
      break;
    case 262:                       // 'value'
      consume(262);                 // 'value'
      break;
    case 263:                       // 'variable'
      consume(263);                 // 'variable'
      break;
    case 264:                       // 'version'
      consume(264);                 // 'version'
      break;
    case 268:                       // 'while'
      consume(268);                 // 'while'
      break;
    case 97:                        // 'constraint'
      consume(97);                  // 'constraint'
      break;
    case 176:                       // 'loop'
      consume(176);                 // 'loop'
      break;
    case 222:                       // 'returning'
      consume(222);                 // 'returning'
      break;
    case 77:                        // 'append'
      consume(77);                  // 'append'
      break;
    case 166:                       // 'json'
      consume(166);                 // 'json'
      break;
    default:
      consume(195);                 // 'object'
    }
    eventHandler.endNonterminal("FunctionName", e0);
  }

  function try_FunctionName()
  {
    switch (l1)
    {
    case 6:                         // EQName^Token
      consumeT(6);                  // EQName^Token
      break;
    case 70:                        // 'after'
      consumeT(70);                 // 'after'
      break;
    case 73:                        // 'ancestor'
      consumeT(73);                 // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      consumeT(74);                 // 'ancestor-or-self'
      break;
    case 75:                        // 'and'
      consumeT(75);                 // 'and'
      break;
    case 79:                        // 'as'
      consumeT(79);                 // 'as'
      break;
    case 80:                        // 'ascending'
      consumeT(80);                 // 'ascending'
      break;
    case 84:                        // 'before'
      consumeT(84);                 // 'before'
      break;
    case 88:                        // 'case'
      consumeT(88);                 // 'case'
      break;
    case 89:                        // 'cast'
      consumeT(89);                 // 'cast'
      break;
    case 90:                        // 'castable'
      consumeT(90);                 // 'castable'
      break;
    case 93:                        // 'child'
      consumeT(93);                 // 'child'
      break;
    case 94:                        // 'collation'
      consumeT(94);                 // 'collation'
      break;
    case 103:                       // 'copy'
      consumeT(103);                // 'copy'
      break;
    case 105:                       // 'count'
      consumeT(105);                // 'count'
      break;
    case 108:                       // 'declare'
      consumeT(108);                // 'declare'
      break;
    case 109:                       // 'default'
      consumeT(109);                // 'default'
      break;
    case 110:                       // 'delete'
      consumeT(110);                // 'delete'
      break;
    case 111:                       // 'descendant'
      consumeT(111);                // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      consumeT(112);                // 'descendant-or-self'
      break;
    case 113:                       // 'descending'
      consumeT(113);                // 'descending'
      break;
    case 118:                       // 'div'
      consumeT(118);                // 'div'
      break;
    case 119:                       // 'document'
      consumeT(119);                // 'document'
      break;
    case 122:                       // 'else'
      consumeT(122);                // 'else'
      break;
    case 123:                       // 'empty'
      consumeT(123);                // 'empty'
      break;
    case 126:                       // 'end'
      consumeT(126);                // 'end'
      break;
    case 128:                       // 'eq'
      consumeT(128);                // 'eq'
      break;
    case 129:                       // 'every'
      consumeT(129);                // 'every'
      break;
    case 131:                       // 'except'
      consumeT(131);                // 'except'
      break;
    case 134:                       // 'first'
      consumeT(134);                // 'first'
      break;
    case 135:                       // 'following'
      consumeT(135);                // 'following'
      break;
    case 136:                       // 'following-sibling'
      consumeT(136);                // 'following-sibling'
      break;
    case 137:                       // 'for'
      consumeT(137);                // 'for'
      break;
    case 146:                       // 'ge'
      consumeT(146);                // 'ge'
      break;
    case 148:                       // 'group'
      consumeT(148);                // 'group'
      break;
    case 150:                       // 'gt'
      consumeT(150);                // 'gt'
      break;
    case 151:                       // 'idiv'
      consumeT(151);                // 'idiv'
      break;
    case 153:                       // 'import'
      consumeT(153);                // 'import'
      break;
    case 159:                       // 'insert'
      consumeT(159);                // 'insert'
      break;
    case 160:                       // 'instance'
      consumeT(160);                // 'instance'
      break;
    case 162:                       // 'intersect'
      consumeT(162);                // 'intersect'
      break;
    case 163:                       // 'into'
      consumeT(163);                // 'into'
      break;
    case 164:                       // 'is'
      consumeT(164);                // 'is'
      break;
    case 170:                       // 'last'
      consumeT(170);                // 'last'
      break;
    case 172:                       // 'le'
      consumeT(172);                // 'le'
      break;
    case 174:                       // 'let'
      consumeT(174);                // 'let'
      break;
    case 178:                       // 'lt'
      consumeT(178);                // 'lt'
      break;
    case 179:                       // 'map'
      consumeT(179);                // 'map'
      break;
    case 181:                       // 'mod'
      consumeT(181);                // 'mod'
      break;
    case 182:                       // 'modify'
      consumeT(182);                // 'modify'
      break;
    case 183:                       // 'module'
      consumeT(183);                // 'module'
      break;
    case 185:                       // 'namespace'
      consumeT(185);                // 'namespace'
      break;
    case 187:                       // 'ne'
      consumeT(187);                // 'ne'
      break;
    case 199:                       // 'only'
      consumeT(199);                // 'only'
      break;
    case 201:                       // 'or'
      consumeT(201);                // 'or'
      break;
    case 202:                       // 'order'
      consumeT(202);                // 'order'
      break;
    case 203:                       // 'ordered'
      consumeT(203);                // 'ordered'
      break;
    case 207:                       // 'parent'
      consumeT(207);                // 'parent'
      break;
    case 213:                       // 'preceding'
      consumeT(213);                // 'preceding'
      break;
    case 214:                       // 'preceding-sibling'
      consumeT(214);                // 'preceding-sibling'
      break;
    case 219:                       // 'rename'
      consumeT(219);                // 'rename'
      break;
    case 220:                       // 'replace'
      consumeT(220);                // 'replace'
      break;
    case 221:                       // 'return'
      consumeT(221);                // 'return'
      break;
    case 225:                       // 'satisfies'
      consumeT(225);                // 'satisfies'
      break;
    case 230:                       // 'self'
      consumeT(230);                // 'self'
      break;
    case 236:                       // 'some'
      consumeT(236);                // 'some'
      break;
    case 237:                       // 'stable'
      consumeT(237);                // 'stable'
      break;
    case 238:                       // 'start'
      consumeT(238);                // 'start'
      break;
    case 249:                       // 'to'
      consumeT(249);                // 'to'
      break;
    case 250:                       // 'treat'
      consumeT(250);                // 'treat'
      break;
    case 251:                       // 'try'
      consumeT(251);                // 'try'
      break;
    case 255:                       // 'union'
      consumeT(255);                // 'union'
      break;
    case 257:                       // 'unordered'
      consumeT(257);                // 'unordered'
      break;
    case 261:                       // 'validate'
      consumeT(261);                // 'validate'
      break;
    case 267:                       // 'where'
      consumeT(267);                // 'where'
      break;
    case 271:                       // 'with'
      consumeT(271);                // 'with'
      break;
    case 275:                       // 'xquery'
      consumeT(275);                // 'xquery'
      break;
    case 72:                        // 'allowing'
      consumeT(72);                 // 'allowing'
      break;
    case 81:                        // 'at'
      consumeT(81);                 // 'at'
      break;
    case 83:                        // 'base-uri'
      consumeT(83);                 // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      consumeT(85);                 // 'boundary-space'
      break;
    case 86:                        // 'break'
      consumeT(86);                 // 'break'
      break;
    case 91:                        // 'catch'
      consumeT(91);                 // 'catch'
      break;
    case 98:                        // 'construction'
      consumeT(98);                 // 'construction'
      break;
    case 101:                       // 'context'
      consumeT(101);                // 'context'
      break;
    case 102:                       // 'continue'
      consumeT(102);                // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      consumeT(104);                // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      consumeT(106);                // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      consumeT(125);                // 'encoding'
      break;
    case 132:                       // 'exit'
      consumeT(132);                // 'exit'
      break;
    case 133:                       // 'external'
      consumeT(133);                // 'external'
      break;
    case 141:                       // 'ft-option'
      consumeT(141);                // 'ft-option'
      break;
    case 154:                       // 'in'
      consumeT(154);                // 'in'
      break;
    case 155:                       // 'index'
      consumeT(155);                // 'index'
      break;
    case 161:                       // 'integrity'
      consumeT(161);                // 'integrity'
      break;
    case 171:                       // 'lax'
      consumeT(171);                // 'lax'
      break;
    case 193:                       // 'nodes'
      consumeT(193);                // 'nodes'
      break;
    case 200:                       // 'option'
      consumeT(200);                // 'option'
      break;
    case 204:                       // 'ordering'
      consumeT(204);                // 'ordering'
      break;
    case 223:                       // 'revalidation'
      consumeT(223);                // 'revalidation'
      break;
    case 226:                       // 'schema'
      consumeT(226);                // 'schema'
      break;
    case 229:                       // 'score'
      consumeT(229);                // 'score'
      break;
    case 235:                       // 'sliding'
      consumeT(235);                // 'sliding'
      break;
    case 241:                       // 'strict'
      consumeT(241);                // 'strict'
      break;
    case 252:                       // 'tumbling'
      consumeT(252);                // 'tumbling'
      break;
    case 253:                       // 'type'
      consumeT(253);                // 'type'
      break;
    case 258:                       // 'updating'
      consumeT(258);                // 'updating'
      break;
    case 262:                       // 'value'
      consumeT(262);                // 'value'
      break;
    case 263:                       // 'variable'
      consumeT(263);                // 'variable'
      break;
    case 264:                       // 'version'
      consumeT(264);                // 'version'
      break;
    case 268:                       // 'while'
      consumeT(268);                // 'while'
      break;
    case 97:                        // 'constraint'
      consumeT(97);                 // 'constraint'
      break;
    case 176:                       // 'loop'
      consumeT(176);                // 'loop'
      break;
    case 222:                       // 'returning'
      consumeT(222);                // 'returning'
      break;
    case 77:                        // 'append'
      consumeT(77);                 // 'append'
      break;
    case 166:                       // 'json'
      consumeT(166);                // 'json'
      break;
    default:
      consumeT(195);                // 'object'
    }
  }

  function parse_NCName()
  {
    eventHandler.startNonterminal("NCName", e0);
    switch (l1)
    {
    case 19:                        // NCName^Token
      consume(19);                  // NCName^Token
      break;
    case 70:                        // 'after'
      consume(70);                  // 'after'
      break;
    case 75:                        // 'and'
      consume(75);                  // 'and'
      break;
    case 79:                        // 'as'
      consume(79);                  // 'as'
      break;
    case 80:                        // 'ascending'
      consume(80);                  // 'ascending'
      break;
    case 84:                        // 'before'
      consume(84);                  // 'before'
      break;
    case 88:                        // 'case'
      consume(88);                  // 'case'
      break;
    case 89:                        // 'cast'
      consume(89);                  // 'cast'
      break;
    case 90:                        // 'castable'
      consume(90);                  // 'castable'
      break;
    case 94:                        // 'collation'
      consume(94);                  // 'collation'
      break;
    case 105:                       // 'count'
      consume(105);                 // 'count'
      break;
    case 109:                       // 'default'
      consume(109);                 // 'default'
      break;
    case 113:                       // 'descending'
      consume(113);                 // 'descending'
      break;
    case 118:                       // 'div'
      consume(118);                 // 'div'
      break;
    case 122:                       // 'else'
      consume(122);                 // 'else'
      break;
    case 123:                       // 'empty'
      consume(123);                 // 'empty'
      break;
    case 126:                       // 'end'
      consume(126);                 // 'end'
      break;
    case 128:                       // 'eq'
      consume(128);                 // 'eq'
      break;
    case 131:                       // 'except'
      consume(131);                 // 'except'
      break;
    case 137:                       // 'for'
      consume(137);                 // 'for'
      break;
    case 146:                       // 'ge'
      consume(146);                 // 'ge'
      break;
    case 148:                       // 'group'
      consume(148);                 // 'group'
      break;
    case 150:                       // 'gt'
      consume(150);                 // 'gt'
      break;
    case 151:                       // 'idiv'
      consume(151);                 // 'idiv'
      break;
    case 160:                       // 'instance'
      consume(160);                 // 'instance'
      break;
    case 162:                       // 'intersect'
      consume(162);                 // 'intersect'
      break;
    case 163:                       // 'into'
      consume(163);                 // 'into'
      break;
    case 164:                       // 'is'
      consume(164);                 // 'is'
      break;
    case 172:                       // 'le'
      consume(172);                 // 'le'
      break;
    case 174:                       // 'let'
      consume(174);                 // 'let'
      break;
    case 178:                       // 'lt'
      consume(178);                 // 'lt'
      break;
    case 179:                       // 'map'
      consume(179);                 // 'map'
      break;
    case 181:                       // 'mod'
      consume(181);                 // 'mod'
      break;
    case 182:                       // 'modify'
      consume(182);                 // 'modify'
      break;
    case 187:                       // 'ne'
      consume(187);                 // 'ne'
      break;
    case 199:                       // 'only'
      consume(199);                 // 'only'
      break;
    case 201:                       // 'or'
      consume(201);                 // 'or'
      break;
    case 202:                       // 'order'
      consume(202);                 // 'order'
      break;
    case 221:                       // 'return'
      consume(221);                 // 'return'
      break;
    case 225:                       // 'satisfies'
      consume(225);                 // 'satisfies'
      break;
    case 237:                       // 'stable'
      consume(237);                 // 'stable'
      break;
    case 238:                       // 'start'
      consume(238);                 // 'start'
      break;
    case 249:                       // 'to'
      consume(249);                 // 'to'
      break;
    case 250:                       // 'treat'
      consume(250);                 // 'treat'
      break;
    case 255:                       // 'union'
      consume(255);                 // 'union'
      break;
    case 267:                       // 'where'
      consume(267);                 // 'where'
      break;
    case 271:                       // 'with'
      consume(271);                 // 'with'
      break;
    case 73:                        // 'ancestor'
      consume(73);                  // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      consume(74);                  // 'ancestor-or-self'
      break;
    case 82:                        // 'attribute'
      consume(82);                  // 'attribute'
      break;
    case 93:                        // 'child'
      consume(93);                  // 'child'
      break;
    case 96:                        // 'comment'
      consume(96);                  // 'comment'
      break;
    case 103:                       // 'copy'
      consume(103);                 // 'copy'
      break;
    case 108:                       // 'declare'
      consume(108);                 // 'declare'
      break;
    case 110:                       // 'delete'
      consume(110);                 // 'delete'
      break;
    case 111:                       // 'descendant'
      consume(111);                 // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      consume(112);                 // 'descendant-or-self'
      break;
    case 119:                       // 'document'
      consume(119);                 // 'document'
      break;
    case 120:                       // 'document-node'
      consume(120);                 // 'document-node'
      break;
    case 121:                       // 'element'
      consume(121);                 // 'element'
      break;
    case 124:                       // 'empty-sequence'
      consume(124);                 // 'empty-sequence'
      break;
    case 129:                       // 'every'
      consume(129);                 // 'every'
      break;
    case 134:                       // 'first'
      consume(134);                 // 'first'
      break;
    case 135:                       // 'following'
      consume(135);                 // 'following'
      break;
    case 136:                       // 'following-sibling'
      consume(136);                 // 'following-sibling'
      break;
    case 145:                       // 'function'
      consume(145);                 // 'function'
      break;
    case 152:                       // 'if'
      consume(152);                 // 'if'
      break;
    case 153:                       // 'import'
      consume(153);                 // 'import'
      break;
    case 159:                       // 'insert'
      consume(159);                 // 'insert'
      break;
    case 165:                       // 'item'
      consume(165);                 // 'item'
      break;
    case 170:                       // 'last'
      consume(170);                 // 'last'
      break;
    case 183:                       // 'module'
      consume(183);                 // 'module'
      break;
    case 185:                       // 'namespace'
      consume(185);                 // 'namespace'
      break;
    case 186:                       // 'namespace-node'
      consume(186);                 // 'namespace-node'
      break;
    case 192:                       // 'node'
      consume(192);                 // 'node'
      break;
    case 203:                       // 'ordered'
      consume(203);                 // 'ordered'
      break;
    case 207:                       // 'parent'
      consume(207);                 // 'parent'
      break;
    case 213:                       // 'preceding'
      consume(213);                 // 'preceding'
      break;
    case 214:                       // 'preceding-sibling'
      consume(214);                 // 'preceding-sibling'
      break;
    case 217:                       // 'processing-instruction'
      consume(217);                 // 'processing-instruction'
      break;
    case 219:                       // 'rename'
      consume(219);                 // 'rename'
      break;
    case 220:                       // 'replace'
      consume(220);                 // 'replace'
      break;
    case 227:                       // 'schema-attribute'
      consume(227);                 // 'schema-attribute'
      break;
    case 228:                       // 'schema-element'
      consume(228);                 // 'schema-element'
      break;
    case 230:                       // 'self'
      consume(230);                 // 'self'
      break;
    case 236:                       // 'some'
      consume(236);                 // 'some'
      break;
    case 244:                       // 'switch'
      consume(244);                 // 'switch'
      break;
    case 245:                       // 'text'
      consume(245);                 // 'text'
      break;
    case 251:                       // 'try'
      consume(251);                 // 'try'
      break;
    case 254:                       // 'typeswitch'
      consume(254);                 // 'typeswitch'
      break;
    case 257:                       // 'unordered'
      consume(257);                 // 'unordered'
      break;
    case 261:                       // 'validate'
      consume(261);                 // 'validate'
      break;
    case 263:                       // 'variable'
      consume(263);                 // 'variable'
      break;
    case 275:                       // 'xquery'
      consume(275);                 // 'xquery'
      break;
    case 72:                        // 'allowing'
      consume(72);                  // 'allowing'
      break;
    case 81:                        // 'at'
      consume(81);                  // 'at'
      break;
    case 83:                        // 'base-uri'
      consume(83);                  // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      consume(85);                  // 'boundary-space'
      break;
    case 86:                        // 'break'
      consume(86);                  // 'break'
      break;
    case 91:                        // 'catch'
      consume(91);                  // 'catch'
      break;
    case 98:                        // 'construction'
      consume(98);                  // 'construction'
      break;
    case 101:                       // 'context'
      consume(101);                 // 'context'
      break;
    case 102:                       // 'continue'
      consume(102);                 // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      consume(104);                 // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      consume(106);                 // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      consume(125);                 // 'encoding'
      break;
    case 132:                       // 'exit'
      consume(132);                 // 'exit'
      break;
    case 133:                       // 'external'
      consume(133);                 // 'external'
      break;
    case 141:                       // 'ft-option'
      consume(141);                 // 'ft-option'
      break;
    case 154:                       // 'in'
      consume(154);                 // 'in'
      break;
    case 155:                       // 'index'
      consume(155);                 // 'index'
      break;
    case 161:                       // 'integrity'
      consume(161);                 // 'integrity'
      break;
    case 171:                       // 'lax'
      consume(171);                 // 'lax'
      break;
    case 193:                       // 'nodes'
      consume(193);                 // 'nodes'
      break;
    case 200:                       // 'option'
      consume(200);                 // 'option'
      break;
    case 204:                       // 'ordering'
      consume(204);                 // 'ordering'
      break;
    case 223:                       // 'revalidation'
      consume(223);                 // 'revalidation'
      break;
    case 226:                       // 'schema'
      consume(226);                 // 'schema'
      break;
    case 229:                       // 'score'
      consume(229);                 // 'score'
      break;
    case 235:                       // 'sliding'
      consume(235);                 // 'sliding'
      break;
    case 241:                       // 'strict'
      consume(241);                 // 'strict'
      break;
    case 252:                       // 'tumbling'
      consume(252);                 // 'tumbling'
      break;
    case 253:                       // 'type'
      consume(253);                 // 'type'
      break;
    case 258:                       // 'updating'
      consume(258);                 // 'updating'
      break;
    case 262:                       // 'value'
      consume(262);                 // 'value'
      break;
    case 264:                       // 'version'
      consume(264);                 // 'version'
      break;
    case 268:                       // 'while'
      consume(268);                 // 'while'
      break;
    case 97:                        // 'constraint'
      consume(97);                  // 'constraint'
      break;
    case 176:                       // 'loop'
      consume(176);                 // 'loop'
      break;
    case 222:                       // 'returning'
      consume(222);                 // 'returning'
      break;
    case 77:                        // 'append'
      consume(77);                  // 'append'
      break;
    case 166:                       // 'json'
      consume(166);                 // 'json'
      break;
    default:
      consume(195);                 // 'object'
    }
    eventHandler.endNonterminal("NCName", e0);
  }

  function try_NCName()
  {
    switch (l1)
    {
    case 19:                        // NCName^Token
      consumeT(19);                 // NCName^Token
      break;
    case 70:                        // 'after'
      consumeT(70);                 // 'after'
      break;
    case 75:                        // 'and'
      consumeT(75);                 // 'and'
      break;
    case 79:                        // 'as'
      consumeT(79);                 // 'as'
      break;
    case 80:                        // 'ascending'
      consumeT(80);                 // 'ascending'
      break;
    case 84:                        // 'before'
      consumeT(84);                 // 'before'
      break;
    case 88:                        // 'case'
      consumeT(88);                 // 'case'
      break;
    case 89:                        // 'cast'
      consumeT(89);                 // 'cast'
      break;
    case 90:                        // 'castable'
      consumeT(90);                 // 'castable'
      break;
    case 94:                        // 'collation'
      consumeT(94);                 // 'collation'
      break;
    case 105:                       // 'count'
      consumeT(105);                // 'count'
      break;
    case 109:                       // 'default'
      consumeT(109);                // 'default'
      break;
    case 113:                       // 'descending'
      consumeT(113);                // 'descending'
      break;
    case 118:                       // 'div'
      consumeT(118);                // 'div'
      break;
    case 122:                       // 'else'
      consumeT(122);                // 'else'
      break;
    case 123:                       // 'empty'
      consumeT(123);                // 'empty'
      break;
    case 126:                       // 'end'
      consumeT(126);                // 'end'
      break;
    case 128:                       // 'eq'
      consumeT(128);                // 'eq'
      break;
    case 131:                       // 'except'
      consumeT(131);                // 'except'
      break;
    case 137:                       // 'for'
      consumeT(137);                // 'for'
      break;
    case 146:                       // 'ge'
      consumeT(146);                // 'ge'
      break;
    case 148:                       // 'group'
      consumeT(148);                // 'group'
      break;
    case 150:                       // 'gt'
      consumeT(150);                // 'gt'
      break;
    case 151:                       // 'idiv'
      consumeT(151);                // 'idiv'
      break;
    case 160:                       // 'instance'
      consumeT(160);                // 'instance'
      break;
    case 162:                       // 'intersect'
      consumeT(162);                // 'intersect'
      break;
    case 163:                       // 'into'
      consumeT(163);                // 'into'
      break;
    case 164:                       // 'is'
      consumeT(164);                // 'is'
      break;
    case 172:                       // 'le'
      consumeT(172);                // 'le'
      break;
    case 174:                       // 'let'
      consumeT(174);                // 'let'
      break;
    case 178:                       // 'lt'
      consumeT(178);                // 'lt'
      break;
    case 179:                       // 'map'
      consumeT(179);                // 'map'
      break;
    case 181:                       // 'mod'
      consumeT(181);                // 'mod'
      break;
    case 182:                       // 'modify'
      consumeT(182);                // 'modify'
      break;
    case 187:                       // 'ne'
      consumeT(187);                // 'ne'
      break;
    case 199:                       // 'only'
      consumeT(199);                // 'only'
      break;
    case 201:                       // 'or'
      consumeT(201);                // 'or'
      break;
    case 202:                       // 'order'
      consumeT(202);                // 'order'
      break;
    case 221:                       // 'return'
      consumeT(221);                // 'return'
      break;
    case 225:                       // 'satisfies'
      consumeT(225);                // 'satisfies'
      break;
    case 237:                       // 'stable'
      consumeT(237);                // 'stable'
      break;
    case 238:                       // 'start'
      consumeT(238);                // 'start'
      break;
    case 249:                       // 'to'
      consumeT(249);                // 'to'
      break;
    case 250:                       // 'treat'
      consumeT(250);                // 'treat'
      break;
    case 255:                       // 'union'
      consumeT(255);                // 'union'
      break;
    case 267:                       // 'where'
      consumeT(267);                // 'where'
      break;
    case 271:                       // 'with'
      consumeT(271);                // 'with'
      break;
    case 73:                        // 'ancestor'
      consumeT(73);                 // 'ancestor'
      break;
    case 74:                        // 'ancestor-or-self'
      consumeT(74);                 // 'ancestor-or-self'
      break;
    case 82:                        // 'attribute'
      consumeT(82);                 // 'attribute'
      break;
    case 93:                        // 'child'
      consumeT(93);                 // 'child'
      break;
    case 96:                        // 'comment'
      consumeT(96);                 // 'comment'
      break;
    case 103:                       // 'copy'
      consumeT(103);                // 'copy'
      break;
    case 108:                       // 'declare'
      consumeT(108);                // 'declare'
      break;
    case 110:                       // 'delete'
      consumeT(110);                // 'delete'
      break;
    case 111:                       // 'descendant'
      consumeT(111);                // 'descendant'
      break;
    case 112:                       // 'descendant-or-self'
      consumeT(112);                // 'descendant-or-self'
      break;
    case 119:                       // 'document'
      consumeT(119);                // 'document'
      break;
    case 120:                       // 'document-node'
      consumeT(120);                // 'document-node'
      break;
    case 121:                       // 'element'
      consumeT(121);                // 'element'
      break;
    case 124:                       // 'empty-sequence'
      consumeT(124);                // 'empty-sequence'
      break;
    case 129:                       // 'every'
      consumeT(129);                // 'every'
      break;
    case 134:                       // 'first'
      consumeT(134);                // 'first'
      break;
    case 135:                       // 'following'
      consumeT(135);                // 'following'
      break;
    case 136:                       // 'following-sibling'
      consumeT(136);                // 'following-sibling'
      break;
    case 145:                       // 'function'
      consumeT(145);                // 'function'
      break;
    case 152:                       // 'if'
      consumeT(152);                // 'if'
      break;
    case 153:                       // 'import'
      consumeT(153);                // 'import'
      break;
    case 159:                       // 'insert'
      consumeT(159);                // 'insert'
      break;
    case 165:                       // 'item'
      consumeT(165);                // 'item'
      break;
    case 170:                       // 'last'
      consumeT(170);                // 'last'
      break;
    case 183:                       // 'module'
      consumeT(183);                // 'module'
      break;
    case 185:                       // 'namespace'
      consumeT(185);                // 'namespace'
      break;
    case 186:                       // 'namespace-node'
      consumeT(186);                // 'namespace-node'
      break;
    case 192:                       // 'node'
      consumeT(192);                // 'node'
      break;
    case 203:                       // 'ordered'
      consumeT(203);                // 'ordered'
      break;
    case 207:                       // 'parent'
      consumeT(207);                // 'parent'
      break;
    case 213:                       // 'preceding'
      consumeT(213);                // 'preceding'
      break;
    case 214:                       // 'preceding-sibling'
      consumeT(214);                // 'preceding-sibling'
      break;
    case 217:                       // 'processing-instruction'
      consumeT(217);                // 'processing-instruction'
      break;
    case 219:                       // 'rename'
      consumeT(219);                // 'rename'
      break;
    case 220:                       // 'replace'
      consumeT(220);                // 'replace'
      break;
    case 227:                       // 'schema-attribute'
      consumeT(227);                // 'schema-attribute'
      break;
    case 228:                       // 'schema-element'
      consumeT(228);                // 'schema-element'
      break;
    case 230:                       // 'self'
      consumeT(230);                // 'self'
      break;
    case 236:                       // 'some'
      consumeT(236);                // 'some'
      break;
    case 244:                       // 'switch'
      consumeT(244);                // 'switch'
      break;
    case 245:                       // 'text'
      consumeT(245);                // 'text'
      break;
    case 251:                       // 'try'
      consumeT(251);                // 'try'
      break;
    case 254:                       // 'typeswitch'
      consumeT(254);                // 'typeswitch'
      break;
    case 257:                       // 'unordered'
      consumeT(257);                // 'unordered'
      break;
    case 261:                       // 'validate'
      consumeT(261);                // 'validate'
      break;
    case 263:                       // 'variable'
      consumeT(263);                // 'variable'
      break;
    case 275:                       // 'xquery'
      consumeT(275);                // 'xquery'
      break;
    case 72:                        // 'allowing'
      consumeT(72);                 // 'allowing'
      break;
    case 81:                        // 'at'
      consumeT(81);                 // 'at'
      break;
    case 83:                        // 'base-uri'
      consumeT(83);                 // 'base-uri'
      break;
    case 85:                        // 'boundary-space'
      consumeT(85);                 // 'boundary-space'
      break;
    case 86:                        // 'break'
      consumeT(86);                 // 'break'
      break;
    case 91:                        // 'catch'
      consumeT(91);                 // 'catch'
      break;
    case 98:                        // 'construction'
      consumeT(98);                 // 'construction'
      break;
    case 101:                       // 'context'
      consumeT(101);                // 'context'
      break;
    case 102:                       // 'continue'
      consumeT(102);                // 'continue'
      break;
    case 104:                       // 'copy-namespaces'
      consumeT(104);                // 'copy-namespaces'
      break;
    case 106:                       // 'decimal-format'
      consumeT(106);                // 'decimal-format'
      break;
    case 125:                       // 'encoding'
      consumeT(125);                // 'encoding'
      break;
    case 132:                       // 'exit'
      consumeT(132);                // 'exit'
      break;
    case 133:                       // 'external'
      consumeT(133);                // 'external'
      break;
    case 141:                       // 'ft-option'
      consumeT(141);                // 'ft-option'
      break;
    case 154:                       // 'in'
      consumeT(154);                // 'in'
      break;
    case 155:                       // 'index'
      consumeT(155);                // 'index'
      break;
    case 161:                       // 'integrity'
      consumeT(161);                // 'integrity'
      break;
    case 171:                       // 'lax'
      consumeT(171);                // 'lax'
      break;
    case 193:                       // 'nodes'
      consumeT(193);                // 'nodes'
      break;
    case 200:                       // 'option'
      consumeT(200);                // 'option'
      break;
    case 204:                       // 'ordering'
      consumeT(204);                // 'ordering'
      break;
    case 223:                       // 'revalidation'
      consumeT(223);                // 'revalidation'
      break;
    case 226:                       // 'schema'
      consumeT(226);                // 'schema'
      break;
    case 229:                       // 'score'
      consumeT(229);                // 'score'
      break;
    case 235:                       // 'sliding'
      consumeT(235);                // 'sliding'
      break;
    case 241:                       // 'strict'
      consumeT(241);                // 'strict'
      break;
    case 252:                       // 'tumbling'
      consumeT(252);                // 'tumbling'
      break;
    case 253:                       // 'type'
      consumeT(253);                // 'type'
      break;
    case 258:                       // 'updating'
      consumeT(258);                // 'updating'
      break;
    case 262:                       // 'value'
      consumeT(262);                // 'value'
      break;
    case 264:                       // 'version'
      consumeT(264);                // 'version'
      break;
    case 268:                       // 'while'
      consumeT(268);                // 'while'
      break;
    case 97:                        // 'constraint'
      consumeT(97);                 // 'constraint'
      break;
    case 176:                       // 'loop'
      consumeT(176);                // 'loop'
      break;
    case 222:                       // 'returning'
      consumeT(222);                // 'returning'
      break;
    case 77:                        // 'append'
      consumeT(77);                 // 'append'
      break;
    case 166:                       // 'json'
      consumeT(166);                // 'json'
      break;
    default:
      consumeT(195);                // 'object'
    }
  }

  function parse_MainModule()
  {
    eventHandler.startNonterminal("MainModule", e0);
    parse_Prolog();
    whitespace();
    parse_Program();
    eventHandler.endNonterminal("MainModule", e0);
  }

  function parse_Program()
  {
    eventHandler.startNonterminal("Program", e0);
    parse_StatementsAndOptionalExpr();
    eventHandler.endNonterminal("Program", e0);
  }

  function parse_Statements()
  {
    eventHandler.startNonterminal("Statements", e0);
    for (;;)
    {
      lookahead1W(282);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(272);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        break;
      case 35:                      // '(#'
        lookahead2(252);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        break;
      case 46:                      // '/'
        lookahead2W(287);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' |
                                    // '>=' | '>>' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|' | '||' | '}'
        break;
      case 47:                      // '//'
        lookahead2W(268);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        break;
      case 54:                      // '<'
        lookahead2(4);              // QName
        break;
      case 55:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 59:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 64:                      // '?'
        lookahead2W(256);           // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 66:                      // '@'
        lookahead2W(258);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        break;
      case 68:                      // '['
        lookahead2W(275);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 77:                      // 'append'
        lookahead2W(199);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 82:                      // 'attribute'
        lookahead2W(283);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 121:                     // 'element'
        lookahead2W(281);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 132:                     // 'exit'
        lookahead2W(202);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 137:                     // 'for'
        lookahead2W(207);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
        break;
      case 174:                     // 'let'
        lookahead2W(204);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 219:                     // 'rename'
        lookahead2W(205);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 220:                     // 'replace'
        lookahead2W(206);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'node' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
        break;
      case 261:                     // 'validate'
        lookahead2W(209);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 277:                     // '{'
        lookahead2W(279);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      case 279:                     // '{|'
        lookahead2W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
        break;
      case 5:                       // Wildcard
      case 45:                      // '..'
        lookahead2W(185);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        lookahead2W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        break;
      case 40:                      // '+'
      case 42:                      // '-'
        lookahead2W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 86:                      // 'break'
      case 102:                     // 'continue'
        lookahead2W(200);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 110:                     // 'delete'
      case 159:                     // 'insert'
        lookahead2W(208);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'nodes' | 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 185:                     // 'namespace'
      case 217:                     // 'processing-instruction'
        lookahead2W(270);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 103:                     // 'copy'
      case 129:                     // 'every'
      case 236:                     // 'some'
      case 263:                     // 'variable'
        lookahead2W(196);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 44:                      // '.'
        lookahead2W(194);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 78:                      // 'array'
      case 124:                     // 'empty-sequence'
      case 165:                     // 'item'
      case 167:                     // 'json-item'
      case 243:                     // 'structured-item'
        lookahead2W(190);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 96:                      // 'comment'
      case 119:                     // 'document'
      case 179:                     // 'map'
      case 203:                     // 'ordered'
      case 245:                     // 'text'
      case 251:                     // 'try'
      case 257:                     // 'unordered'
        lookahead2W(203);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 73:                      // 'ancestor'
      case 74:                      // 'ancestor-or-self'
      case 93:                      // 'child'
      case 111:                     // 'descendant'
      case 112:                     // 'descendant-or-self'
      case 135:                     // 'following'
      case 136:                     // 'following-sibling'
      case 207:                     // 'parent'
      case 213:                     // 'preceding'
      case 214:                     // 'preceding-sibling'
      case 230:                     // 'self'
        lookahead2W(197);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 70:                      // 'after'
      case 72:                      // 'allowing'
      case 75:                      // 'and'
      case 79:                      // 'as'
      case 80:                      // 'ascending'
      case 81:                      // 'at'
      case 83:                      // 'base-uri'
      case 84:                      // 'before'
      case 85:                      // 'boundary-space'
      case 88:                      // 'case'
      case 89:                      // 'cast'
      case 90:                      // 'castable'
      case 91:                      // 'catch'
      case 94:                      // 'collation'
      case 97:                      // 'constraint'
      case 98:                      // 'construction'
      case 101:                     // 'context'
      case 104:                     // 'copy-namespaces'
      case 105:                     // 'count'
      case 106:                     // 'decimal-format'
      case 108:                     // 'declare'
      case 109:                     // 'default'
      case 113:                     // 'descending'
      case 118:                     // 'div'
      case 120:                     // 'document-node'
      case 122:                     // 'else'
      case 123:                     // 'empty'
      case 125:                     // 'encoding'
      case 126:                     // 'end'
      case 128:                     // 'eq'
      case 131:                     // 'except'
      case 133:                     // 'external'
      case 134:                     // 'first'
      case 141:                     // 'ft-option'
      case 145:                     // 'function'
      case 146:                     // 'ge'
      case 148:                     // 'group'
      case 150:                     // 'gt'
      case 151:                     // 'idiv'
      case 152:                     // 'if'
      case 153:                     // 'import'
      case 154:                     // 'in'
      case 155:                     // 'index'
      case 160:                     // 'instance'
      case 161:                     // 'integrity'
      case 162:                     // 'intersect'
      case 163:                     // 'into'
      case 164:                     // 'is'
      case 166:                     // 'json'
      case 170:                     // 'last'
      case 171:                     // 'lax'
      case 172:                     // 'le'
      case 176:                     // 'loop'
      case 178:                     // 'lt'
      case 181:                     // 'mod'
      case 182:                     // 'modify'
      case 183:                     // 'module'
      case 186:                     // 'namespace-node'
      case 187:                     // 'ne'
      case 192:                     // 'node'
      case 193:                     // 'nodes'
      case 195:                     // 'object'
      case 199:                     // 'only'
      case 200:                     // 'option'
      case 201:                     // 'or'
      case 202:                     // 'order'
      case 204:                     // 'ordering'
      case 221:                     // 'return'
      case 222:                     // 'returning'
      case 223:                     // 'revalidation'
      case 225:                     // 'satisfies'
      case 226:                     // 'schema'
      case 227:                     // 'schema-attribute'
      case 228:                     // 'schema-element'
      case 229:                     // 'score'
      case 235:                     // 'sliding'
      case 237:                     // 'stable'
      case 238:                     // 'start'
      case 241:                     // 'strict'
      case 244:                     // 'switch'
      case 249:                     // 'to'
      case 250:                     // 'treat'
      case 252:                     // 'tumbling'
      case 253:                     // 'type'
      case 254:                     // 'typeswitch'
      case 255:                     // 'union'
      case 258:                     // 'updating'
      case 262:                     // 'value'
      case 264:                     // 'version'
      case 267:                     // 'where'
      case 268:                     // 'while'
      case 271:                     // 'with'
      case 275:                     // 'xquery'
        lookahead2W(193);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 53                  // ';'
       && lk != 283                 // '}'
       && lk != 12805               // Wildcard EOF
       && lk != 12806               // EQName^Token EOF
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12844               // '.' EOF
       && lk != 12845               // '..' EOF
       && lk != 12846               // '/' EOF
       && lk != 12870               // 'after' EOF
       && lk != 12872               // 'allowing' EOF
       && lk != 12873               // 'ancestor' EOF
       && lk != 12874               // 'ancestor-or-self' EOF
       && lk != 12875               // 'and' EOF
       && lk != 12877               // 'append' EOF
       && lk != 12878               // 'array' EOF
       && lk != 12879               // 'as' EOF
       && lk != 12880               // 'ascending' EOF
       && lk != 12881               // 'at' EOF
       && lk != 12882               // 'attribute' EOF
       && lk != 12883               // 'base-uri' EOF
       && lk != 12884               // 'before' EOF
       && lk != 12885               // 'boundary-space' EOF
       && lk != 12886               // 'break' EOF
       && lk != 12888               // 'case' EOF
       && lk != 12889               // 'cast' EOF
       && lk != 12890               // 'castable' EOF
       && lk != 12891               // 'catch' EOF
       && lk != 12893               // 'child' EOF
       && lk != 12894               // 'collation' EOF
       && lk != 12896               // 'comment' EOF
       && lk != 12897               // 'constraint' EOF
       && lk != 12898               // 'construction' EOF
       && lk != 12901               // 'context' EOF
       && lk != 12902               // 'continue' EOF
       && lk != 12903               // 'copy' EOF
       && lk != 12904               // 'copy-namespaces' EOF
       && lk != 12905               // 'count' EOF
       && lk != 12906               // 'decimal-format' EOF
       && lk != 12908               // 'declare' EOF
       && lk != 12909               // 'default' EOF
       && lk != 12910               // 'delete' EOF
       && lk != 12911               // 'descendant' EOF
       && lk != 12912               // 'descendant-or-self' EOF
       && lk != 12913               // 'descending' EOF
       && lk != 12918               // 'div' EOF
       && lk != 12919               // 'document' EOF
       && lk != 12920               // 'document-node' EOF
       && lk != 12921               // 'element' EOF
       && lk != 12922               // 'else' EOF
       && lk != 12923               // 'empty' EOF
       && lk != 12924               // 'empty-sequence' EOF
       && lk != 12925               // 'encoding' EOF
       && lk != 12926               // 'end' EOF
       && lk != 12928               // 'eq' EOF
       && lk != 12929               // 'every' EOF
       && lk != 12931               // 'except' EOF
       && lk != 12932               // 'exit' EOF
       && lk != 12933               // 'external' EOF
       && lk != 12934               // 'first' EOF
       && lk != 12935               // 'following' EOF
       && lk != 12936               // 'following-sibling' EOF
       && lk != 12937               // 'for' EOF
       && lk != 12941               // 'ft-option' EOF
       && lk != 12945               // 'function' EOF
       && lk != 12946               // 'ge' EOF
       && lk != 12948               // 'group' EOF
       && lk != 12950               // 'gt' EOF
       && lk != 12951               // 'idiv' EOF
       && lk != 12952               // 'if' EOF
       && lk != 12953               // 'import' EOF
       && lk != 12954               // 'in' EOF
       && lk != 12955               // 'index' EOF
       && lk != 12959               // 'insert' EOF
       && lk != 12960               // 'instance' EOF
       && lk != 12961               // 'integrity' EOF
       && lk != 12962               // 'intersect' EOF
       && lk != 12963               // 'into' EOF
       && lk != 12964               // 'is' EOF
       && lk != 12965               // 'item' EOF
       && lk != 12966               // 'json' EOF
       && lk != 12967               // 'json-item' EOF
       && lk != 12970               // 'last' EOF
       && lk != 12971               // 'lax' EOF
       && lk != 12972               // 'le' EOF
       && lk != 12974               // 'let' EOF
       && lk != 12976               // 'loop' EOF
       && lk != 12978               // 'lt' EOF
       && lk != 12979               // 'map' EOF
       && lk != 12981               // 'mod' EOF
       && lk != 12982               // 'modify' EOF
       && lk != 12983               // 'module' EOF
       && lk != 12985               // 'namespace' EOF
       && lk != 12986               // 'namespace-node' EOF
       && lk != 12987               // 'ne' EOF
       && lk != 12992               // 'node' EOF
       && lk != 12993               // 'nodes' EOF
       && lk != 12995               // 'object' EOF
       && lk != 12999               // 'only' EOF
       && lk != 13000               // 'option' EOF
       && lk != 13001               // 'or' EOF
       && lk != 13002               // 'order' EOF
       && lk != 13003               // 'ordered' EOF
       && lk != 13004               // 'ordering' EOF
       && lk != 13007               // 'parent' EOF
       && lk != 13013               // 'preceding' EOF
       && lk != 13014               // 'preceding-sibling' EOF
       && lk != 13017               // 'processing-instruction' EOF
       && lk != 13019               // 'rename' EOF
       && lk != 13020               // 'replace' EOF
       && lk != 13021               // 'return' EOF
       && lk != 13022               // 'returning' EOF
       && lk != 13023               // 'revalidation' EOF
       && lk != 13025               // 'satisfies' EOF
       && lk != 13026               // 'schema' EOF
       && lk != 13027               // 'schema-attribute' EOF
       && lk != 13028               // 'schema-element' EOF
       && lk != 13029               // 'score' EOF
       && lk != 13030               // 'self' EOF
       && lk != 13035               // 'sliding' EOF
       && lk != 13036               // 'some' EOF
       && lk != 13037               // 'stable' EOF
       && lk != 13038               // 'start' EOF
       && lk != 13041               // 'strict' EOF
       && lk != 13043               // 'structured-item' EOF
       && lk != 13044               // 'switch' EOF
       && lk != 13045               // 'text' EOF
       && lk != 13049               // 'to' EOF
       && lk != 13050               // 'treat' EOF
       && lk != 13051               // 'try' EOF
       && lk != 13052               // 'tumbling' EOF
       && lk != 13053               // 'type' EOF
       && lk != 13054               // 'typeswitch' EOF
       && lk != 13055               // 'union' EOF
       && lk != 13057               // 'unordered' EOF
       && lk != 13058               // 'updating' EOF
       && lk != 13061               // 'validate' EOF
       && lk != 13062               // 'value' EOF
       && lk != 13063               // 'variable' EOF
       && lk != 13064               // 'version' EOF
       && lk != 13067               // 'where' EOF
       && lk != 13068               // 'while' EOF
       && lk != 13071               // 'with' EOF
       && lk != 13075               // 'xquery' EOF
       && lk != 16135               // 'variable' '$'
       && lk != 20997               // Wildcard ','
       && lk != 20998               // EQName^Token ','
       && lk != 21000               // IntegerLiteral ','
       && lk != 21001               // DecimalLiteral ','
       && lk != 21002               // DoubleLiteral ','
       && lk != 21003               // StringLiteral ','
       && lk != 21036               // '.' ','
       && lk != 21037               // '..' ','
       && lk != 21038               // '/' ','
       && lk != 21062               // 'after' ','
       && lk != 21064               // 'allowing' ','
       && lk != 21065               // 'ancestor' ','
       && lk != 21066               // 'ancestor-or-self' ','
       && lk != 21067               // 'and' ','
       && lk != 21069               // 'append' ','
       && lk != 21070               // 'array' ','
       && lk != 21071               // 'as' ','
       && lk != 21072               // 'ascending' ','
       && lk != 21073               // 'at' ','
       && lk != 21074               // 'attribute' ','
       && lk != 21075               // 'base-uri' ','
       && lk != 21076               // 'before' ','
       && lk != 21077               // 'boundary-space' ','
       && lk != 21078               // 'break' ','
       && lk != 21080               // 'case' ','
       && lk != 21081               // 'cast' ','
       && lk != 21082               // 'castable' ','
       && lk != 21083               // 'catch' ','
       && lk != 21085               // 'child' ','
       && lk != 21086               // 'collation' ','
       && lk != 21088               // 'comment' ','
       && lk != 21089               // 'constraint' ','
       && lk != 21090               // 'construction' ','
       && lk != 21093               // 'context' ','
       && lk != 21094               // 'continue' ','
       && lk != 21095               // 'copy' ','
       && lk != 21096               // 'copy-namespaces' ','
       && lk != 21097               // 'count' ','
       && lk != 21098               // 'decimal-format' ','
       && lk != 21100               // 'declare' ','
       && lk != 21101               // 'default' ','
       && lk != 21102               // 'delete' ','
       && lk != 21103               // 'descendant' ','
       && lk != 21104               // 'descendant-or-self' ','
       && lk != 21105               // 'descending' ','
       && lk != 21110               // 'div' ','
       && lk != 21111               // 'document' ','
       && lk != 21112               // 'document-node' ','
       && lk != 21113               // 'element' ','
       && lk != 21114               // 'else' ','
       && lk != 21115               // 'empty' ','
       && lk != 21116               // 'empty-sequence' ','
       && lk != 21117               // 'encoding' ','
       && lk != 21118               // 'end' ','
       && lk != 21120               // 'eq' ','
       && lk != 21121               // 'every' ','
       && lk != 21123               // 'except' ','
       && lk != 21124               // 'exit' ','
       && lk != 21125               // 'external' ','
       && lk != 21126               // 'first' ','
       && lk != 21127               // 'following' ','
       && lk != 21128               // 'following-sibling' ','
       && lk != 21129               // 'for' ','
       && lk != 21133               // 'ft-option' ','
       && lk != 21137               // 'function' ','
       && lk != 21138               // 'ge' ','
       && lk != 21140               // 'group' ','
       && lk != 21142               // 'gt' ','
       && lk != 21143               // 'idiv' ','
       && lk != 21144               // 'if' ','
       && lk != 21145               // 'import' ','
       && lk != 21146               // 'in' ','
       && lk != 21147               // 'index' ','
       && lk != 21151               // 'insert' ','
       && lk != 21152               // 'instance' ','
       && lk != 21153               // 'integrity' ','
       && lk != 21154               // 'intersect' ','
       && lk != 21155               // 'into' ','
       && lk != 21156               // 'is' ','
       && lk != 21157               // 'item' ','
       && lk != 21158               // 'json' ','
       && lk != 21159               // 'json-item' ','
       && lk != 21162               // 'last' ','
       && lk != 21163               // 'lax' ','
       && lk != 21164               // 'le' ','
       && lk != 21166               // 'let' ','
       && lk != 21168               // 'loop' ','
       && lk != 21170               // 'lt' ','
       && lk != 21171               // 'map' ','
       && lk != 21173               // 'mod' ','
       && lk != 21174               // 'modify' ','
       && lk != 21175               // 'module' ','
       && lk != 21177               // 'namespace' ','
       && lk != 21178               // 'namespace-node' ','
       && lk != 21179               // 'ne' ','
       && lk != 21184               // 'node' ','
       && lk != 21185               // 'nodes' ','
       && lk != 21187               // 'object' ','
       && lk != 21191               // 'only' ','
       && lk != 21192               // 'option' ','
       && lk != 21193               // 'or' ','
       && lk != 21194               // 'order' ','
       && lk != 21195               // 'ordered' ','
       && lk != 21196               // 'ordering' ','
       && lk != 21199               // 'parent' ','
       && lk != 21205               // 'preceding' ','
       && lk != 21206               // 'preceding-sibling' ','
       && lk != 21209               // 'processing-instruction' ','
       && lk != 21211               // 'rename' ','
       && lk != 21212               // 'replace' ','
       && lk != 21213               // 'return' ','
       && lk != 21214               // 'returning' ','
       && lk != 21215               // 'revalidation' ','
       && lk != 21217               // 'satisfies' ','
       && lk != 21218               // 'schema' ','
       && lk != 21219               // 'schema-attribute' ','
       && lk != 21220               // 'schema-element' ','
       && lk != 21221               // 'score' ','
       && lk != 21222               // 'self' ','
       && lk != 21227               // 'sliding' ','
       && lk != 21228               // 'some' ','
       && lk != 21229               // 'stable' ','
       && lk != 21230               // 'start' ','
       && lk != 21233               // 'strict' ','
       && lk != 21235               // 'structured-item' ','
       && lk != 21236               // 'switch' ','
       && lk != 21237               // 'text' ','
       && lk != 21241               // 'to' ','
       && lk != 21242               // 'treat' ','
       && lk != 21243               // 'try' ','
       && lk != 21244               // 'tumbling' ','
       && lk != 21245               // 'type' ','
       && lk != 21246               // 'typeswitch' ','
       && lk != 21247               // 'union' ','
       && lk != 21249               // 'unordered' ','
       && lk != 21250               // 'updating' ','
       && lk != 21253               // 'validate' ','
       && lk != 21254               // 'value' ','
       && lk != 21255               // 'variable' ','
       && lk != 21256               // 'version' ','
       && lk != 21259               // 'where' ','
       && lk != 21260               // 'while' ','
       && lk != 21263               // 'with' ','
       && lk != 21267               // 'xquery' ','
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27213               // 'append' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27302               // 'json' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27315               // 'map' ';'
       && lk != 27317               // 'mod' ';'
       && lk != 27318               // 'modify' ';'
       && lk != 27319               // 'module' ';'
       && lk != 27321               // 'namespace' ';'
       && lk != 27322               // 'namespace-node' ';'
       && lk != 27323               // 'ne' ';'
       && lk != 27328               // 'node' ';'
       && lk != 27329               // 'nodes' ';'
       && lk != 27331               // 'object' ';'
       && lk != 27335               // 'only' ';'
       && lk != 27336               // 'option' ';'
       && lk != 27337               // 'or' ';'
       && lk != 27338               // 'order' ';'
       && lk != 27339               // 'ordered' ';'
       && lk != 27340               // 'ordering' ';'
       && lk != 27343               // 'parent' ';'
       && lk != 27349               // 'preceding' ';'
       && lk != 27350               // 'preceding-sibling' ';'
       && lk != 27353               // 'processing-instruction' ';'
       && lk != 27355               // 'rename' ';'
       && lk != 27356               // 'replace' ';'
       && lk != 27357               // 'return' ';'
       && lk != 27358               // 'returning' ';'
       && lk != 27359               // 'revalidation' ';'
       && lk != 27361               // 'satisfies' ';'
       && lk != 27362               // 'schema' ';'
       && lk != 27363               // 'schema-attribute' ';'
       && lk != 27364               // 'schema-element' ';'
       && lk != 27365               // 'score' ';'
       && lk != 27366               // 'self' ';'
       && lk != 27371               // 'sliding' ';'
       && lk != 27372               // 'some' ';'
       && lk != 27373               // 'stable' ';'
       && lk != 27374               // 'start' ';'
       && lk != 27377               // 'strict' ';'
       && lk != 27379               // 'structured-item' ';'
       && lk != 27380               // 'switch' ';'
       && lk != 27381               // 'text' ';'
       && lk != 27385               // 'to' ';'
       && lk != 27386               // 'treat' ';'
       && lk != 27387               // 'try' ';'
       && lk != 27388               // 'tumbling' ';'
       && lk != 27389               // 'type' ';'
       && lk != 27390               // 'typeswitch' ';'
       && lk != 27391               // 'union' ';'
       && lk != 27393               // 'unordered' ';'
       && lk != 27394               // 'updating' ';'
       && lk != 27397               // 'validate' ';'
       && lk != 27398               // 'value' ';'
       && lk != 27399               // 'variable' ';'
       && lk != 27400               // 'version' ';'
       && lk != 27403               // 'where' ';'
       && lk != 27404               // 'while' ';'
       && lk != 27407               // 'with' ';'
       && lk != 27411               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113796              // 'exit' 'returning'
       && lk != 144901              // Wildcard '}'
       && lk != 144902              // EQName^Token '}'
       && lk != 144904              // IntegerLiteral '}'
       && lk != 144905              // DecimalLiteral '}'
       && lk != 144906              // DoubleLiteral '}'
       && lk != 144907              // StringLiteral '}'
       && lk != 144940              // '.' '}'
       && lk != 144941              // '..' '}'
       && lk != 144942              // '/' '}'
       && lk != 144966              // 'after' '}'
       && lk != 144968              // 'allowing' '}'
       && lk != 144969              // 'ancestor' '}'
       && lk != 144970              // 'ancestor-or-self' '}'
       && lk != 144971              // 'and' '}'
       && lk != 144973              // 'append' '}'
       && lk != 144974              // 'array' '}'
       && lk != 144975              // 'as' '}'
       && lk != 144976              // 'ascending' '}'
       && lk != 144977              // 'at' '}'
       && lk != 144978              // 'attribute' '}'
       && lk != 144979              // 'base-uri' '}'
       && lk != 144980              // 'before' '}'
       && lk != 144981              // 'boundary-space' '}'
       && lk != 144982              // 'break' '}'
       && lk != 144984              // 'case' '}'
       && lk != 144985              // 'cast' '}'
       && lk != 144986              // 'castable' '}'
       && lk != 144987              // 'catch' '}'
       && lk != 144989              // 'child' '}'
       && lk != 144990              // 'collation' '}'
       && lk != 144992              // 'comment' '}'
       && lk != 144993              // 'constraint' '}'
       && lk != 144994              // 'construction' '}'
       && lk != 144997              // 'context' '}'
       && lk != 144998              // 'continue' '}'
       && lk != 144999              // 'copy' '}'
       && lk != 145000              // 'copy-namespaces' '}'
       && lk != 145001              // 'count' '}'
       && lk != 145002              // 'decimal-format' '}'
       && lk != 145004              // 'declare' '}'
       && lk != 145005              // 'default' '}'
       && lk != 145006              // 'delete' '}'
       && lk != 145007              // 'descendant' '}'
       && lk != 145008              // 'descendant-or-self' '}'
       && lk != 145009              // 'descending' '}'
       && lk != 145014              // 'div' '}'
       && lk != 145015              // 'document' '}'
       && lk != 145016              // 'document-node' '}'
       && lk != 145017              // 'element' '}'
       && lk != 145018              // 'else' '}'
       && lk != 145019              // 'empty' '}'
       && lk != 145020              // 'empty-sequence' '}'
       && lk != 145021              // 'encoding' '}'
       && lk != 145022              // 'end' '}'
       && lk != 145024              // 'eq' '}'
       && lk != 145025              // 'every' '}'
       && lk != 145027              // 'except' '}'
       && lk != 145028              // 'exit' '}'
       && lk != 145029              // 'external' '}'
       && lk != 145030              // 'first' '}'
       && lk != 145031              // 'following' '}'
       && lk != 145032              // 'following-sibling' '}'
       && lk != 145033              // 'for' '}'
       && lk != 145037              // 'ft-option' '}'
       && lk != 145041              // 'function' '}'
       && lk != 145042              // 'ge' '}'
       && lk != 145044              // 'group' '}'
       && lk != 145046              // 'gt' '}'
       && lk != 145047              // 'idiv' '}'
       && lk != 145048              // 'if' '}'
       && lk != 145049              // 'import' '}'
       && lk != 145050              // 'in' '}'
       && lk != 145051              // 'index' '}'
       && lk != 145055              // 'insert' '}'
       && lk != 145056              // 'instance' '}'
       && lk != 145057              // 'integrity' '}'
       && lk != 145058              // 'intersect' '}'
       && lk != 145059              // 'into' '}'
       && lk != 145060              // 'is' '}'
       && lk != 145061              // 'item' '}'
       && lk != 145062              // 'json' '}'
       && lk != 145063              // 'json-item' '}'
       && lk != 145066              // 'last' '}'
       && lk != 145067              // 'lax' '}'
       && lk != 145068              // 'le' '}'
       && lk != 145070              // 'let' '}'
       && lk != 145072              // 'loop' '}'
       && lk != 145074              // 'lt' '}'
       && lk != 145075              // 'map' '}'
       && lk != 145077              // 'mod' '}'
       && lk != 145078              // 'modify' '}'
       && lk != 145079              // 'module' '}'
       && lk != 145081              // 'namespace' '}'
       && lk != 145082              // 'namespace-node' '}'
       && lk != 145083              // 'ne' '}'
       && lk != 145088              // 'node' '}'
       && lk != 145089              // 'nodes' '}'
       && lk != 145091              // 'object' '}'
       && lk != 145095              // 'only' '}'
       && lk != 145096              // 'option' '}'
       && lk != 145097              // 'or' '}'
       && lk != 145098              // 'order' '}'
       && lk != 145099              // 'ordered' '}'
       && lk != 145100              // 'ordering' '}'
       && lk != 145103              // 'parent' '}'
       && lk != 145109              // 'preceding' '}'
       && lk != 145110              // 'preceding-sibling' '}'
       && lk != 145113              // 'processing-instruction' '}'
       && lk != 145115              // 'rename' '}'
       && lk != 145116              // 'replace' '}'
       && lk != 145117              // 'return' '}'
       && lk != 145118              // 'returning' '}'
       && lk != 145119              // 'revalidation' '}'
       && lk != 145121              // 'satisfies' '}'
       && lk != 145122              // 'schema' '}'
       && lk != 145123              // 'schema-attribute' '}'
       && lk != 145124              // 'schema-element' '}'
       && lk != 145125              // 'score' '}'
       && lk != 145126              // 'self' '}'
       && lk != 145131              // 'sliding' '}'
       && lk != 145132              // 'some' '}'
       && lk != 145133              // 'stable' '}'
       && lk != 145134              // 'start' '}'
       && lk != 145137              // 'strict' '}'
       && lk != 145139              // 'structured-item' '}'
       && lk != 145140              // 'switch' '}'
       && lk != 145141              // 'text' '}'
       && lk != 145145              // 'to' '}'
       && lk != 145146              // 'treat' '}'
       && lk != 145147              // 'try' '}'
       && lk != 145148              // 'tumbling' '}'
       && lk != 145149              // 'type' '}'
       && lk != 145150              // 'typeswitch' '}'
       && lk != 145151              // 'union' '}'
       && lk != 145153              // 'unordered' '}'
       && lk != 145154              // 'updating' '}'
       && lk != 145157              // 'validate' '}'
       && lk != 145158              // 'value' '}'
       && lk != 145159              // 'variable' '}'
       && lk != 145160              // 'version' '}'
       && lk != 145163              // 'where' '}'
       && lk != 145164              // 'while' '}'
       && lk != 145167              // 'with' '}'
       && lk != 145171)             // 'xquery' '}'
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(6, e0, lk);
        }
      }
      if (lk != -1
       && lk != 53                  // ';'
       && lk != 16135               // 'variable' '$'
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27213               // 'append' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27302               // 'json' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27315               // 'map' ';'
       && lk != 27317               // 'mod' ';'
       && lk != 27318               // 'modify' ';'
       && lk != 27319               // 'module' ';'
       && lk != 27321               // 'namespace' ';'
       && lk != 27322               // 'namespace-node' ';'
       && lk != 27323               // 'ne' ';'
       && lk != 27328               // 'node' ';'
       && lk != 27329               // 'nodes' ';'
       && lk != 27331               // 'object' ';'
       && lk != 27335               // 'only' ';'
       && lk != 27336               // 'option' ';'
       && lk != 27337               // 'or' ';'
       && lk != 27338               // 'order' ';'
       && lk != 27339               // 'ordered' ';'
       && lk != 27340               // 'ordering' ';'
       && lk != 27343               // 'parent' ';'
       && lk != 27349               // 'preceding' ';'
       && lk != 27350               // 'preceding-sibling' ';'
       && lk != 27353               // 'processing-instruction' ';'
       && lk != 27355               // 'rename' ';'
       && lk != 27356               // 'replace' ';'
       && lk != 27357               // 'return' ';'
       && lk != 27358               // 'returning' ';'
       && lk != 27359               // 'revalidation' ';'
       && lk != 27361               // 'satisfies' ';'
       && lk != 27362               // 'schema' ';'
       && lk != 27363               // 'schema-attribute' ';'
       && lk != 27364               // 'schema-element' ';'
       && lk != 27365               // 'score' ';'
       && lk != 27366               // 'self' ';'
       && lk != 27371               // 'sliding' ';'
       && lk != 27372               // 'some' ';'
       && lk != 27373               // 'stable' ';'
       && lk != 27374               // 'start' ';'
       && lk != 27377               // 'strict' ';'
       && lk != 27379               // 'structured-item' ';'
       && lk != 27380               // 'switch' ';'
       && lk != 27381               // 'text' ';'
       && lk != 27385               // 'to' ';'
       && lk != 27386               // 'treat' ';'
       && lk != 27387               // 'try' ';'
       && lk != 27388               // 'tumbling' ';'
       && lk != 27389               // 'type' ';'
       && lk != 27390               // 'typeswitch' ';'
       && lk != 27391               // 'union' ';'
       && lk != 27393               // 'unordered' ';'
       && lk != 27394               // 'updating' ';'
       && lk != 27397               // 'validate' ';'
       && lk != 27398               // 'value' ';'
       && lk != 27399               // 'variable' ';'
       && lk != 27400               // 'version' ';'
       && lk != 27403               // 'where' ';'
       && lk != 27404               // 'while' ';'
       && lk != 27407               // 'with' ';'
       && lk != 27411               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113796)             // 'exit' 'returning'
      {
        break;
      }
      whitespace();
      parse_Statement();
    }
    eventHandler.endNonterminal("Statements", e0);
  }

  function try_Statements()
  {
    for (;;)
    {
      lookahead1W(282);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 34:                      // '('
        lookahead2W(272);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | ')' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
        break;
      case 35:                      // '(#'
        lookahead2(252);            // EQName^Token | S | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery'
        break;
      case 46:                      // '/'
        lookahead2W(287);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '!' | '!=' | '$' | '%' | '(' | '(:' | '*' | '+' |
                                    // ',' | '-' | '.' | '..' | ';' | '<' | '<!--' | '<<' | '<=' | '<?' | '=' | '>' |
                                    // '>=' | '>>' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'contains' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|' | '||' | '}'
        break;
      case 47:                      // '//'
        lookahead2W(268);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(:' | '.' | '..' | '<' | '<!--' |
                                    // '<?' | '?' | '@' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' |
                                    // 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '{|'
        break;
      case 54:                      // '<'
        lookahead2(4);              // QName
        break;
      case 55:                      // '<!--'
        lookahead2(1);              // DirCommentContents
        break;
      case 59:                      // '<?'
        lookahead2(3);              // PITarget
        break;
      case 64:                      // '?'
        lookahead2W(256);           // IntegerLiteral | NCName^Token | S^WS | '(' | '(:' | '*' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' |
                                    // 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' |
                                    // 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' |
                                    // 'preceding' | 'preceding-sibling' | 'processing-instruction' | 'rename' |
                                    // 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery'
        break;
      case 66:                      // '@'
        lookahead2W(258);           // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        break;
      case 68:                      // '['
        lookahead2W(275);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 77:                      // 'append'
        lookahead2W(199);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 82:                      // 'attribute'
        lookahead2W(283);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' |
                                    // '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 121:                     // 'element'
        lookahead2W(281);           // EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 132:                     // 'exit'
        lookahead2W(202);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'returning' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 137:                     // 'for'
        lookahead2W(207);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' |
                                    // 'to' | 'treat' | 'tumbling' | 'union' | '|' | '||' | '}'
        break;
      case 174:                     // 'let'
        lookahead2W(204);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 219:                     // 'rename'
        lookahead2W(205);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 220:                     // 'replace'
        lookahead2W(206);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'node' | 'or' |
                                    // 'to' | 'treat' | 'union' | 'value' | '|' | '||' | '}'
        break;
      case 261:                     // 'validate'
        lookahead2W(209);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'lax' | 'le' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'strict' | 'to' | 'treat' | 'type' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 277:                     // '{'
        lookahead2W(279);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
        break;
      case 279:                     // '{|'
        lookahead2W(276);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
        break;
      case 5:                       // Wildcard
      case 45:                      // '..'
        lookahead2W(185);           // S^WS | EOF | '!' | '!=' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 31:                      // '$'
      case 32:                      // '%'
        lookahead2W(255);           // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
        break;
      case 40:                      // '+'
      case 42:                      // '-'
        lookahead2W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        break;
      case 86:                      // 'break'
      case 102:                     // 'continue'
        lookahead2W(200);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' |
                                    // 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 110:                     // 'delete'
      case 159:                     // 'insert'
        lookahead2W(208);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'json' | 'le' | 'lt' | 'mod' | 'ne' | 'node' |
                                    // 'nodes' | 'or' | 'to' | 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 185:                     // 'namespace'
      case 217:                     // 'processing-instruction'
        lookahead2W(270);           // NCName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' |
                                    // '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{' | '|' | '||' | '}'
        break;
      case 103:                     // 'copy'
      case 129:                     // 'every'
      case 236:                     // 'some'
      case 263:                     // 'variable'
        lookahead2W(196);           // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 8:                       // IntegerLiteral
      case 9:                       // DecimalLiteral
      case 10:                      // DoubleLiteral
      case 11:                      // StringLiteral
      case 44:                      // '.'
        lookahead2W(194);           // S^WS | EOF | '!' | '!=' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '?' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 78:                      // 'array'
      case 124:                     // 'empty-sequence'
      case 165:                     // 'item'
      case 167:                     // 'json-item'
      case 243:                     // 'structured-item'
        lookahead2W(190);           // S^WS | EOF | '!' | '!=' | '#' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||' | '}'
        break;
      case 96:                      // 'comment'
      case 119:                     // 'document'
      case 179:                     // 'map'
      case 203:                     // 'ordered'
      case 245:                     // 'text'
      case 251:                     // 'try'
      case 257:                     // 'unordered'
        lookahead2W(203);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '{' | '|' | '||' | '}'
        break;
      case 73:                      // 'ancestor'
      case 74:                      // 'ancestor-or-self'
      case 93:                      // 'child'
      case 111:                     // 'descendant'
      case 112:                     // 'descendant-or-self'
      case 135:                     // 'following'
      case 136:                     // 'following-sibling'
      case 207:                     // 'parent'
      case 213:                     // 'preceding'
      case 214:                     // 'preceding-sibling'
      case 230:                     // 'self'
        lookahead2W(197);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // '::' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      case 6:                       // EQName^Token
      case 70:                      // 'after'
      case 72:                      // 'allowing'
      case 75:                      // 'and'
      case 79:                      // 'as'
      case 80:                      // 'ascending'
      case 81:                      // 'at'
      case 83:                      // 'base-uri'
      case 84:                      // 'before'
      case 85:                      // 'boundary-space'
      case 88:                      // 'case'
      case 89:                      // 'cast'
      case 90:                      // 'castable'
      case 91:                      // 'catch'
      case 94:                      // 'collation'
      case 97:                      // 'constraint'
      case 98:                      // 'construction'
      case 101:                     // 'context'
      case 104:                     // 'copy-namespaces'
      case 105:                     // 'count'
      case 106:                     // 'decimal-format'
      case 108:                     // 'declare'
      case 109:                     // 'default'
      case 113:                     // 'descending'
      case 118:                     // 'div'
      case 120:                     // 'document-node'
      case 122:                     // 'else'
      case 123:                     // 'empty'
      case 125:                     // 'encoding'
      case 126:                     // 'end'
      case 128:                     // 'eq'
      case 131:                     // 'except'
      case 133:                     // 'external'
      case 134:                     // 'first'
      case 141:                     // 'ft-option'
      case 145:                     // 'function'
      case 146:                     // 'ge'
      case 148:                     // 'group'
      case 150:                     // 'gt'
      case 151:                     // 'idiv'
      case 152:                     // 'if'
      case 153:                     // 'import'
      case 154:                     // 'in'
      case 155:                     // 'index'
      case 160:                     // 'instance'
      case 161:                     // 'integrity'
      case 162:                     // 'intersect'
      case 163:                     // 'into'
      case 164:                     // 'is'
      case 166:                     // 'json'
      case 170:                     // 'last'
      case 171:                     // 'lax'
      case 172:                     // 'le'
      case 176:                     // 'loop'
      case 178:                     // 'lt'
      case 181:                     // 'mod'
      case 182:                     // 'modify'
      case 183:                     // 'module'
      case 186:                     // 'namespace-node'
      case 187:                     // 'ne'
      case 192:                     // 'node'
      case 193:                     // 'nodes'
      case 195:                     // 'object'
      case 199:                     // 'only'
      case 200:                     // 'option'
      case 201:                     // 'or'
      case 202:                     // 'order'
      case 204:                     // 'ordering'
      case 221:                     // 'return'
      case 222:                     // 'returning'
      case 223:                     // 'revalidation'
      case 225:                     // 'satisfies'
      case 226:                     // 'schema'
      case 227:                     // 'schema-attribute'
      case 228:                     // 'schema-element'
      case 229:                     // 'score'
      case 235:                     // 'sliding'
      case 237:                     // 'stable'
      case 238:                     // 'start'
      case 241:                     // 'strict'
      case 244:                     // 'switch'
      case 249:                     // 'to'
      case 250:                     // 'treat'
      case 252:                     // 'tumbling'
      case 253:                     // 'type'
      case 254:                     // 'typeswitch'
      case 255:                     // 'union'
      case 258:                     // 'updating'
      case 262:                     // 'value'
      case 264:                     // 'version'
      case 267:                     // 'where'
      case 268:                     // 'while'
      case 271:                     // 'with'
      case 275:                     // 'xquery'
        lookahead2W(193);           // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | ',' | '-' | '/' | '//' |
                                    // ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' |
                                    // 'castable' | 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' |
                                    // 'instance' | 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk != 25                  // EOF
       && lk != 53                  // ';'
       && lk != 283                 // '}'
       && lk != 12805               // Wildcard EOF
       && lk != 12806               // EQName^Token EOF
       && lk != 12808               // IntegerLiteral EOF
       && lk != 12809               // DecimalLiteral EOF
       && lk != 12810               // DoubleLiteral EOF
       && lk != 12811               // StringLiteral EOF
       && lk != 12844               // '.' EOF
       && lk != 12845               // '..' EOF
       && lk != 12846               // '/' EOF
       && lk != 12870               // 'after' EOF
       && lk != 12872               // 'allowing' EOF
       && lk != 12873               // 'ancestor' EOF
       && lk != 12874               // 'ancestor-or-self' EOF
       && lk != 12875               // 'and' EOF
       && lk != 12877               // 'append' EOF
       && lk != 12878               // 'array' EOF
       && lk != 12879               // 'as' EOF
       && lk != 12880               // 'ascending' EOF
       && lk != 12881               // 'at' EOF
       && lk != 12882               // 'attribute' EOF
       && lk != 12883               // 'base-uri' EOF
       && lk != 12884               // 'before' EOF
       && lk != 12885               // 'boundary-space' EOF
       && lk != 12886               // 'break' EOF
       && lk != 12888               // 'case' EOF
       && lk != 12889               // 'cast' EOF
       && lk != 12890               // 'castable' EOF
       && lk != 12891               // 'catch' EOF
       && lk != 12893               // 'child' EOF
       && lk != 12894               // 'collation' EOF
       && lk != 12896               // 'comment' EOF
       && lk != 12897               // 'constraint' EOF
       && lk != 12898               // 'construction' EOF
       && lk != 12901               // 'context' EOF
       && lk != 12902               // 'continue' EOF
       && lk != 12903               // 'copy' EOF
       && lk != 12904               // 'copy-namespaces' EOF
       && lk != 12905               // 'count' EOF
       && lk != 12906               // 'decimal-format' EOF
       && lk != 12908               // 'declare' EOF
       && lk != 12909               // 'default' EOF
       && lk != 12910               // 'delete' EOF
       && lk != 12911               // 'descendant' EOF
       && lk != 12912               // 'descendant-or-self' EOF
       && lk != 12913               // 'descending' EOF
       && lk != 12918               // 'div' EOF
       && lk != 12919               // 'document' EOF
       && lk != 12920               // 'document-node' EOF
       && lk != 12921               // 'element' EOF
       && lk != 12922               // 'else' EOF
       && lk != 12923               // 'empty' EOF
       && lk != 12924               // 'empty-sequence' EOF
       && lk != 12925               // 'encoding' EOF
       && lk != 12926               // 'end' EOF
       && lk != 12928               // 'eq' EOF
       && lk != 12929               // 'every' EOF
       && lk != 12931               // 'except' EOF
       && lk != 12932               // 'exit' EOF
       && lk != 12933               // 'external' EOF
       && lk != 12934               // 'first' EOF
       && lk != 12935               // 'following' EOF
       && lk != 12936               // 'following-sibling' EOF
       && lk != 12937               // 'for' EOF
       && lk != 12941               // 'ft-option' EOF
       && lk != 12945               // 'function' EOF
       && lk != 12946               // 'ge' EOF
       && lk != 12948               // 'group' EOF
       && lk != 12950               // 'gt' EOF
       && lk != 12951               // 'idiv' EOF
       && lk != 12952               // 'if' EOF
       && lk != 12953               // 'import' EOF
       && lk != 12954               // 'in' EOF
       && lk != 12955               // 'index' EOF
       && lk != 12959               // 'insert' EOF
       && lk != 12960               // 'instance' EOF
       && lk != 12961               // 'integrity' EOF
       && lk != 12962               // 'intersect' EOF
       && lk != 12963               // 'into' EOF
       && lk != 12964               // 'is' EOF
       && lk != 12965               // 'item' EOF
       && lk != 12966               // 'json' EOF
       && lk != 12967               // 'json-item' EOF
       && lk != 12970               // 'last' EOF
       && lk != 12971               // 'lax' EOF
       && lk != 12972               // 'le' EOF
       && lk != 12974               // 'let' EOF
       && lk != 12976               // 'loop' EOF
       && lk != 12978               // 'lt' EOF
       && lk != 12979               // 'map' EOF
       && lk != 12981               // 'mod' EOF
       && lk != 12982               // 'modify' EOF
       && lk != 12983               // 'module' EOF
       && lk != 12985               // 'namespace' EOF
       && lk != 12986               // 'namespace-node' EOF
       && lk != 12987               // 'ne' EOF
       && lk != 12992               // 'node' EOF
       && lk != 12993               // 'nodes' EOF
       && lk != 12995               // 'object' EOF
       && lk != 12999               // 'only' EOF
       && lk != 13000               // 'option' EOF
       && lk != 13001               // 'or' EOF
       && lk != 13002               // 'order' EOF
       && lk != 13003               // 'ordered' EOF
       && lk != 13004               // 'ordering' EOF
       && lk != 13007               // 'parent' EOF
       && lk != 13013               // 'preceding' EOF
       && lk != 13014               // 'preceding-sibling' EOF
       && lk != 13017               // 'processing-instruction' EOF
       && lk != 13019               // 'rename' EOF
       && lk != 13020               // 'replace' EOF
       && lk != 13021               // 'return' EOF
       && lk != 13022               // 'returning' EOF
       && lk != 13023               // 'revalidation' EOF
       && lk != 13025               // 'satisfies' EOF
       && lk != 13026               // 'schema' EOF
       && lk != 13027               // 'schema-attribute' EOF
       && lk != 13028               // 'schema-element' EOF
       && lk != 13029               // 'score' EOF
       && lk != 13030               // 'self' EOF
       && lk != 13035               // 'sliding' EOF
       && lk != 13036               // 'some' EOF
       && lk != 13037               // 'stable' EOF
       && lk != 13038               // 'start' EOF
       && lk != 13041               // 'strict' EOF
       && lk != 13043               // 'structured-item' EOF
       && lk != 13044               // 'switch' EOF
       && lk != 13045               // 'text' EOF
       && lk != 13049               // 'to' EOF
       && lk != 13050               // 'treat' EOF
       && lk != 13051               // 'try' EOF
       && lk != 13052               // 'tumbling' EOF
       && lk != 13053               // 'type' EOF
       && lk != 13054               // 'typeswitch' EOF
       && lk != 13055               // 'union' EOF
       && lk != 13057               // 'unordered' EOF
       && lk != 13058               // 'updating' EOF
       && lk != 13061               // 'validate' EOF
       && lk != 13062               // 'value' EOF
       && lk != 13063               // 'variable' EOF
       && lk != 13064               // 'version' EOF
       && lk != 13067               // 'where' EOF
       && lk != 13068               // 'while' EOF
       && lk != 13071               // 'with' EOF
       && lk != 13075               // 'xquery' EOF
       && lk != 16135               // 'variable' '$'
       && lk != 20997               // Wildcard ','
       && lk != 20998               // EQName^Token ','
       && lk != 21000               // IntegerLiteral ','
       && lk != 21001               // DecimalLiteral ','
       && lk != 21002               // DoubleLiteral ','
       && lk != 21003               // StringLiteral ','
       && lk != 21036               // '.' ','
       && lk != 21037               // '..' ','
       && lk != 21038               // '/' ','
       && lk != 21062               // 'after' ','
       && lk != 21064               // 'allowing' ','
       && lk != 21065               // 'ancestor' ','
       && lk != 21066               // 'ancestor-or-self' ','
       && lk != 21067               // 'and' ','
       && lk != 21069               // 'append' ','
       && lk != 21070               // 'array' ','
       && lk != 21071               // 'as' ','
       && lk != 21072               // 'ascending' ','
       && lk != 21073               // 'at' ','
       && lk != 21074               // 'attribute' ','
       && lk != 21075               // 'base-uri' ','
       && lk != 21076               // 'before' ','
       && lk != 21077               // 'boundary-space' ','
       && lk != 21078               // 'break' ','
       && lk != 21080               // 'case' ','
       && lk != 21081               // 'cast' ','
       && lk != 21082               // 'castable' ','
       && lk != 21083               // 'catch' ','
       && lk != 21085               // 'child' ','
       && lk != 21086               // 'collation' ','
       && lk != 21088               // 'comment' ','
       && lk != 21089               // 'constraint' ','
       && lk != 21090               // 'construction' ','
       && lk != 21093               // 'context' ','
       && lk != 21094               // 'continue' ','
       && lk != 21095               // 'copy' ','
       && lk != 21096               // 'copy-namespaces' ','
       && lk != 21097               // 'count' ','
       && lk != 21098               // 'decimal-format' ','
       && lk != 21100               // 'declare' ','
       && lk != 21101               // 'default' ','
       && lk != 21102               // 'delete' ','
       && lk != 21103               // 'descendant' ','
       && lk != 21104               // 'descendant-or-self' ','
       && lk != 21105               // 'descending' ','
       && lk != 21110               // 'div' ','
       && lk != 21111               // 'document' ','
       && lk != 21112               // 'document-node' ','
       && lk != 21113               // 'element' ','
       && lk != 21114               // 'else' ','
       && lk != 21115               // 'empty' ','
       && lk != 21116               // 'empty-sequence' ','
       && lk != 21117               // 'encoding' ','
       && lk != 21118               // 'end' ','
       && lk != 21120               // 'eq' ','
       && lk != 21121               // 'every' ','
       && lk != 21123               // 'except' ','
       && lk != 21124               // 'exit' ','
       && lk != 21125               // 'external' ','
       && lk != 21126               // 'first' ','
       && lk != 21127               // 'following' ','
       && lk != 21128               // 'following-sibling' ','
       && lk != 21129               // 'for' ','
       && lk != 21133               // 'ft-option' ','
       && lk != 21137               // 'function' ','
       && lk != 21138               // 'ge' ','
       && lk != 21140               // 'group' ','
       && lk != 21142               // 'gt' ','
       && lk != 21143               // 'idiv' ','
       && lk != 21144               // 'if' ','
       && lk != 21145               // 'import' ','
       && lk != 21146               // 'in' ','
       && lk != 21147               // 'index' ','
       && lk != 21151               // 'insert' ','
       && lk != 21152               // 'instance' ','
       && lk != 21153               // 'integrity' ','
       && lk != 21154               // 'intersect' ','
       && lk != 21155               // 'into' ','
       && lk != 21156               // 'is' ','
       && lk != 21157               // 'item' ','
       && lk != 21158               // 'json' ','
       && lk != 21159               // 'json-item' ','
       && lk != 21162               // 'last' ','
       && lk != 21163               // 'lax' ','
       && lk != 21164               // 'le' ','
       && lk != 21166               // 'let' ','
       && lk != 21168               // 'loop' ','
       && lk != 21170               // 'lt' ','
       && lk != 21171               // 'map' ','
       && lk != 21173               // 'mod' ','
       && lk != 21174               // 'modify' ','
       && lk != 21175               // 'module' ','
       && lk != 21177               // 'namespace' ','
       && lk != 21178               // 'namespace-node' ','
       && lk != 21179               // 'ne' ','
       && lk != 21184               // 'node' ','
       && lk != 21185               // 'nodes' ','
       && lk != 21187               // 'object' ','
       && lk != 21191               // 'only' ','
       && lk != 21192               // 'option' ','
       && lk != 21193               // 'or' ','
       && lk != 21194               // 'order' ','
       && lk != 21195               // 'ordered' ','
       && lk != 21196               // 'ordering' ','
       && lk != 21199               // 'parent' ','
       && lk != 21205               // 'preceding' ','
       && lk != 21206               // 'preceding-sibling' ','
       && lk != 21209               // 'processing-instruction' ','
       && lk != 21211               // 'rename' ','
       && lk != 21212               // 'replace' ','
       && lk != 21213               // 'return' ','
       && lk != 21214               // 'returning' ','
       && lk != 21215               // 'revalidation' ','
       && lk != 21217               // 'satisfies' ','
       && lk != 21218               // 'schema' ','
       && lk != 21219               // 'schema-attribute' ','
       && lk != 21220               // 'schema-element' ','
       && lk != 21221               // 'score' ','
       && lk != 21222               // 'self' ','
       && lk != 21227               // 'sliding' ','
       && lk != 21228               // 'some' ','
       && lk != 21229               // 'stable' ','
       && lk != 21230               // 'start' ','
       && lk != 21233               // 'strict' ','
       && lk != 21235               // 'structured-item' ','
       && lk != 21236               // 'switch' ','
       && lk != 21237               // 'text' ','
       && lk != 21241               // 'to' ','
       && lk != 21242               // 'treat' ','
       && lk != 21243               // 'try' ','
       && lk != 21244               // 'tumbling' ','
       && lk != 21245               // 'type' ','
       && lk != 21246               // 'typeswitch' ','
       && lk != 21247               // 'union' ','
       && lk != 21249               // 'unordered' ','
       && lk != 21250               // 'updating' ','
       && lk != 21253               // 'validate' ','
       && lk != 21254               // 'value' ','
       && lk != 21255               // 'variable' ','
       && lk != 21256               // 'version' ','
       && lk != 21259               // 'where' ','
       && lk != 21260               // 'while' ','
       && lk != 21263               // 'with' ','
       && lk != 21267               // 'xquery' ','
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27213               // 'append' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27302               // 'json' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27315               // 'map' ';'
       && lk != 27317               // 'mod' ';'
       && lk != 27318               // 'modify' ';'
       && lk != 27319               // 'module' ';'
       && lk != 27321               // 'namespace' ';'
       && lk != 27322               // 'namespace-node' ';'
       && lk != 27323               // 'ne' ';'
       && lk != 27328               // 'node' ';'
       && lk != 27329               // 'nodes' ';'
       && lk != 27331               // 'object' ';'
       && lk != 27335               // 'only' ';'
       && lk != 27336               // 'option' ';'
       && lk != 27337               // 'or' ';'
       && lk != 27338               // 'order' ';'
       && lk != 27339               // 'ordered' ';'
       && lk != 27340               // 'ordering' ';'
       && lk != 27343               // 'parent' ';'
       && lk != 27349               // 'preceding' ';'
       && lk != 27350               // 'preceding-sibling' ';'
       && lk != 27353               // 'processing-instruction' ';'
       && lk != 27355               // 'rename' ';'
       && lk != 27356               // 'replace' ';'
       && lk != 27357               // 'return' ';'
       && lk != 27358               // 'returning' ';'
       && lk != 27359               // 'revalidation' ';'
       && lk != 27361               // 'satisfies' ';'
       && lk != 27362               // 'schema' ';'
       && lk != 27363               // 'schema-attribute' ';'
       && lk != 27364               // 'schema-element' ';'
       && lk != 27365               // 'score' ';'
       && lk != 27366               // 'self' ';'
       && lk != 27371               // 'sliding' ';'
       && lk != 27372               // 'some' ';'
       && lk != 27373               // 'stable' ';'
       && lk != 27374               // 'start' ';'
       && lk != 27377               // 'strict' ';'
       && lk != 27379               // 'structured-item' ';'
       && lk != 27380               // 'switch' ';'
       && lk != 27381               // 'text' ';'
       && lk != 27385               // 'to' ';'
       && lk != 27386               // 'treat' ';'
       && lk != 27387               // 'try' ';'
       && lk != 27388               // 'tumbling' ';'
       && lk != 27389               // 'type' ';'
       && lk != 27390               // 'typeswitch' ';'
       && lk != 27391               // 'union' ';'
       && lk != 27393               // 'unordered' ';'
       && lk != 27394               // 'updating' ';'
       && lk != 27397               // 'validate' ';'
       && lk != 27398               // 'value' ';'
       && lk != 27399               // 'variable' ';'
       && lk != 27400               // 'version' ';'
       && lk != 27403               // 'where' ';'
       && lk != 27404               // 'while' ';'
       && lk != 27407               // 'with' ';'
       && lk != 27411               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113796              // 'exit' 'returning'
       && lk != 144901              // Wildcard '}'
       && lk != 144902              // EQName^Token '}'
       && lk != 144904              // IntegerLiteral '}'
       && lk != 144905              // DecimalLiteral '}'
       && lk != 144906              // DoubleLiteral '}'
       && lk != 144907              // StringLiteral '}'
       && lk != 144940              // '.' '}'
       && lk != 144941              // '..' '}'
       && lk != 144942              // '/' '}'
       && lk != 144966              // 'after' '}'
       && lk != 144968              // 'allowing' '}'
       && lk != 144969              // 'ancestor' '}'
       && lk != 144970              // 'ancestor-or-self' '}'
       && lk != 144971              // 'and' '}'
       && lk != 144973              // 'append' '}'
       && lk != 144974              // 'array' '}'
       && lk != 144975              // 'as' '}'
       && lk != 144976              // 'ascending' '}'
       && lk != 144977              // 'at' '}'
       && lk != 144978              // 'attribute' '}'
       && lk != 144979              // 'base-uri' '}'
       && lk != 144980              // 'before' '}'
       && lk != 144981              // 'boundary-space' '}'
       && lk != 144982              // 'break' '}'
       && lk != 144984              // 'case' '}'
       && lk != 144985              // 'cast' '}'
       && lk != 144986              // 'castable' '}'
       && lk != 144987              // 'catch' '}'
       && lk != 144989              // 'child' '}'
       && lk != 144990              // 'collation' '}'
       && lk != 144992              // 'comment' '}'
       && lk != 144993              // 'constraint' '}'
       && lk != 144994              // 'construction' '}'
       && lk != 144997              // 'context' '}'
       && lk != 144998              // 'continue' '}'
       && lk != 144999              // 'copy' '}'
       && lk != 145000              // 'copy-namespaces' '}'
       && lk != 145001              // 'count' '}'
       && lk != 145002              // 'decimal-format' '}'
       && lk != 145004              // 'declare' '}'
       && lk != 145005              // 'default' '}'
       && lk != 145006              // 'delete' '}'
       && lk != 145007              // 'descendant' '}'
       && lk != 145008              // 'descendant-or-self' '}'
       && lk != 145009              // 'descending' '}'
       && lk != 145014              // 'div' '}'
       && lk != 145015              // 'document' '}'
       && lk != 145016              // 'document-node' '}'
       && lk != 145017              // 'element' '}'
       && lk != 145018              // 'else' '}'
       && lk != 145019              // 'empty' '}'
       && lk != 145020              // 'empty-sequence' '}'
       && lk != 145021              // 'encoding' '}'
       && lk != 145022              // 'end' '}'
       && lk != 145024              // 'eq' '}'
       && lk != 145025              // 'every' '}'
       && lk != 145027              // 'except' '}'
       && lk != 145028              // 'exit' '}'
       && lk != 145029              // 'external' '}'
       && lk != 145030              // 'first' '}'
       && lk != 145031              // 'following' '}'
       && lk != 145032              // 'following-sibling' '}'
       && lk != 145033              // 'for' '}'
       && lk != 145037              // 'ft-option' '}'
       && lk != 145041              // 'function' '}'
       && lk != 145042              // 'ge' '}'
       && lk != 145044              // 'group' '}'
       && lk != 145046              // 'gt' '}'
       && lk != 145047              // 'idiv' '}'
       && lk != 145048              // 'if' '}'
       && lk != 145049              // 'import' '}'
       && lk != 145050              // 'in' '}'
       && lk != 145051              // 'index' '}'
       && lk != 145055              // 'insert' '}'
       && lk != 145056              // 'instance' '}'
       && lk != 145057              // 'integrity' '}'
       && lk != 145058              // 'intersect' '}'
       && lk != 145059              // 'into' '}'
       && lk != 145060              // 'is' '}'
       && lk != 145061              // 'item' '}'
       && lk != 145062              // 'json' '}'
       && lk != 145063              // 'json-item' '}'
       && lk != 145066              // 'last' '}'
       && lk != 145067              // 'lax' '}'
       && lk != 145068              // 'le' '}'
       && lk != 145070              // 'let' '}'
       && lk != 145072              // 'loop' '}'
       && lk != 145074              // 'lt' '}'
       && lk != 145075              // 'map' '}'
       && lk != 145077              // 'mod' '}'
       && lk != 145078              // 'modify' '}'
       && lk != 145079              // 'module' '}'
       && lk != 145081              // 'namespace' '}'
       && lk != 145082              // 'namespace-node' '}'
       && lk != 145083              // 'ne' '}'
       && lk != 145088              // 'node' '}'
       && lk != 145089              // 'nodes' '}'
       && lk != 145091              // 'object' '}'
       && lk != 145095              // 'only' '}'
       && lk != 145096              // 'option' '}'
       && lk != 145097              // 'or' '}'
       && lk != 145098              // 'order' '}'
       && lk != 145099              // 'ordered' '}'
       && lk != 145100              // 'ordering' '}'
       && lk != 145103              // 'parent' '}'
       && lk != 145109              // 'preceding' '}'
       && lk != 145110              // 'preceding-sibling' '}'
       && lk != 145113              // 'processing-instruction' '}'
       && lk != 145115              // 'rename' '}'
       && lk != 145116              // 'replace' '}'
       && lk != 145117              // 'return' '}'
       && lk != 145118              // 'returning' '}'
       && lk != 145119              // 'revalidation' '}'
       && lk != 145121              // 'satisfies' '}'
       && lk != 145122              // 'schema' '}'
       && lk != 145123              // 'schema-attribute' '}'
       && lk != 145124              // 'schema-element' '}'
       && lk != 145125              // 'score' '}'
       && lk != 145126              // 'self' '}'
       && lk != 145131              // 'sliding' '}'
       && lk != 145132              // 'some' '}'
       && lk != 145133              // 'stable' '}'
       && lk != 145134              // 'start' '}'
       && lk != 145137              // 'strict' '}'
       && lk != 145139              // 'structured-item' '}'
       && lk != 145140              // 'switch' '}'
       && lk != 145141              // 'text' '}'
       && lk != 145145              // 'to' '}'
       && lk != 145146              // 'treat' '}'
       && lk != 145147              // 'try' '}'
       && lk != 145148              // 'tumbling' '}'
       && lk != 145149              // 'type' '}'
       && lk != 145150              // 'typeswitch' '}'
       && lk != 145151              // 'union' '}'
       && lk != 145153              // 'unordered' '}'
       && lk != 145154              // 'updating' '}'
       && lk != 145157              // 'validate' '}'
       && lk != 145158              // 'value' '}'
       && lk != 145159              // 'variable' '}'
       && lk != 145160              // 'version' '}'
       && lk != 145163              // 'where' '}'
       && lk != 145164              // 'while' '}'
       && lk != 145167              // 'with' '}'
       && lk != 145171)             // 'xquery' '}'
      {
        lk = memoized(6, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            try_Statement();
            memoize(6, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(6, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 53                  // ';'
       && lk != 16135               // 'variable' '$'
       && lk != 27141               // Wildcard ';'
       && lk != 27142               // EQName^Token ';'
       && lk != 27144               // IntegerLiteral ';'
       && lk != 27145               // DecimalLiteral ';'
       && lk != 27146               // DoubleLiteral ';'
       && lk != 27147               // StringLiteral ';'
       && lk != 27180               // '.' ';'
       && lk != 27181               // '..' ';'
       && lk != 27182               // '/' ';'
       && lk != 27206               // 'after' ';'
       && lk != 27208               // 'allowing' ';'
       && lk != 27209               // 'ancestor' ';'
       && lk != 27210               // 'ancestor-or-self' ';'
       && lk != 27211               // 'and' ';'
       && lk != 27213               // 'append' ';'
       && lk != 27214               // 'array' ';'
       && lk != 27215               // 'as' ';'
       && lk != 27216               // 'ascending' ';'
       && lk != 27217               // 'at' ';'
       && lk != 27218               // 'attribute' ';'
       && lk != 27219               // 'base-uri' ';'
       && lk != 27220               // 'before' ';'
       && lk != 27221               // 'boundary-space' ';'
       && lk != 27222               // 'break' ';'
       && lk != 27224               // 'case' ';'
       && lk != 27225               // 'cast' ';'
       && lk != 27226               // 'castable' ';'
       && lk != 27227               // 'catch' ';'
       && lk != 27229               // 'child' ';'
       && lk != 27230               // 'collation' ';'
       && lk != 27232               // 'comment' ';'
       && lk != 27233               // 'constraint' ';'
       && lk != 27234               // 'construction' ';'
       && lk != 27237               // 'context' ';'
       && lk != 27238               // 'continue' ';'
       && lk != 27239               // 'copy' ';'
       && lk != 27240               // 'copy-namespaces' ';'
       && lk != 27241               // 'count' ';'
       && lk != 27242               // 'decimal-format' ';'
       && lk != 27244               // 'declare' ';'
       && lk != 27245               // 'default' ';'
       && lk != 27246               // 'delete' ';'
       && lk != 27247               // 'descendant' ';'
       && lk != 27248               // 'descendant-or-self' ';'
       && lk != 27249               // 'descending' ';'
       && lk != 27254               // 'div' ';'
       && lk != 27255               // 'document' ';'
       && lk != 27256               // 'document-node' ';'
       && lk != 27257               // 'element' ';'
       && lk != 27258               // 'else' ';'
       && lk != 27259               // 'empty' ';'
       && lk != 27260               // 'empty-sequence' ';'
       && lk != 27261               // 'encoding' ';'
       && lk != 27262               // 'end' ';'
       && lk != 27264               // 'eq' ';'
       && lk != 27265               // 'every' ';'
       && lk != 27267               // 'except' ';'
       && lk != 27268               // 'exit' ';'
       && lk != 27269               // 'external' ';'
       && lk != 27270               // 'first' ';'
       && lk != 27271               // 'following' ';'
       && lk != 27272               // 'following-sibling' ';'
       && lk != 27273               // 'for' ';'
       && lk != 27277               // 'ft-option' ';'
       && lk != 27281               // 'function' ';'
       && lk != 27282               // 'ge' ';'
       && lk != 27284               // 'group' ';'
       && lk != 27286               // 'gt' ';'
       && lk != 27287               // 'idiv' ';'
       && lk != 27288               // 'if' ';'
       && lk != 27289               // 'import' ';'
       && lk != 27290               // 'in' ';'
       && lk != 27291               // 'index' ';'
       && lk != 27295               // 'insert' ';'
       && lk != 27296               // 'instance' ';'
       && lk != 27297               // 'integrity' ';'
       && lk != 27298               // 'intersect' ';'
       && lk != 27299               // 'into' ';'
       && lk != 27300               // 'is' ';'
       && lk != 27301               // 'item' ';'
       && lk != 27302               // 'json' ';'
       && lk != 27303               // 'json-item' ';'
       && lk != 27306               // 'last' ';'
       && lk != 27307               // 'lax' ';'
       && lk != 27308               // 'le' ';'
       && lk != 27310               // 'let' ';'
       && lk != 27312               // 'loop' ';'
       && lk != 27314               // 'lt' ';'
       && lk != 27315               // 'map' ';'
       && lk != 27317               // 'mod' ';'
       && lk != 27318               // 'modify' ';'
       && lk != 27319               // 'module' ';'
       && lk != 27321               // 'namespace' ';'
       && lk != 27322               // 'namespace-node' ';'
       && lk != 27323               // 'ne' ';'
       && lk != 27328               // 'node' ';'
       && lk != 27329               // 'nodes' ';'
       && lk != 27331               // 'object' ';'
       && lk != 27335               // 'only' ';'
       && lk != 27336               // 'option' ';'
       && lk != 27337               // 'or' ';'
       && lk != 27338               // 'order' ';'
       && lk != 27339               // 'ordered' ';'
       && lk != 27340               // 'ordering' ';'
       && lk != 27343               // 'parent' ';'
       && lk != 27349               // 'preceding' ';'
       && lk != 27350               // 'preceding-sibling' ';'
       && lk != 27353               // 'processing-instruction' ';'
       && lk != 27355               // 'rename' ';'
       && lk != 27356               // 'replace' ';'
       && lk != 27357               // 'return' ';'
       && lk != 27358               // 'returning' ';'
       && lk != 27359               // 'revalidation' ';'
       && lk != 27361               // 'satisfies' ';'
       && lk != 27362               // 'schema' ';'
       && lk != 27363               // 'schema-attribute' ';'
       && lk != 27364               // 'schema-element' ';'
       && lk != 27365               // 'score' ';'
       && lk != 27366               // 'self' ';'
       && lk != 27371               // 'sliding' ';'
       && lk != 27372               // 'some' ';'
       && lk != 27373               // 'stable' ';'
       && lk != 27374               // 'start' ';'
       && lk != 27377               // 'strict' ';'
       && lk != 27379               // 'structured-item' ';'
       && lk != 27380               // 'switch' ';'
       && lk != 27381               // 'text' ';'
       && lk != 27385               // 'to' ';'
       && lk != 27386               // 'treat' ';'
       && lk != 27387               // 'try' ';'
       && lk != 27388               // 'tumbling' ';'
       && lk != 27389               // 'type' ';'
       && lk != 27390               // 'typeswitch' ';'
       && lk != 27391               // 'union' ';'
       && lk != 27393               // 'unordered' ';'
       && lk != 27394               // 'updating' ';'
       && lk != 27397               // 'validate' ';'
       && lk != 27398               // 'value' ';'
       && lk != 27399               // 'variable' ';'
       && lk != 27400               // 'version' ';'
       && lk != 27403               // 'where' ';'
       && lk != 27404               // 'while' ';'
       && lk != 27407               // 'with' ';'
       && lk != 27411               // 'xquery' ';'
       && lk != 90198               // 'break' 'loop'
       && lk != 90214               // 'continue' 'loop'
       && lk != 113796)             // 'exit' 'returning'
      {
        break;
      }
      try_Statement();
    }
  }

  function parse_StatementsAndExpr()
  {
    eventHandler.startNonterminal("StatementsAndExpr", e0);
    parse_Statements();
    whitespace();
    parse_Expr();
    eventHandler.endNonterminal("StatementsAndExpr", e0);
  }

  function try_StatementsAndExpr()
  {
    try_Statements();
    try_Expr();
  }

  function parse_StatementsAndOptionalExpr()
  {
    eventHandler.startNonterminal("StatementsAndOptionalExpr", e0);
    parse_Statements();
    if (l1 != 25                    // EOF
     && l1 != 283)                  // '}'
    {
      whitespace();
      parse_Expr();
    }
    eventHandler.endNonterminal("StatementsAndOptionalExpr", e0);
  }

  function try_StatementsAndOptionalExpr()
  {
    try_Statements();
    if (l1 != 25                    // EOF
     && l1 != 283)                  // '}'
    {
      try_Expr();
    }
  }

  function parse_Statement()
  {
    eventHandler.startNonterminal("Statement", e0);
    switch (l1)
    {
    case 132:                       // 'exit'
      lookahead2W(188);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'returning' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 137:                       // 'for'
      lookahead2W(195);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' | 'to' |
                                    // 'treat' | 'tumbling' | 'union' | '|' | '||'
      break;
    case 174:                       // 'let'
      lookahead2W(191);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 251:                       // 'try'
      lookahead2W(189);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '{' | '|' | '||'
      break;
    case 263:                       // 'variable'
      lookahead2W(186);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    case 277:                       // '{'
      lookahead2W(279);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      break;
    case 86:                        // 'break'
    case 102:                       // 'continue'
      lookahead2W(187);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 152:                       // 'if'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
    case 268:                       // 'while'
      lookahead2W(184);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 2837                  // '{' Wildcard
     || lk == 3103                  // '$' EQName^Token
     || lk == 3104                  // '%' EQName^Token
     || lk == 3349                  // '{' EQName^Token
     || lk == 4373                  // '{' IntegerLiteral
     || lk == 4885                  // '{' DecimalLiteral
     || lk == 5397                  // '{' DoubleLiteral
     || lk == 5909                  // '{' StringLiteral
     || lk == 16149                 // '{' '$'
     || lk == 16661                 // '{' '%'
     || lk == 17676                 // 'while' '('
     || lk == 17685                 // '{' '('
     || lk == 18197                 // '{' '(#'
     || lk == 20757                 // '{' '+'
     || lk == 21781                 // '{' '-'
     || lk == 22805                 // '{' '.'
     || lk == 23317                 // '{' '..'
     || lk == 23829                 // '{' '/'
     || lk == 24341                 // '{' '//'
     || lk == 27413                 // '{' ';'
     || lk == 27925                 // '{' '<'
     || lk == 28437                 // '{' '<!--'
     || lk == 30485                 // '{' '<?'
     || lk == 33045                 // '{' '?'
     || lk == 34069                 // '{' '@'
     || lk == 35093                 // '{' '['
     || lk == 35871                 // '$' 'after'
     || lk == 35872                 // '%' 'after'
     || lk == 36117                 // '{' 'after'
     || lk == 36895                 // '$' 'allowing'
     || lk == 36896                 // '%' 'allowing'
     || lk == 37141                 // '{' 'allowing'
     || lk == 37407                 // '$' 'ancestor'
     || lk == 37408                 // '%' 'ancestor'
     || lk == 37653                 // '{' 'ancestor'
     || lk == 37919                 // '$' 'ancestor-or-self'
     || lk == 37920                 // '%' 'ancestor-or-self'
     || lk == 38165                 // '{' 'ancestor-or-self'
     || lk == 38431                 // '$' 'and'
     || lk == 38432                 // '%' 'and'
     || lk == 38677                 // '{' 'and'
     || lk == 39455                 // '$' 'append'
     || lk == 39456                 // '%' 'append'
     || lk == 39701                 // '{' 'append'
     || lk == 39967                 // '$' 'array'
     || lk == 39968                 // '%' 'array'
     || lk == 40213                 // '{' 'array'
     || lk == 40479                 // '$' 'as'
     || lk == 40480                 // '%' 'as'
     || lk == 40725                 // '{' 'as'
     || lk == 40991                 // '$' 'ascending'
     || lk == 40992                 // '%' 'ascending'
     || lk == 41237                 // '{' 'ascending'
     || lk == 41503                 // '$' 'at'
     || lk == 41504                 // '%' 'at'
     || lk == 41749                 // '{' 'at'
     || lk == 42015                 // '$' 'attribute'
     || lk == 42016                 // '%' 'attribute'
     || lk == 42261                 // '{' 'attribute'
     || lk == 42527                 // '$' 'base-uri'
     || lk == 42528                 // '%' 'base-uri'
     || lk == 42773                 // '{' 'base-uri'
     || lk == 43039                 // '$' 'before'
     || lk == 43040                 // '%' 'before'
     || lk == 43285                 // '{' 'before'
     || lk == 43551                 // '$' 'boundary-space'
     || lk == 43552                 // '%' 'boundary-space'
     || lk == 43797                 // '{' 'boundary-space'
     || lk == 44063                 // '$' 'break'
     || lk == 44064                 // '%' 'break'
     || lk == 44309                 // '{' 'break'
     || lk == 45087                 // '$' 'case'
     || lk == 45088                 // '%' 'case'
     || lk == 45333                 // '{' 'case'
     || lk == 45599                 // '$' 'cast'
     || lk == 45600                 // '%' 'cast'
     || lk == 45845                 // '{' 'cast'
     || lk == 46111                 // '$' 'castable'
     || lk == 46112                 // '%' 'castable'
     || lk == 46357                 // '{' 'castable'
     || lk == 46623                 // '$' 'catch'
     || lk == 46624                 // '%' 'catch'
     || lk == 46869                 // '{' 'catch'
     || lk == 47647                 // '$' 'child'
     || lk == 47648                 // '%' 'child'
     || lk == 47893                 // '{' 'child'
     || lk == 48159                 // '$' 'collation'
     || lk == 48160                 // '%' 'collation'
     || lk == 48405                 // '{' 'collation'
     || lk == 49183                 // '$' 'comment'
     || lk == 49184                 // '%' 'comment'
     || lk == 49429                 // '{' 'comment'
     || lk == 49695                 // '$' 'constraint'
     || lk == 49696                 // '%' 'constraint'
     || lk == 49941                 // '{' 'constraint'
     || lk == 50207                 // '$' 'construction'
     || lk == 50208                 // '%' 'construction'
     || lk == 50453                 // '{' 'construction'
     || lk == 51743                 // '$' 'context'
     || lk == 51744                 // '%' 'context'
     || lk == 51989                 // '{' 'context'
     || lk == 52255                 // '$' 'continue'
     || lk == 52256                 // '%' 'continue'
     || lk == 52501                 // '{' 'continue'
     || lk == 52767                 // '$' 'copy'
     || lk == 52768                 // '%' 'copy'
     || lk == 53013                 // '{' 'copy'
     || lk == 53279                 // '$' 'copy-namespaces'
     || lk == 53280                 // '%' 'copy-namespaces'
     || lk == 53525                 // '{' 'copy-namespaces'
     || lk == 53791                 // '$' 'count'
     || lk == 53792                 // '%' 'count'
     || lk == 54037                 // '{' 'count'
     || lk == 54303                 // '$' 'decimal-format'
     || lk == 54304                 // '%' 'decimal-format'
     || lk == 54549                 // '{' 'decimal-format'
     || lk == 55327                 // '$' 'declare'
     || lk == 55328                 // '%' 'declare'
     || lk == 55573                 // '{' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 55840                 // '%' 'default'
     || lk == 56085                 // '{' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56352                 // '%' 'delete'
     || lk == 56597                 // '{' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 56864                 // '%' 'descendant'
     || lk == 57109                 // '{' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57376                 // '%' 'descendant-or-self'
     || lk == 57621                 // '{' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 57888                 // '%' 'descending'
     || lk == 58133                 // '{' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60448                 // '%' 'div'
     || lk == 60693                 // '{' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 60960                 // '%' 'document'
     || lk == 61205                 // '{' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61472                 // '%' 'document-node'
     || lk == 61717                 // '{' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 61984                 // '%' 'element'
     || lk == 62229                 // '{' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 62496                 // '%' 'else'
     || lk == 62741                 // '{' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63008                 // '%' 'empty'
     || lk == 63253                 // '{' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 63520                 // '%' 'empty-sequence'
     || lk == 63765                 // '{' 'empty-sequence'
     || lk == 64031                 // '$' 'encoding'
     || lk == 64032                 // '%' 'encoding'
     || lk == 64277                 // '{' 'encoding'
     || lk == 64543                 // '$' 'end'
     || lk == 64544                 // '%' 'end'
     || lk == 64789                 // '{' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 65568                 // '%' 'eq'
     || lk == 65813                 // '{' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 66080                 // '%' 'every'
     || lk == 66325                 // '{' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 67104                 // '%' 'except'
     || lk == 67349                 // '{' 'except'
     || lk == 67615                 // '$' 'exit'
     || lk == 67616                 // '%' 'exit'
     || lk == 67861                 // '{' 'exit'
     || lk == 68127                 // '$' 'external'
     || lk == 68128                 // '%' 'external'
     || lk == 68373                 // '{' 'external'
     || lk == 68639                 // '$' 'first'
     || lk == 68640                 // '%' 'first'
     || lk == 68885                 // '{' 'first'
     || lk == 69151                 // '$' 'following'
     || lk == 69152                 // '%' 'following'
     || lk == 69397                 // '{' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 69664                 // '%' 'following-sibling'
     || lk == 69909                 // '{' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 70176                 // '%' 'for'
     || lk == 70421                 // '{' 'for'
     || lk == 72223                 // '$' 'ft-option'
     || lk == 72224                 // '%' 'ft-option'
     || lk == 72469                 // '{' 'ft-option'
     || lk == 74271                 // '$' 'function'
     || lk == 74272                 // '%' 'function'
     || lk == 74517                 // '{' 'function'
     || lk == 74783                 // '$' 'ge'
     || lk == 74784                 // '%' 'ge'
     || lk == 75029                 // '{' 'ge'
     || lk == 75807                 // '$' 'group'
     || lk == 75808                 // '%' 'group'
     || lk == 76053                 // '{' 'group'
     || lk == 76831                 // '$' 'gt'
     || lk == 76832                 // '%' 'gt'
     || lk == 77077                 // '{' 'gt'
     || lk == 77343                 // '$' 'idiv'
     || lk == 77344                 // '%' 'idiv'
     || lk == 77589                 // '{' 'idiv'
     || lk == 77855                 // '$' 'if'
     || lk == 77856                 // '%' 'if'
     || lk == 78101                 // '{' 'if'
     || lk == 78367                 // '$' 'import'
     || lk == 78368                 // '%' 'import'
     || lk == 78613                 // '{' 'import'
     || lk == 78879                 // '$' 'in'
     || lk == 78880                 // '%' 'in'
     || lk == 79125                 // '{' 'in'
     || lk == 79391                 // '$' 'index'
     || lk == 79392                 // '%' 'index'
     || lk == 79637                 // '{' 'index'
     || lk == 81439                 // '$' 'insert'
     || lk == 81440                 // '%' 'insert'
     || lk == 81685                 // '{' 'insert'
     || lk == 81951                 // '$' 'instance'
     || lk == 81952                 // '%' 'instance'
     || lk == 82197                 // '{' 'instance'
     || lk == 82463                 // '$' 'integrity'
     || lk == 82464                 // '%' 'integrity'
     || lk == 82709                 // '{' 'integrity'
     || lk == 82975                 // '$' 'intersect'
     || lk == 82976                 // '%' 'intersect'
     || lk == 83221                 // '{' 'intersect'
     || lk == 83487                 // '$' 'into'
     || lk == 83488                 // '%' 'into'
     || lk == 83733                 // '{' 'into'
     || lk == 83999                 // '$' 'is'
     || lk == 84000                 // '%' 'is'
     || lk == 84245                 // '{' 'is'
     || lk == 84511                 // '$' 'item'
     || lk == 84512                 // '%' 'item'
     || lk == 84757                 // '{' 'item'
     || lk == 85023                 // '$' 'json'
     || lk == 85024                 // '%' 'json'
     || lk == 85269                 // '{' 'json'
     || lk == 85535                 // '$' 'json-item'
     || lk == 85536                 // '%' 'json-item'
     || lk == 85781                 // '{' 'json-item'
     || lk == 87071                 // '$' 'last'
     || lk == 87072                 // '%' 'last'
     || lk == 87317                 // '{' 'last'
     || lk == 87583                 // '$' 'lax'
     || lk == 87584                 // '%' 'lax'
     || lk == 87829                 // '{' 'lax'
     || lk == 88095                 // '$' 'le'
     || lk == 88096                 // '%' 'le'
     || lk == 88341                 // '{' 'le'
     || lk == 89119                 // '$' 'let'
     || lk == 89120                 // '%' 'let'
     || lk == 89365                 // '{' 'let'
     || lk == 90143                 // '$' 'loop'
     || lk == 90144                 // '%' 'loop'
     || lk == 90389                 // '{' 'loop'
     || lk == 91167                 // '$' 'lt'
     || lk == 91168                 // '%' 'lt'
     || lk == 91413                 // '{' 'lt'
     || lk == 91679                 // '$' 'map'
     || lk == 91680                 // '%' 'map'
     || lk == 91925                 // '{' 'map'
     || lk == 92703                 // '$' 'mod'
     || lk == 92704                 // '%' 'mod'
     || lk == 92949                 // '{' 'mod'
     || lk == 93215                 // '$' 'modify'
     || lk == 93216                 // '%' 'modify'
     || lk == 93461                 // '{' 'modify'
     || lk == 93727                 // '$' 'module'
     || lk == 93728                 // '%' 'module'
     || lk == 93973                 // '{' 'module'
     || lk == 94751                 // '$' 'namespace'
     || lk == 94752                 // '%' 'namespace'
     || lk == 94997                 // '{' 'namespace'
     || lk == 95263                 // '$' 'namespace-node'
     || lk == 95264                 // '%' 'namespace-node'
     || lk == 95509                 // '{' 'namespace-node'
     || lk == 95775                 // '$' 'ne'
     || lk == 95776                 // '%' 'ne'
     || lk == 96021                 // '{' 'ne'
     || lk == 98335                 // '$' 'node'
     || lk == 98336                 // '%' 'node'
     || lk == 98581                 // '{' 'node'
     || lk == 98847                 // '$' 'nodes'
     || lk == 98848                 // '%' 'nodes'
     || lk == 99093                 // '{' 'nodes'
     || lk == 99871                 // '$' 'object'
     || lk == 99872                 // '%' 'object'
     || lk == 100117                // '{' 'object'
     || lk == 101919                // '$' 'only'
     || lk == 101920                // '%' 'only'
     || lk == 102165                // '{' 'only'
     || lk == 102431                // '$' 'option'
     || lk == 102432                // '%' 'option'
     || lk == 102677                // '{' 'option'
     || lk == 102943                // '$' 'or'
     || lk == 102944                // '%' 'or'
     || lk == 103189                // '{' 'or'
     || lk == 103455                // '$' 'order'
     || lk == 103456                // '%' 'order'
     || lk == 103701                // '{' 'order'
     || lk == 103967                // '$' 'ordered'
     || lk == 103968                // '%' 'ordered'
     || lk == 104213                // '{' 'ordered'
     || lk == 104479                // '$' 'ordering'
     || lk == 104480                // '%' 'ordering'
     || lk == 104725                // '{' 'ordering'
     || lk == 106015                // '$' 'parent'
     || lk == 106016                // '%' 'parent'
     || lk == 106261                // '{' 'parent'
     || lk == 109087                // '$' 'preceding'
     || lk == 109088                // '%' 'preceding'
     || lk == 109333                // '{' 'preceding'
     || lk == 109599                // '$' 'preceding-sibling'
     || lk == 109600                // '%' 'preceding-sibling'
     || lk == 109845                // '{' 'preceding-sibling'
     || lk == 111135                // '$' 'processing-instruction'
     || lk == 111136                // '%' 'processing-instruction'
     || lk == 111381                // '{' 'processing-instruction'
     || lk == 112159                // '$' 'rename'
     || lk == 112160                // '%' 'rename'
     || lk == 112405                // '{' 'rename'
     || lk == 112671                // '$' 'replace'
     || lk == 112672                // '%' 'replace'
     || lk == 112917                // '{' 'replace'
     || lk == 113183                // '$' 'return'
     || lk == 113184                // '%' 'return'
     || lk == 113429                // '{' 'return'
     || lk == 113695                // '$' 'returning'
     || lk == 113696                // '%' 'returning'
     || lk == 113941                // '{' 'returning'
     || lk == 114207                // '$' 'revalidation'
     || lk == 114208                // '%' 'revalidation'
     || lk == 114453                // '{' 'revalidation'
     || lk == 115231                // '$' 'satisfies'
     || lk == 115232                // '%' 'satisfies'
     || lk == 115477                // '{' 'satisfies'
     || lk == 115743                // '$' 'schema'
     || lk == 115744                // '%' 'schema'
     || lk == 115989                // '{' 'schema'
     || lk == 116255                // '$' 'schema-attribute'
     || lk == 116256                // '%' 'schema-attribute'
     || lk == 116501                // '{' 'schema-attribute'
     || lk == 116767                // '$' 'schema-element'
     || lk == 116768                // '%' 'schema-element'
     || lk == 117013                // '{' 'schema-element'
     || lk == 117279                // '$' 'score'
     || lk == 117280                // '%' 'score'
     || lk == 117525                // '{' 'score'
     || lk == 117791                // '$' 'self'
     || lk == 117792                // '%' 'self'
     || lk == 118037                // '{' 'self'
     || lk == 120351                // '$' 'sliding'
     || lk == 120352                // '%' 'sliding'
     || lk == 120597                // '{' 'sliding'
     || lk == 120863                // '$' 'some'
     || lk == 120864                // '%' 'some'
     || lk == 121109                // '{' 'some'
     || lk == 121375                // '$' 'stable'
     || lk == 121376                // '%' 'stable'
     || lk == 121621                // '{' 'stable'
     || lk == 121887                // '$' 'start'
     || lk == 121888                // '%' 'start'
     || lk == 122133                // '{' 'start'
     || lk == 123423                // '$' 'strict'
     || lk == 123424                // '%' 'strict'
     || lk == 123669                // '{' 'strict'
     || lk == 124447                // '$' 'structured-item'
     || lk == 124448                // '%' 'structured-item'
     || lk == 124693                // '{' 'structured-item'
     || lk == 124959                // '$' 'switch'
     || lk == 124960                // '%' 'switch'
     || lk == 125205                // '{' 'switch'
     || lk == 125471                // '$' 'text'
     || lk == 125472                // '%' 'text'
     || lk == 125717                // '{' 'text'
     || lk == 127519                // '$' 'to'
     || lk == 127520                // '%' 'to'
     || lk == 127765                // '{' 'to'
     || lk == 128031                // '$' 'treat'
     || lk == 128032                // '%' 'treat'
     || lk == 128277                // '{' 'treat'
     || lk == 128543                // '$' 'try'
     || lk == 128544                // '%' 'try'
     || lk == 128789                // '{' 'try'
     || lk == 129055                // '$' 'tumbling'
     || lk == 129056                // '%' 'tumbling'
     || lk == 129301                // '{' 'tumbling'
     || lk == 129567                // '$' 'type'
     || lk == 129568                // '%' 'type'
     || lk == 129813                // '{' 'type'
     || lk == 130079                // '$' 'typeswitch'
     || lk == 130080                // '%' 'typeswitch'
     || lk == 130325                // '{' 'typeswitch'
     || lk == 130591                // '$' 'union'
     || lk == 130592                // '%' 'union'
     || lk == 130837                // '{' 'union'
     || lk == 131615                // '$' 'unordered'
     || lk == 131616                // '%' 'unordered'
     || lk == 131861                // '{' 'unordered'
     || lk == 132127                // '$' 'updating'
     || lk == 132128                // '%' 'updating'
     || lk == 132373                // '{' 'updating'
     || lk == 133663                // '$' 'validate'
     || lk == 133664                // '%' 'validate'
     || lk == 133909                // '{' 'validate'
     || lk == 134175                // '$' 'value'
     || lk == 134176                // '%' 'value'
     || lk == 134421                // '{' 'value'
     || lk == 134687                // '$' 'variable'
     || lk == 134688                // '%' 'variable'
     || lk == 134933                // '{' 'variable'
     || lk == 135199                // '$' 'version'
     || lk == 135200                // '%' 'version'
     || lk == 135445                // '{' 'version'
     || lk == 136735                // '$' 'where'
     || lk == 136736                // '%' 'where'
     || lk == 136981                // '{' 'where'
     || lk == 137247                // '$' 'while'
     || lk == 137248                // '%' 'while'
     || lk == 137493                // '{' 'while'
     || lk == 138783                // '$' 'with'
     || lk == 138784                // '%' 'with'
     || lk == 139029                // '{' 'with'
     || lk == 140831                // '$' 'xquery'
     || lk == 140832                // '%' 'xquery'
     || lk == 141077                // '{' 'xquery'
     || lk == 142101                // '{' '{'
     || lk == 143125                // '{' '{|'
     || lk == 145173)               // '{' '}'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          lk = -1;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            lk = -2;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              lk = -3;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                lk = -12;
              }
              catch (p12A)
              {
                lk = -13;
              }
            }
          }
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(7, e0, lk);
      }
    }
    switch (lk)
    {
    case -2:
      parse_AssignStatement();
      break;
    case -3:
      parse_BlockStatement();
      break;
    case 90198:                     // 'break' 'loop'
      parse_BreakStatement();
      break;
    case 90214:                     // 'continue' 'loop'
      parse_ContinueStatement();
      break;
    case 113796:                    // 'exit' 'returning'
      parse_ExitStatement();
      break;
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 117422:                    // 'let' 'score'
    case 120457:                    // 'for' 'sliding'
    case 129161:                    // 'for' 'tumbling'
      parse_FLWORStatement();
      break;
    case 17560:                     // 'if' '('
      parse_IfStatement();
      break;
    case 17652:                     // 'switch' '('
      parse_SwitchStatement();
      break;
    case 142075:                    // 'try' '{'
      parse_TryCatchStatement();
      break;
    case 17662:                     // 'typeswitch' '('
      parse_TypeswitchStatement();
      break;
    case -12:
    case 16135:                     // 'variable' '$'
      parse_VarDeclStatement();
      break;
    case -13:
      parse_WhileStatement();
      break;
    case 53:                        // ';'
      parse_VoidStatement();
      break;
    default:
      parse_ApplyStatement();
    }
    eventHandler.endNonterminal("Statement", e0);
  }

  function try_Statement()
  {
    switch (l1)
    {
    case 132:                       // 'exit'
      lookahead2W(188);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'returning' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 137:                       // 'for'
      lookahead2W(195);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'sliding' | 'to' |
                                    // 'treat' | 'tumbling' | 'union' | '|' | '||'
      break;
    case 174:                       // 'let'
      lookahead2W(191);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'score' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 251:                       // 'try'
      lookahead2W(189);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '{' | '|' | '||'
      break;
    case 263:                       // 'variable'
      lookahead2W(186);             // S^WS | '!' | '!=' | '#' | '$' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' |
                                    // '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    case 277:                       // '{'
      lookahead2W(279);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 31:                        // '$'
    case 32:                        // '%'
      lookahead2W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      break;
    case 86:                        // 'break'
    case 102:                       // 'continue'
      lookahead2W(187);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'loop' | 'lt' | 'mod' | 'ne' | 'or' | 'to' |
                                    // 'treat' | 'union' | '|' | '||'
      break;
    case 152:                       // 'if'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
    case 268:                       // 'while'
      lookahead2W(184);             // S^WS | '!' | '!=' | '#' | '(' | '(:' | '*' | '+' | '-' | '/' | '//' | ';' | '<' |
                                    // '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | 'and' | 'cast' | 'castable' |
                                    // 'contains' | 'div' | 'eq' | 'except' | 'ge' | 'gt' | 'idiv' | 'instance' |
                                    // 'intersect' | 'is' | 'le' | 'lt' | 'mod' | 'ne' | 'or' | 'to' | 'treat' |
                                    // 'union' | '|' | '||'
      break;
    default:
      lk = l1;
    }
    if (lk == 2837                  // '{' Wildcard
     || lk == 3103                  // '$' EQName^Token
     || lk == 3104                  // '%' EQName^Token
     || lk == 3349                  // '{' EQName^Token
     || lk == 4373                  // '{' IntegerLiteral
     || lk == 4885                  // '{' DecimalLiteral
     || lk == 5397                  // '{' DoubleLiteral
     || lk == 5909                  // '{' StringLiteral
     || lk == 16149                 // '{' '$'
     || lk == 16661                 // '{' '%'
     || lk == 17676                 // 'while' '('
     || lk == 17685                 // '{' '('
     || lk == 18197                 // '{' '(#'
     || lk == 20757                 // '{' '+'
     || lk == 21781                 // '{' '-'
     || lk == 22805                 // '{' '.'
     || lk == 23317                 // '{' '..'
     || lk == 23829                 // '{' '/'
     || lk == 24341                 // '{' '//'
     || lk == 27413                 // '{' ';'
     || lk == 27925                 // '{' '<'
     || lk == 28437                 // '{' '<!--'
     || lk == 30485                 // '{' '<?'
     || lk == 33045                 // '{' '?'
     || lk == 34069                 // '{' '@'
     || lk == 35093                 // '{' '['
     || lk == 35871                 // '$' 'after'
     || lk == 35872                 // '%' 'after'
     || lk == 36117                 // '{' 'after'
     || lk == 36895                 // '$' 'allowing'
     || lk == 36896                 // '%' 'allowing'
     || lk == 37141                 // '{' 'allowing'
     || lk == 37407                 // '$' 'ancestor'
     || lk == 37408                 // '%' 'ancestor'
     || lk == 37653                 // '{' 'ancestor'
     || lk == 37919                 // '$' 'ancestor-or-self'
     || lk == 37920                 // '%' 'ancestor-or-self'
     || lk == 38165                 // '{' 'ancestor-or-self'
     || lk == 38431                 // '$' 'and'
     || lk == 38432                 // '%' 'and'
     || lk == 38677                 // '{' 'and'
     || lk == 39455                 // '$' 'append'
     || lk == 39456                 // '%' 'append'
     || lk == 39701                 // '{' 'append'
     || lk == 39967                 // '$' 'array'
     || lk == 39968                 // '%' 'array'
     || lk == 40213                 // '{' 'array'
     || lk == 40479                 // '$' 'as'
     || lk == 40480                 // '%' 'as'
     || lk == 40725                 // '{' 'as'
     || lk == 40991                 // '$' 'ascending'
     || lk == 40992                 // '%' 'ascending'
     || lk == 41237                 // '{' 'ascending'
     || lk == 41503                 // '$' 'at'
     || lk == 41504                 // '%' 'at'
     || lk == 41749                 // '{' 'at'
     || lk == 42015                 // '$' 'attribute'
     || lk == 42016                 // '%' 'attribute'
     || lk == 42261                 // '{' 'attribute'
     || lk == 42527                 // '$' 'base-uri'
     || lk == 42528                 // '%' 'base-uri'
     || lk == 42773                 // '{' 'base-uri'
     || lk == 43039                 // '$' 'before'
     || lk == 43040                 // '%' 'before'
     || lk == 43285                 // '{' 'before'
     || lk == 43551                 // '$' 'boundary-space'
     || lk == 43552                 // '%' 'boundary-space'
     || lk == 43797                 // '{' 'boundary-space'
     || lk == 44063                 // '$' 'break'
     || lk == 44064                 // '%' 'break'
     || lk == 44309                 // '{' 'break'
     || lk == 45087                 // '$' 'case'
     || lk == 45088                 // '%' 'case'
     || lk == 45333                 // '{' 'case'
     || lk == 45599                 // '$' 'cast'
     || lk == 45600                 // '%' 'cast'
     || lk == 45845                 // '{' 'cast'
     || lk == 46111                 // '$' 'castable'
     || lk == 46112                 // '%' 'castable'
     || lk == 46357                 // '{' 'castable'
     || lk == 46623                 // '$' 'catch'
     || lk == 46624                 // '%' 'catch'
     || lk == 46869                 // '{' 'catch'
     || lk == 47647                 // '$' 'child'
     || lk == 47648                 // '%' 'child'
     || lk == 47893                 // '{' 'child'
     || lk == 48159                 // '$' 'collation'
     || lk == 48160                 // '%' 'collation'
     || lk == 48405                 // '{' 'collation'
     || lk == 49183                 // '$' 'comment'
     || lk == 49184                 // '%' 'comment'
     || lk == 49429                 // '{' 'comment'
     || lk == 49695                 // '$' 'constraint'
     || lk == 49696                 // '%' 'constraint'
     || lk == 49941                 // '{' 'constraint'
     || lk == 50207                 // '$' 'construction'
     || lk == 50208                 // '%' 'construction'
     || lk == 50453                 // '{' 'construction'
     || lk == 51743                 // '$' 'context'
     || lk == 51744                 // '%' 'context'
     || lk == 51989                 // '{' 'context'
     || lk == 52255                 // '$' 'continue'
     || lk == 52256                 // '%' 'continue'
     || lk == 52501                 // '{' 'continue'
     || lk == 52767                 // '$' 'copy'
     || lk == 52768                 // '%' 'copy'
     || lk == 53013                 // '{' 'copy'
     || lk == 53279                 // '$' 'copy-namespaces'
     || lk == 53280                 // '%' 'copy-namespaces'
     || lk == 53525                 // '{' 'copy-namespaces'
     || lk == 53791                 // '$' 'count'
     || lk == 53792                 // '%' 'count'
     || lk == 54037                 // '{' 'count'
     || lk == 54303                 // '$' 'decimal-format'
     || lk == 54304                 // '%' 'decimal-format'
     || lk == 54549                 // '{' 'decimal-format'
     || lk == 55327                 // '$' 'declare'
     || lk == 55328                 // '%' 'declare'
     || lk == 55573                 // '{' 'declare'
     || lk == 55839                 // '$' 'default'
     || lk == 55840                 // '%' 'default'
     || lk == 56085                 // '{' 'default'
     || lk == 56351                 // '$' 'delete'
     || lk == 56352                 // '%' 'delete'
     || lk == 56597                 // '{' 'delete'
     || lk == 56863                 // '$' 'descendant'
     || lk == 56864                 // '%' 'descendant'
     || lk == 57109                 // '{' 'descendant'
     || lk == 57375                 // '$' 'descendant-or-self'
     || lk == 57376                 // '%' 'descendant-or-self'
     || lk == 57621                 // '{' 'descendant-or-self'
     || lk == 57887                 // '$' 'descending'
     || lk == 57888                 // '%' 'descending'
     || lk == 58133                 // '{' 'descending'
     || lk == 60447                 // '$' 'div'
     || lk == 60448                 // '%' 'div'
     || lk == 60693                 // '{' 'div'
     || lk == 60959                 // '$' 'document'
     || lk == 60960                 // '%' 'document'
     || lk == 61205                 // '{' 'document'
     || lk == 61471                 // '$' 'document-node'
     || lk == 61472                 // '%' 'document-node'
     || lk == 61717                 // '{' 'document-node'
     || lk == 61983                 // '$' 'element'
     || lk == 61984                 // '%' 'element'
     || lk == 62229                 // '{' 'element'
     || lk == 62495                 // '$' 'else'
     || lk == 62496                 // '%' 'else'
     || lk == 62741                 // '{' 'else'
     || lk == 63007                 // '$' 'empty'
     || lk == 63008                 // '%' 'empty'
     || lk == 63253                 // '{' 'empty'
     || lk == 63519                 // '$' 'empty-sequence'
     || lk == 63520                 // '%' 'empty-sequence'
     || lk == 63765                 // '{' 'empty-sequence'
     || lk == 64031                 // '$' 'encoding'
     || lk == 64032                 // '%' 'encoding'
     || lk == 64277                 // '{' 'encoding'
     || lk == 64543                 // '$' 'end'
     || lk == 64544                 // '%' 'end'
     || lk == 64789                 // '{' 'end'
     || lk == 65567                 // '$' 'eq'
     || lk == 65568                 // '%' 'eq'
     || lk == 65813                 // '{' 'eq'
     || lk == 66079                 // '$' 'every'
     || lk == 66080                 // '%' 'every'
     || lk == 66325                 // '{' 'every'
     || lk == 67103                 // '$' 'except'
     || lk == 67104                 // '%' 'except'
     || lk == 67349                 // '{' 'except'
     || lk == 67615                 // '$' 'exit'
     || lk == 67616                 // '%' 'exit'
     || lk == 67861                 // '{' 'exit'
     || lk == 68127                 // '$' 'external'
     || lk == 68128                 // '%' 'external'
     || lk == 68373                 // '{' 'external'
     || lk == 68639                 // '$' 'first'
     || lk == 68640                 // '%' 'first'
     || lk == 68885                 // '{' 'first'
     || lk == 69151                 // '$' 'following'
     || lk == 69152                 // '%' 'following'
     || lk == 69397                 // '{' 'following'
     || lk == 69663                 // '$' 'following-sibling'
     || lk == 69664                 // '%' 'following-sibling'
     || lk == 69909                 // '{' 'following-sibling'
     || lk == 70175                 // '$' 'for'
     || lk == 70176                 // '%' 'for'
     || lk == 70421                 // '{' 'for'
     || lk == 72223                 // '$' 'ft-option'
     || lk == 72224                 // '%' 'ft-option'
     || lk == 72469                 // '{' 'ft-option'
     || lk == 74271                 // '$' 'function'
     || lk == 74272                 // '%' 'function'
     || lk == 74517                 // '{' 'function'
     || lk == 74783                 // '$' 'ge'
     || lk == 74784                 // '%' 'ge'
     || lk == 75029                 // '{' 'ge'
     || lk == 75807                 // '$' 'group'
     || lk == 75808                 // '%' 'group'
     || lk == 76053                 // '{' 'group'
     || lk == 76831                 // '$' 'gt'
     || lk == 76832                 // '%' 'gt'
     || lk == 77077                 // '{' 'gt'
     || lk == 77343                 // '$' 'idiv'
     || lk == 77344                 // '%' 'idiv'
     || lk == 77589                 // '{' 'idiv'
     || lk == 77855                 // '$' 'if'
     || lk == 77856                 // '%' 'if'
     || lk == 78101                 // '{' 'if'
     || lk == 78367                 // '$' 'import'
     || lk == 78368                 // '%' 'import'
     || lk == 78613                 // '{' 'import'
     || lk == 78879                 // '$' 'in'
     || lk == 78880                 // '%' 'in'
     || lk == 79125                 // '{' 'in'
     || lk == 79391                 // '$' 'index'
     || lk == 79392                 // '%' 'index'
     || lk == 79637                 // '{' 'index'
     || lk == 81439                 // '$' 'insert'
     || lk == 81440                 // '%' 'insert'
     || lk == 81685                 // '{' 'insert'
     || lk == 81951                 // '$' 'instance'
     || lk == 81952                 // '%' 'instance'
     || lk == 82197                 // '{' 'instance'
     || lk == 82463                 // '$' 'integrity'
     || lk == 82464                 // '%' 'integrity'
     || lk == 82709                 // '{' 'integrity'
     || lk == 82975                 // '$' 'intersect'
     || lk == 82976                 // '%' 'intersect'
     || lk == 83221                 // '{' 'intersect'
     || lk == 83487                 // '$' 'into'
     || lk == 83488                 // '%' 'into'
     || lk == 83733                 // '{' 'into'
     || lk == 83999                 // '$' 'is'
     || lk == 84000                 // '%' 'is'
     || lk == 84245                 // '{' 'is'
     || lk == 84511                 // '$' 'item'
     || lk == 84512                 // '%' 'item'
     || lk == 84757                 // '{' 'item'
     || lk == 85023                 // '$' 'json'
     || lk == 85024                 // '%' 'json'
     || lk == 85269                 // '{' 'json'
     || lk == 85535                 // '$' 'json-item'
     || lk == 85536                 // '%' 'json-item'
     || lk == 85781                 // '{' 'json-item'
     || lk == 87071                 // '$' 'last'
     || lk == 87072                 // '%' 'last'
     || lk == 87317                 // '{' 'last'
     || lk == 87583                 // '$' 'lax'
     || lk == 87584                 // '%' 'lax'
     || lk == 87829                 // '{' 'lax'
     || lk == 88095                 // '$' 'le'
     || lk == 88096                 // '%' 'le'
     || lk == 88341                 // '{' 'le'
     || lk == 89119                 // '$' 'let'
     || lk == 89120                 // '%' 'let'
     || lk == 89365                 // '{' 'let'
     || lk == 90143                 // '$' 'loop'
     || lk == 90144                 // '%' 'loop'
     || lk == 90389                 // '{' 'loop'
     || lk == 91167                 // '$' 'lt'
     || lk == 91168                 // '%' 'lt'
     || lk == 91413                 // '{' 'lt'
     || lk == 91679                 // '$' 'map'
     || lk == 91680                 // '%' 'map'
     || lk == 91925                 // '{' 'map'
     || lk == 92703                 // '$' 'mod'
     || lk == 92704                 // '%' 'mod'
     || lk == 92949                 // '{' 'mod'
     || lk == 93215                 // '$' 'modify'
     || lk == 93216                 // '%' 'modify'
     || lk == 93461                 // '{' 'modify'
     || lk == 93727                 // '$' 'module'
     || lk == 93728                 // '%' 'module'
     || lk == 93973                 // '{' 'module'
     || lk == 94751                 // '$' 'namespace'
     || lk == 94752                 // '%' 'namespace'
     || lk == 94997                 // '{' 'namespace'
     || lk == 95263                 // '$' 'namespace-node'
     || lk == 95264                 // '%' 'namespace-node'
     || lk == 95509                 // '{' 'namespace-node'
     || lk == 95775                 // '$' 'ne'
     || lk == 95776                 // '%' 'ne'
     || lk == 96021                 // '{' 'ne'
     || lk == 98335                 // '$' 'node'
     || lk == 98336                 // '%' 'node'
     || lk == 98581                 // '{' 'node'
     || lk == 98847                 // '$' 'nodes'
     || lk == 98848                 // '%' 'nodes'
     || lk == 99093                 // '{' 'nodes'
     || lk == 99871                 // '$' 'object'
     || lk == 99872                 // '%' 'object'
     || lk == 100117                // '{' 'object'
     || lk == 101919                // '$' 'only'
     || lk == 101920                // '%' 'only'
     || lk == 102165                // '{' 'only'
     || lk == 102431                // '$' 'option'
     || lk == 102432                // '%' 'option'
     || lk == 102677                // '{' 'option'
     || lk == 102943                // '$' 'or'
     || lk == 102944                // '%' 'or'
     || lk == 103189                // '{' 'or'
     || lk == 103455                // '$' 'order'
     || lk == 103456                // '%' 'order'
     || lk == 103701                // '{' 'order'
     || lk == 103967                // '$' 'ordered'
     || lk == 103968                // '%' 'ordered'
     || lk == 104213                // '{' 'ordered'
     || lk == 104479                // '$' 'ordering'
     || lk == 104480                // '%' 'ordering'
     || lk == 104725                // '{' 'ordering'
     || lk == 106015                // '$' 'parent'
     || lk == 106016                // '%' 'parent'
     || lk == 106261                // '{' 'parent'
     || lk == 109087                // '$' 'preceding'
     || lk == 109088                // '%' 'preceding'
     || lk == 109333                // '{' 'preceding'
     || lk == 109599                // '$' 'preceding-sibling'
     || lk == 109600                // '%' 'preceding-sibling'
     || lk == 109845                // '{' 'preceding-sibling'
     || lk == 111135                // '$' 'processing-instruction'
     || lk == 111136                // '%' 'processing-instruction'
     || lk == 111381                // '{' 'processing-instruction'
     || lk == 112159                // '$' 'rename'
     || lk == 112160                // '%' 'rename'
     || lk == 112405                // '{' 'rename'
     || lk == 112671                // '$' 'replace'
     || lk == 112672                // '%' 'replace'
     || lk == 112917                // '{' 'replace'
     || lk == 113183                // '$' 'return'
     || lk == 113184                // '%' 'return'
     || lk == 113429                // '{' 'return'
     || lk == 113695                // '$' 'returning'
     || lk == 113696                // '%' 'returning'
     || lk == 113941                // '{' 'returning'
     || lk == 114207                // '$' 'revalidation'
     || lk == 114208                // '%' 'revalidation'
     || lk == 114453                // '{' 'revalidation'
     || lk == 115231                // '$' 'satisfies'
     || lk == 115232                // '%' 'satisfies'
     || lk == 115477                // '{' 'satisfies'
     || lk == 115743                // '$' 'schema'
     || lk == 115744                // '%' 'schema'
     || lk == 115989                // '{' 'schema'
     || lk == 116255                // '$' 'schema-attribute'
     || lk == 116256                // '%' 'schema-attribute'
     || lk == 116501                // '{' 'schema-attribute'
     || lk == 116767                // '$' 'schema-element'
     || lk == 116768                // '%' 'schema-element'
     || lk == 117013                // '{' 'schema-element'
     || lk == 117279                // '$' 'score'
     || lk == 117280                // '%' 'score'
     || lk == 117525                // '{' 'score'
     || lk == 117791                // '$' 'self'
     || lk == 117792                // '%' 'self'
     || lk == 118037                // '{' 'self'
     || lk == 120351                // '$' 'sliding'
     || lk == 120352                // '%' 'sliding'
     || lk == 120597                // '{' 'sliding'
     || lk == 120863                // '$' 'some'
     || lk == 120864                // '%' 'some'
     || lk == 121109                // '{' 'some'
     || lk == 121375                // '$' 'stable'
     || lk == 121376                // '%' 'stable'
     || lk == 121621                // '{' 'stable'
     || lk == 121887                // '$' 'start'
     || lk == 121888                // '%' 'start'
     || lk == 122133                // '{' 'start'
     || lk == 123423                // '$' 'strict'
     || lk == 123424                // '%' 'strict'
     || lk == 123669                // '{' 'strict'
     || lk == 124447                // '$' 'structured-item'
     || lk == 124448                // '%' 'structured-item'
     || lk == 124693                // '{' 'structured-item'
     || lk == 124959                // '$' 'switch'
     || lk == 124960                // '%' 'switch'
     || lk == 125205                // '{' 'switch'
     || lk == 125471                // '$' 'text'
     || lk == 125472                // '%' 'text'
     || lk == 125717                // '{' 'text'
     || lk == 127519                // '$' 'to'
     || lk == 127520                // '%' 'to'
     || lk == 127765                // '{' 'to'
     || lk == 128031                // '$' 'treat'
     || lk == 128032                // '%' 'treat'
     || lk == 128277                // '{' 'treat'
     || lk == 128543                // '$' 'try'
     || lk == 128544                // '%' 'try'
     || lk == 128789                // '{' 'try'
     || lk == 129055                // '$' 'tumbling'
     || lk == 129056                // '%' 'tumbling'
     || lk == 129301                // '{' 'tumbling'
     || lk == 129567                // '$' 'type'
     || lk == 129568                // '%' 'type'
     || lk == 129813                // '{' 'type'
     || lk == 130079                // '$' 'typeswitch'
     || lk == 130080                // '%' 'typeswitch'
     || lk == 130325                // '{' 'typeswitch'
     || lk == 130591                // '$' 'union'
     || lk == 130592                // '%' 'union'
     || lk == 130837                // '{' 'union'
     || lk == 131615                // '$' 'unordered'
     || lk == 131616                // '%' 'unordered'
     || lk == 131861                // '{' 'unordered'
     || lk == 132127                // '$' 'updating'
     || lk == 132128                // '%' 'updating'
     || lk == 132373                // '{' 'updating'
     || lk == 133663                // '$' 'validate'
     || lk == 133664                // '%' 'validate'
     || lk == 133909                // '{' 'validate'
     || lk == 134175                // '$' 'value'
     || lk == 134176                // '%' 'value'
     || lk == 134421                // '{' 'value'
     || lk == 134687                // '$' 'variable'
     || lk == 134688                // '%' 'variable'
     || lk == 134933                // '{' 'variable'
     || lk == 135199                // '$' 'version'
     || lk == 135200                // '%' 'version'
     || lk == 135445                // '{' 'version'
     || lk == 136735                // '$' 'where'
     || lk == 136736                // '%' 'where'
     || lk == 136981                // '{' 'where'
     || lk == 137247                // '$' 'while'
     || lk == 137248                // '%' 'while'
     || lk == 137493                // '{' 'while'
     || lk == 138783                // '$' 'with'
     || lk == 138784                // '%' 'with'
     || lk == 139029                // '{' 'with'
     || lk == 140831                // '$' 'xquery'
     || lk == 140832                // '%' 'xquery'
     || lk == 141077                // '{' 'xquery'
     || lk == 142101                // '{' '{'
     || lk == 143125                // '{' '{|'
     || lk == 145173)               // '{' '}'
    {
      lk = memoized(7, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ApplyStatement();
          memoize(7, e0A, -1);
          lk = -15;
        }
        catch (p1A)
        {
          try
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            try_AssignStatement();
            memoize(7, e0A, -2);
            lk = -15;
          }
          catch (p2A)
          {
            try
            {
              b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
              b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
              b2 = b2A; e2 = e2A; end = e2A; }}
              try_BlockStatement();
              memoize(7, e0A, -3);
              lk = -15;
            }
            catch (p3A)
            {
              try
              {
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                try_VarDeclStatement();
                memoize(7, e0A, -12);
                lk = -15;
              }
              catch (p12A)
              {
                lk = -13;
                b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
                b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
                b2 = b2A; e2 = e2A; end = e2A; }}
                memoize(7, e0A, -13);
              }
            }
          }
        }
      }
    }
    switch (lk)
    {
    case -2:
      try_AssignStatement();
      break;
    case -3:
      try_BlockStatement();
      break;
    case 90198:                     // 'break' 'loop'
      try_BreakStatement();
      break;
    case 90214:                     // 'continue' 'loop'
      try_ContinueStatement();
      break;
    case 113796:                    // 'exit' 'returning'
      try_ExitStatement();
      break;
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 117422:                    // 'let' 'score'
    case 120457:                    // 'for' 'sliding'
    case 129161:                    // 'for' 'tumbling'
      try_FLWORStatement();
      break;
    case 17560:                     // 'if' '('
      try_IfStatement();
      break;
    case 17652:                     // 'switch' '('
      try_SwitchStatement();
      break;
    case 142075:                    // 'try' '{'
      try_TryCatchStatement();
      break;
    case 17662:                     // 'typeswitch' '('
      try_TypeswitchStatement();
      break;
    case -12:
    case 16135:                     // 'variable' '$'
      try_VarDeclStatement();
      break;
    case -13:
      try_WhileStatement();
      break;
    case 53:                        // ';'
      try_VoidStatement();
      break;
    case -15:
      break;
    default:
      try_ApplyStatement();
    }
  }

  function parse_ApplyStatement()
  {
    eventHandler.startNonterminal("ApplyStatement", e0);
    parse_ExprSimple();
    consume(53);                    // ';'
    eventHandler.endNonterminal("ApplyStatement", e0);
  }

  function try_ApplyStatement()
  {
    try_ExprSimple();
    consumeT(53);                   // ';'
  }

  function parse_AssignStatement()
  {
    eventHandler.startNonterminal("AssignStatement", e0);
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consume(52);                    // ':='
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(53);                    // ';'
    eventHandler.endNonterminal("AssignStatement", e0);
  }

  function try_AssignStatement()
  {
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(27);                // S^WS | '(:' | ':='
    consumeT(52);                   // ':='
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(53);                   // ';'
  }

  function parse_BlockStatement()
  {
    eventHandler.startNonterminal("BlockStatement", e0);
    consume(277);                   // '{'
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_Statements();
    consume(283);                   // '}'
    eventHandler.endNonterminal("BlockStatement", e0);
  }

  function try_BlockStatement()
  {
    consumeT(277);                  // '{'
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    try_Statements();
    consumeT(283);                  // '}'
  }

  function parse_BreakStatement()
  {
    eventHandler.startNonterminal("BreakStatement", e0);
    consume(86);                    // 'break'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consume(176);                   // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consume(53);                    // ';'
    eventHandler.endNonterminal("BreakStatement", e0);
  }

  function try_BreakStatement()
  {
    consumeT(86);                   // 'break'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consumeT(176);                  // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consumeT(53);                   // ';'
  }

  function parse_ContinueStatement()
  {
    eventHandler.startNonterminal("ContinueStatement", e0);
    consume(102);                   // 'continue'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consume(176);                   // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consume(53);                    // ';'
    eventHandler.endNonterminal("ContinueStatement", e0);
  }

  function try_ContinueStatement()
  {
    consumeT(102);                  // 'continue'
    lookahead1W(59);                // S^WS | '(:' | 'loop'
    consumeT(176);                  // 'loop'
    lookahead1W(28);                // S^WS | '(:' | ';'
    consumeT(53);                   // ';'
  }

  function parse_ExitStatement()
  {
    eventHandler.startNonterminal("ExitStatement", e0);
    consume(132);                   // 'exit'
    lookahead1W(71);                // S^WS | '(:' | 'returning'
    consume(222);                   // 'returning'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(53);                    // ';'
    eventHandler.endNonterminal("ExitStatement", e0);
  }

  function try_ExitStatement()
  {
    consumeT(132);                  // 'exit'
    lookahead1W(71);                // S^WS | '(:' | 'returning'
    consumeT(222);                  // 'returning'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(53);                   // ';'
  }

  function parse_FLWORStatement()
  {
    eventHandler.startNonterminal("FLWORStatement", e0);
    parse_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 221)                // 'return'
      {
        break;
      }
      whitespace();
      parse_IntermediateClause();
    }
    whitespace();
    parse_ReturnStatement();
    eventHandler.endNonterminal("FLWORStatement", e0);
  }

  function try_FLWORStatement()
  {
    try_InitialClause();
    for (;;)
    {
      lookahead1W(173);             // S^WS | '(:' | 'count' | 'for' | 'group' | 'let' | 'order' | 'return' | 'stable' |
                                    // 'where'
      if (l1 == 221)                // 'return'
      {
        break;
      }
      try_IntermediateClause();
    }
    try_ReturnStatement();
  }

  function parse_ReturnStatement()
  {
    eventHandler.startNonterminal("ReturnStatement", e0);
    consume(221);                   // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("ReturnStatement", e0);
  }

  function try_ReturnStatement()
  {
    consumeT(221);                  // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_IfStatement()
  {
    eventHandler.startNonterminal("IfStatement", e0);
    consume(152);                   // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consume(246);                   // 'then'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consume(122);                   // 'else'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("IfStatement", e0);
  }

  function try_IfStatement()
  {
    consumeT(152);                  // 'if'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(77);                // S^WS | '(:' | 'then'
    consumeT(246);                  // 'then'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
    lookahead1W(48);                // S^WS | '(:' | 'else'
    consumeT(122);                  // 'else'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchStatement()
  {
    eventHandler.startNonterminal("SwitchStatement", e0);
    consume(244);                   // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_SwitchCaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consume(109);                   // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(221);                   // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchStatement", e0);
  }

  function try_SwitchStatement()
  {
    consumeT(244);                  // 'switch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_SwitchCaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consumeT(109);                  // 'default'
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(221);                  // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_SwitchCaseStatement()
  {
    eventHandler.startNonterminal("SwitchCaseStatement", e0);
    for (;;)
    {
      consume(88);                  // 'case'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consume(221);                   // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("SwitchCaseStatement", e0);
  }

  function try_SwitchCaseStatement()
  {
    for (;;)
    {
      consumeT(88);                 // 'case'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_SwitchCaseOperand();
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consumeT(221);                  // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_TryCatchStatement()
  {
    eventHandler.startNonterminal("TryCatchStatement", e0);
    consume(251);                   // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockStatement();
    for (;;)
    {
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      consume(91);                  // 'catch'
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_CatchErrorList();
      whitespace();
      parse_BlockStatement();
      lookahead1W(282);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 91:                      // 'catch'
        lookahead2W(280);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 38491               // 'catch' 'and'
       || lk == 45659               // 'catch' 'cast'
       || lk == 46171               // 'catch' 'castable'
       || lk == 60507               // 'catch' 'div'
       || lk == 65627               // 'catch' 'eq'
       || lk == 67163               // 'catch' 'except'
       || lk == 74843               // 'catch' 'ge'
       || lk == 76891               // 'catch' 'gt'
       || lk == 77403               // 'catch' 'idiv'
       || lk == 82011               // 'catch' 'instance'
       || lk == 83035               // 'catch' 'intersect'
       || lk == 84059               // 'catch' 'is'
       || lk == 88155               // 'catch' 'le'
       || lk == 91227               // 'catch' 'lt'
       || lk == 92763               // 'catch' 'mod'
       || lk == 95835               // 'catch' 'ne'
       || lk == 103003              // 'catch' 'or'
       || lk == 127579              // 'catch' 'to'
       || lk == 128091              // 'catch' 'treat'
       || lk == 130651)             // 'catch' 'union'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(36);        // S^WS | '(:' | 'catch'
            consumeT(91);           // 'catch'
            lookahead1W(258);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            lk = -1;
          }
          catch (p1A)
          {
            lk = -2;
          }
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(8, e0, lk);
        }
      }
      if (lk != -1
       && lk != 2651                // 'catch' Wildcard
       && lk != 3163                // 'catch' EQName^Token
       && lk != 35931               // 'catch' 'after'
       && lk != 36955               // 'catch' 'allowing'
       && lk != 37467               // 'catch' 'ancestor'
       && lk != 37979               // 'catch' 'ancestor-or-self'
       && lk != 39515               // 'catch' 'append'
       && lk != 40027               // 'catch' 'array'
       && lk != 40539               // 'catch' 'as'
       && lk != 41051               // 'catch' 'ascending'
       && lk != 41563               // 'catch' 'at'
       && lk != 42075               // 'catch' 'attribute'
       && lk != 42587               // 'catch' 'base-uri'
       && lk != 43099               // 'catch' 'before'
       && lk != 43611               // 'catch' 'boundary-space'
       && lk != 44123               // 'catch' 'break'
       && lk != 45147               // 'catch' 'case'
       && lk != 46683               // 'catch' 'catch'
       && lk != 47707               // 'catch' 'child'
       && lk != 48219               // 'catch' 'collation'
       && lk != 49243               // 'catch' 'comment'
       && lk != 49755               // 'catch' 'constraint'
       && lk != 50267               // 'catch' 'construction'
       && lk != 51803               // 'catch' 'context'
       && lk != 52315               // 'catch' 'continue'
       && lk != 52827               // 'catch' 'copy'
       && lk != 53339               // 'catch' 'copy-namespaces'
       && lk != 53851               // 'catch' 'count'
       && lk != 54363               // 'catch' 'decimal-format'
       && lk != 55387               // 'catch' 'declare'
       && lk != 55899               // 'catch' 'default'
       && lk != 56411               // 'catch' 'delete'
       && lk != 56923               // 'catch' 'descendant'
       && lk != 57435               // 'catch' 'descendant-or-self'
       && lk != 57947               // 'catch' 'descending'
       && lk != 61019               // 'catch' 'document'
       && lk != 61531               // 'catch' 'document-node'
       && lk != 62043               // 'catch' 'element'
       && lk != 62555               // 'catch' 'else'
       && lk != 63067               // 'catch' 'empty'
       && lk != 63579               // 'catch' 'empty-sequence'
       && lk != 64091               // 'catch' 'encoding'
       && lk != 64603               // 'catch' 'end'
       && lk != 66139               // 'catch' 'every'
       && lk != 67675               // 'catch' 'exit'
       && lk != 68187               // 'catch' 'external'
       && lk != 68699               // 'catch' 'first'
       && lk != 69211               // 'catch' 'following'
       && lk != 69723               // 'catch' 'following-sibling'
       && lk != 70235               // 'catch' 'for'
       && lk != 72283               // 'catch' 'ft-option'
       && lk != 74331               // 'catch' 'function'
       && lk != 75867               // 'catch' 'group'
       && lk != 77915               // 'catch' 'if'
       && lk != 78427               // 'catch' 'import'
       && lk != 78939               // 'catch' 'in'
       && lk != 79451               // 'catch' 'index'
       && lk != 81499               // 'catch' 'insert'
       && lk != 82523               // 'catch' 'integrity'
       && lk != 83547               // 'catch' 'into'
       && lk != 84571               // 'catch' 'item'
       && lk != 85083               // 'catch' 'json'
       && lk != 85595               // 'catch' 'json-item'
       && lk != 87131               // 'catch' 'last'
       && lk != 87643               // 'catch' 'lax'
       && lk != 89179               // 'catch' 'let'
       && lk != 90203               // 'catch' 'loop'
       && lk != 91739               // 'catch' 'map'
       && lk != 93275               // 'catch' 'modify'
       && lk != 93787               // 'catch' 'module'
       && lk != 94811               // 'catch' 'namespace'
       && lk != 95323               // 'catch' 'namespace-node'
       && lk != 98395               // 'catch' 'node'
       && lk != 98907               // 'catch' 'nodes'
       && lk != 99931               // 'catch' 'object'
       && lk != 101979              // 'catch' 'only'
       && lk != 102491              // 'catch' 'option'
       && lk != 103515              // 'catch' 'order'
       && lk != 104027              // 'catch' 'ordered'
       && lk != 104539              // 'catch' 'ordering'
       && lk != 106075              // 'catch' 'parent'
       && lk != 109147              // 'catch' 'preceding'
       && lk != 109659              // 'catch' 'preceding-sibling'
       && lk != 111195              // 'catch' 'processing-instruction'
       && lk != 112219              // 'catch' 'rename'
       && lk != 112731              // 'catch' 'replace'
       && lk != 113243              // 'catch' 'return'
       && lk != 113755              // 'catch' 'returning'
       && lk != 114267              // 'catch' 'revalidation'
       && lk != 115291              // 'catch' 'satisfies'
       && lk != 115803              // 'catch' 'schema'
       && lk != 116315              // 'catch' 'schema-attribute'
       && lk != 116827              // 'catch' 'schema-element'
       && lk != 117339              // 'catch' 'score'
       && lk != 117851              // 'catch' 'self'
       && lk != 120411              // 'catch' 'sliding'
       && lk != 120923              // 'catch' 'some'
       && lk != 121435              // 'catch' 'stable'
       && lk != 121947              // 'catch' 'start'
       && lk != 123483              // 'catch' 'strict'
       && lk != 124507              // 'catch' 'structured-item'
       && lk != 125019              // 'catch' 'switch'
       && lk != 125531              // 'catch' 'text'
       && lk != 128603              // 'catch' 'try'
       && lk != 129115              // 'catch' 'tumbling'
       && lk != 129627              // 'catch' 'type'
       && lk != 130139              // 'catch' 'typeswitch'
       && lk != 131675              // 'catch' 'unordered'
       && lk != 132187              // 'catch' 'updating'
       && lk != 133723              // 'catch' 'validate'
       && lk != 134235              // 'catch' 'value'
       && lk != 134747              // 'catch' 'variable'
       && lk != 135259              // 'catch' 'version'
       && lk != 136795              // 'catch' 'where'
       && lk != 137307              // 'catch' 'while'
       && lk != 138843              // 'catch' 'with'
       && lk != 140891)             // 'catch' 'xquery'
      {
        break;
      }
    }
    eventHandler.endNonterminal("TryCatchStatement", e0);
  }

  function try_TryCatchStatement()
  {
    consumeT(251);                  // 'try'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockStatement();
    lookahead1W(36);                // S^WS | '(:' | 'catch'
    consumeT(91);                   // 'catch'
    lookahead1W(258);               // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_CatchErrorList();
    try_BlockStatement();
    for (;;)
    {
      lookahead1W(282);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | EOF | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' |
                                    // '..' | '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|' | '}'
      switch (l1)
      {
      case 91:                      // 'catch'
        lookahead2W(280);           // Wildcard | EQName^Token | S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | '*' |
                                    // '+' | ',' | '-' | '/' | '//' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' |
                                    // '>>' | '[' | 'after' | 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' |
                                    // 'append' | 'array' | 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' |
                                    // 'before' | 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' |
                                    // 'child' | 'collation' | 'comment' | 'constraint' | 'construction' | 'contains' |
                                    // 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' |
                                    // 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' |
                                    // 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' |
                                    // 'option' | 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' | 'to' |
                                    // 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' |
                                    // 'updating' | 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' |
                                    // 'with' | 'xquery' | '|' | '||' | '}'
        break;
      default:
        lk = l1;
      }
      if (lk == 38491               // 'catch' 'and'
       || lk == 45659               // 'catch' 'cast'
       || lk == 46171               // 'catch' 'castable'
       || lk == 60507               // 'catch' 'div'
       || lk == 65627               // 'catch' 'eq'
       || lk == 67163               // 'catch' 'except'
       || lk == 74843               // 'catch' 'ge'
       || lk == 76891               // 'catch' 'gt'
       || lk == 77403               // 'catch' 'idiv'
       || lk == 82011               // 'catch' 'instance'
       || lk == 83035               // 'catch' 'intersect'
       || lk == 84059               // 'catch' 'is'
       || lk == 88155               // 'catch' 'le'
       || lk == 91227               // 'catch' 'lt'
       || lk == 92763               // 'catch' 'mod'
       || lk == 95835               // 'catch' 'ne'
       || lk == 103003              // 'catch' 'or'
       || lk == 127579              // 'catch' 'to'
       || lk == 128091              // 'catch' 'treat'
       || lk == 130651)             // 'catch' 'union'
      {
        lk = memoized(8, e0);
        if (lk == 0)
        {
          var b0A = b0; var e0A = e0; var l1A = l1;
          var b1A = b1; var e1A = e1; var l2A = l2;
          var b2A = b2; var e2A = e2;
          try
          {
            lookahead1W(36);        // S^WS | '(:' | 'catch'
            consumeT(91);           // 'catch'
            lookahead1W(258);       // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
            try_CatchErrorList();
            try_BlockStatement();
            memoize(8, e0A, -1);
            continue;
          }
          catch (p1A)
          {
            b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
            b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
            b2 = b2A; e2 = e2A; end = e2A; }}
            memoize(8, e0A, -2);
            break;
          }
        }
      }
      if (lk != -1
       && lk != 2651                // 'catch' Wildcard
       && lk != 3163                // 'catch' EQName^Token
       && lk != 35931               // 'catch' 'after'
       && lk != 36955               // 'catch' 'allowing'
       && lk != 37467               // 'catch' 'ancestor'
       && lk != 37979               // 'catch' 'ancestor-or-self'
       && lk != 39515               // 'catch' 'append'
       && lk != 40027               // 'catch' 'array'
       && lk != 40539               // 'catch' 'as'
       && lk != 41051               // 'catch' 'ascending'
       && lk != 41563               // 'catch' 'at'
       && lk != 42075               // 'catch' 'attribute'
       && lk != 42587               // 'catch' 'base-uri'
       && lk != 43099               // 'catch' 'before'
       && lk != 43611               // 'catch' 'boundary-space'
       && lk != 44123               // 'catch' 'break'
       && lk != 45147               // 'catch' 'case'
       && lk != 46683               // 'catch' 'catch'
       && lk != 47707               // 'catch' 'child'
       && lk != 48219               // 'catch' 'collation'
       && lk != 49243               // 'catch' 'comment'
       && lk != 49755               // 'catch' 'constraint'
       && lk != 50267               // 'catch' 'construction'
       && lk != 51803               // 'catch' 'context'
       && lk != 52315               // 'catch' 'continue'
       && lk != 52827               // 'catch' 'copy'
       && lk != 53339               // 'catch' 'copy-namespaces'
       && lk != 53851               // 'catch' 'count'
       && lk != 54363               // 'catch' 'decimal-format'
       && lk != 55387               // 'catch' 'declare'
       && lk != 55899               // 'catch' 'default'
       && lk != 56411               // 'catch' 'delete'
       && lk != 56923               // 'catch' 'descendant'
       && lk != 57435               // 'catch' 'descendant-or-self'
       && lk != 57947               // 'catch' 'descending'
       && lk != 61019               // 'catch' 'document'
       && lk != 61531               // 'catch' 'document-node'
       && lk != 62043               // 'catch' 'element'
       && lk != 62555               // 'catch' 'else'
       && lk != 63067               // 'catch' 'empty'
       && lk != 63579               // 'catch' 'empty-sequence'
       && lk != 64091               // 'catch' 'encoding'
       && lk != 64603               // 'catch' 'end'
       && lk != 66139               // 'catch' 'every'
       && lk != 67675               // 'catch' 'exit'
       && lk != 68187               // 'catch' 'external'
       && lk != 68699               // 'catch' 'first'
       && lk != 69211               // 'catch' 'following'
       && lk != 69723               // 'catch' 'following-sibling'
       && lk != 70235               // 'catch' 'for'
       && lk != 72283               // 'catch' 'ft-option'
       && lk != 74331               // 'catch' 'function'
       && lk != 75867               // 'catch' 'group'
       && lk != 77915               // 'catch' 'if'
       && lk != 78427               // 'catch' 'import'
       && lk != 78939               // 'catch' 'in'
       && lk != 79451               // 'catch' 'index'
       && lk != 81499               // 'catch' 'insert'
       && lk != 82523               // 'catch' 'integrity'
       && lk != 83547               // 'catch' 'into'
       && lk != 84571               // 'catch' 'item'
       && lk != 85083               // 'catch' 'json'
       && lk != 85595               // 'catch' 'json-item'
       && lk != 87131               // 'catch' 'last'
       && lk != 87643               // 'catch' 'lax'
       && lk != 89179               // 'catch' 'let'
       && lk != 90203               // 'catch' 'loop'
       && lk != 91739               // 'catch' 'map'
       && lk != 93275               // 'catch' 'modify'
       && lk != 93787               // 'catch' 'module'
       && lk != 94811               // 'catch' 'namespace'
       && lk != 95323               // 'catch' 'namespace-node'
       && lk != 98395               // 'catch' 'node'
       && lk != 98907               // 'catch' 'nodes'
       && lk != 99931               // 'catch' 'object'
       && lk != 101979              // 'catch' 'only'
       && lk != 102491              // 'catch' 'option'
       && lk != 103515              // 'catch' 'order'
       && lk != 104027              // 'catch' 'ordered'
       && lk != 104539              // 'catch' 'ordering'
       && lk != 106075              // 'catch' 'parent'
       && lk != 109147              // 'catch' 'preceding'
       && lk != 109659              // 'catch' 'preceding-sibling'
       && lk != 111195              // 'catch' 'processing-instruction'
       && lk != 112219              // 'catch' 'rename'
       && lk != 112731              // 'catch' 'replace'
       && lk != 113243              // 'catch' 'return'
       && lk != 113755              // 'catch' 'returning'
       && lk != 114267              // 'catch' 'revalidation'
       && lk != 115291              // 'catch' 'satisfies'
       && lk != 115803              // 'catch' 'schema'
       && lk != 116315              // 'catch' 'schema-attribute'
       && lk != 116827              // 'catch' 'schema-element'
       && lk != 117339              // 'catch' 'score'
       && lk != 117851              // 'catch' 'self'
       && lk != 120411              // 'catch' 'sliding'
       && lk != 120923              // 'catch' 'some'
       && lk != 121435              // 'catch' 'stable'
       && lk != 121947              // 'catch' 'start'
       && lk != 123483              // 'catch' 'strict'
       && lk != 124507              // 'catch' 'structured-item'
       && lk != 125019              // 'catch' 'switch'
       && lk != 125531              // 'catch' 'text'
       && lk != 128603              // 'catch' 'try'
       && lk != 129115              // 'catch' 'tumbling'
       && lk != 129627              // 'catch' 'type'
       && lk != 130139              // 'catch' 'typeswitch'
       && lk != 131675              // 'catch' 'unordered'
       && lk != 132187              // 'catch' 'updating'
       && lk != 133723              // 'catch' 'validate'
       && lk != 134235              // 'catch' 'value'
       && lk != 134747              // 'catch' 'variable'
       && lk != 135259              // 'catch' 'version'
       && lk != 136795              // 'catch' 'where'
       && lk != 137307              // 'catch' 'while'
       && lk != 138843              // 'catch' 'with'
       && lk != 140891)             // 'catch' 'xquery'
      {
        break;
      }
      lookahead1W(36);              // S^WS | '(:' | 'catch'
      consumeT(91);                 // 'catch'
      lookahead1W(258);             // Wildcard | EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_CatchErrorList();
      try_BlockStatement();
    }
  }

  function parse_TypeswitchStatement()
  {
    eventHandler.startNonterminal("TypeswitchStatement", e0);
    consume(254);                   // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      whitespace();
      parse_CaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consume(109);                   // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(221);                   // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("TypeswitchStatement", e0);
  }

  function try_TypeswitchStatement()
  {
    consumeT(254);                  // 'typeswitch'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    for (;;)
    {
      lookahead1W(35);              // S^WS | '(:' | 'case'
      try_CaseStatement();
      lookahead1W(113);             // S^WS | '(:' | 'case' | 'default'
      if (l1 != 88)                 // 'case'
      {
        break;
      }
    }
    consumeT(109);                  // 'default'
    lookahead1W(95);                // S^WS | '$' | '(:' | 'return'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
    }
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(221);                  // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_CaseStatement()
  {
    eventHandler.startNonterminal("CaseStatement", e0);
    consume(88);                    // 'case'
    lookahead1W(265);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consume(79);                  // 'as'
    }
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consume(221);                   // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("CaseStatement", e0);
  }

  function try_CaseStatement()
  {
    consumeT(88);                   // 'case'
    lookahead1W(265);               // EQName^Token | S^WS | '$' | '%' | '(' | '(:' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    if (l1 == 31)                   // '$'
    {
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(30);              // S^WS | '(:' | 'as'
      consumeT(79);                 // 'as'
    }
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_SequenceType();
    lookahead1W(70);                // S^WS | '(:' | 'return'
    consumeT(221);                  // 'return'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_VarDeclStatement()
  {
    eventHandler.startNonterminal("VarDeclStatement", e0);
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      whitespace();
      parse_Annotation();
    }
    consume(263);                   // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consume(31);                    // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_VarName();
    lookahead1W(157);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_TypeDeclaration();
    }
    lookahead1W(145);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 52)                   // ':='
    {
      consume(52);                  // ':='
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consume(31);                  // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      whitespace();
      parse_VarName();
      lookahead1W(157);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 79)                 // 'as'
      {
        whitespace();
        parse_TypeDeclaration();
      }
      lookahead1W(145);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consume(52);                // ':='
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
    }
    consume(53);                    // ';'
    eventHandler.endNonterminal("VarDeclStatement", e0);
  }

  function try_VarDeclStatement()
  {
    for (;;)
    {
      lookahead1W(98);              // S^WS | '%' | '(:' | 'variable'
      if (l1 != 32)                 // '%'
      {
        break;
      }
      try_Annotation();
    }
    consumeT(263);                  // 'variable'
    lookahead1W(21);                // S^WS | '$' | '(:'
    consumeT(31);                   // '$'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    try_VarName();
    lookahead1W(157);               // S^WS | '(:' | ',' | ':=' | ';' | 'as'
    if (l1 == 79)                   // 'as'
    {
      try_TypeDeclaration();
    }
    lookahead1W(145);               // S^WS | '(:' | ',' | ':=' | ';'
    if (l1 == 52)                   // ':='
    {
      consumeT(52);                 // ':='
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(21);              // S^WS | '$' | '(:'
      consumeT(31);                 // '$'
      lookahead1W(255);             // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
      try_VarName();
      lookahead1W(157);             // S^WS | '(:' | ',' | ':=' | ';' | 'as'
      if (l1 == 79)                 // 'as'
      {
        try_TypeDeclaration();
      }
      lookahead1W(145);             // S^WS | '(:' | ',' | ':=' | ';'
      if (l1 == 52)                 // ':='
      {
        consumeT(52);               // ':='
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
    }
    consumeT(53);                   // ';'
  }

  function parse_WhileStatement()
  {
    eventHandler.startNonterminal("WhileStatement", e0);
    consume(268);                   // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Expr();
    consume(37);                    // ')'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_Statement();
    eventHandler.endNonterminal("WhileStatement", e0);
  }

  function try_WhileStatement()
  {
    consumeT(268);                  // 'while'
    lookahead1W(22);                // S^WS | '(' | '(:'
    consumeT(34);                   // '('
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Expr();
    consumeT(37);                   // ')'
    lookahead1W(273);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_Statement();
  }

  function parse_VoidStatement()
  {
    eventHandler.startNonterminal("VoidStatement", e0);
    consume(53);                    // ';'
    eventHandler.endNonterminal("VoidStatement", e0);
  }

  function try_VoidStatement()
  {
    consumeT(53);                   // ';'
  }

  function parse_ExprSingle()
  {
    eventHandler.startNonterminal("ExprSingle", e0);
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'sliding' | 'stable' | 'start' | 'to' | 'treat' | 'tumbling' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 174:                       // 'let'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'score' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
      break;
    case 251:                       // 'try'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 152:                       // 'if'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
      lookahead2W(228);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 117422:                    // 'let' 'score'
    case 120457:                    // 'for' 'sliding'
    case 129161:                    // 'for' 'tumbling'
      parse_FLWORExpr();
      break;
    case 17560:                     // 'if' '('
      parse_IfExpr();
      break;
    case 17652:                     // 'switch' '('
      parse_SwitchExpr();
      break;
    case 142075:                    // 'try' '{'
      parse_TryCatchExpr();
      break;
    case 17662:                     // 'typeswitch' '('
      parse_TypeswitchExpr();
      break;
    default:
      parse_ExprSimple();
    }
    eventHandler.endNonterminal("ExprSingle", e0);
  }

  function try_ExprSingle()
  {
    switch (l1)
    {
    case 137:                       // 'for'
      lookahead2W(235);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'sliding' | 'stable' | 'start' | 'to' | 'treat' | 'tumbling' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 174:                       // 'let'
      lookahead2W(232);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'score' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
      break;
    case 251:                       // 'try'
      lookahead2W(231);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '{' | '|' |
                                    // '||' | '|}' | '}'
      break;
    case 152:                       // 'if'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
      lookahead2W(228);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    switch (lk)
    {
    case 16009:                     // 'for' '$'
    case 16046:                     // 'let' '$'
    case 117422:                    // 'let' 'score'
    case 120457:                    // 'for' 'sliding'
    case 129161:                    // 'for' 'tumbling'
      try_FLWORExpr();
      break;
    case 17560:                     // 'if' '('
      try_IfExpr();
      break;
    case 17652:                     // 'switch' '('
      try_SwitchExpr();
      break;
    case 142075:                    // 'try' '{'
      try_TryCatchExpr();
      break;
    case 17662:                     // 'typeswitch' '('
      try_TypeswitchExpr();
      break;
    default:
      try_ExprSimple();
    }
  }

  function parse_ExprSimple()
  {
    eventHandler.startNonterminal("ExprSimple", e0);
    switch (l1)
    {
    case 77:                        // 'append'
      lookahead2W(230);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
      break;
    case 219:                       // 'rename'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 220:                       // 'replace'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'value' | 'where' |
                                    // 'with' | '|' | '||' | '|}' | '}'
      break;
    case 110:                       // 'delete'
    case 159:                       // 'insert'
      lookahead2W(236);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 103:                       // 'copy'
    case 129:                       // 'every'
    case 236:                       // 'some'
      lookahead2W(229);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 134364)               // 'replace' 'value'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ReplaceExpr();
          lk = -6;
        }
        catch (p6A)
        {
          lk = -11;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(9, e0, lk);
      }
    }
    switch (lk)
    {
    case 16001:                     // 'every' '$'
    case 16108:                     // 'some' '$'
      parse_QuantifiedExpr();
      break;
    case 98463:                     // 'insert' 'node'
    case 98975:                     // 'insert' 'nodes'
      parse_InsertExpr();
      break;
    case 98414:                     // 'delete' 'node'
    case 98926:                     // 'delete' 'nodes'
      parse_DeleteExpr();
      break;
    case 98523:                     // 'rename' 'node'
      parse_RenameExpr();
      break;
    case -6:
    case 98524:                     // 'replace' 'node'
      parse_ReplaceExpr();
      break;
    case 15975:                     // 'copy' '$'
      parse_TransformExpr();
      break;
    case 85102:                     // 'delete' 'json'
      parse_JSONDeleteExpr();
      break;
    case 85151:                     // 'insert' 'json'
      parse_JSONInsertExpr();
      break;
    case 85211:                     // 'rename' 'json'
      parse_JSONRenameExpr();
      break;
    case -11:
      parse_JSONReplaceExpr();
      break;
    case 85069:                     // 'append' 'json'
      parse_JSONAppendExpr();
      break;
    default:
      parse_OrExpr();
    }
    eventHandler.endNonterminal("ExprSimple", e0);
  }

  function try_ExprSimple()
  {
    switch (l1)
    {
    case 77:                        // 'append'
      lookahead2W(230);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' |
                                    // '|' | '||' | '|}' | '}'
      break;
    case 219:                       // 'rename'
      lookahead2W(233);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' |
                                    // 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' |
                                    // 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 220:                       // 'replace'
      lookahead2W(234);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'node' | 'only' | 'or' | 'order' | 'return' |
                                    // 'satisfies' | 'stable' | 'start' | 'to' | 'treat' | 'union' | 'value' | 'where' |
                                    // 'with' | '|' | '||' | '|}' | '}'
      break;
    case 110:                       // 'delete'
    case 159:                       // 'insert'
      lookahead2W(236);             // S^WS | EOF | '!' | '!=' | '#' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' | '/' |
                                    // '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' | ']' |
                                    // 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'json' | 'le' |
                                    // 'let' | 'lt' | 'mod' | 'modify' | 'ne' | 'node' | 'nodes' | 'only' | 'or' |
                                    // 'order' | 'return' | 'satisfies' | 'stable' | 'start' | 'to' | 'treat' |
                                    // 'union' | 'where' | 'with' | '|' | '||' | '|}' | '}'
      break;
    case 103:                       // 'copy'
    case 129:                       // 'every'
    case 236:                       // 'some'
      lookahead2W(229);             // S^WS | EOF | '!' | '!=' | '#' | '$' | '(' | '(:' | ')' | '*' | '+' | ',' | '-' |
                                    // '/' | '//' | ':' | ';' | '<' | '<<' | '<=' | '=' | '>' | '>=' | '>>' | '[' |
                                    // ']' | 'after' | 'and' | 'as' | 'ascending' | 'at' | 'before' | 'case' | 'cast' |
                                    // 'castable' | 'collation' | 'contains' | 'count' | 'default' | 'descending' |
                                    // 'div' | 'else' | 'empty' | 'end' | 'eq' | 'except' | 'for' | 'ge' | 'group' |
                                    // 'gt' | 'idiv' | 'instance' | 'intersect' | 'into' | 'is' | 'le' | 'let' | 'lt' |
                                    // 'mod' | 'modify' | 'ne' | 'only' | 'or' | 'order' | 'return' | 'satisfies' |
                                    // 'stable' | 'start' | 'to' | 'treat' | 'union' | 'where' | 'with' | '|' | '||' |
                                    // '|}' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 134364)               // 'replace' 'value'
    {
      lk = memoized(9, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_ReplaceExpr();
          memoize(9, e0A, -6);
          lk = -13;
        }
        catch (p6A)
        {
          lk = -11;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(9, e0A, -11);
        }
      }
    }
    switch (lk)
    {
    case 16001:                     // 'every' '$'
    case 16108:                     // 'some' '$'
      try_QuantifiedExpr();
      break;
    case 98463:                     // 'insert' 'node'
    case 98975:                     // 'insert' 'nodes'
      try_InsertExpr();
      break;
    case 98414:                     // 'delete' 'node'
    case 98926:                     // 'delete' 'nodes'
      try_DeleteExpr();
      break;
    case 98523:                     // 'rename' 'node'
      try_RenameExpr();
      break;
    case -6:
    case 98524:                     // 'replace' 'node'
      try_ReplaceExpr();
      break;
    case 15975:                     // 'copy' '$'
      try_TransformExpr();
      break;
    case 85102:                     // 'delete' 'json'
      try_JSONDeleteExpr();
      break;
    case 85151:                     // 'insert' 'json'
      try_JSONInsertExpr();
      break;
    case 85211:                     // 'rename' 'json'
      try_JSONRenameExpr();
      break;
    case -11:
      try_JSONReplaceExpr();
      break;
    case 85069:                     // 'append' 'json'
      try_JSONAppendExpr();
      break;
    case -13:
      break;
    default:
      try_OrExpr();
    }
  }

  function parse_JSONDeleteExpr()
  {
    eventHandler.startNonterminal("JSONDeleteExpr", e0);
    consume(110);                   // 'delete'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(166);                   // 'json'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_PostfixExpr();
    eventHandler.endNonterminal("JSONDeleteExpr", e0);
  }

  function try_JSONDeleteExpr()
  {
    consumeT(110);                  // 'delete'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(166);                  // 'json'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_PostfixExpr();
  }

  function parse_JSONInsertExpr()
  {
    eventHandler.startNonterminal("JSONInsertExpr", e0);
    switch (l1)
    {
    case 159:                       // 'insert'
      lookahead2W(56);              // S^WS | '(:' | 'json'
      break;
    default:
      lk = l1;
    }
    lk = memoized(10, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        consumeT(159);              // 'insert'
        lookahead1W(56);            // S^WS | '(:' | 'json'
        consumeT(166);              // 'json'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
        consumeT(163);              // 'into'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
        switch (l1)
        {
        case 81:                    // 'at'
          lookahead2W(69);          // S^WS | '(:' | 'position'
          break;
        default:
          lk = l1;
        }
        if (lk == 108625)           // 'at' 'position'
        {
          lk = memoized(11, e0);
          if (lk == 0)
          {
            var b0B = b0; var e0B = e0; var l1B = l1;
            var b1B = b1; var e1B = e1; var l2B = l2;
            var b2B = b2; var e2B = e2;
            try
            {
              consumeT(81);         // 'at'
              lookahead1W(69);      // S^WS | '(:' | 'position'
              consumeT(212);        // 'position'
              lookahead1W(271);     // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
              try_ExprSingle();
              memoize(11, e0B, -1);
            }
            catch (p1B)
            {
              b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
              b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
              b2 = b2B; e2 = e2B; end = e2B; }}
              memoize(11, e0B, -2);
            }
            lk = -2;
          }
        }
        if (lk == -1)
        {
          consumeT(81);             // 'at'
          lookahead1W(69);          // S^WS | '(:' | 'position'
          consumeT(212);            // 'position'
          lookahead1W(271);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
          try_ExprSingle();
        }
        lk = -1;
      }
      catch (p1A)
      {
        lk = -2;
      }
      b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
      b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
      b2 = b2A; e2 = e2A; end = e2A; }}
      memoize(10, e0, lk);
    }
    switch (lk)
    {
    case -1:
      consume(159);                 // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      consume(166);                 // 'json'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
      consume(163);                 // 'into'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(69);            // S^WS | '(:' | 'position'
        break;
      default:
        lk = l1;
      }
      if (lk == 108625)             // 'at' 'position'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            consumeT(81);           // 'at'
            lookahead1W(69);        // S^WS | '(:' | 'position'
            consumeT(212);          // 'position'
            lookahead1W(271);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_ExprSingle();
            lk = -1;
          }
          catch (p1B)
          {
            lk = -2;
          }
          b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
          b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
          b2 = b2B; e2 = e2B; end = e2B; }}
          memoize(11, e0, lk);
        }
      }
      if (lk == -1)
      {
        consume(81);                // 'at'
        lookahead1W(69);            // S^WS | '(:' | 'position'
        consume(212);               // 'position'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        whitespace();
        parse_ExprSingle();
      }
      break;
    default:
      consume(159);                 // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      consume(166);                 // 'json'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PairConstructorList();
      consume(163);                 // 'into'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_ExprSingle();
    }
    eventHandler.endNonterminal("JSONInsertExpr", e0);
  }

  function try_JSONInsertExpr()
  {
    switch (l1)
    {
    case 159:                       // 'insert'
      lookahead2W(56);              // S^WS | '(:' | 'json'
      break;
    default:
      lk = l1;
    }
    lk = memoized(10, e0);
    if (lk == 0)
    {
      var b0A = b0; var e0A = e0; var l1A = l1;
      var b1A = b1; var e1A = e1; var l2A = l2;
      var b2A = b2; var e2A = e2;
      try
      {
        consumeT(159);              // 'insert'
        lookahead1W(56);            // S^WS | '(:' | 'json'
        consumeT(166);              // 'json'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
        consumeT(163);              // 'into'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
        switch (l1)
        {
        case 81:                    // 'at'
          lookahead2W(69);          // S^WS | '(:' | 'position'
          break;
        default:
          lk = l1;
        }
        if (lk == 108625)           // 'at' 'position'
        {
          lk = memoized(11, e0);
          if (lk == 0)
          {
            var b0B = b0; var e0B = e0; var l1B = l1;
            var b1B = b1; var e1B = e1; var l2B = l2;
            var b2B = b2; var e2B = e2;
            try
            {
              consumeT(81);         // 'at'
              lookahead1W(69);      // S^WS | '(:' | 'position'
              consumeT(212);        // 'position'
              lookahead1W(271);     // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
              try_ExprSingle();
              memoize(11, e0B, -1);
            }
            catch (p1B)
            {
              b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
              b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
              b2 = b2B; e2 = e2B; end = e2B; }}
              memoize(11, e0B, -2);
            }
            lk = -2;
          }
        }
        if (lk == -1)
        {
          consumeT(81);             // 'at'
          lookahead1W(69);          // S^WS | '(:' | 'position'
          consumeT(212);            // 'position'
          lookahead1W(271);         // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
          try_ExprSingle();
        }
        memoize(10, e0A, -1);
        lk = -3;
      }
      catch (p1A)
      {
        lk = -2;
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(10, e0A, -2);
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(159);                // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      consumeT(166);                // 'json'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
      consumeT(163);                // 'into'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
      switch (l1)
      {
      case 81:                      // 'at'
        lookahead2W(69);            // S^WS | '(:' | 'position'
        break;
      default:
        lk = l1;
      }
      if (lk == 108625)             // 'at' 'position'
      {
        lk = memoized(11, e0);
        if (lk == 0)
        {
          var b0B = b0; var e0B = e0; var l1B = l1;
          var b1B = b1; var e1B = e1; var l2B = l2;
          var b2B = b2; var e2B = e2;
          try
          {
            consumeT(81);           // 'at'
            lookahead1W(69);        // S^WS | '(:' | 'position'
            consumeT(212);          // 'position'
            lookahead1W(271);       // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
            try_ExprSingle();
            memoize(11, e0B, -1);
          }
          catch (p1B)
          {
            b0 = b0B; e0 = e0B; l1 = l1B; if (l1 == 0) {end = e0B;} else {
            b1 = b1B; e1 = e1B; l2 = l2B; if (l2 == 0) {end = e1B;} else {
            b2 = b2B; e2 = e2B; end = e2B; }}
            memoize(11, e0B, -2);
          }
          lk = -2;
        }
      }
      if (lk == -1)
      {
        consumeT(81);               // 'at'
        lookahead1W(69);            // S^WS | '(:' | 'position'
        consumeT(212);              // 'position'
        lookahead1W(271);           // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
        try_ExprSingle();
      }
      break;
    case -3:
      break;
    default:
      consumeT(159);                // 'insert'
      lookahead1W(56);              // S^WS | '(:' | 'json'
      consumeT(166);                // 'json'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_PairConstructorList();
      consumeT(163);                // 'into'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_ExprSingle();
    }
  }

  function parse_JSONRenameExpr()
  {
    eventHandler.startNonterminal("JSONRenameExpr", e0);
    consume(219);                   // 'rename'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(166);                   // 'json'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_PostfixExpr();
    consume(79);                    // 'as'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONRenameExpr", e0);
  }

  function try_JSONRenameExpr()
  {
    consumeT(219);                  // 'rename'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(166);                  // 'json'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_PostfixExpr();
    consumeT(79);                   // 'as'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONReplaceExpr()
  {
    eventHandler.startNonterminal("JSONReplaceExpr", e0);
    consume(220);                   // 'replace'
    lookahead1W(82);                // S^WS | '(:' | 'value'
    consume(262);                   // 'value'
    lookahead1W(64);                // S^WS | '(:' | 'of'
    consume(197);                   // 'of'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(166);                   // 'json'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    whitespace();
    parse_PostfixExpr();
    consume(271);                   // 'with'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONReplaceExpr", e0);
  }

  function try_JSONReplaceExpr()
  {
    consumeT(220);                  // 'replace'
    lookahead1W(82);                // S^WS | '(:' | 'value'
    consumeT(262);                  // 'value'
    lookahead1W(64);                // S^WS | '(:' | 'of'
    consumeT(197);                  // 'of'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(166);                  // 'json'
    lookahead1W(267);               // EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral | StringLiteral |
                                    // S^WS | '$' | '%' | '(' | '(:' | '.' | '<' | '<!--' | '<?' | '?' | '[' | 'after' |
                                    // 'allowing' | 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' |
                                    // 'as' | 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' |
                                    // 'boundary-space' | 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' |
                                    // 'collation' | 'comment' | 'constraint' | 'construction' | 'context' |
                                    // 'continue' | 'copy' | 'copy-namespaces' | 'count' | 'decimal-format' |
                                    // 'declare' | 'default' | 'delete' | 'descendant' | 'descendant-or-self' |
                                    // 'descending' | 'div' | 'document' | 'document-node' | 'element' | 'else' |
                                    // 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' | 'every' | 'except' |
                                    // 'exit' | 'external' | 'first' | 'following' | 'following-sibling' | 'for' |
                                    // 'ft-option' | 'function' | 'ge' | 'group' | 'gt' | 'idiv' | 'if' | 'import' |
                                    // 'in' | 'index' | 'insert' | 'instance' | 'integrity' | 'intersect' | 'into' |
                                    // 'is' | 'item' | 'json' | 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' |
                                    // 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' | 'namespace-node' |
                                    // 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' | 'or' | 'order' |
                                    // 'ordered' | 'ordering' | 'parent' | 'preceding' | 'preceding-sibling' |
                                    // 'processing-instruction' | 'rename' | 'replace' | 'return' | 'returning' |
                                    // 'revalidation' | 'satisfies' | 'schema' | 'schema-attribute' | 'schema-element' |
                                    // 'score' | 'self' | 'sliding' | 'some' | 'stable' | 'start' | 'strict' |
                                    // 'structured-item' | 'switch' | 'text' | 'to' | 'treat' | 'try' | 'tumbling' |
                                    // 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' | 'validate' |
                                    // 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' | 'xquery' | '{' |
                                    // '{|'
    try_PostfixExpr();
    consumeT(271);                  // 'with'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_JSONAppendExpr()
  {
    eventHandler.startNonterminal("JSONAppendExpr", e0);
    consume(77);                    // 'append'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consume(166);                   // 'json'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    consume(163);                   // 'into'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("JSONAppendExpr", e0);
  }

  function try_JSONAppendExpr()
  {
    consumeT(77);                   // 'append'
    lookahead1W(56);                // S^WS | '(:' | 'json'
    consumeT(166);                  // 'json'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
    consumeT(163);                  // 'into'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_CommonContent()
  {
    eventHandler.startNonterminal("CommonContent", e0);
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      consume(12);                  // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      consume(23);                  // CharRef
      break;
    case 278:                       // '{{'
      consume(278);                 // '{{'
      break;
    case 284:                       // '}}'
      consume(284);                 // '}}'
      break;
    default:
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CommonContent", e0);
  }

  function try_CommonContent()
  {
    switch (l1)
    {
    case 12:                        // PredefinedEntityRef
      consumeT(12);                 // PredefinedEntityRef
      break;
    case 23:                        // CharRef
      consumeT(23);                 // CharRef
      break;
    case 278:                       // '{{'
      consumeT(278);                // '{{'
      break;
    case 284:                       // '}}'
      consumeT(284);                // '}}'
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_ContentExpr()
  {
    eventHandler.startNonterminal("ContentExpr", e0);
    parse_StatementsAndExpr();
    eventHandler.endNonterminal("ContentExpr", e0);
  }

  function try_ContentExpr()
  {
    try_StatementsAndExpr();
  }

  function parse_CompDocConstructor()
  {
    eventHandler.startNonterminal("CompDocConstructor", e0);
    consume(119);                   // 'document'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompDocConstructor", e0);
  }

  function try_CompDocConstructor()
  {
    consumeT(119);                  // 'document'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompAttrConstructor()
  {
    eventHandler.startNonterminal("CompAttrConstructor", e0);
    consume(82);                    // 'attribute'
    lookahead1W(260);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consume(277);                 // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(283);                 // '}'
      break;
    default:
      whitespace();
      parse_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      lookahead2W(279);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 145173)               // '{' '}'
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(277);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(283);            // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(12, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      consume(277);                 // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consume(283);                 // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompAttrConstructor", e0);
  }

  function try_CompAttrConstructor()
  {
    consumeT(82);                   // 'attribute'
    lookahead1W(260);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consumeT(277);                // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(283);                // '}'
      break;
    default:
      try_EQName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      lookahead2W(279);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 145173)               // '{' '}'
    {
      lk = memoized(12, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(277);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(283);            // '}'
          memoize(12, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(12, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(277);                // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consumeT(283);                // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompPIConstructor()
  {
    eventHandler.startNonterminal("CompPIConstructor", e0);
    consume(217);                   // 'processing-instruction'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consume(277);                 // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_Expr();
      consume(283);                 // '}'
      break;
    default:
      whitespace();
      parse_NCName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      lookahead2W(279);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 145173)               // '{' '}'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(277);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(283);            // '}'
          lk = -1;
        }
        catch (p1A)
        {
          lk = -2;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(13, e0, lk);
      }
    }
    switch (lk)
    {
    case -1:
      consume(277);                 // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consume(283);                 // '}'
      break;
    default:
      whitespace();
      parse_BlockExpr();
    }
    eventHandler.endNonterminal("CompPIConstructor", e0);
  }

  function try_CompPIConstructor()
  {
    consumeT(217);                  // 'processing-instruction'
    lookahead1W(251);               // NCName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consumeT(277);                // '{'
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_Expr();
      consumeT(283);                // '}'
      break;
    default:
      try_NCName();
    }
    lookahead1W(87);                // S^WS | '(:' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      lookahead2W(279);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    default:
      lk = l1;
    }
    if (lk == 145173)               // '{' '}'
    {
      lk = memoized(13, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          consumeT(277);            // '{'
          lookahead1W(88);          // S^WS | '(:' | '}'
          consumeT(283);            // '}'
          memoize(13, e0A, -1);
          lk = -3;
        }
        catch (p1A)
        {
          lk = -2;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(13, e0A, -2);
        }
      }
    }
    switch (lk)
    {
    case -1:
      consumeT(277);                // '{'
      lookahead1W(88);              // S^WS | '(:' | '}'
      consumeT(283);                // '}'
      break;
    case -3:
      break;
    default:
      try_BlockExpr();
    }
  }

  function parse_CompCommentConstructor()
  {
    eventHandler.startNonterminal("CompCommentConstructor", e0);
    consume(96);                    // 'comment'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompCommentConstructor", e0);
  }

  function try_CompCommentConstructor()
  {
    consumeT(96);                   // 'comment'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_CompTextConstructor()
  {
    eventHandler.startNonterminal("CompTextConstructor", e0);
    consume(245);                   // 'text'
    lookahead1W(87);                // S^WS | '(:' | '{'
    whitespace();
    parse_BlockExpr();
    eventHandler.endNonterminal("CompTextConstructor", e0);
  }

  function try_CompTextConstructor()
  {
    consumeT(245);                  // 'text'
    lookahead1W(87);                // S^WS | '(:' | '{'
    try_BlockExpr();
  }

  function parse_PrimaryExpr()
  {
    eventHandler.startNonterminal("PrimaryExpr", e0);
    switch (l1)
    {
    case 185:                       // 'namespace'
      lookahead2W(257);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 217:                       // 'processing-instruction'
      lookahead2W(254);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 277:                       // '{'
      lookahead2W(279);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 82:                        // 'attribute'
    case 121:                       // 'element'
      lookahead2W(261);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 96:                        // 'comment'
    case 245:                       // 'text'
      lookahead2W(93);              // S^WS | '#' | '(:' | '{'
      break;
    case 119:                       // 'document'
    case 179:                       // 'map'
    case 203:                       // 'ordered'
    case 257:                       // 'unordered'
      lookahead2W(139);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 75:                        // 'and'
    case 77:                        // 'append'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 93:                        // 'child'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 166:                       // 'json'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 181:                       // 'mod'
    case 182:                       // 'modify'
    case 183:                       // 'module'
    case 187:                       // 'ne'
    case 193:                       // 'nodes'
    case 195:                       // 'object'
    case 199:                       // 'only'
    case 200:                       // 'option'
    case 201:                       // 'or'
    case 202:                       // 'order'
    case 204:                       // 'ordering'
    case 207:                       // 'parent'
    case 213:                       // 'preceding'
    case 214:                       // 'preceding-sibling'
    case 219:                       // 'rename'
    case 220:                       // 'replace'
    case 221:                       // 'return'
    case 222:                       // 'returning'
    case 223:                       // 'revalidation'
    case 225:                       // 'satisfies'
    case 226:                       // 'schema'
    case 229:                       // 'score'
    case 230:                       // 'self'
    case 235:                       // 'sliding'
    case 236:                       // 'some'
    case 237:                       // 'stable'
    case 238:                       // 'start'
    case 241:                       // 'strict'
    case 249:                       // 'to'
    case 250:                       // 'treat'
    case 251:                       // 'try'
    case 252:                       // 'tumbling'
    case 253:                       // 'type'
    case 255:                       // 'union'
    case 258:                       // 'updating'
    case 261:                       // 'validate'
    case 262:                       // 'value'
    case 263:                       // 'variable'
    case 264:                       // 'version'
    case 267:                       // 'where'
    case 268:                       // 'while'
    case 271:                       // 'with'
    case 275:                       // 'xquery'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 2837                  // '{' Wildcard
     || lk == 3349                  // '{' EQName^Token
     || lk == 4373                  // '{' IntegerLiteral
     || lk == 4885                  // '{' DecimalLiteral
     || lk == 5397                  // '{' DoubleLiteral
     || lk == 5909                  // '{' StringLiteral
     || lk == 16149                 // '{' '$'
     || lk == 16661                 // '{' '%'
     || lk == 17685                 // '{' '('
     || lk == 18197                 // '{' '(#'
     || lk == 20757                 // '{' '+'
     || lk == 21781                 // '{' '-'
     || lk == 22805                 // '{' '.'
     || lk == 23317                 // '{' '..'
     || lk == 23829                 // '{' '/'
     || lk == 24341                 // '{' '//'
     || lk == 27925                 // '{' '<'
     || lk == 28437                 // '{' '<!--'
     || lk == 30485                 // '{' '<?'
     || lk == 33045                 // '{' '?'
     || lk == 34069                 // '{' '@'
     || lk == 35093                 // '{' '['
     || lk == 36117                 // '{' 'after'
     || lk == 37141                 // '{' 'allowing'
     || lk == 37653                 // '{' 'ancestor'
     || lk == 38165                 // '{' 'ancestor-or-self'
     || lk == 38677                 // '{' 'and'
     || lk == 39701                 // '{' 'append'
     || lk == 40213                 // '{' 'array'
     || lk == 40725                 // '{' 'as'
     || lk == 41237                 // '{' 'ascending'
     || lk == 41749                 // '{' 'at'
     || lk == 42261                 // '{' 'attribute'
     || lk == 42773                 // '{' 'base-uri'
     || lk == 43285                 // '{' 'before'
     || lk == 43797                 // '{' 'boundary-space'
     || lk == 44309                 // '{' 'break'
     || lk == 45333                 // '{' 'case'
     || lk == 45845                 // '{' 'cast'
     || lk == 46357                 // '{' 'castable'
     || lk == 46869                 // '{' 'catch'
     || lk == 47893                 // '{' 'child'
     || lk == 48405                 // '{' 'collation'
     || lk == 49429                 // '{' 'comment'
     || lk == 49941                 // '{' 'constraint'
     || lk == 50453                 // '{' 'construction'
     || lk == 51989                 // '{' 'context'
     || lk == 52501                 // '{' 'continue'
     || lk == 53013                 // '{' 'copy'
     || lk == 53525                 // '{' 'copy-namespaces'
     || lk == 54037                 // '{' 'count'
     || lk == 54549                 // '{' 'decimal-format'
     || lk == 55573                 // '{' 'declare'
     || lk == 56085                 // '{' 'default'
     || lk == 56597                 // '{' 'delete'
     || lk == 57109                 // '{' 'descendant'
     || lk == 57621                 // '{' 'descendant-or-self'
     || lk == 58133                 // '{' 'descending'
     || lk == 60693                 // '{' 'div'
     || lk == 61205                 // '{' 'document'
     || lk == 61717                 // '{' 'document-node'
     || lk == 62229                 // '{' 'element'
     || lk == 62741                 // '{' 'else'
     || lk == 63253                 // '{' 'empty'
     || lk == 63765                 // '{' 'empty-sequence'
     || lk == 64277                 // '{' 'encoding'
     || lk == 64789                 // '{' 'end'
     || lk == 65813                 // '{' 'eq'
     || lk == 66325                 // '{' 'every'
     || lk == 67349                 // '{' 'except'
     || lk == 67861                 // '{' 'exit'
     || lk == 68373                 // '{' 'external'
     || lk == 68885                 // '{' 'first'
     || lk == 69397                 // '{' 'following'
     || lk == 69909                 // '{' 'following-sibling'
     || lk == 70421                 // '{' 'for'
     || lk == 72469                 // '{' 'ft-option'
     || lk == 74517                 // '{' 'function'
     || lk == 75029                 // '{' 'ge'
     || lk == 76053                 // '{' 'group'
     || lk == 77077                 // '{' 'gt'
     || lk == 77589                 // '{' 'idiv'
     || lk == 78101                 // '{' 'if'
     || lk == 78613                 // '{' 'import'
     || lk == 79125                 // '{' 'in'
     || lk == 79637                 // '{' 'index'
     || lk == 81685                 // '{' 'insert'
     || lk == 82197                 // '{' 'instance'
     || lk == 82709                 // '{' 'integrity'
     || lk == 83221                 // '{' 'intersect'
     || lk == 83733                 // '{' 'into'
     || lk == 84245                 // '{' 'is'
     || lk == 84757                 // '{' 'item'
     || lk == 85269                 // '{' 'json'
     || lk == 85781                 // '{' 'json-item'
     || lk == 87317                 // '{' 'last'
     || lk == 87829                 // '{' 'lax'
     || lk == 88341                 // '{' 'le'
     || lk == 89365                 // '{' 'let'
     || lk == 90389                 // '{' 'loop'
     || lk == 91413                 // '{' 'lt'
     || lk == 91925                 // '{' 'map'
     || lk == 92949                 // '{' 'mod'
     || lk == 93461                 // '{' 'modify'
     || lk == 93973                 // '{' 'module'
     || lk == 94997                 // '{' 'namespace'
     || lk == 95509                 // '{' 'namespace-node'
     || lk == 96021                 // '{' 'ne'
     || lk == 98581                 // '{' 'node'
     || lk == 99093                 // '{' 'nodes'
     || lk == 100117                // '{' 'object'
     || lk == 102165                // '{' 'only'
     || lk == 102677                // '{' 'option'
     || lk == 103189                // '{' 'or'
     || lk == 103701                // '{' 'order'
     || lk == 104213                // '{' 'ordered'
     || lk == 104725                // '{' 'ordering'
     || lk == 106261                // '{' 'parent'
     || lk == 109333                // '{' 'preceding'
     || lk == 109845                // '{' 'preceding-sibling'
     || lk == 111381                // '{' 'processing-instruction'
     || lk == 112405                // '{' 'rename'
     || lk == 112917                // '{' 'replace'
     || lk == 113429                // '{' 'return'
     || lk == 113941                // '{' 'returning'
     || lk == 114453                // '{' 'revalidation'
     || lk == 115477                // '{' 'satisfies'
     || lk == 115989                // '{' 'schema'
     || lk == 116501                // '{' 'schema-attribute'
     || lk == 117013                // '{' 'schema-element'
     || lk == 117525                // '{' 'score'
     || lk == 118037                // '{' 'self'
     || lk == 120597                // '{' 'sliding'
     || lk == 121109                // '{' 'some'
     || lk == 121621                // '{' 'stable'
     || lk == 122133                // '{' 'start'
     || lk == 123669                // '{' 'strict'
     || lk == 124693                // '{' 'structured-item'
     || lk == 125205                // '{' 'switch'
     || lk == 125717                // '{' 'text'
     || lk == 127765                // '{' 'to'
     || lk == 128277                // '{' 'treat'
     || lk == 128789                // '{' 'try'
     || lk == 129301                // '{' 'tumbling'
     || lk == 129813                // '{' 'type'
     || lk == 130325                // '{' 'typeswitch'
     || lk == 130837                // '{' 'union'
     || lk == 131861                // '{' 'unordered'
     || lk == 132373                // '{' 'updating'
     || lk == 133909                // '{' 'validate'
     || lk == 134421                // '{' 'value'
     || lk == 134933                // '{' 'variable'
     || lk == 135445                // '{' 'version'
     || lk == 136981                // '{' 'where'
     || lk == 137493                // '{' 'while'
     || lk == 139029                // '{' 'with'
     || lk == 141077                // '{' 'xquery'
     || lk == 142101                // '{' '{'
     || lk == 143125                // '{' '{|'
     || lk == 145173)               // '{' '}'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          lk = -11;
        }
        catch (p11A)
        {
          lk = -12;
        }
        b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
        b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
        b2 = b2A; e2 = e2A; end = e2A; }}
        memoize(14, e0, lk);
      }
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      parse_Literal();
      break;
    case 31:                        // '$'
      parse_VarRef();
      break;
    case 34:                        // '('
      parse_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      parse_ContextItemExpr();
      break;
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17485:                     // 'append' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17574:                     // 'json' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17587:                     // 'map' '('
    case 17589:                     // 'mod' '('
    case 17590:                     // 'modify' '('
    case 17591:                     // 'module' '('
    case 17593:                     // 'namespace' '('
    case 17595:                     // 'ne' '('
    case 17601:                     // 'nodes' '('
    case 17603:                     // 'object' '('
    case 17607:                     // 'only' '('
    case 17608:                     // 'option' '('
    case 17609:                     // 'or' '('
    case 17610:                     // 'order' '('
    case 17611:                     // 'ordered' '('
    case 17612:                     // 'ordering' '('
    case 17615:                     // 'parent' '('
    case 17621:                     // 'preceding' '('
    case 17622:                     // 'preceding-sibling' '('
    case 17627:                     // 'rename' '('
    case 17628:                     // 'replace' '('
    case 17629:                     // 'return' '('
    case 17630:                     // 'returning' '('
    case 17631:                     // 'revalidation' '('
    case 17633:                     // 'satisfies' '('
    case 17634:                     // 'schema' '('
    case 17637:                     // 'score' '('
    case 17638:                     // 'self' '('
    case 17643:                     // 'sliding' '('
    case 17644:                     // 'some' '('
    case 17645:                     // 'stable' '('
    case 17646:                     // 'start' '('
    case 17649:                     // 'strict' '('
    case 17657:                     // 'to' '('
    case 17658:                     // 'treat' '('
    case 17659:                     // 'try' '('
    case 17660:                     // 'tumbling' '('
    case 17661:                     // 'type' '('
    case 17663:                     // 'union' '('
    case 17665:                     // 'unordered' '('
    case 17666:                     // 'updating' '('
    case 17669:                     // 'validate' '('
    case 17670:                     // 'value' '('
    case 17671:                     // 'variable' '('
    case 17672:                     // 'version' '('
    case 17675:                     // 'where' '('
    case 17676:                     // 'while' '('
    case 17679:                     // 'with' '('
    case 17683:                     // 'xquery' '('
      parse_FunctionCall();
      break;
    case 142027:                    // 'ordered' '{'
      parse_OrderedExpr();
      break;
    case 142081:                    // 'unordered' '{'
      parse_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 78:                        // 'array'
    case 120:                       // 'document-node'
    case 124:                       // 'empty-sequence'
    case 145:                       // 'function'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 186:                       // 'namespace-node'
    case 192:                       // 'node'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 243:                       // 'structured-item'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14925:                     // 'append' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15014:                     // 'json' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15027:                     // 'map' '#'
    case 15029:                     // 'mod' '#'
    case 15030:                     // 'modify' '#'
    case 15031:                     // 'module' '#'
    case 15033:                     // 'namespace' '#'
    case 15035:                     // 'ne' '#'
    case 15041:                     // 'nodes' '#'
    case 15043:                     // 'object' '#'
    case 15047:                     // 'only' '#'
    case 15048:                     // 'option' '#'
    case 15049:                     // 'or' '#'
    case 15050:                     // 'order' '#'
    case 15051:                     // 'ordered' '#'
    case 15052:                     // 'ordering' '#'
    case 15055:                     // 'parent' '#'
    case 15061:                     // 'preceding' '#'
    case 15062:                     // 'preceding-sibling' '#'
    case 15065:                     // 'processing-instruction' '#'
    case 15067:                     // 'rename' '#'
    case 15068:                     // 'replace' '#'
    case 15069:                     // 'return' '#'
    case 15070:                     // 'returning' '#'
    case 15071:                     // 'revalidation' '#'
    case 15073:                     // 'satisfies' '#'
    case 15074:                     // 'schema' '#'
    case 15077:                     // 'score' '#'
    case 15078:                     // 'self' '#'
    case 15083:                     // 'sliding' '#'
    case 15084:                     // 'some' '#'
    case 15085:                     // 'stable' '#'
    case 15086:                     // 'start' '#'
    case 15089:                     // 'strict' '#'
    case 15093:                     // 'text' '#'
    case 15097:                     // 'to' '#'
    case 15098:                     // 'treat' '#'
    case 15099:                     // 'try' '#'
    case 15100:                     // 'tumbling' '#'
    case 15101:                     // 'type' '#'
    case 15103:                     // 'union' '#'
    case 15105:                     // 'unordered' '#'
    case 15106:                     // 'updating' '#'
    case 15109:                     // 'validate' '#'
    case 15110:                     // 'value' '#'
    case 15111:                     // 'variable' '#'
    case 15112:                     // 'version' '#'
    case 15115:                     // 'where' '#'
    case 15116:                     // 'while' '#'
    case 15119:                     // 'with' '#'
    case 15123:                     // 'xquery' '#'
      parse_FunctionItemExpr();
      break;
    case 142003:                    // 'map' '{'
      parse_MapConstructor();
      break;
    case -11:
    case 27413:                     // '{' ';'
      parse_BlockExpr();
      break;
    case -12:
      parse_ObjectConstructor();
      break;
    case 68:                        // '['
      parse_ArrayConstructor();
      break;
    case 64:                        // '?'
      parse_UnaryLookup();
      break;
    case 279:                       // '{|'
      parse_JSONSimpleObjectUnion();
      break;
    default:
      parse_Constructor();
    }
    eventHandler.endNonterminal("PrimaryExpr", e0);
  }

  function try_PrimaryExpr()
  {
    switch (l1)
    {
    case 185:                       // 'namespace'
      lookahead2W(257);             // NCName^Token | S^WS | '#' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 217:                       // 'processing-instruction'
      lookahead2W(254);             // NCName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'as' | 'ascending' | 'at' | 'attribute' |
                                    // 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' | 'cast' |
                                    // 'castable' | 'catch' | 'child' | 'collation' | 'comment' | 'constraint' |
                                    // 'construction' | 'context' | 'continue' | 'copy' | 'copy-namespaces' | 'count' |
                                    // 'decimal-format' | 'declare' | 'default' | 'delete' | 'descendant' |
                                    // 'descendant-or-self' | 'descending' | 'div' | 'document' | 'document-node' |
                                    // 'element' | 'else' | 'empty' | 'empty-sequence' | 'encoding' | 'end' | 'eq' |
                                    // 'every' | 'except' | 'exit' | 'external' | 'first' | 'following' |
                                    // 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' | 'group' | 'gt' |
                                    // 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' | 'instance' | 'integrity' |
                                    // 'intersect' | 'into' | 'is' | 'item' | 'json' | 'last' | 'lax' | 'le' | 'let' |
                                    // 'loop' | 'lt' | 'map' | 'mod' | 'modify' | 'module' | 'namespace' |
                                    // 'namespace-node' | 'ne' | 'node' | 'nodes' | 'object' | 'only' | 'option' |
                                    // 'or' | 'order' | 'ordered' | 'ordering' | 'parent' | 'preceding' |
                                    // 'preceding-sibling' | 'processing-instruction' | 'rename' | 'replace' |
                                    // 'return' | 'returning' | 'revalidation' | 'satisfies' | 'schema' |
                                    // 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' | 'some' |
                                    // 'stable' | 'start' | 'strict' | 'switch' | 'text' | 'to' | 'treat' | 'try' |
                                    // 'tumbling' | 'type' | 'typeswitch' | 'union' | 'unordered' | 'updating' |
                                    // 'validate' | 'value' | 'variable' | 'version' | 'where' | 'while' | 'with' |
                                    // 'xquery' | '{'
      break;
    case 277:                       // '{'
      lookahead2W(279);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      break;
    case 82:                        // 'attribute'
    case 121:                       // 'element'
      lookahead2W(261);             // EQName^Token | S^WS | '#' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{'
      break;
    case 96:                        // 'comment'
    case 245:                       // 'text'
      lookahead2W(93);              // S^WS | '#' | '(:' | '{'
      break;
    case 119:                       // 'document'
    case 179:                       // 'map'
    case 203:                       // 'ordered'
    case 257:                       // 'unordered'
      lookahead2W(139);             // S^WS | '#' | '(' | '(:' | '{'
      break;
    case 6:                         // EQName^Token
    case 70:                        // 'after'
    case 72:                        // 'allowing'
    case 73:                        // 'ancestor'
    case 74:                        // 'ancestor-or-self'
    case 75:                        // 'and'
    case 77:                        // 'append'
    case 79:                        // 'as'
    case 80:                        // 'ascending'
    case 81:                        // 'at'
    case 83:                        // 'base-uri'
    case 84:                        // 'before'
    case 85:                        // 'boundary-space'
    case 86:                        // 'break'
    case 88:                        // 'case'
    case 89:                        // 'cast'
    case 90:                        // 'castable'
    case 91:                        // 'catch'
    case 93:                        // 'child'
    case 94:                        // 'collation'
    case 97:                        // 'constraint'
    case 98:                        // 'construction'
    case 101:                       // 'context'
    case 102:                       // 'continue'
    case 103:                       // 'copy'
    case 104:                       // 'copy-namespaces'
    case 105:                       // 'count'
    case 106:                       // 'decimal-format'
    case 108:                       // 'declare'
    case 109:                       // 'default'
    case 110:                       // 'delete'
    case 111:                       // 'descendant'
    case 112:                       // 'descendant-or-self'
    case 113:                       // 'descending'
    case 118:                       // 'div'
    case 122:                       // 'else'
    case 123:                       // 'empty'
    case 125:                       // 'encoding'
    case 126:                       // 'end'
    case 128:                       // 'eq'
    case 129:                       // 'every'
    case 131:                       // 'except'
    case 132:                       // 'exit'
    case 133:                       // 'external'
    case 134:                       // 'first'
    case 135:                       // 'following'
    case 136:                       // 'following-sibling'
    case 137:                       // 'for'
    case 141:                       // 'ft-option'
    case 146:                       // 'ge'
    case 148:                       // 'group'
    case 150:                       // 'gt'
    case 151:                       // 'idiv'
    case 153:                       // 'import'
    case 154:                       // 'in'
    case 155:                       // 'index'
    case 159:                       // 'insert'
    case 160:                       // 'instance'
    case 161:                       // 'integrity'
    case 162:                       // 'intersect'
    case 163:                       // 'into'
    case 164:                       // 'is'
    case 166:                       // 'json'
    case 170:                       // 'last'
    case 171:                       // 'lax'
    case 172:                       // 'le'
    case 174:                       // 'let'
    case 176:                       // 'loop'
    case 178:                       // 'lt'
    case 181:                       // 'mod'
    case 182:                       // 'modify'
    case 183:                       // 'module'
    case 187:                       // 'ne'
    case 193:                       // 'nodes'
    case 195:                       // 'object'
    case 199:                       // 'only'
    case 200:                       // 'option'
    case 201:                       // 'or'
    case 202:                       // 'order'
    case 204:                       // 'ordering'
    case 207:                       // 'parent'
    case 213:                       // 'preceding'
    case 214:                       // 'preceding-sibling'
    case 219:                       // 'rename'
    case 220:                       // 'replace'
    case 221:                       // 'return'
    case 222:                       // 'returning'
    case 223:                       // 'revalidation'
    case 225:                       // 'satisfies'
    case 226:                       // 'schema'
    case 229:                       // 'score'
    case 230:                       // 'self'
    case 235:                       // 'sliding'
    case 236:                       // 'some'
    case 237:                       // 'stable'
    case 238:                       // 'start'
    case 241:                       // 'strict'
    case 249:                       // 'to'
    case 250:                       // 'treat'
    case 251:                       // 'try'
    case 252:                       // 'tumbling'
    case 253:                       // 'type'
    case 255:                       // 'union'
    case 258:                       // 'updating'
    case 261:                       // 'validate'
    case 262:                       // 'value'
    case 263:                       // 'variable'
    case 264:                       // 'version'
    case 267:                       // 'where'
    case 268:                       // 'while'
    case 271:                       // 'with'
    case 275:                       // 'xquery'
      lookahead2W(92);              // S^WS | '#' | '(' | '(:'
      break;
    default:
      lk = l1;
    }
    if (lk == 2837                  // '{' Wildcard
     || lk == 3349                  // '{' EQName^Token
     || lk == 4373                  // '{' IntegerLiteral
     || lk == 4885                  // '{' DecimalLiteral
     || lk == 5397                  // '{' DoubleLiteral
     || lk == 5909                  // '{' StringLiteral
     || lk == 16149                 // '{' '$'
     || lk == 16661                 // '{' '%'
     || lk == 17685                 // '{' '('
     || lk == 18197                 // '{' '(#'
     || lk == 20757                 // '{' '+'
     || lk == 21781                 // '{' '-'
     || lk == 22805                 // '{' '.'
     || lk == 23317                 // '{' '..'
     || lk == 23829                 // '{' '/'
     || lk == 24341                 // '{' '//'
     || lk == 27925                 // '{' '<'
     || lk == 28437                 // '{' '<!--'
     || lk == 30485                 // '{' '<?'
     || lk == 33045                 // '{' '?'
     || lk == 34069                 // '{' '@'
     || lk == 35093                 // '{' '['
     || lk == 36117                 // '{' 'after'
     || lk == 37141                 // '{' 'allowing'
     || lk == 37653                 // '{' 'ancestor'
     || lk == 38165                 // '{' 'ancestor-or-self'
     || lk == 38677                 // '{' 'and'
     || lk == 39701                 // '{' 'append'
     || lk == 40213                 // '{' 'array'
     || lk == 40725                 // '{' 'as'
     || lk == 41237                 // '{' 'ascending'
     || lk == 41749                 // '{' 'at'
     || lk == 42261                 // '{' 'attribute'
     || lk == 42773                 // '{' 'base-uri'
     || lk == 43285                 // '{' 'before'
     || lk == 43797                 // '{' 'boundary-space'
     || lk == 44309                 // '{' 'break'
     || lk == 45333                 // '{' 'case'
     || lk == 45845                 // '{' 'cast'
     || lk == 46357                 // '{' 'castable'
     || lk == 46869                 // '{' 'catch'
     || lk == 47893                 // '{' 'child'
     || lk == 48405                 // '{' 'collation'
     || lk == 49429                 // '{' 'comment'
     || lk == 49941                 // '{' 'constraint'
     || lk == 50453                 // '{' 'construction'
     || lk == 51989                 // '{' 'context'
     || lk == 52501                 // '{' 'continue'
     || lk == 53013                 // '{' 'copy'
     || lk == 53525                 // '{' 'copy-namespaces'
     || lk == 54037                 // '{' 'count'
     || lk == 54549                 // '{' 'decimal-format'
     || lk == 55573                 // '{' 'declare'
     || lk == 56085                 // '{' 'default'
     || lk == 56597                 // '{' 'delete'
     || lk == 57109                 // '{' 'descendant'
     || lk == 57621                 // '{' 'descendant-or-self'
     || lk == 58133                 // '{' 'descending'
     || lk == 60693                 // '{' 'div'
     || lk == 61205                 // '{' 'document'
     || lk == 61717                 // '{' 'document-node'
     || lk == 62229                 // '{' 'element'
     || lk == 62741                 // '{' 'else'
     || lk == 63253                 // '{' 'empty'
     || lk == 63765                 // '{' 'empty-sequence'
     || lk == 64277                 // '{' 'encoding'
     || lk == 64789                 // '{' 'end'
     || lk == 65813                 // '{' 'eq'
     || lk == 66325                 // '{' 'every'
     || lk == 67349                 // '{' 'except'
     || lk == 67861                 // '{' 'exit'
     || lk == 68373                 // '{' 'external'
     || lk == 68885                 // '{' 'first'
     || lk == 69397                 // '{' 'following'
     || lk == 69909                 // '{' 'following-sibling'
     || lk == 70421                 // '{' 'for'
     || lk == 72469                 // '{' 'ft-option'
     || lk == 74517                 // '{' 'function'
     || lk == 75029                 // '{' 'ge'
     || lk == 76053                 // '{' 'group'
     || lk == 77077                 // '{' 'gt'
     || lk == 77589                 // '{' 'idiv'
     || lk == 78101                 // '{' 'if'
     || lk == 78613                 // '{' 'import'
     || lk == 79125                 // '{' 'in'
     || lk == 79637                 // '{' 'index'
     || lk == 81685                 // '{' 'insert'
     || lk == 82197                 // '{' 'instance'
     || lk == 82709                 // '{' 'integrity'
     || lk == 83221                 // '{' 'intersect'
     || lk == 83733                 // '{' 'into'
     || lk == 84245                 // '{' 'is'
     || lk == 84757                 // '{' 'item'
     || lk == 85269                 // '{' 'json'
     || lk == 85781                 // '{' 'json-item'
     || lk == 87317                 // '{' 'last'
     || lk == 87829                 // '{' 'lax'
     || lk == 88341                 // '{' 'le'
     || lk == 89365                 // '{' 'let'
     || lk == 90389                 // '{' 'loop'
     || lk == 91413                 // '{' 'lt'
     || lk == 91925                 // '{' 'map'
     || lk == 92949                 // '{' 'mod'
     || lk == 93461                 // '{' 'modify'
     || lk == 93973                 // '{' 'module'
     || lk == 94997                 // '{' 'namespace'
     || lk == 95509                 // '{' 'namespace-node'
     || lk == 96021                 // '{' 'ne'
     || lk == 98581                 // '{' 'node'
     || lk == 99093                 // '{' 'nodes'
     || lk == 100117                // '{' 'object'
     || lk == 102165                // '{' 'only'
     || lk == 102677                // '{' 'option'
     || lk == 103189                // '{' 'or'
     || lk == 103701                // '{' 'order'
     || lk == 104213                // '{' 'ordered'
     || lk == 104725                // '{' 'ordering'
     || lk == 106261                // '{' 'parent'
     || lk == 109333                // '{' 'preceding'
     || lk == 109845                // '{' 'preceding-sibling'
     || lk == 111381                // '{' 'processing-instruction'
     || lk == 112405                // '{' 'rename'
     || lk == 112917                // '{' 'replace'
     || lk == 113429                // '{' 'return'
     || lk == 113941                // '{' 'returning'
     || lk == 114453                // '{' 'revalidation'
     || lk == 115477                // '{' 'satisfies'
     || lk == 115989                // '{' 'schema'
     || lk == 116501                // '{' 'schema-attribute'
     || lk == 117013                // '{' 'schema-element'
     || lk == 117525                // '{' 'score'
     || lk == 118037                // '{' 'self'
     || lk == 120597                // '{' 'sliding'
     || lk == 121109                // '{' 'some'
     || lk == 121621                // '{' 'stable'
     || lk == 122133                // '{' 'start'
     || lk == 123669                // '{' 'strict'
     || lk == 124693                // '{' 'structured-item'
     || lk == 125205                // '{' 'switch'
     || lk == 125717                // '{' 'text'
     || lk == 127765                // '{' 'to'
     || lk == 128277                // '{' 'treat'
     || lk == 128789                // '{' 'try'
     || lk == 129301                // '{' 'tumbling'
     || lk == 129813                // '{' 'type'
     || lk == 130325                // '{' 'typeswitch'
     || lk == 130837                // '{' 'union'
     || lk == 131861                // '{' 'unordered'
     || lk == 132373                // '{' 'updating'
     || lk == 133909                // '{' 'validate'
     || lk == 134421                // '{' 'value'
     || lk == 134933                // '{' 'variable'
     || lk == 135445                // '{' 'version'
     || lk == 136981                // '{' 'where'
     || lk == 137493                // '{' 'while'
     || lk == 139029                // '{' 'with'
     || lk == 141077                // '{' 'xquery'
     || lk == 142101                // '{' '{'
     || lk == 143125                // '{' '{|'
     || lk == 145173)               // '{' '}'
    {
      lk = memoized(14, e0);
      if (lk == 0)
      {
        var b0A = b0; var e0A = e0; var l1A = l1;
        var b1A = b1; var e1A = e1; var l2A = l2;
        var b2A = b2; var e2A = e2;
        try
        {
          try_BlockExpr();
          memoize(14, e0A, -11);
          lk = -16;
        }
        catch (p11A)
        {
          lk = -12;
          b0 = b0A; e0 = e0A; l1 = l1A; if (l1 == 0) {end = e0A;} else {
          b1 = b1A; e1 = e1A; l2 = l2A; if (l2 == 0) {end = e1A;} else {
          b2 = b2A; e2 = e2A; end = e2A; }}
          memoize(14, e0A, -12);
        }
      }
    }
    switch (lk)
    {
    case 8:                         // IntegerLiteral
    case 9:                         // DecimalLiteral
    case 10:                        // DoubleLiteral
    case 11:                        // StringLiteral
      try_Literal();
      break;
    case 31:                        // '$'
      try_VarRef();
      break;
    case 34:                        // '('
      try_ParenthesizedExpr();
      break;
    case 44:                        // '.'
      try_ContextItemExpr();
      break;
    case 17414:                     // EQName^Token '('
    case 17478:                     // 'after' '('
    case 17480:                     // 'allowing' '('
    case 17481:                     // 'ancestor' '('
    case 17482:                     // 'ancestor-or-self' '('
    case 17483:                     // 'and' '('
    case 17485:                     // 'append' '('
    case 17487:                     // 'as' '('
    case 17488:                     // 'ascending' '('
    case 17489:                     // 'at' '('
    case 17491:                     // 'base-uri' '('
    case 17492:                     // 'before' '('
    case 17493:                     // 'boundary-space' '('
    case 17494:                     // 'break' '('
    case 17496:                     // 'case' '('
    case 17497:                     // 'cast' '('
    case 17498:                     // 'castable' '('
    case 17499:                     // 'catch' '('
    case 17501:                     // 'child' '('
    case 17502:                     // 'collation' '('
    case 17505:                     // 'constraint' '('
    case 17506:                     // 'construction' '('
    case 17509:                     // 'context' '('
    case 17510:                     // 'continue' '('
    case 17511:                     // 'copy' '('
    case 17512:                     // 'copy-namespaces' '('
    case 17513:                     // 'count' '('
    case 17514:                     // 'decimal-format' '('
    case 17516:                     // 'declare' '('
    case 17517:                     // 'default' '('
    case 17518:                     // 'delete' '('
    case 17519:                     // 'descendant' '('
    case 17520:                     // 'descendant-or-self' '('
    case 17521:                     // 'descending' '('
    case 17526:                     // 'div' '('
    case 17527:                     // 'document' '('
    case 17530:                     // 'else' '('
    case 17531:                     // 'empty' '('
    case 17533:                     // 'encoding' '('
    case 17534:                     // 'end' '('
    case 17536:                     // 'eq' '('
    case 17537:                     // 'every' '('
    case 17539:                     // 'except' '('
    case 17540:                     // 'exit' '('
    case 17541:                     // 'external' '('
    case 17542:                     // 'first' '('
    case 17543:                     // 'following' '('
    case 17544:                     // 'following-sibling' '('
    case 17545:                     // 'for' '('
    case 17549:                     // 'ft-option' '('
    case 17554:                     // 'ge' '('
    case 17556:                     // 'group' '('
    case 17558:                     // 'gt' '('
    case 17559:                     // 'idiv' '('
    case 17561:                     // 'import' '('
    case 17562:                     // 'in' '('
    case 17563:                     // 'index' '('
    case 17567:                     // 'insert' '('
    case 17568:                     // 'instance' '('
    case 17569:                     // 'integrity' '('
    case 17570:                     // 'intersect' '('
    case 17571:                     // 'into' '('
    case 17572:                     // 'is' '('
    case 17574:                     // 'json' '('
    case 17578:                     // 'last' '('
    case 17579:                     // 'lax' '('
    case 17580:                     // 'le' '('
    case 17582:                     // 'let' '('
    case 17584:                     // 'loop' '('
    case 17586:                     // 'lt' '('
    case 17587:                     // 'map' '('
    case 17589:                     // 'mod' '('
    case 17590:                     // 'modify' '('
    case 17591:                     // 'module' '('
    case 17593:                     // 'namespace' '('
    case 17595:                     // 'ne' '('
    case 17601:                     // 'nodes' '('
    case 17603:                     // 'object' '('
    case 17607:                     // 'only' '('
    case 17608:                     // 'option' '('
    case 17609:                     // 'or' '('
    case 17610:                     // 'order' '('
    case 17611:                     // 'ordered' '('
    case 17612:                     // 'ordering' '('
    case 17615:                     // 'parent' '('
    case 17621:                     // 'preceding' '('
    case 17622:                     // 'preceding-sibling' '('
    case 17627:                     // 'rename' '('
    case 17628:                     // 'replace' '('
    case 17629:                     // 'return' '('
    case 17630:                     // 'returning' '('
    case 17631:                     // 'revalidation' '('
    case 17633:                     // 'satisfies' '('
    case 17634:                     // 'schema' '('
    case 17637:                     // 'score' '('
    case 17638:                     // 'self' '('
    case 17643:                     // 'sliding' '('
    case 17644:                     // 'some' '('
    case 17645:                     // 'stable' '('
    case 17646:                     // 'start' '('
    case 17649:                     // 'strict' '('
    case 17657:                     // 'to' '('
    case 17658:                     // 'treat' '('
    case 17659:                     // 'try' '('
    case 17660:                     // 'tumbling' '('
    case 17661:                     // 'type' '('
    case 17663:                     // 'union' '('
    case 17665:                     // 'unordered' '('
    case 17666:                     // 'updating' '('
    case 17669:                     // 'validate' '('
    case 17670:                     // 'value' '('
    case 17671:                     // 'variable' '('
    case 17672:                     // 'version' '('
    case 17675:                     // 'where' '('
    case 17676:                     // 'while' '('
    case 17679:                     // 'with' '('
    case 17683:                     // 'xquery' '('
      try_FunctionCall();
      break;
    case 142027:                    // 'ordered' '{'
      try_OrderedExpr();
      break;
    case 142081:                    // 'unordered' '{'
      try_UnorderedExpr();
      break;
    case 32:                        // '%'
    case 78:                        // 'array'
    case 120:                       // 'document-node'
    case 124:                       // 'empty-sequence'
    case 145:                       // 'function'
    case 152:                       // 'if'
    case 165:                       // 'item'
    case 167:                       // 'json-item'
    case 186:                       // 'namespace-node'
    case 192:                       // 'node'
    case 227:                       // 'schema-attribute'
    case 228:                       // 'schema-element'
    case 243:                       // 'structured-item'
    case 244:                       // 'switch'
    case 254:                       // 'typeswitch'
    case 14854:                     // EQName^Token '#'
    case 14918:                     // 'after' '#'
    case 14920:                     // 'allowing' '#'
    case 14921:                     // 'ancestor' '#'
    case 14922:                     // 'ancestor-or-self' '#'
    case 14923:                     // 'and' '#'
    case 14925:                     // 'append' '#'
    case 14927:                     // 'as' '#'
    case 14928:                     // 'ascending' '#'
    case 14929:                     // 'at' '#'
    case 14930:                     // 'attribute' '#'
    case 14931:                     // 'base-uri' '#'
    case 14932:                     // 'before' '#'
    case 14933:                     // 'boundary-space' '#'
    case 14934:                     // 'break' '#'
    case 14936:                     // 'case' '#'
    case 14937:                     // 'cast' '#'
    case 14938:                     // 'castable' '#'
    case 14939:                     // 'catch' '#'
    case 14941:                     // 'child' '#'
    case 14942:                     // 'collation' '#'
    case 14944:                     // 'comment' '#'
    case 14945:                     // 'constraint' '#'
    case 14946:                     // 'construction' '#'
    case 14949:                     // 'context' '#'
    case 14950:                     // 'continue' '#'
    case 14951:                     // 'copy' '#'
    case 14952:                     // 'copy-namespaces' '#'
    case 14953:                     // 'count' '#'
    case 14954:                     // 'decimal-format' '#'
    case 14956:                     // 'declare' '#'
    case 14957:                     // 'default' '#'
    case 14958:                     // 'delete' '#'
    case 14959:                     // 'descendant' '#'
    case 14960:                     // 'descendant-or-self' '#'
    case 14961:                     // 'descending' '#'
    case 14966:                     // 'div' '#'
    case 14967:                     // 'document' '#'
    case 14969:                     // 'element' '#'
    case 14970:                     // 'else' '#'
    case 14971:                     // 'empty' '#'
    case 14973:                     // 'encoding' '#'
    case 14974:                     // 'end' '#'
    case 14976:                     // 'eq' '#'
    case 14977:                     // 'every' '#'
    case 14979:                     // 'except' '#'
    case 14980:                     // 'exit' '#'
    case 14981:                     // 'external' '#'
    case 14982:                     // 'first' '#'
    case 14983:                     // 'following' '#'
    case 14984:                     // 'following-sibling' '#'
    case 14985:                     // 'for' '#'
    case 14989:                     // 'ft-option' '#'
    case 14994:                     // 'ge' '#'
    case 14996:                     // 'group' '#'
    case 14998:                     // 'gt' '#'
    case 14999:                     // 'idiv' '#'
    case 15001:                     // 'import' '#'
    case 15002:                     // 'in' '#'
    case 15003:                     // 'index' '#'
    case 15007:                     // 'insert' '#'
    case 15008:                     // 'instance' '#'
    case 15009:                     // 'integrity' '#'
    case 15010:                     // 'intersect' '#'
    case 15011:                     // 'into' '#'
    case 15012:                     // 'is' '#'
    case 15014:                     // 'json' '#'
    case 15018:                     // 'last' '#'
    case 15019:                     // 'lax' '#'
    case 15020:                     // 'le' '#'
    case 15022:                     // 'let' '#'
    case 15024:                     // 'loop' '#'
    case 15026:                     // 'lt' '#'
    case 15027:                     // 'map' '#'
    case 15029:                     // 'mod' '#'
    case 15030:                     // 'modify' '#'
    case 15031:                     // 'module' '#'
    case 15033:                     // 'namespace' '#'
    case 15035:                     // 'ne' '#'
    case 15041:                     // 'nodes' '#'
    case 15043:                     // 'object' '#'
    case 15047:                     // 'only' '#'
    case 15048:                     // 'option' '#'
    case 15049:                     // 'or' '#'
    case 15050:                     // 'order' '#'
    case 15051:                     // 'ordered' '#'
    case 15052:                     // 'ordering' '#'
    case 15055:                     // 'parent' '#'
    case 15061:                     // 'preceding' '#'
    case 15062:                     // 'preceding-sibling' '#'
    case 15065:                     // 'processing-instruction' '#'
    case 15067:                     // 'rename' '#'
    case 15068:                     // 'replace' '#'
    case 15069:                     // 'return' '#'
    case 15070:                     // 'returning' '#'
    case 15071:                     // 'revalidation' '#'
    case 15073:                     // 'satisfies' '#'
    case 15074:                     // 'schema' '#'
    case 15077:                     // 'score' '#'
    case 15078:                     // 'self' '#'
    case 15083:                     // 'sliding' '#'
    case 15084:                     // 'some' '#'
    case 15085:                     // 'stable' '#'
    case 15086:                     // 'start' '#'
    case 15089:                     // 'strict' '#'
    case 15093:                     // 'text' '#'
    case 15097:                     // 'to' '#'
    case 15098:                     // 'treat' '#'
    case 15099:                     // 'try' '#'
    case 15100:                     // 'tumbling' '#'
    case 15101:                     // 'type' '#'
    case 15103:                     // 'union' '#'
    case 15105:                     // 'unordered' '#'
    case 15106:                     // 'updating' '#'
    case 15109:                     // 'validate' '#'
    case 15110:                     // 'value' '#'
    case 15111:                     // 'variable' '#'
    case 15112:                     // 'version' '#'
    case 15115:                     // 'where' '#'
    case 15116:                     // 'while' '#'
    case 15119:                     // 'with' '#'
    case 15123:                     // 'xquery' '#'
      try_FunctionItemExpr();
      break;
    case 142003:                    // 'map' '{'
      try_MapConstructor();
      break;
    case -11:
    case 27413:                     // '{' ';'
      try_BlockExpr();
      break;
    case -12:
      try_ObjectConstructor();
      break;
    case 68:                        // '['
      try_ArrayConstructor();
      break;
    case 64:                        // '?'
      try_UnaryLookup();
      break;
    case 279:                       // '{|'
      try_JSONSimpleObjectUnion();
      break;
    case -16:
      break;
    default:
      try_Constructor();
    }
  }

  function parse_JSONSimpleObjectUnion()
  {
    eventHandler.startNonterminal("JSONSimpleObjectUnion", e0);
    consume(279);                   // '{|'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
    if (l1 != 282)                  // '|}'
    {
      whitespace();
      parse_Expr();
    }
    consume(282);                   // '|}'
    eventHandler.endNonterminal("JSONSimpleObjectUnion", e0);
  }

  function try_JSONSimpleObjectUnion()
  {
    consumeT(279);                  // '{|'
    lookahead1W(276);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '|}'
    if (l1 != 282)                  // '|}'
    {
      try_Expr();
    }
    consumeT(282);                  // '|}'
  }

  function parse_ObjectConstructor()
  {
    eventHandler.startNonterminal("ObjectConstructor", e0);
    consume(277);                   // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      whitespace();
      parse_PairConstructorList();
    }
    consume(283);                   // '}'
    eventHandler.endNonterminal("ObjectConstructor", e0);
  }

  function try_ObjectConstructor()
  {
    consumeT(277);                  // '{'
    lookahead1W(277);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    if (l1 != 283)                  // '}'
    {
      try_PairConstructorList();
    }
    consumeT(283);                  // '}'
  }

  function parse_PairConstructorList()
  {
    eventHandler.startNonterminal("PairConstructorList", e0);
    parse_PairConstructor();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consume(41);                  // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      whitespace();
      parse_PairConstructor();
    }
    eventHandler.endNonterminal("PairConstructorList", e0);
  }

  function try_PairConstructorList()
  {
    try_PairConstructor();
    for (;;)
    {
      if (l1 != 41)                 // ','
      {
        break;
      }
      consumeT(41);                 // ','
      lookahead1W(271);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
      try_PairConstructor();
    }
  }

  function parse_PairConstructor()
  {
    eventHandler.startNonterminal("PairConstructor", e0);
    parse_ExprSingle();
    consume(49);                    // ':'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    whitespace();
    parse_ExprSingle();
    eventHandler.endNonterminal("PairConstructor", e0);
  }

  function try_PairConstructor()
  {
    try_ExprSingle();
    consumeT(49);                   // ':'
    lookahead1W(271);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    try_ExprSingle();
  }

  function parse_ArrayConstructor()
  {
    eventHandler.startNonterminal("ArrayConstructor", e0);
    consume(68);                    // '['
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 69)                   // ']'
    {
      whitespace();
      parse_Expr();
    }
    consume(69);                    // ']'
    eventHandler.endNonterminal("ArrayConstructor", e0);
  }

  function try_ArrayConstructor()
  {
    consumeT(68);                   // '['
    lookahead1W(275);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | '<' | '<!--' | '<?' | '?' | '@' | '[' | ']' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|'
    if (l1 != 69)                   // ']'
    {
      try_Expr();
    }
    consumeT(69);                   // ']'
  }

  function parse_BlockExpr()
  {
    eventHandler.startNonterminal("BlockExpr", e0);
    consume(277);                   // '{'
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    whitespace();
    parse_StatementsAndOptionalExpr();
    consume(283);                   // '}'
    eventHandler.endNonterminal("BlockExpr", e0);
  }

  function try_BlockExpr()
  {
    consumeT(277);                  // '{'
    lookahead1W(279);               // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
    try_StatementsAndOptionalExpr();
    consumeT(283);                  // '}'
  }

  function parse_FunctionDecl()
  {
    eventHandler.startNonterminal("FunctionDecl", e0);
    consume(145);                   // 'function'
    lookahead1W(255);               // EQName^Token | S^WS | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_EQName();
    lookahead1W(22);                // S^WS | '(' | '(:'
    consume(34);                    // '('
    lookahead1W(94);                // S^WS | '$' | '(:' | ')'
    if (l1 == 31)                   // '$'
    {
      whitespace();
      parse_ParamList();
    }
    consume(37);                    // ')'
    lookahead1W(148);               // S^WS | '(:' | 'as' | 'external' | '{'
    if (l1 == 79)                   // 'as'
    {
      whitespace();
      parse_ReturnType();
    }
    lookahead1W(118);               // S^WS | '(:' | 'external' | '{'
    switch (l1)
    {
    case 277:                       // '{'
      consume(277);                 // '{'
      lookahead1W(279);             // Wildcard | EQName^Token | IntegerLiteral | DecimalLiteral | DoubleLiteral |
                                    // StringLiteral | S^WS | '$' | '%' | '(' | '(#' | '(:' | '+' | '-' | '.' | '..' |
                                    // '/' | '//' | ';' | '<' | '<!--' | '<?' | '?' | '@' | '[' | 'after' | 'allowing' |
                                    // 'ancestor' | 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' |
                                    // 'ascending' | 'at' | 'attribute' | 'base-uri' | 'before' | 'boundary-space' |
                                    // 'break' | 'case' | 'cast' | 'castable' | 'catch' | 'child' | 'collation' |
                                    // 'comment' | 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery' | '{' | '{|' | '}'
      whitespace();
      parse_StatementsAndOptionalExpr();
      consume(283);                 // '}'
      break;
    default:
      consume(133);                 // 'external'
    }
    eventHandler.endNonterminal("FunctionDecl", e0);
  }

  function parse_ReturnType()
  {
    eventHandler.startNonterminal("ReturnType", e0);
    consume(79);                    // 'as'
    lookahead1W(262);               // EQName^Token | S^WS | '%' | '(' | '(:' | 'after' | 'allowing' | 'ancestor' |
                                    // 'ancestor-or-self' | 'and' | 'append' | 'array' | 'as' | 'ascending' | 'at' |
                                    // 'attribute' | 'base-uri' | 'before' | 'boundary-space' | 'break' | 'case' |
                                    // 'cast' | 'castable' | 'catch' | 'child' | 'collation' | 'comment' |
                                    // 'constraint' | 'construction' | 'context' | 'continue' | 'copy' |
                                    // 'copy-namespaces' | 'count' | 'decimal-format' | 'declare' | 'default' |
                                    // 'delete' | 'descendant' | 'descendant-or-self' | 'descending' | 'div' |
                                    // 'document' | 'document-node' | 'element' | 'else' | 'empty' | 'empty-sequence' |
                                    // 'encoding' | 'end' | 'eq' | 'every' | 'except' | 'exit' | 'external' | 'first' |
                                    // 'following' | 'following-sibling' | 'for' | 'ft-option' | 'function' | 'ge' |
                                    // 'group' | 'gt' | 'idiv' | 'if' | 'import' | 'in' | 'index' | 'insert' |
                                    // 'instance' | 'integrity' | 'intersect' | 'into' | 'is' | 'item' | 'json' |
                                    // 'json-item' | 'last' | 'lax' | 'le' | 'let' | 'loop' | 'lt' | 'map' | 'mod' |
                                    // 'modify' | 'module' | 'namespace' | 'namespace-node' | 'ne' | 'node' | 'nodes' |
                                    // 'object' | 'only' | 'option' | 'or' | 'order' | 'ordered' | 'ordering' |
                                    // 'parent' | 'preceding' | 'preceding-sibling' | 'processing-instruction' |
                                    // 'rename' | 'replace' | 'return' | 'returning' | 'revalidation' | 'satisfies' |
                                    // 'schema' | 'schema-attribute' | 'schema-element' | 'score' | 'self' | 'sliding' |
                                    // 'some' | 'stable' | 'start' | 'strict' | 'structured-item' | 'switch' | 'text' |
                                    // 'to' | 'treat' | 'try' | 'tumbling' | 'type' | 'typeswitch' | 'union' |
                                    // 'unordered' | 'updating' | 'validate' | 'value' | 'variable' | 'version' |
                                    // 'where' | 'while' | 'with' | 'xquery'
    whitespace();
    parse_SequenceType();
    eventHandler.endNonterminal("ReturnType", e0);
  }

  function consume(t)
  {
    if (l1 == t)
    {
      whitespace();
      eventHandler.terminal(XQueryParser.TOKEN[l1], b1, e1);
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function consumeT(t)
  {
    if (l1 == t)
    {
      b0 = b1; e0 = e1; l1 = l2; if (l1 != 0) {
      b1 = b2; e1 = e2; l2 = 0; }
    }
    else
    {
      error(b1, e1, 0, l1, t);
    }
  }

  function skip(code)
  {
    var b0W = b0; var e0W = e0; var l1W = l1;
    var b1W = b1; var e1W = e1;

    l1 = code; b1 = begin; e1 = end;
    l2 = 0;

    try_Whitespace();

    b0 = b0W; e0 = e0W; l1 = l1W; if (l1 != 0) {
    b1 = b1W; e1 = e1W; }
  }

  function whitespace()
  {
    if (e0 != b1)
    {
      eventHandler.whitespace(e0, b1);
      e0 = b1;
    }
  }

  function matchW(set)
  {
    var code;
    for (;;)
    {
      code = match(set);
      if (code != 22)               // S^WS
      {
        if (code != 36)             // '(:'
        {
          break;
        }
        skip(code);
      }
    }
    return code;
  }

  function lookahead1W(set)
  {
    if (l1 == 0)
    {
      l1 = matchW(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2W(set)
  {
    if (l2 == 0)
    {
      l2 = matchW(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function lookahead1(set)
  {
    if (l1 == 0)
    {
      l1 = match(set);
      b1 = begin;
      e1 = end;
    }
  }

  function lookahead2(set)
  {
    if (l2 == 0)
    {
      l2 = match(set);
      b2 = begin;
      e2 = end;
    }
    lk = (l2 << 9) | l1;
  }

  function error(b, e, s, l, t)
  {
    if (e >= ex)
    {
      bx = b;
      ex = e;
      sx = s;
      lx = l;
      tx = t;
    }
    throw new self.ParseException(bx, ex, sx, lx, tx);
  }

  var lk, b0, e0;
  var l1, b1, e1;
  var l2, b2, e2;
  var bx, ex, sx, lx, tx;
  var eventHandler;
  var memo;

  function memoize(i, e, v)
  {
    memo[(e << 4) + i] = v;
  }

  function memoized(i, e)
  {
    var v = memo[(e << 4) + i];
    return typeof v != "undefined" ? v : 0;
  }

  var input;
  var size;
  var begin;
  var end;

  function match(tokenSetId)
  {
    var nonbmp = false;
    begin = end;
    var current = end;
    var result = XQueryParser.INITIAL[tokenSetId];
    var state = 0;

    for (var code = result & 4095; code != 0; )
    {
      var charclass;
      var c0 = current < size ? input.charCodeAt(current) : 0;
      ++current;
      if (c0 < 0x80)
      {
        charclass = XQueryParser.MAP0[c0];
      }
      else if (c0 < 0xd800)
      {
        var c1 = c0 >> 4;
        charclass = XQueryParser.MAP1[(c0 & 15) + XQueryParser.MAP1[(c1 & 31) + XQueryParser.MAP1[c1 >> 5]]];
      }
      else
      {
        if (c0 < 0xdc00)
        {
          var c1 = current < size ? input.charCodeAt(current) : 0;
          if (c1 >= 0xdc00 && c1 < 0xe000)
          {
            ++current;
            c0 = ((c0 & 0x3ff) << 10) + (c1 & 0x3ff) + 0x10000;
            nonbmp = true;
          }
        }
        var lo = 0, hi = 5;
        for (var m = 3; ; m = (hi + lo) >> 1)
        {
          if (XQueryParser.MAP2[m] > c0) hi = m - 1;
          else if (XQueryParser.MAP2[6 + m] < c0) lo = m + 1;
          else {charclass = XQueryParser.MAP2[12 + m]; break;}
          if (lo > hi) {charclass = 0; break;}
        }
      }

      state = code;
      var i0 = (charclass << 12) + code - 1;
      code = XQueryParser.TRANSITION[(i0 & 15) + XQueryParser.TRANSITION[i0 >> 4]];

      if (code > 4095)
      {
        result = code;
        code &= 4095;
        end = current;
      }
    }

    result >>= 12;
    if (result == 0)
    {
      end = current - 1;
      var c1 = end < size ? input.charCodeAt(end) : 0;
      if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      return error(begin, end, state, -1, -1);
    }

    if (nonbmp)
    {
      for (var i = result >> 9; i > 0; --i)
      {
        --end;
        var c1 = end < size ? input.charCodeAt(end) : 0;
        if (c1 >= 0xdc00 && c1 < 0xe000) --end;
      }
    }
    else
    {
      end -= result >> 9;
    }

    if (end > size) end = size;
    return (result & 511) - 1;
  }
}

XQueryParser.getTokenSet = function(tokenSetId)
{
  var set = [];
  var s = tokenSetId < 0 ? - tokenSetId : XQueryParser.INITIAL[tokenSetId] & 4095;
  for (var i = 0; i < 285; i += 32)
  {
    var j = i;
    var i0 = (i >> 5) * 3621 + s - 1;
    var i1 = i0 >> 1;
    var i2 = i1 >> 2;
    var f = XQueryParser.EXPECTED[(i0 & 1) + XQueryParser.EXPECTED[(i1 & 3) + XQueryParser.EXPECTED[(i2 & 3) + XQueryParser.EXPECTED[i2 >> 2]]]];
    for ( ; f != 0; f >>>= 1, ++j)
    {
      if ((f & 1) != 0)
      {
        set.push(XQueryParser.TOKEN[j]);
      }
    }
  }
  return set;
};

XQueryParser.TopDownTreeBuilder = function()
{
  var input = null;
  var stack = null;

  this.reset = function(i)
  {
    input = i;
    stack = [];
  };

  this.startNonterminal = function(name, begin)
  {
    var nonterminal = new XQueryParser.Nonterminal(name, begin, begin, []);
    if (stack.length > 0) addChild(nonterminal);
    stack.push(nonterminal);
  };

  this.endNonterminal = function(name, end)
  {
    stack[stack.length - 1].end = end;
    if (stack.length > 1) stack.pop();
  };

  this.terminal = function(name, begin, end)
  {
    addChild(new XQueryParser.Terminal(name, begin, end));
  };

  this.whitespace = function(begin, end)
  {
  };

  function addChild(s)
  {
    var current = stack[stack.length - 1];
    current.children.push(s);
  }

  this.serialize = function(e)
  {
    e.reset(input);
    stack[0].send(e);
  };
}

XQueryParser.Terminal = function(name, begin, end)
{
  this.begin = begin;
  this.end = end;
  this.name = name;

  this.send = function(e)
  {
    e.terminal(name, begin, end);
  }
}

XQueryParser.Nonterminal = function(name, begin, end, children)
{
  this.begin = begin;
  this.end = end;
  this.name = name;
  this.children = children;

  this.send = function(e)
  {
    e.startNonterminal(name, begin);
    var pos = begin;
    children.forEach
    (
      function(c)
      {
        if (pos < c.begin) e.whitespace(pos, c.begin);
        c.send(e);
        pos = c.end;
      }
    );
    if (pos < end) e.whitespace(pos, end);
    e.endNonterminal(name, end);
  }
}

XQueryParser.MAP0 =
[
  /*   0 */ 70, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4,
  /*  36 */ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23,
  /*  64 */ 24, 25, 26, 27, 28, 29, 26, 30, 30, 30, 30, 30, 31, 32, 33, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30,
  /*  91 */ 37, 38, 39, 38, 30, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
  /* 118 */ 61, 62, 63, 64, 65, 66, 67, 68, 38, 38
];

XQueryParser.MAP1 =
[
  /*   0 */ 108, 124, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 156, 181, 181, 181, 181,
  /*  21 */ 181, 214, 215, 213, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  42 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  63 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /*  84 */ 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214,
  /* 105 */ 214, 214, 214, 247, 261, 277, 293, 309, 355, 371, 387, 423, 423, 423, 415, 339, 331, 339, 331, 339, 339,
  /* 126 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 440, 440, 440, 440, 440, 440, 440,
  /* 147 */ 324, 339, 339, 339, 339, 339, 339, 339, 339, 401, 423, 423, 424, 422, 423, 423, 339, 339, 339, 339, 339,
  /* 168 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 189 */ 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423, 423,
  /* 210 */ 423, 423, 423, 338, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
  /* 231 */ 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 339, 423, 70, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 256 */ 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
  /* 290 */ 14, 15, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 26, 30,
  /* 317 */ 30, 30, 30, 30, 31, 32, 33, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 38, 30, 30, 30, 30, 30,
  /* 344 */ 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34, 30, 30, 35, 30, 30, 30, 36, 30, 30, 37, 38, 39, 38, 30,
  /* 371 */ 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
  /* 398 */ 66, 67, 68, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 30, 30, 38, 38, 38, 38, 38, 38, 38, 69, 38, 38,
  /* 425 */ 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
  /* 452 */ 69, 69, 69, 69
];

XQueryParser.MAP2 =
[
  /*  0 */ 57344, 63744, 64976, 65008, 65536, 983040, 63743, 64975, 65007, 65533, 983039, 1114111, 38, 30, 38, 30, 30,
  /* 17 */ 38
];

XQueryParser.INITIAL =
[
  /*   0 */ 1, 12290, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,
  /*  28 */ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
  /*  55 */ 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
  /*  82 */ 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
  /* 107 */ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
  /* 128 */ 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,
  /* 149 */ 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
  /* 170 */ 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
  /* 191 */ 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
  /* 212 */ 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
  /* 233 */ 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254,
  /* 254 */ 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
  /* 275 */ 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289
];

XQueryParser.TRANSITION =
[
  /*     0 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*    15 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*    30 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*    45 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*    60 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*    75 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*    90 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*   105 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*   120 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*   135 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*   150 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*   165 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*   180 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*   195 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*   210 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*   225 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*   240 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*   255 */ 31240, 18176, 18207, 18211, 18211, 18211, 18240, 18211, 18211, 18211, 18211, 18252, 18211, 18211, 18211,
  /*   270 */ 18211, 18227, 18211, 18211, 18191, 18268, 31240, 31240, 21299, 31239, 31240, 51194, 31240, 31240, 31240,
  /*   285 */ 31240, 31240, 31240, 31240, 21789, 18673, 18461, 20734, 18464, 20726, 19688, 18286, 42767, 18305, 28848,
  /*   300 */ 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758, 20424, 24669, 18411, 18439, 19834, 19232, 20089,
  /*   315 */ 18480, 18997, 20345, 19237, 20094, 18485, 19002, 18501, 31240, 31240, 18517, 31240, 31240, 31240, 18541,
  /*   330 */ 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468, 18671, 18664, 18452, 26204, 18690, 25230, 18461,
  /*   345 */ 18709, 18728, 26207, 18693, 25233, 18461, 18712, 19063, 31240, 41151, 18750, 23065, 37991, 18787, 18820,
  /*   360 */ 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866, 18882, 19629, 25151, 18919, 18946, 18957, 18973,
  /*   375 */ 19629, 25151, 18919, 18946, 18957, 19018, 19062, 24959, 19079, 19114, 19130, 50487, 19168, 41853, 19184,
  /*   390 */ 19210, 19558, 19823, 20410, 19253, 19269, 19292, 19315, 19338, 19361, 19262, 19285, 19308, 19331, 19354,
  /*   405 */ 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521, 19544, 19574, 19616, 25265, 19647, 24848, 19665,
  /*   420 */ 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755, 19777, 19795, 20460, 19811, 19850, 19925, 19942,
  /*   435 */ 19908, 19924, 19941, 19958, 22053, 20008, 20024, 20060, 20110, 20126, 19886, 20142, 19876, 19892, 20148,
  /*   450 */ 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314, 20330, 20380, 20396, 25481, 18930, 25494, 20446,
  /*   465 */ 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564, 20519, 20606, 20580, 20622, 20652, 19484, 20668,
  /*   480 */ 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*   495 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*   510 */ 31240, 31240, 20777, 31240, 31240, 31240, 31240, 27611, 31240, 31240, 31240, 31240, 32629, 48092, 48100,
  /*   525 */ 20796, 20808, 20820, 48430, 20044, 20845, 18268, 31240, 31240, 21299, 31239, 31240, 51194, 28671, 31240,
  /*   540 */ 31240, 31240, 31240, 31240, 31240, 21789, 18673, 18461, 20734, 21147, 19032, 19688, 18286, 42767, 18305,
  /*   555 */ 28848, 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758, 20424, 24669, 18411, 18439, 19834, 19232,
  /*   570 */ 20089, 18480, 18997, 20345, 19237, 20094, 18485, 19002, 18501, 31240, 31240, 18517, 31240, 31240, 31240,
  /*   585 */ 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468, 18671, 18664, 18452, 26204, 18690, 25230,
  /*   600 */ 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712, 19063, 31240, 41151, 18750, 23065, 37991, 18787,
  /*   615 */ 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866, 18882, 19629, 25151, 18919, 18946, 18957,
  /*   630 */ 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062, 24959, 19079, 19114, 19130, 50487, 19168, 41853,
  /*   645 */ 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292, 19315, 19338, 19361, 19262, 19285, 19308, 19331,
  /*   660 */ 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521, 19544, 19574, 19616, 25265, 19647, 24848,
  /*   675 */ 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755, 19777, 19795, 20460, 19811, 19850, 19925,
  /*   690 */ 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024, 20060, 20110, 20126, 19886, 20142, 19876, 19892,
  /*   705 */ 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314, 20330, 20380, 20396, 25481, 18930, 25494,
  /*   720 */ 20446, 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564, 20519, 20606, 20580, 20622, 20652, 19484,
  /*   735 */ 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*   750 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*   765 */ 31240, 31240, 31240, 20861, 20877, 31240, 31240, 31240, 36098, 31240, 31240, 41158, 42773, 20909, 31240,
  /*   780 */ 31240, 31240, 31240, 18289, 18326, 20896, 20925, 20941, 31240, 31240, 21299, 31239, 31240, 20829, 31240,
  /*   795 */ 31240, 31240, 31240, 31240, 31240, 31240, 21789, 18673, 18461, 20734, 18464, 20726, 20636, 18286, 42767,
  /*   810 */ 18305, 28848, 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758, 20424, 24669, 18411, 18439, 19834,
  /*   825 */ 19232, 20089, 18480, 18997, 20345, 19237, 20094, 18485, 19002, 18501, 31240, 31240, 18517, 31240, 31240,
  /*   840 */ 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468, 18671, 18664, 18452, 26204, 18690,
  /*   855 */ 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712, 19063, 31240, 41151, 18750, 23065, 37991,
  /*   870 */ 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866, 18882, 19629, 25151, 18919, 18946,
  /*   885 */ 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062, 24959, 19079, 19114, 19130, 50487, 19168,
  /*   900 */ 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292, 19315, 19338, 19361, 19262, 19285, 19308,
  /*   915 */ 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521, 19544, 19574, 19616, 25265, 19647,
  /*   930 */ 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755, 19777, 19795, 20460, 19811, 19850,
  /*   945 */ 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024, 20060, 20110, 20126, 19886, 20142, 19876,
  /*   960 */ 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314, 20330, 20380, 20396, 25481, 18930,
  /*   975 */ 25494, 20446, 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564, 20519, 20606, 20580, 20622, 20652,
  /*   990 */ 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  1005 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  1020 */ 31240, 31240, 31240, 31240, 20959, 21044, 31240, 31240, 31240, 23939, 31240, 31240, 33807, 31240, 32629,
  /*  1035 */ 21071, 20986, 21012, 21002, 21034, 21065, 48666, 21087, 18268, 31240, 31240, 21299, 21103, 31240, 51194,
  /*  1050 */ 21124, 31240, 31240, 31240, 31240, 31240, 31240, 21789, 18673, 18461, 20734, 18464, 20726, 19046, 18286,
  /*  1065 */ 42767, 18305, 28848, 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758, 20424, 24669, 18411, 18439,
  /*  1080 */ 19834, 19232, 20089, 18480, 18997, 20345, 19237, 20094, 18485, 19002, 18501, 31240, 31240, 18517, 31240,
  /*  1095 */ 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468, 18671, 18664, 19223, 26204,
  /*  1110 */ 18690, 25230, 18461, 18709, 21141, 26207, 18693, 25233, 18461, 18712, 19063, 31240, 41151, 18750, 23065,
  /*  1125 */ 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866, 18882, 19629, 25151, 18919,
  /*  1140 */ 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062, 24959, 19079, 19114, 19130, 50487,
  /*  1155 */ 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292, 19315, 19338, 19361, 19262, 19285,
  /*  1170 */ 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521, 19544, 19574, 19616, 25265,
  /*  1185 */ 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755, 19777, 19795, 20460, 19811,
  /*  1200 */ 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024, 20060, 20110, 20126, 19886, 20142,
  /*  1215 */ 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314, 20330, 20380, 20396, 25481,
  /*  1230 */ 18930, 25494, 20446, 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564, 20519, 20606, 20580, 20622,
  /*  1245 */ 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  1260 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  1275 */ 31240, 31240, 31240, 31240, 31240, 20777, 50871, 31240, 31240, 31240, 27653, 50876, 31240, 42151, 31240,
  /*  1290 */ 21198, 41626, 21163, 31240, 21170, 31240, 49989, 21186, 21214, 18268, 31240, 31240, 21299, 31239, 31240,
  /*  1305 */ 51194, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 21789, 18673, 18461, 20734, 18464, 20726, 19688,
  /*  1320 */ 18286, 42767, 18305, 28848, 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758, 20424, 24669, 18411,
  /*  1335 */ 18439, 19834, 19232, 20089, 18480, 18997, 20345, 19237, 20094, 18485, 19002, 18501, 31240, 31240, 18517,
  /*  1350 */ 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468, 18671, 18664, 18452,
  /*  1365 */ 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712, 19063, 31240, 41151, 18750,
  /*  1380 */ 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866, 18882, 19629, 25151,
  /*  1395 */ 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062, 24959, 19079, 19114, 19130,
  /*  1410 */ 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292, 19315, 19338, 19361, 19262,
  /*  1425 */ 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521, 19544, 19574, 19616,
  /*  1440 */ 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755, 19777, 19795, 20460,
  /*  1455 */ 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024, 20060, 20110, 20126, 19886,
  /*  1470 */ 20142, 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314, 20330, 20380, 20396,
  /*  1485 */ 25481, 18930, 25494, 20446, 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564, 20519, 20606, 20580,
  /*  1500 */ 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  1515 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  1530 */ 31240, 31240, 31240, 31240, 31240, 31240, 20777, 31240, 31240, 31240, 31240, 27611, 38569, 31240, 31240,
  /*  1545 */ 31240, 41654, 31240, 31240, 21243, 31240, 31240, 38555, 21230, 21265, 18268, 31240, 31240, 21299, 31239,
  /*  1560 */ 31240, 51194, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 21789, 18673, 18461, 20734, 18464, 20726,
  /*  1575 */ 19688, 18286, 42767, 18305, 28848, 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758, 20424, 24669,
  /*  1590 */ 18411, 18439, 19834, 19232, 20089, 18480, 18997, 20345, 19237, 20094, 18485, 19002, 18501, 31240, 31240,
  /*  1605 */ 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468, 18671, 18664,
  /*  1620 */ 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712, 19063, 31240, 41151,
  /*  1635 */ 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866, 18882, 19629,
  /*  1650 */ 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062, 24959, 19079, 19114,
  /*  1665 */ 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292, 19315, 19338, 19361,
  /*  1680 */ 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521, 19544, 19574,
  /*  1695 */ 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755, 19777, 19795,
  /*  1710 */ 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024, 20060, 20110, 20126,
  /*  1725 */ 19886, 20142, 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314, 20330, 20380,
  /*  1740 */ 20396, 25481, 18930, 25494, 20446, 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564, 20519, 20606,
  /*  1755 */ 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  1770 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  1785 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 20777, 31240, 31240, 31240, 31240, 27611, 31240, 31240,
  /*  1800 */ 31240, 31240, 33636, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 21281, 21297, 31240, 31240, 21299,
  /*  1815 */ 31239, 31240, 51194, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 21789, 18673, 18461, 20734, 18464,
  /*  1830 */ 20726, 19688, 18286, 42767, 18305, 28848, 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758, 20424,
  /*  1845 */ 24669, 18411, 18439, 19600, 19232, 20089, 18480, 18997, 20595, 19237, 20094, 18485, 19002, 18501, 31240,
  /*  1860 */ 31240, 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468, 18671,
  /*  1875 */ 18664, 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712, 19063, 31240,
  /*  1890 */ 41151, 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866, 18882,
  /*  1905 */ 19629, 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062, 24959, 19079,
  /*  1920 */ 19114, 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292, 19315, 19338,
  /*  1935 */ 19361, 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521, 19544,
  /*  1950 */ 19574, 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755, 19777,
  /*  1965 */ 19795, 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024, 20060, 20110,
  /*  1980 */ 20126, 19886, 20142, 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314, 20330,
  /*  1995 */ 20380, 20396, 25481, 18930, 25494, 20446, 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564, 20519,
  /*  2010 */ 20606, 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  2025 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  2040 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 21315, 21331, 31240, 31240, 31240, 19505, 31240,
  /*  2055 */ 31240, 22092, 19710, 21363, 31240, 31240, 31240, 31240, 20780, 20761, 21350, 21379, 21395, 31240, 31240,
  /*  2070 */ 21299, 31239, 31240, 51194, 21413, 31240, 31240, 31240, 31240, 31240, 31240, 21789, 18673, 18461, 20734,
  /*  2085 */ 18464, 20726, 20176, 18286, 42767, 18305, 28848, 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758,
  /*  2100 */ 20424, 24669, 18411, 18439, 19834, 19232, 20089, 18480, 18997, 20345, 19237, 20094, 18485, 19002, 18501,
  /*  2115 */ 31240, 31240, 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468,
  /*  2130 */ 18671, 18664, 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712, 19063,
  /*  2145 */ 31240, 41151, 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866,
  /*  2160 */ 18882, 19629, 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062, 24959,
  /*  2175 */ 19079, 19114, 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292, 19315,
  /*  2190 */ 19338, 19361, 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521,
  /*  2205 */ 19544, 19574, 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755,
  /*  2220 */ 19777, 19795, 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024, 20060,
  /*  2235 */ 20110, 20126, 19886, 20142, 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314,
  /*  2250 */ 20330, 20380, 20396, 25481, 18930, 25494, 20446, 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564,
  /*  2265 */ 20519, 20606, 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240,
  /*  2280 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  2295 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 21433, 21448, 21476, 21476, 21476, 21455,
  /*  2310 */ 21471, 21476, 21481, 21571, 21497, 21512, 21598, 21565, 21538, 21525, 21549, 21587, 21614, 18268, 31240,
  /*  2325 */ 31240, 50505, 23203, 31240, 51194, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 21789, 18673, 18461,
  /*  2340 */ 20734, 18464, 20726, 19688, 18286, 42767, 18305, 23195, 31240, 42307, 31240, 31240, 18321, 18342, 18374,
  /*  2355 */ 42758, 20424, 24669, 18411, 18439, 19834, 19232, 20089, 18480, 18997, 20345, 19237, 20094, 18485, 19002,
  /*  2370 */ 18501, 31240, 31240, 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650,
  /*  2385 */ 20468, 18671, 18664, 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712,
  /*  2400 */ 19063, 31240, 41151, 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854,
  /*  2415 */ 18866, 18882, 19629, 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062,
  /*  2430 */ 24959, 19079, 19114, 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292,
  /*  2445 */ 19315, 19338, 19361, 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455,
  /*  2460 */ 19521, 19544, 19574, 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726,
  /*  2475 */ 19755, 19777, 19795, 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024,
  /*  2490 */ 20060, 20110, 20126, 19886, 20142, 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298,
  /*  2505 */ 20314, 20330, 20380, 20396, 25481, 18930, 25494, 20446, 18674, 18461, 18734, 20484, 26195, 20510, 20535,
  /*  2520 */ 20564, 20519, 20606, 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240,
  /*  2535 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  2550 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 20777, 48258, 31240, 31240, 31240,
  /*  2565 */ 21673, 51225, 31240, 39927, 51231, 32629, 48258, 31240, 21630, 21636, 21652, 48647, 48265, 21689, 18268,
  /*  2580 */ 31240, 31240, 21299, 21705, 31240, 51194, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 21789, 18673,
  /*  2595 */ 18461, 20734, 18464, 20726, 19688, 18286, 42767, 18305, 27613, 31240, 42307, 31240, 31240, 18321, 18342,
  /*  2610 */ 18374, 42758, 20424, 24669, 18411, 18439, 19834, 19232, 20089, 18480, 18997, 20345, 19237, 20094, 18485,
  /*  2625 */ 19002, 18501, 31240, 31240, 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671,
  /*  2640 */ 18650, 20468, 18671, 18664, 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461,
  /*  2655 */ 18712, 19063, 31240, 41151, 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588,
  /*  2670 */ 18854, 18866, 18882, 19629, 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018,
  /*  2685 */ 19062, 24959, 19079, 19114, 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269,
  /*  2700 */ 19292, 19315, 19338, 19361, 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420,
  /*  2715 */ 19455, 19521, 19544, 19574, 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704,
  /*  2730 */ 19726, 19755, 19777, 19795, 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008,
  /*  2745 */ 20024, 20060, 20110, 20126, 19886, 20142, 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311,
  /*  2760 */ 20298, 20314, 20330, 20380, 20396, 25481, 18930, 25494, 20446, 18674, 18461, 18734, 20484, 26195, 20510,
  /*  2775 */ 20535, 20564, 20519, 20606, 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240,
  /*  2790 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  2805 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 20777, 49810, 31240, 31240,
  /*  2820 */ 31240, 27611, 31240, 31240, 31240, 42793, 43781, 21746, 21722, 21740, 21724, 21762, 21809, 21840, 21824,
  /*  2835 */ 18268, 31240, 31240, 21299, 31239, 31240, 51194, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 21789,
  /*  2850 */ 18673, 18461, 20734, 18464, 20726, 19688, 18286, 42767, 18305, 28848, 31240, 42307, 31240, 31240, 18321,
  /*  2865 */ 18342, 18374, 42758, 20424, 24669, 18411, 18439, 19834, 19232, 20089, 18480, 18997, 25219, 19237, 20094,
  /*  2880 */ 18485, 19002, 18501, 31240, 31240, 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612,
  /*  2895 */ 18671, 18650, 20468, 18671, 18664, 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233,
  /*  2910 */ 18461, 18712, 19063, 31240, 41151, 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872,
  /*  2925 */ 19588, 18854, 18866, 18882, 19629, 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957,
  /*  2940 */ 19018, 19062, 24959, 19079, 19114, 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253,
  /*  2955 */ 19269, 19292, 19315, 19338, 19361, 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425,
  /*  2970 */ 45420, 19455, 19521, 19544, 19574, 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681,
  /*  2985 */ 19704, 19726, 19755, 19777, 19795, 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053,
  /*  3000 */ 20008, 20024, 20060, 20110, 20126, 19886, 20142, 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468,
  /*  3015 */ 20311, 20298, 20314, 20330, 20380, 20396, 25481, 18930, 25494, 20446, 18674, 18461, 18734, 20484, 26195,
  /*  3030 */ 20510, 20535, 20564, 20519, 20606, 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240,
  /*  3045 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  3060 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 20777, 31240, 31240,
  /*  3075 */ 31240, 31240, 27611, 31240, 31240, 31240, 35394, 43833, 21885, 21856, 21879, 21856, 21863, 44206, 21856,
  /*  3090 */ 21901, 18268, 31240, 31240, 21299, 31239, 31240, 51194, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  3105 */ 21789, 18673, 18461, 20734, 18464, 20726, 19688, 18286, 42767, 18305, 28848, 31240, 42307, 21917, 31240,
  /*  3120 */ 18321, 18342, 18374, 42758, 20424, 24669, 18411, 18439, 19834, 19232, 20089, 18480, 18997, 20345, 19237,
  /*  3135 */ 20094, 18485, 19002, 18501, 31240, 31240, 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575,
  /*  3150 */ 18612, 18671, 18650, 20468, 18671, 18664, 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693,
  /*  3165 */ 25233, 18461, 18712, 19063, 31240, 41151, 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793,
  /*  3180 */ 23872, 19588, 18854, 18866, 18882, 19629, 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946,
  /*  3195 */ 18957, 19018, 19062, 24959, 19079, 19114, 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410,
  /*  3210 */ 19253, 19269, 19292, 19315, 19338, 19361, 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240,
  /*  3225 */ 19425, 45420, 19455, 19521, 19544, 19574, 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663,
  /*  3240 */ 19681, 19704, 19726, 19755, 19777, 19795, 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958,
  /*  3255 */ 22053, 20008, 20024, 20060, 20110, 20126, 19886, 20142, 19876, 19892, 20148, 20164, 20192, 20229, 20271,
  /*  3270 */ 25468, 20311, 20298, 20314, 20330, 20380, 20396, 25481, 18930, 25494, 20446, 18674, 18461, 18734, 20484,
  /*  3285 */ 26195, 20510, 20535, 20564, 20519, 20606, 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240,
  /*  3300 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  3315 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 20777, 21962,
  /*  3330 */ 31240, 31240, 31240, 27611, 21934, 31240, 41671, 21958, 44656, 21978, 22015, 22019, 22019, 22035, 50118,
  /*  3345 */ 43190, 22069, 18268, 31240, 31240, 21299, 31239, 31240, 51194, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  3360 */ 31240, 21789, 18673, 18461, 20734, 18464, 20726, 19688, 18286, 42767, 18305, 28848, 31240, 42307, 31240,
  /*  3375 */ 31240, 18321, 18342, 18374, 42758, 20424, 24669, 18411, 18439, 19834, 19232, 20089, 18480, 18997, 20345,
  /*  3390 */ 19237, 20094, 18485, 19002, 18501, 31240, 31240, 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581,
  /*  3405 */ 50575, 18612, 18671, 18650, 20468, 18671, 18664, 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207,
  /*  3420 */ 18693, 25233, 18461, 18712, 19063, 31240, 41151, 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635,
  /*  3435 */ 21793, 23872, 19588, 18854, 18866, 18882, 19629, 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919,
  /*  3450 */ 18946, 18957, 19018, 19062, 24959, 19079, 19114, 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823,
  /*  3465 */ 20410, 19253, 19269, 19292, 19315, 19338, 19361, 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409,
  /*  3480 */ 31240, 19425, 45420, 19455, 19521, 19544, 19574, 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846,
  /*  3495 */ 19663, 19681, 19704, 19726, 19755, 19777, 19795, 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941,
  /*  3510 */ 19958, 22053, 20008, 20024, 20060, 20110, 20126, 19886, 20142, 19876, 19892, 20148, 20164, 20192, 20229,
  /*  3525 */ 20271, 25468, 20311, 20298, 20314, 20330, 20380, 20396, 25481, 18930, 25494, 20446, 18674, 18461, 18734,
  /*  3540 */ 20484, 26195, 20510, 20535, 20564, 20519, 20606, 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756,
  /*  3555 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  3570 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 22085,
  /*  3585 */ 31240, 31240, 31240, 31240, 27611, 31240, 31240, 31240, 31240, 32629, 22137, 22108, 22131, 22108, 22115,
  /*  3600 */ 44383, 22108, 22153, 18268, 31240, 31240, 21299, 31239, 31240, 51194, 31240, 31240, 31240, 31240, 31240,
  /*  3615 */ 31240, 31240, 38014, 41916, 46200, 31553, 22373, 31545, 22169, 31240, 22189, 31240, 28848, 24258, 42307,
  /*  3630 */ 21917, 22210, 31240, 31240, 31240, 31240, 29973, 31903, 29973, 29973, 31912, 46200, 22229, 46200, 46200,
  /*  3645 */ 30258, 33986, 22292, 22292, 42248, 42535, 31240, 31240, 31240, 31240, 31240, 31240, 21780, 35584, 22248,
  /*  3660 */ 31240, 31240, 38013, 29973, 29973, 29973, 29973, 29973, 22269, 46200, 46200, 46200, 46200, 46200, 22290,
  /*  3675 */ 22292, 22292, 22292, 22292, 27572, 33168, 31240, 22309, 31240, 31240, 31240, 31240, 31240, 37315, 31240,
  /*  3690 */ 31240, 48287, 44439, 29973, 29973, 29973, 29439, 34406, 34635, 46200, 22325, 46200, 46202, 22344, 39849,
  /*  3705 */ 22292, 22370, 22292, 27571, 33167, 31240, 31240, 31240, 31240, 31240, 31271, 31240, 38013, 29973, 22389,
  /*  3720 */ 29973, 29973, 30195, 46200, 32767, 46200, 46200, 46202, 22410, 22292, 22430, 22292, 22292, 33160, 27549,
  /*  3735 */ 31240, 31240, 34151, 31240, 50877, 29973, 29973, 29973, 22447, 46200, 46200, 46200, 22507, 22291, 22292,
  /*  3750 */ 22292, 22533, 34723, 22553, 31240, 33593, 31240, 40887, 22573, 29973, 46197, 22592, 46200, 46225, 22610,
  /*  3765 */ 22292, 35106, 31240, 31240, 22629, 50169, 40550, 29973, 22650, 22674, 34233, 22692, 22292, 38669, 31240,
  /*  3780 */ 22799, 38016, 22727, 49325, 22752, 48846, 22776, 27240, 49402, 22820, 22889, 22874, 47492, 44496, 28367,
  /*  3795 */ 22373, 38015, 40789, 46223, 28111, 22916, 46053, 28111, 38917, 46223, 34333, 33383, 32171, 45394, 27223,
  /*  3810 */ 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  3825 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  3840 */ 20777, 31240, 31240, 31240, 31240, 27611, 31240, 31240, 31240, 25904, 32629, 31240, 31240, 31240, 31240,
  /*  3855 */ 31240, 34025, 22966, 22981, 18268, 31240, 31240, 21299, 31239, 31240, 21771, 31240, 31240, 31240, 31240,
  /*  3870 */ 31240, 31240, 31240, 38014, 41916, 46200, 31553, 29477, 31545, 22169, 31240, 31240, 31240, 28848, 31240,
  /*  3885 */ 42307, 31240, 31240, 31240, 31240, 31240, 31240, 29973, 29973, 29973, 29973, 31912, 46200, 46200, 46200,
  /*  3900 */ 46200, 30258, 22292, 22292, 22292, 30262, 42535, 31240, 31240, 31240, 31240, 31240, 31240, 21780, 31240,
  /*  3915 */ 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 29973, 22269, 46200, 46200, 46200, 46200, 46200,
  /*  3930 */ 22290, 22292, 22292, 22292, 22292, 27572, 33168, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  3945 */ 31240, 31240, 40887, 29973, 29973, 29973, 29973, 29439, 31820, 46200, 46200, 46200, 46200, 46202, 22412,
  /*  3960 */ 22292, 22292, 22292, 22292, 27571, 33167, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38013, 29973,
  /*  3975 */ 29973, 29973, 29973, 30195, 46200, 46200, 46200, 46200, 46202, 22410, 22292, 22292, 22292, 22292, 33160,
  /*  3990 */ 27549, 31240, 31240, 31240, 31240, 50877, 29973, 29973, 29973, 29440, 46200, 46200, 46200, 46201, 22291,
  /*  4005 */ 22292, 22292, 22292, 34723, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 46197, 46200, 46200, 46225,
  /*  4020 */ 22292, 22292, 38670, 31240, 31240, 31240, 38012, 29973, 29973, 46198, 46200, 48162, 22292, 22292, 38669,
  /*  4035 */ 31240, 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240, 38016, 38918, 48163, 22414, 40503, 41917,
  /*  4050 */ 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917, 46223, 34333, 33383, 32171, 45394,
  /*  4065 */ 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  4080 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  4095 */ 31240, 20777, 22997, 31240, 31240, 31240, 30931, 31240, 31240, 31240, 31240, 32629, 50713, 23017, 23034,
  /*  4110 */ 50717, 23056, 34529, 23018, 23081, 18268, 31240, 31240, 21299, 31239, 31240, 51194, 47001, 31240, 49519,
  /*  4125 */ 31240, 31240, 31240, 31240, 21789, 18673, 18461, 20734, 18464, 20726, 19688, 18286, 42767, 18305, 28848,
  /*  4140 */ 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758, 20424, 24669, 18411, 18439, 19834, 19232, 20089,
  /*  4155 */ 18480, 18997, 20345, 19237, 20094, 18485, 19002, 18501, 31240, 31240, 18517, 31240, 31240, 31240, 18541,
  /*  4170 */ 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468, 18671, 18664, 18452, 26204, 18690, 25230, 18461,
  /*  4185 */ 18709, 18728, 26207, 18693, 25233, 18461, 18712, 19063, 31240, 41151, 18750, 23065, 37991, 18787, 18820,
  /*  4200 */ 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866, 18882, 19629, 25151, 18919, 18946, 18957, 18973,
  /*  4215 */ 19629, 25151, 18919, 18946, 18957, 19018, 19062, 24959, 19079, 19114, 19130, 50487, 19168, 41853, 19184,
  /*  4230 */ 19210, 19558, 19823, 20410, 19253, 19269, 19292, 19315, 19338, 19361, 19262, 19285, 19308, 19331, 19354,
  /*  4245 */ 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521, 19544, 19574, 19616, 25265, 19647, 24848, 19665,
  /*  4260 */ 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755, 19777, 19795, 20460, 19811, 19850, 19925, 19942,
  /*  4275 */ 19908, 19924, 19941, 19958, 22053, 20008, 20024, 20060, 20110, 20126, 19886, 20142, 19876, 19892, 20148,
  /*  4290 */ 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314, 20330, 20380, 20396, 25481, 18930, 25494, 20446,
  /*  4305 */ 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564, 20519, 20606, 20580, 20622, 20652, 19484, 20668,
  /*  4320 */ 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  4335 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  4350 */ 31240, 31240, 20777, 23127, 31240, 31240, 31240, 27611, 31240, 31240, 31240, 26863, 32629, 31240, 31240,
  /*  4365 */ 31240, 31240, 31240, 23097, 23144, 23112, 18268, 31240, 31240, 21299, 31239, 31240, 35043, 31240, 31240,
  /*  4380 */ 31240, 31240, 31240, 31240, 31240, 38014, 41916, 46200, 31553, 22613, 31545, 22169, 31240, 31240, 31240,
  /*  4395 */ 28848, 31240, 51232, 23160, 31240, 31240, 31240, 31240, 31240, 29973, 29973, 29973, 29973, 31912, 46200,
  /*  4410 */ 46200, 46200, 46200, 30258, 22292, 22292, 22292, 30262, 42535, 23182, 31240, 31240, 31240, 31240, 31240,
  /*  4425 */ 36694, 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 29973, 22269, 46200, 46200, 46200,
  /*  4440 */ 46200, 46200, 22290, 22292, 22292, 22292, 22292, 27572, 32830, 23220, 31240, 31240, 31240, 31240, 31240,
  /*  4455 */ 34485, 31240, 31240, 31240, 40887, 29973, 29973, 29973, 29973, 29908, 31820, 46200, 46200, 46200, 46200,
  /*  4470 */ 35071, 22412, 22292, 22292, 22292, 22292, 27571, 28501, 23236, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  4485 */ 38013, 29973, 29973, 29973, 29973, 31809, 46200, 46200, 46200, 46200, 42010, 22410, 22292, 22292, 22292,
  /*  4500 */ 22292, 33160, 27549, 31240, 31240, 31240, 31240, 50877, 29973, 29973, 29973, 32438, 46200, 46200, 46200,
  /*  4515 */ 44104, 22291, 22292, 22292, 22292, 34723, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 46197, 46200,
  /*  4530 */ 46200, 46225, 22292, 22292, 38670, 31240, 31240, 31240, 38012, 29973, 29973, 46198, 46200, 48162, 22292,
  /*  4545 */ 22292, 38669, 31240, 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240, 38016, 38918, 48163, 22414,
  /*  4560 */ 40503, 41917, 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917, 46223, 34333, 33383,
  /*  4575 */ 32171, 45394, 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  4590 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  4605 */ 31240, 31240, 31240, 20777, 19761, 31240, 31240, 31240, 29704, 18525, 31240, 31240, 23256, 32629, 26833,
  /*  4620 */ 43103, 23293, 23299, 23315, 31240, 21049, 23340, 23356, 31240, 31240, 50777, 23378, 31240, 51194, 31240,
  /*  4635 */ 31240, 31240, 31240, 31240, 31240, 31240, 21789, 19527, 24419, 23410, 23441, 23470, 23496, 18286, 42767,
  /*  4650 */ 18305, 22044, 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758, 20424, 24669, 18411, 18439, 20282,
  /*  4665 */ 24371, 23616, 23399, 24364, 24302, 23558, 24597, 23432, 23457, 23512, 31240, 31240, 18517, 31240, 31240,
  /*  4680 */ 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468, 18671, 18664, 18625, 24104, 24342,
  /*  4695 */ 24353, 24419, 24415, 23528, 23534, 23550, 24223, 23438, 23574, 23746, 31240, 41151, 18750, 23065, 37991,
  /*  4710 */ 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866, 18882, 24082, 23643, 23776, 23632,
  /*  4725 */ 51287, 24289, 23659, 24313, 24025, 23705, 24232, 23674, 23745, 24959, 19079, 19114, 19130, 50487, 19168,
  /*  4740 */ 41853, 19184, 19210, 19558, 19823, 20410, 23762, 23803, 23830, 24401, 23888, 23918, 23955, 23986, 24012,
  /*  4755 */ 23717, 24053, 23689, 24797, 19409, 31240, 19425, 45420, 19455, 19521, 19544, 19574, 24069, 24098, 24120,
  /*  4770 */ 23589, 24157, 23483, 24623, 24037, 24210, 24248, 19704, 19726, 19755, 19777, 19795, 20460, 19811, 24274,
  /*  4785 */ 24134, 23604, 23902, 24610, 24466, 23729, 22053, 20008, 20024, 20060, 20110, 20126, 24329, 24387, 23787,
  /*  4800 */ 24438, 24453, 24482, 20192, 20229, 20271, 25468, 24534, 24550, 24566, 24582, 24639, 20396, 20548, 24141,
  /*  4815 */ 23970, 24655, 19528, 24422, 23416, 20484, 51278, 23845, 23859, 24685, 18634, 23996, 24701, 24737, 24767,
  /*  4830 */ 23814, 24783, 24751, 24817, 24716, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  4845 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  4860 */ 31240, 31240, 31240, 31240, 20777, 45066, 31240, 31240, 31240, 27611, 24869, 31240, 31240, 24864, 33770,
  /*  4875 */ 24885, 24914, 24914, 24914, 24892, 45064, 24908, 24930, 18268, 31240, 31240, 21299, 31239, 31240, 51194,
  /*  4890 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 21789, 18673, 18461, 20734, 18464, 20726, 19688, 18286,
  /*  4905 */ 42767, 18305, 28848, 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758, 20424, 24669, 18411, 18439,
  /*  4920 */ 19834, 19232, 20089, 18480, 18997, 20345, 19237, 20094, 18485, 19002, 18501, 31240, 31240, 18517, 31240,
  /*  4935 */ 31240, 31240, 24946, 24993, 31240, 18581, 50575, 18612, 18671, 18650, 20468, 18671, 18664, 18452, 26204,
  /*  4950 */ 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712, 18423, 25101, 25030, 18750, 23065,
  /*  4965 */ 37991, 18787, 25053, 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866, 18882, 19629, 25151, 18919,
  /*  4980 */ 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 25088, 25112, 19079, 19114, 19130, 50487,
  /*  4995 */ 19168, 41853, 19184, 19210, 19558, 19823, 20410, 25137, 19269, 19292, 19315, 19338, 25167, 25204, 19285,
  /*  5010 */ 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521, 19544, 19574, 25249, 25265,
  /*  5025 */ 19647, 24848, 25281, 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755, 19777, 19795, 20460, 19811,
  /*  5040 */ 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024, 20060, 20110, 20126, 19886, 20142,
  /*  5055 */ 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314, 20330, 20380, 20396, 25481,
  /*  5070 */ 18930, 25494, 20446, 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564, 20519, 20606, 20580, 20622,
  /*  5085 */ 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  5100 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  5115 */ 31240, 31240, 31240, 31240, 31240, 20777, 31240, 31240, 31240, 31240, 27611, 31240, 31240, 31240, 31240,
  /*  5130 */ 45438, 26018, 26026, 26026, 26026, 26033, 35156, 25297, 25312, 18268, 31240, 31240, 21299, 31239, 31240,
  /*  5145 */ 51194, 31240, 31240, 50840, 31240, 31240, 31240, 31240, 21789, 18673, 18461, 20734, 18464, 19470, 19688,
  /*  5160 */ 18286, 42767, 18305, 28848, 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758, 20424, 24669, 18411,
  /*  5175 */ 18439, 19834, 19232, 20089, 18480, 18997, 20345, 19237, 20094, 18485, 19002, 18501, 31240, 31240, 18517,
  /*  5190 */ 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468, 18671, 18664, 18452,
  /*  5205 */ 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712, 19063, 31240, 41151, 18750,
  /*  5220 */ 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866, 18882, 19629, 25151,
  /*  5235 */ 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062, 24959, 19079, 19114, 19130,
  /*  5250 */ 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292, 19315, 19338, 19361, 19262,
  /*  5265 */ 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521, 19544, 19574, 19616,
  /*  5280 */ 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755, 19777, 19795, 20460,
  /*  5295 */ 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024, 20060, 20110, 20126, 19886,
  /*  5310 */ 20142, 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314, 20330, 20380, 20396,
  /*  5325 */ 25481, 18930, 25494, 20446, 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564, 20519, 20606, 20580,
  /*  5340 */ 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  5355 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  5370 */ 31240, 31240, 31240, 31240, 31240, 31240, 25328, 49167, 31240, 31240, 31240, 27611, 31240, 31240, 31240,
  /*  5385 */ 31240, 32629, 50948, 50956, 50956, 50956, 50963, 49166, 25337, 25353, 25369, 31240, 31240, 21299, 31239,
  /*  5400 */ 31240, 51194, 31240, 31240, 38314, 31240, 31240, 31240, 31240, 21789, 18673, 18461, 20734, 18464, 20075,
  /*  5415 */ 19688, 18286, 42767, 18305, 28848, 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758, 20424, 24669,
  /*  5430 */ 18411, 18439, 19834, 19232, 20089, 18480, 18997, 20345, 19237, 20094, 18485, 19002, 18501, 31240, 31240,
  /*  5445 */ 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468, 18671, 18664,
  /*  5460 */ 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712, 19063, 31240, 41151,
  /*  5475 */ 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866, 18882, 19629,
  /*  5490 */ 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062, 24959, 19079, 19114,
  /*  5505 */ 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292, 19315, 19338, 19361,
  /*  5520 */ 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521, 19544, 19574,
  /*  5535 */ 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755, 19777, 19795,
  /*  5550 */ 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024, 20060, 20110, 20126,
  /*  5565 */ 19886, 20142, 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314, 20330, 20380,
  /*  5580 */ 20396, 25481, 18930, 25494, 20446, 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564, 20519, 20606,
  /*  5595 */ 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  5610 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  5625 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25390, 25399, 31240, 31240, 31240, 30136, 31240, 31240,
  /*  5640 */ 31240, 31240, 32629, 18550, 18558, 18558, 18558, 18565, 49658, 51121, 25419, 25435, 31240, 31240, 21299,
  /*  5655 */ 31239, 31240, 51194, 31240, 31240, 50208, 31240, 31240, 31240, 31240, 21789, 18673, 18461, 20734, 18464,
  /*  5670 */ 20726, 20682, 18286, 42767, 18305, 28848, 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758, 20424,
  /*  5685 */ 24669, 18411, 18439, 19834, 19232, 20089, 18480, 18997, 20345, 19237, 20094, 18485, 19002, 18501, 31240,
  /*  5700 */ 31240, 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468, 18671,
  /*  5715 */ 18664, 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712, 19063, 31240,
  /*  5730 */ 41151, 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866, 18882,
  /*  5745 */ 19629, 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062, 24959, 19079,
  /*  5760 */ 19114, 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292, 19315, 19338,
  /*  5775 */ 19361, 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521, 19544,
  /*  5790 */ 19574, 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755, 19777,
  /*  5805 */ 19795, 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024, 20060, 20110,
  /*  5820 */ 20126, 19886, 20142, 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314, 20330,
  /*  5835 */ 20380, 20396, 25481, 18930, 25494, 25454, 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564, 20519,
  /*  5850 */ 20606, 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  5865 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  5880 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25510, 31240, 31240, 31240, 31240, 27611, 39180,
  /*  5895 */ 31240, 31240, 43718, 46983, 31240, 25563, 31240, 39184, 25560, 36119, 25547, 25583, 18268, 31240, 31240,
  /*  5910 */ 21299, 31239, 31240, 51194, 48887, 31240, 31240, 31240, 31240, 31240, 31240, 21789, 18673, 18461, 20734,
  /*  5925 */ 20364, 24832, 19688, 18286, 42767, 18305, 28848, 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758,
  /*  5940 */ 20424, 24669, 18411, 18439, 19834, 19232, 20089, 18480, 18997, 20345, 19237, 20094, 18485, 19002, 18501,
  /*  5955 */ 31240, 31240, 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468,
  /*  5970 */ 18671, 18664, 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712, 19063,
  /*  5985 */ 31240, 41151, 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866,
  /*  6000 */ 18882, 19629, 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062, 24959,
  /*  6015 */ 19079, 19114, 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292, 19315,
  /*  6030 */ 19338, 19361, 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521,
  /*  6045 */ 19544, 19574, 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755,
  /*  6060 */ 19777, 19795, 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024, 20060,
  /*  6075 */ 20110, 20126, 19886, 20142, 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314,
  /*  6090 */ 20330, 20380, 20396, 25481, 18930, 25494, 20446, 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564,
  /*  6105 */ 20519, 20606, 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240,
  /*  6120 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  6135 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 20777, 31240, 31240, 31240, 31240, 27611,
  /*  6150 */ 31240, 31240, 31240, 31240, 32629, 31240, 31240, 31240, 31240, 31240, 43968, 25599, 25614, 18268, 31240,
  /*  6165 */ 31240, 21299, 31239, 31240, 51194, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 21789, 18673, 18461,
  /*  6180 */ 20734, 18464, 20726, 19688, 18286, 42767, 18305, 28848, 31240, 42307, 31240, 31240, 18321, 18342, 18374,
  /*  6195 */ 42758, 20424, 24669, 18411, 18439, 19834, 19232, 20089, 18480, 18997, 20345, 19237, 20094, 18485, 19002,
  /*  6210 */ 18501, 31240, 31240, 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650,
  /*  6225 */ 20468, 18671, 18664, 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712,
  /*  6240 */ 19063, 31240, 41151, 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854,
  /*  6255 */ 18866, 18882, 19629, 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062,
  /*  6270 */ 24959, 19079, 19114, 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292,
  /*  6285 */ 19315, 19338, 19361, 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455,
  /*  6300 */ 19521, 19544, 19574, 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726,
  /*  6315 */ 19755, 19777, 19795, 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024,
  /*  6330 */ 20060, 20110, 20126, 19886, 20142, 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298,
  /*  6345 */ 20314, 20330, 20380, 20396, 25481, 18930, 25494, 20446, 18674, 18461, 18734, 20484, 26195, 20510, 20535,
  /*  6360 */ 20564, 20519, 20606, 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240,
  /*  6375 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  6390 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25630, 31240, 31240, 31240, 31240,
  /*  6405 */ 29889, 31240, 31240, 31240, 31240, 32629, 31240, 31240, 31240, 31240, 28088, 25651, 44609, 28067, 18268,
  /*  6420 */ 31240, 31240, 21299, 31239, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38014, 41916,
  /*  6435 */ 46200, 31553, 22373, 31545, 25680, 31240, 31240, 31240, 28848, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  6450 */ 31240, 31240, 29973, 29973, 29973, 29973, 34814, 46200, 46200, 46200, 46200, 25701, 22292, 22292, 22292,
  /*  6465 */ 30262, 42535, 31240, 31240, 31240, 31240, 31240, 31240, 34482, 31240, 31240, 31240, 31240, 38013, 29973,
  /*  6480 */ 29973, 29973, 29973, 29973, 22269, 46200, 46200, 46200, 46200, 46200, 22290, 22292, 22292, 22292, 22292,
  /*  6495 */ 27572, 34924, 25721, 31240, 31240, 31240, 31240, 31240, 34485, 31240, 31240, 31240, 40887, 29973, 29973,
  /*  6510 */ 29973, 29973, 29439, 31820, 46200, 46200, 46200, 46200, 46202, 22412, 22292, 22292, 22292, 22292, 27571,
  /*  6525 */ 28501, 23236, 31240, 31240, 31240, 31240, 25737, 31240, 38013, 29973, 29973, 29973, 29973, 22736, 46200,
  /*  6540 */ 46200, 46200, 46200, 31822, 22410, 22292, 22292, 22292, 22292, 33160, 27549, 31240, 31240, 31240, 31240,
  /*  6555 */ 50877, 29973, 29973, 29973, 32438, 46200, 46200, 46200, 44104, 22291, 22292, 22292, 22292, 34723, 31240,
  /*  6570 */ 31240, 39294, 31240, 40887, 29973, 29973, 46197, 46200, 46200, 46225, 22292, 22292, 38670, 31240, 31240,
  /*  6585 */ 31240, 38012, 29973, 29973, 46198, 46200, 48162, 22292, 22292, 38669, 31240, 22799, 38016, 29973, 46199,
  /*  6600 */ 48160, 22292, 50464, 27240, 38016, 38918, 48163, 22414, 40503, 41917, 48161, 22373, 38015, 40789, 46223,
  /*  6615 */ 28111, 38916, 33381, 28111, 38917, 46223, 34333, 33383, 32171, 45394, 27223, 27236, 31240, 31240, 31240,
  /*  6630 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  6645 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25630, 31240, 31240, 31240,
  /*  6660 */ 31240, 29889, 31240, 31240, 31240, 31240, 32629, 31240, 31240, 31240, 31240, 28088, 25651, 44609, 28067,
  /*  6675 */ 18268, 31240, 31240, 21299, 31239, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38014,
  /*  6690 */ 41916, 46200, 31553, 22373, 31545, 25680, 31240, 31240, 31240, 28848, 31240, 31240, 31240, 31240, 31240,
  /*  6705 */ 31240, 31240, 31240, 29973, 29973, 29973, 29973, 34814, 46200, 46200, 46200, 46200, 25701, 22292, 22292,
  /*  6720 */ 22292, 30262, 42535, 31240, 31240, 31240, 31240, 31240, 31240, 34482, 31240, 31240, 31240, 31240, 38013,
  /*  6735 */ 29973, 29973, 29973, 29973, 29973, 22269, 46200, 46200, 46200, 46200, 46200, 22290, 22292, 22292, 22292,
  /*  6750 */ 22292, 27572, 34924, 25721, 31240, 31240, 31240, 31240, 31240, 34485, 31240, 31240, 31240, 40887, 29973,
  /*  6765 */ 29973, 29973, 29973, 29439, 31820, 46200, 46200, 46200, 46200, 46202, 22412, 22292, 22292, 22292, 22292,
  /*  6780 */ 27571, 28501, 23236, 31240, 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 22736,
  /*  6795 */ 46200, 46200, 46200, 46200, 31822, 22410, 22292, 22292, 22292, 22292, 33160, 27549, 31240, 31240, 31240,
  /*  6810 */ 31240, 50877, 29973, 29973, 29973, 32438, 46200, 46200, 46200, 44104, 22291, 22292, 22292, 22292, 34723,
  /*  6825 */ 31240, 31240, 31240, 31240, 40887, 29973, 29973, 46197, 46200, 46200, 46225, 22292, 22292, 38670, 31240,
  /*  6840 */ 31240, 31240, 38012, 29973, 29973, 46198, 46200, 48162, 22292, 22292, 38669, 31240, 22799, 38016, 29973,
  /*  6855 */ 46199, 48160, 22292, 50464, 27240, 38016, 38918, 48163, 22414, 40503, 41917, 48161, 22373, 38015, 40789,
  /*  6870 */ 46223, 28111, 38916, 33381, 28111, 38917, 46223, 34333, 33383, 32171, 45394, 27223, 27236, 31240, 31240,
  /*  6885 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  6900 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25630, 31240, 31240,
  /*  6915 */ 31240, 31240, 29889, 31240, 31240, 31240, 31240, 32629, 31240, 31240, 31240, 31240, 28088, 25651, 44609,
  /*  6930 */ 28067, 18268, 31240, 31240, 21299, 31239, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  6945 */ 38014, 41916, 46200, 31553, 22373, 31545, 25680, 31240, 31240, 31240, 28848, 31240, 31240, 31240, 31240,
  /*  6960 */ 31240, 31240, 31240, 31240, 29973, 29973, 29973, 29973, 34814, 46200, 46200, 46200, 46200, 25701, 22292,
  /*  6975 */ 22292, 22292, 30262, 42535, 31240, 31240, 31240, 31240, 31240, 31240, 34482, 31298, 31240, 31240, 31240,
  /*  6990 */ 38013, 29973, 29973, 29973, 29973, 29973, 22269, 46200, 46200, 46200, 46200, 46200, 22290, 22292, 22292,
  /*  7005 */ 22292, 22292, 27572, 34924, 25721, 31240, 31240, 31240, 31240, 31240, 34485, 31240, 31240, 31240, 40887,
  /*  7020 */ 29973, 29973, 29973, 29973, 29439, 31820, 46200, 46200, 46200, 46200, 46202, 22412, 22292, 22292, 22292,
  /*  7035 */ 22292, 27571, 28501, 23236, 31240, 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973,
  /*  7050 */ 22736, 46200, 46200, 46200, 46200, 31822, 22410, 22292, 22292, 22292, 22292, 33160, 27549, 31240, 31240,
  /*  7065 */ 31240, 31240, 50877, 29973, 29973, 29973, 32438, 46200, 46200, 46200, 44104, 22291, 22292, 22292, 22292,
  /*  7080 */ 34723, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 46197, 46200, 46200, 46225, 22292, 22292, 38670,
  /*  7095 */ 31240, 31240, 31240, 38012, 29973, 29973, 46198, 46200, 48162, 22292, 22292, 38669, 31240, 22799, 38016,
  /*  7110 */ 29973, 46199, 48160, 22292, 50464, 27240, 38016, 38918, 48163, 22414, 40503, 41917, 48161, 22373, 38015,
  /*  7125 */ 40789, 46223, 28111, 38916, 33381, 28111, 38917, 46223, 34333, 33383, 32171, 45394, 27223, 27236, 31240,
  /*  7140 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  7155 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25630, 31240,
  /*  7170 */ 31240, 31240, 31240, 29889, 31240, 31240, 31240, 31240, 32629, 31240, 31240, 31240, 31240, 28088, 25651,
  /*  7185 */ 44609, 28067, 18268, 31240, 31240, 21299, 31239, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  7200 */ 31240, 38014, 41916, 46200, 31553, 22373, 31545, 25680, 31240, 31240, 31240, 28848, 31240, 31240, 31240,
  /*  7215 */ 31240, 31240, 31240, 31240, 31240, 29973, 29973, 29973, 29973, 34814, 46200, 46200, 46200, 46200, 25701,
  /*  7230 */ 22292, 22292, 22292, 30262, 42535, 31240, 31240, 31240, 31240, 31240, 31240, 34482, 31240, 31240, 31240,
  /*  7245 */ 31240, 38013, 29973, 29973, 29973, 29973, 29973, 22269, 46200, 46200, 46200, 46200, 46200, 22290, 22292,
  /*  7260 */ 22292, 22292, 22292, 27572, 34924, 25721, 31240, 31240, 31240, 31240, 31240, 34485, 25755, 31240, 31240,
  /*  7275 */ 40887, 29973, 29973, 29973, 29973, 29439, 31820, 46200, 46200, 46200, 46200, 46202, 22412, 22292, 22292,
  /*  7290 */ 22292, 22292, 27571, 28501, 23236, 31240, 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973,
  /*  7305 */ 29973, 22736, 46200, 46200, 46200, 46200, 31822, 22410, 22292, 22292, 22292, 22292, 33160, 27549, 31240,
  /*  7320 */ 31240, 31240, 31240, 50877, 29973, 29973, 29973, 32438, 46200, 46200, 46200, 44104, 22291, 22292, 22292,
  /*  7335 */ 22292, 34723, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 46197, 46200, 46200, 46225, 22292, 22292,
  /*  7350 */ 38670, 31240, 31240, 31240, 38012, 29973, 29973, 46198, 46200, 48162, 22292, 22292, 38669, 31240, 22799,
  /*  7365 */ 38016, 29973, 46199, 48160, 22292, 50464, 27240, 38016, 38918, 48163, 22414, 40503, 41917, 48161, 22373,
  /*  7380 */ 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917, 46223, 34333, 33383, 32171, 45394, 27223, 27236,
  /*  7395 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  7410 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25630,
  /*  7425 */ 31240, 31240, 31240, 31240, 29889, 31240, 31240, 31240, 31240, 32629, 31240, 31240, 31240, 31240, 28088,
  /*  7440 */ 25651, 44609, 28067, 18268, 31240, 31240, 21299, 31239, 31240, 33690, 31240, 31240, 31240, 31240, 31240,
  /*  7455 */ 31240, 31240, 38014, 41916, 46200, 31553, 22373, 31545, 25680, 31240, 31240, 31240, 28848, 31240, 21706,
  /*  7470 */ 31240, 31240, 31240, 31240, 31240, 31240, 29973, 29973, 29973, 29973, 34814, 46200, 46200, 46200, 46200,
  /*  7485 */ 25701, 22292, 22292, 22292, 30262, 42535, 31240, 31240, 31240, 31240, 31240, 31240, 34482, 31240, 31240,
  /*  7500 */ 31240, 31240, 38013, 29973, 29973, 29973, 29973, 29973, 22269, 46200, 46200, 46200, 46200, 46200, 22290,
  /*  7515 */ 22292, 22292, 22292, 22292, 27572, 34924, 25721, 31240, 31240, 31240, 31240, 31240, 34485, 31240, 31240,
  /*  7530 */ 31240, 40887, 29973, 29973, 29973, 29973, 29439, 31820, 46200, 46200, 46200, 46200, 46202, 22412, 22292,
  /*  7545 */ 22292, 22292, 22292, 27571, 28501, 23236, 31240, 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973,
  /*  7560 */ 29973, 29973, 22736, 46200, 46200, 46200, 46200, 31822, 22410, 22292, 22292, 22292, 22292, 33160, 27549,
  /*  7575 */ 31240, 31240, 31240, 31240, 50877, 29973, 29973, 29973, 32438, 46200, 46200, 46200, 44104, 22291, 22292,
  /*  7590 */ 22292, 22292, 34723, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 46197, 46200, 46200, 46225, 22292,
  /*  7605 */ 22292, 38670, 31240, 31240, 31240, 38012, 29973, 29973, 46198, 46200, 48162, 22292, 22292, 38669, 31240,
  /*  7620 */ 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240, 38016, 38918, 48163, 22414, 40503, 41917, 48161,
  /*  7635 */ 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917, 46223, 34333, 33383, 32171, 45394, 27223,
  /*  7650 */ 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  7665 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  7680 */ 25630, 31240, 31240, 31240, 31240, 29889, 31240, 31240, 31240, 31240, 32629, 31240, 31240, 31240, 31240,
  /*  7695 */ 28088, 25651, 44609, 28067, 18268, 31240, 31240, 21299, 31239, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  7710 */ 31240, 31240, 31240, 38014, 41916, 46200, 31553, 22373, 31545, 25680, 31240, 31240, 31240, 28848, 31240,
  /*  7725 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 29973, 29973, 29973, 29973, 34814, 46200, 46200, 46200,
  /*  7740 */ 46200, 25701, 22292, 22292, 22292, 30262, 42535, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  7755 */ 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 29973, 22269, 46200, 46200, 46200, 46200, 46200,
  /*  7770 */ 22290, 22292, 22292, 22292, 22292, 27572, 33168, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  7785 */ 31240, 31240, 40887, 29973, 29973, 29973, 29973, 29439, 31820, 46200, 46200, 46200, 46200, 46202, 22412,
  /*  7800 */ 22292, 22292, 22292, 22292, 27571, 33167, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38013, 29973,
  /*  7815 */ 29973, 29973, 29973, 30195, 46200, 46200, 46200, 46200, 46202, 22410, 22292, 22292, 22292, 22292, 33160,
  /*  7830 */ 27549, 31240, 31240, 31240, 31240, 50877, 29973, 29973, 29973, 29440, 46200, 46200, 46200, 46201, 22291,
  /*  7845 */ 22292, 22292, 22292, 34723, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 46197, 46200, 46200, 46225,
  /*  7860 */ 22292, 22292, 38670, 31240, 31240, 31240, 38012, 29973, 29973, 46198, 46200, 48162, 22292, 22292, 38669,
  /*  7875 */ 31240, 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240, 38016, 38918, 48163, 22414, 40503, 41917,
  /*  7890 */ 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917, 46223, 34333, 33383, 32171, 45394,
  /*  7905 */ 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  7920 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  7935 */ 31240, 25630, 31240, 31240, 31240, 31240, 29889, 31240, 31240, 31240, 31240, 32629, 31240, 31240, 31240,
  /*  7950 */ 31240, 28088, 25651, 44609, 28067, 18268, 31240, 31240, 21299, 31239, 31240, 31240, 31240, 31240, 31240,
  /*  7965 */ 31240, 31240, 31240, 31240, 38014, 41916, 46200, 31553, 22373, 31545, 33962, 31240, 31240, 31240, 28848,
  /*  7980 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 29973, 29973, 29973, 29973, 34814, 46200, 46200,
  /*  7995 */ 46200, 46200, 25701, 22292, 22292, 22292, 30262, 42535, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  8010 */ 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 29973, 22269, 46200, 46200, 46200, 46200,
  /*  8025 */ 46200, 22290, 22292, 22292, 22292, 22292, 27572, 33168, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  8040 */ 31240, 31240, 31240, 40887, 29973, 29973, 29973, 29973, 29439, 31820, 46200, 46200, 46200, 46200, 46202,
  /*  8055 */ 22412, 22292, 22292, 22292, 22292, 27571, 33167, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38013,
  /*  8070 */ 29973, 29973, 29973, 29973, 30195, 46200, 46200, 46200, 46200, 46202, 22410, 22292, 22292, 22292, 22292,
  /*  8085 */ 33160, 27549, 31240, 31240, 31240, 31240, 50877, 29973, 29973, 29973, 29440, 46200, 46200, 46200, 46201,
  /*  8100 */ 22291, 22292, 22292, 22292, 34723, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 46197, 46200, 46200,
  /*  8115 */ 46225, 22292, 22292, 38670, 31240, 31240, 31240, 38012, 29973, 29973, 46198, 46200, 48162, 22292, 22292,
  /*  8130 */ 38669, 31240, 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240, 38016, 38918, 48163, 22414, 40503,
  /*  8145 */ 41917, 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917, 46223, 34333, 33383, 32171,
  /*  8160 */ 45394, 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  8175 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  8190 */ 31240, 31240, 25630, 31240, 31240, 31240, 31240, 29889, 31240, 31240, 31240, 31240, 32629, 31240, 31240,
  /*  8205 */ 31240, 31240, 28088, 25651, 44609, 28571, 18268, 31240, 31240, 21299, 31239, 31240, 31240, 31240, 31240,
  /*  8220 */ 31240, 31240, 31240, 31240, 31240, 38014, 41916, 46200, 31553, 22373, 31545, 25680, 31240, 31240, 31240,
  /*  8235 */ 28848, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 29973, 29973, 29973, 29973, 34814, 46200,
  /*  8250 */ 46200, 46200, 46200, 25701, 22292, 22292, 22292, 30262, 42535, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  8265 */ 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 29973, 22269, 46200, 46200, 46200,
  /*  8280 */ 46200, 46200, 22290, 22292, 22292, 22292, 22292, 27572, 33168, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  8295 */ 31240, 31240, 31240, 31240, 40887, 29973, 29973, 29973, 29973, 29439, 31820, 46200, 46200, 46200, 46200,
  /*  8310 */ 46202, 22412, 22292, 22292, 22292, 22292, 27571, 33167, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  8325 */ 38013, 29973, 29973, 29973, 29973, 30195, 46200, 46200, 46200, 46200, 46202, 22410, 22292, 22292, 22292,
  /*  8340 */ 22292, 33160, 27549, 31240, 31240, 31240, 31240, 50877, 29973, 29973, 29973, 29440, 46200, 46200, 46200,
  /*  8355 */ 46201, 22291, 22292, 22292, 22292, 34723, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 46197, 46200,
  /*  8370 */ 46200, 46225, 22292, 22292, 38670, 31240, 31240, 31240, 38012, 29973, 29973, 46198, 46200, 48162, 22292,
  /*  8385 */ 22292, 38669, 31240, 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240, 38016, 38918, 48163, 22414,
  /*  8400 */ 40503, 41917, 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917, 46223, 34333, 33383,
  /*  8415 */ 32171, 45394, 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  8430 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  8445 */ 31240, 31240, 31240, 25630, 31240, 31240, 31240, 31240, 29889, 31240, 31240, 31240, 31240, 32629, 25775,
  /*  8460 */ 31240, 31240, 31240, 28088, 25651, 44609, 28067, 18268, 31240, 31240, 21299, 31239, 31240, 31240, 31240,
  /*  8475 */ 31240, 31240, 31240, 31240, 31240, 31240, 38014, 41916, 46200, 31553, 22373, 31545, 25680, 31240, 31240,
  /*  8490 */ 31240, 28848, 31240, 31240, 31240, 21993, 31240, 31240, 31240, 31240, 29973, 29973, 29973, 29973, 34814,
  /*  8505 */ 46200, 46200, 46200, 46200, 25701, 22292, 22292, 22292, 30262, 42535, 31240, 31240, 31240, 31240, 31240,
  /*  8520 */ 31240, 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 29973, 22269, 46200, 46200,
  /*  8535 */ 46200, 46200, 46200, 22290, 22292, 22292, 22292, 22292, 27572, 33168, 31240, 31240, 31240, 31240, 31240,
  /*  8550 */ 31240, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 29973, 29973, 29439, 31820, 46200, 46200, 46200,
  /*  8565 */ 46200, 46202, 22412, 22292, 22292, 22292, 22292, 27571, 33167, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  8580 */ 31240, 38013, 29973, 29973, 29973, 29973, 30195, 46200, 46200, 46200, 46200, 46202, 22410, 22292, 22292,
  /*  8595 */ 22292, 22292, 33160, 27549, 31240, 31240, 31240, 31240, 50877, 29973, 29973, 29973, 29440, 46200, 46200,
  /*  8610 */ 46200, 46201, 22291, 22292, 22292, 22292, 34723, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 46197,
  /*  8625 */ 46200, 46200, 46225, 22292, 22292, 38670, 31240, 31240, 31240, 38012, 29973, 29973, 46198, 46200, 48162,
  /*  8640 */ 22292, 22292, 38669, 31240, 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240, 38016, 38918, 48163,
  /*  8655 */ 22414, 40503, 41917, 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917, 46223, 34333,
  /*  8670 */ 33383, 32171, 45394, 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  8685 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  8700 */ 31240, 31240, 31240, 31240, 25630, 31240, 31240, 31240, 31240, 29889, 31240, 31240, 31240, 31240, 32629,
  /*  8715 */ 31240, 31240, 31240, 31240, 25832, 25796, 25848, 25811, 18268, 31240, 31240, 21299, 31239, 31240, 31240,
  /*  8730 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38014, 41916, 46200, 31553, 22373, 31545, 25680, 31240,
  /*  8745 */ 31240, 31240, 28848, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 29973, 29973, 29973, 29973,
  /*  8760 */ 34814, 46200, 46200, 46200, 46200, 25701, 22292, 22292, 22292, 30262, 42535, 31240, 31240, 31240, 31240,
  /*  8775 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 29973, 22269, 46200,
  /*  8790 */ 46200, 46200, 46200, 46200, 22290, 22292, 22292, 22292, 22292, 27572, 33168, 31240, 31240, 31240, 31240,
  /*  8805 */ 31240, 31240, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 29973, 29973, 29439, 31820, 46200, 46200,
  /*  8820 */ 46200, 46200, 46202, 22412, 22292, 22292, 22292, 22292, 27571, 33167, 31240, 31240, 31240, 31240, 31240,
  /*  8835 */ 31240, 31240, 38013, 29973, 29973, 29973, 29973, 30195, 46200, 46200, 46200, 46200, 46202, 22410, 22292,
  /*  8850 */ 22292, 22292, 22292, 33160, 27549, 31240, 31240, 31240, 31240, 50877, 29973, 29973, 29973, 29440, 46200,
  /*  8865 */ 46200, 46200, 46201, 22291, 22292, 22292, 22292, 34723, 31240, 31240, 31240, 31240, 40887, 29973, 29973,
  /*  8880 */ 46197, 46200, 46200, 46225, 22292, 22292, 38670, 31240, 31240, 31240, 38012, 29973, 29973, 46198, 46200,
  /*  8895 */ 48162, 22292, 22292, 38669, 31240, 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240, 38016, 38918,
  /*  8910 */ 48163, 22414, 40503, 41917, 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917, 46223,
  /*  8925 */ 34333, 33383, 32171, 45394, 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  8940 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  8955 */ 31240, 31240, 31240, 31240, 31240, 25630, 31240, 31240, 31240, 31240, 29889, 31240, 31240, 31240, 31240,
  /*  8970 */ 32629, 31240, 31240, 31240, 31240, 28088, 25651, 44609, 28067, 18268, 31240, 31240, 21299, 31239, 31240,
  /*  8985 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38014, 41916, 46200, 31553, 22373, 31545, 25680,
  /*  9000 */ 31240, 31240, 31240, 28848, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 29973, 29973, 29973,
  /*  9015 */ 29973, 34814, 46200, 46200, 46200, 46200, 25701, 22292, 22292, 22292, 30262, 42535, 31240, 31240, 31240,
  /*  9030 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 29973, 22269,
  /*  9045 */ 46200, 46200, 46200, 46200, 46200, 22290, 22292, 22292, 22292, 22292, 27572, 33168, 31240, 31240, 31240,
  /*  9060 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 29973, 29973, 29439, 31820, 46200,
  /*  9075 */ 46200, 46200, 46200, 46202, 22412, 22292, 22292, 22292, 22292, 27571, 33167, 31240, 31240, 31240, 31240,
  /*  9090 */ 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 30195, 46200, 46200, 46200, 46200, 46202, 22410,
  /*  9105 */ 22292, 22292, 22292, 22292, 33160, 27549, 31240, 31240, 42169, 31240, 50877, 29973, 29973, 29973, 29440,
  /*  9120 */ 46200, 46200, 46200, 46201, 22291, 22292, 22292, 22292, 34723, 31240, 31240, 31240, 31240, 40887, 29973,
  /*  9135 */ 29973, 46197, 46200, 46200, 46225, 22292, 22292, 38670, 31240, 31240, 31240, 38012, 29973, 29973, 46198,
  /*  9150 */ 46200, 48162, 22292, 22292, 38669, 31240, 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240, 38016,
  /*  9165 */ 38918, 48163, 22414, 40503, 41917, 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917,
  /*  9180 */ 46223, 34333, 33383, 32171, 45394, 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  9195 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  9210 */ 31240, 31240, 31240, 31240, 31240, 31240, 25864, 31240, 31240, 31240, 31240, 29889, 31240, 31240, 31240,
  /*  9225 */ 31240, 32629, 31240, 31240, 31240, 31240, 28088, 25651, 44609, 28067, 18268, 31240, 31240, 21299, 31239,
  /*  9240 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38014, 41916, 46200, 31553, 22373, 31545,
  /*  9255 */ 25680, 31240, 31240, 31240, 28848, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 29973, 29973,
  /*  9270 */ 29973, 29973, 34814, 46200, 46200, 46200, 46200, 25701, 22292, 22292, 22292, 30262, 42535, 31240, 31240,
  /*  9285 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 29973,
  /*  9300 */ 22269, 46200, 46200, 46200, 46200, 46200, 22290, 22292, 22292, 22292, 22292, 27572, 33168, 31240, 31240,
  /*  9315 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 29973, 29973, 29439, 31820,
  /*  9330 */ 46200, 46200, 46200, 46200, 46202, 22412, 22292, 22292, 22292, 22292, 27571, 33167, 31240, 31240, 31240,
  /*  9345 */ 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 30195, 46200, 46200, 46200, 46200, 46202,
  /*  9360 */ 22410, 22292, 22292, 22292, 22292, 33160, 27549, 31240, 31240, 31240, 31240, 50877, 29973, 29973, 29973,
  /*  9375 */ 29440, 46200, 46200, 46200, 46201, 22291, 22292, 22292, 22292, 34723, 31240, 31240, 31240, 31240, 40887,
  /*  9390 */ 29973, 29973, 46197, 46200, 46200, 46225, 22292, 22292, 38670, 31240, 31240, 31240, 38012, 29973, 29973,
  /*  9405 */ 46198, 46200, 48162, 22292, 22292, 38669, 31240, 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240,
  /*  9420 */ 38016, 38918, 48163, 22414, 40503, 41917, 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111,
  /*  9435 */ 38917, 46223, 34333, 33383, 32171, 45394, 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  9450 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  9465 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 20777, 31240, 31240, 31240, 31240, 27611, 31240, 31240,
  /*  9480 */ 31240, 31240, 32629, 37295, 25885, 25898, 25920, 25932, 37292, 25885, 25957, 18268, 31240, 31240, 21299,
  /*  9495 */ 31239, 31240, 51194, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 21789, 18673, 18461, 20734, 18464,
  /*  9510 */ 20726, 19688, 18286, 42767, 18305, 28848, 31240, 42307, 31240, 25973, 18321, 18342, 18374, 42758, 20424,
  /*  9525 */ 24669, 18411, 18439, 19834, 19232, 20089, 18480, 18997, 20345, 19237, 20094, 18485, 19002, 18501, 31240,
  /*  9540 */ 31240, 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468, 18671,
  /*  9555 */ 18664, 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712, 19063, 31240,
  /*  9570 */ 41151, 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866, 18882,
  /*  9585 */ 19629, 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062, 24959, 19079,
  /*  9600 */ 19114, 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292, 19315, 19338,
  /*  9615 */ 19361, 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521, 19544,
  /*  9630 */ 19574, 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755, 19777,
  /*  9645 */ 19795, 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 25998, 20060, 20110,
  /*  9660 */ 20126, 19886, 20142, 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314, 20330,
  /*  9675 */ 20380, 20396, 25481, 18930, 25494, 20446, 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564, 20519,
  /*  9690 */ 20606, 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  9705 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  9720 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 20777, 31240, 31240, 31240, 31240, 27611, 31240,
  /*  9735 */ 31240, 31240, 31240, 32629, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 23081, 18268, 31240, 31240,
  /*  9750 */ 21299, 31239, 31240, 51194, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 21789, 18673, 18461, 20734,
  /*  9765 */ 18464, 20726, 19688, 18286, 42767, 18305, 28848, 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758,
  /*  9780 */ 20424, 24669, 18411, 18439, 19834, 19232, 20089, 18480, 18997, 20345, 19237, 20094, 18485, 19002, 18501,
  /*  9795 */ 31240, 31240, 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468,
  /*  9810 */ 18671, 18664, 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712, 19063,
  /*  9825 */ 31240, 41151, 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866,
  /*  9840 */ 18882, 19629, 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062, 24959,
  /*  9855 */ 19079, 19114, 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292, 19315,
  /*  9870 */ 19338, 19361, 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521,
  /*  9885 */ 19544, 19574, 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755,
  /*  9900 */ 19777, 19795, 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024, 20060,
  /*  9915 */ 20110, 20126, 19886, 20142, 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314,
  /*  9930 */ 20330, 20380, 20396, 25481, 18930, 25494, 20446, 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564,
  /*  9945 */ 20519, 20606, 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240,
  /*  9960 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /*  9975 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 20777, 31240, 31240, 31240, 31240, 27611,
  /*  9990 */ 31240, 31240, 31240, 31240, 32629, 49744, 31240, 26049, 26055, 26071, 31240, 49748, 26096, 18268, 31240,
  /* 10005 */ 31240, 21299, 31239, 31240, 51194, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 21789, 18673, 18461,
  /* 10020 */ 20734, 18464, 20726, 19688, 18286, 42767, 18305, 28848, 31240, 42307, 31240, 31240, 18321, 18342, 18374,
  /* 10035 */ 42758, 20424, 24669, 18411, 18439, 19834, 19232, 20089, 18480, 18997, 20345, 19237, 20094, 18485, 19002,
  /* 10050 */ 18501, 31240, 31240, 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650,
  /* 10065 */ 20468, 18671, 18664, 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712,
  /* 10080 */ 19063, 31240, 41151, 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854,
  /* 10095 */ 18866, 18882, 19629, 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062,
  /* 10110 */ 24959, 19079, 19114, 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292,
  /* 10125 */ 19315, 19338, 19361, 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455,
  /* 10140 */ 19521, 19544, 19574, 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726,
  /* 10155 */ 19755, 19777, 19795, 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024,
  /* 10170 */ 20060, 20110, 20126, 19886, 20142, 19876, 19892, 20148, 20164, 20192, 26112, 20271, 25468, 20311, 20298,
  /* 10185 */ 20314, 20330, 26165, 20396, 25481, 18930, 25494, 26181, 18674, 18461, 18734, 20484, 26195, 20510, 20535,
  /* 10200 */ 20564, 20519, 20606, 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240,
  /* 10215 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 10230 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25630, 18270, 31240, 31240, 31240,
  /* 10245 */ 29889, 26223, 26254, 19779, 26239, 26271, 27703, 27711, 26311, 26325, 26337, 26353, 26405, 26368, 26421,
  /* 10260 */ 31240, 26457, 45233, 26478, 31596, 26514, 26535, 26558, 26595, 40046, 26622, 26606, 51151, 26651, 26679,
  /* 10275 */ 26726, 26742, 26776, 26804, 26820, 31240, 31240, 31240, 28848, 26857, 47548, 31240, 26879, 25780, 31240,
  /* 10290 */ 28825, 27630, 29973, 29973, 29973, 48555, 34814, 46200, 46200, 46200, 26917, 25701, 22292, 22292, 30470,
  /* 10305 */ 30262, 42535, 31240, 33909, 31240, 26937, 29109, 25014, 34482, 26958, 31240, 31677, 37729, 26979, 27000,
  /* 10320 */ 29973, 29973, 46033, 46134, 27061, 27088, 46200, 46200, 27115, 27139, 27209, 44900, 22292, 22292, 27256,
  /* 10335 */ 38662, 27272, 25721, 30763, 31240, 27360, 30962, 18804, 27309, 31240, 46481, 27355, 27376, 27392, 34307,
  /* 10350 */ 29973, 27418, 18395, 28437, 27437, 30379, 46200, 27462, 34832, 27480, 27531, 32949, 22292, 27569, 48489,
  /* 10365 */ 27588, 27604, 27629, 27646, 31240, 27669, 27690, 31240, 38013, 27727, 29973, 29973, 27764, 27784, 32710,
  /* 10380 */ 27811, 46200, 36497, 34416, 27830, 42829, 22292, 22292, 27860, 33160, 41573, 27901, 27921, 31240, 48689,
  /* 10395 */ 45966, 44446, 32293, 27937, 32438, 27748, 27166, 27957, 44104, 31558, 46176, 44602, 22292, 45838, 33002,
  /* 10410 */ 31240, 31240, 31240, 40887, 32469, 26295, 46197, 27978, 27193, 46225, 48386, 48013, 38670, 31240, 31240,
  /* 10425 */ 31240, 38012, 29973, 29973, 46198, 46200, 48162, 22292, 22292, 38669, 31240, 22799, 38016, 29973, 46199,
  /* 10440 */ 48160, 22292, 50464, 27240, 38016, 38918, 48163, 22414, 27999, 28015, 28052, 28104, 28133, 37367, 30537,
  /* 10455 */ 38966, 38916, 33381, 30560, 38917, 46223, 34333, 33383, 32171, 45394, 27223, 27236, 31240, 31240, 31240,
  /* 10470 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 10485 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25630, 31240, 28168, 31240,
  /* 10500 */ 31240, 29889, 31240, 31240, 31240, 31240, 39550, 28190, 31240, 28214, 28220, 28236, 28252, 28267, 28283,
  /* 10515 */ 18268, 31240, 31240, 21299, 31239, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38014,
  /* 10530 */ 37359, 38999, 31553, 33199, 31545, 25680, 31240, 31240, 31240, 28848, 31240, 31240, 31240, 31240, 31240,
  /* 10545 */ 31240, 31240, 31240, 29973, 29973, 29973, 29973, 34814, 46200, 46200, 46200, 46200, 25701, 22292, 22292,
  /* 10560 */ 22292, 30262, 42535, 31240, 31240, 31240, 31240, 31240, 34270, 34482, 41709, 31240, 28320, 31240, 38013,
  /* 10575 */ 29973, 29973, 29973, 29973, 28338, 22269, 46200, 46200, 46200, 27814, 28362, 22290, 22292, 22292, 22292,
  /* 10590 */ 50689, 28383, 34924, 25721, 31240, 31240, 31240, 31240, 31240, 34485, 31240, 31240, 31240, 40887, 29973,
  /* 10605 */ 29973, 29973, 29973, 29439, 31820, 46200, 46200, 46200, 46200, 46202, 22412, 22292, 22292, 22292, 22292,
  /* 10620 */ 27571, 28501, 23236, 31240, 29838, 31240, 31240, 31240, 45097, 24194, 28406, 29973, 29973, 29973, 28426,
  /* 10635 */ 28453, 46200, 46200, 46200, 39451, 28478, 22292, 22292, 22292, 22292, 28494, 27549, 31240, 31240, 31240,
  /* 10650 */ 31240, 50877, 29973, 29973, 29973, 32438, 46200, 46200, 46200, 44104, 22291, 22292, 22292, 22292, 34723,
  /* 10665 */ 31240, 31240, 31240, 31240, 40887, 29973, 29973, 46197, 46200, 46200, 46225, 22292, 22292, 38670, 31240,
  /* 10680 */ 31240, 31240, 38012, 29973, 29973, 46198, 46200, 48162, 22292, 22292, 38669, 31240, 22799, 38016, 29973,
  /* 10695 */ 46199, 48160, 22292, 50464, 27240, 38016, 38918, 48163, 22414, 40503, 41917, 48161, 22373, 28117, 28517,
  /* 10710 */ 28556, 28608, 38916, 33381, 28111, 38917, 46223, 34333, 33383, 32171, 45394, 27223, 27236, 31240, 31240,
  /* 10725 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 10740 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25630, 31240, 28630,
  /* 10755 */ 31240, 31240, 29889, 31240, 28669, 31240, 28687, 42908, 28706, 28714, 28730, 28745, 28757, 28773, 28788,
  /* 10770 */ 28803, 18268, 31240, 31240, 28841, 28864, 31240, 28882, 31240, 31240, 31240, 31240, 31240, 50163, 25739,
  /* 10785 */ 28901, 32377, 30212, 31553, 27540, 50314, 28925, 28690, 31240, 31240, 46504, 31240, 21666, 31240, 23932,
  /* 10800 */ 28946, 28967, 32321, 29591, 28986, 29002, 29973, 29973, 40213, 35662, 46200, 46200, 46200, 29024, 29050,
  /* 10815 */ 22292, 22292, 30262, 42535, 31240, 29084, 31240, 31240, 29105, 31240, 29125, 31240, 29155, 31240, 31240,
  /* 10830 */ 38013, 43471, 29974, 29973, 45920, 29973, 22269, 29205, 37643, 46200, 29241, 46200, 29261, 36592, 26760,
  /* 10845 */ 29278, 29277, 27572, 34924, 25721, 31240, 31240, 31240, 29294, 31240, 36966, 31240, 31240, 31240, 40887,
  /* 10860 */ 29973, 29973, 31751, 27941, 29439, 31820, 46200, 46200, 29572, 35698, 46202, 22412, 22292, 22292, 29068,
  /* 10875 */ 48033, 27571, 28501, 29311, 31240, 31240, 31240, 29346, 43737, 31240, 38013, 29973, 29973, 45509, 29973,
  /* 10890 */ 22736, 46200, 46200, 46200, 43863, 31822, 22410, 22292, 22292, 48994, 22292, 33160, 27549, 31240, 31240,
  /* 10905 */ 29366, 31240, 29383, 29973, 30433, 29973, 32438, 46200, 26921, 46200, 44104, 22291, 22292, 29420, 22292,
  /* 10920 */ 25664, 26433, 31240, 31240, 48810, 29767, 29973, 29437, 38113, 47647, 29456, 37815, 22292, 29474, 38670,
  /* 10935 */ 31240, 31240, 41003, 38012, 29973, 39658, 46198, 46200, 37807, 22292, 22292, 29493, 31240, 22799, 38016,
  /* 10950 */ 29973, 46199, 48160, 22292, 50464, 27240, 38016, 38918, 48163, 22414, 40503, 41917, 48161, 47465, 36421,
  /* 10965 */ 48334, 47674, 28111, 38916, 33381, 28111, 38917, 46223, 34333, 33383, 32171, 46697, 29514, 27236, 31240,
  /* 10980 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 10995 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25630, 31240,
  /* 11010 */ 20880, 31240, 31240, 29889, 31240, 29588, 31278, 31240, 39338, 29607, 29615, 29631, 29645, 29652, 29668,
  /* 11025 */ 29720, 29683, 18268, 31240, 31240, 21299, 31239, 31240, 31240, 31240, 31240, 23128, 31240, 29745, 31240,
  /* 11040 */ 29736, 29763, 29783, 31419, 22517, 22373, 31545, 25680, 31240, 29817, 29833, 28848, 30099, 31240, 31017,
  /* 11055 */ 31240, 44006, 46584, 29854, 29882, 29905, 29924, 29943, 29972, 29990, 35196, 32717, 30025, 34641, 30052,
  /* 11070 */ 47819, 41831, 30075, 22900, 42535, 31240, 31240, 31240, 29367, 30097, 29350, 34482, 31240, 31240, 31240,
  /* 11085 */ 35175, 38013, 29973, 29973, 29973, 32662, 29973, 22269, 46200, 46200, 46200, 37952, 46200, 22290, 22292,
  /* 11100 */ 22292, 22292, 42228, 27572, 30115, 25721, 26573, 31240, 31240, 38750, 46076, 34485, 31240, 31240, 46720,
  /* 11115 */ 35817, 30152, 30170, 29973, 29973, 30188, 22460, 30211, 30228, 46200, 46200, 30245, 30278, 30306, 30323,
  /* 11130 */ 22292, 22292, 43900, 28501, 23236, 31240, 31240, 31240, 31240, 39272, 30340, 23277, 29973, 29973, 50285,
  /* 11145 */ 29973, 22736, 30357, 46200, 46200, 30376, 31822, 30395, 22292, 22292, 44540, 22292, 33160, 27549, 39075,
  /* 11160 */ 45492, 31240, 45657, 50877, 29973, 30430, 32901, 32438, 46200, 30449, 37669, 44104, 22291, 50459, 22711,
  /* 11175 */ 30468, 34723, 42378, 31240, 31240, 31240, 40887, 29973, 29973, 46197, 46200, 46200, 46225, 22292, 22292,
  /* 11190 */ 38670, 31240, 49550, 31240, 38012, 29973, 31356, 46198, 46200, 27446, 22292, 22292, 30486, 31240, 22799,
  /* 11205 */ 38016, 29973, 46199, 49360, 22292, 37888, 27240, 38016, 38918, 48163, 22414, 40503, 30507, 30530, 30553,
  /* 11220 */ 38015, 30576, 38090, 28111, 38916, 33381, 28111, 38917, 46223, 34333, 33383, 32171, 45394, 27223, 27236,
  /* 11235 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 11250 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25630,
  /* 11265 */ 31240, 31241, 30592, 31240, 29889, 43109, 30611, 31240, 30634, 43396, 30659, 30669, 30685, 30699, 30711,
  /* 11280 */ 30727, 30779, 30742, 18268, 30795, 30817, 30833, 30856, 30893, 33690, 22804, 30909, 28866, 30947, 43595,
  /* 11295 */ 30984, 30924, 31033, 31049, 31077, 31093, 31130, 31158, 31210, 18596, 40038, 40132, 31231, 31257, 31316,
  /* 11310 */ 31294, 31314, 31240, 30595, 31240, 31240, 40436, 31332, 31353, 31372, 31410, 31443, 36010, 36646, 38475,
  /* 11325 */ 31480, 37596, 48966, 42854, 31532, 42535, 31240, 31574, 39373, 31590, 24497, 31612, 31636, 31673, 47036,
  /* 11340 */ 27320, 31693, 31715, 31767, 31798, 31838, 31854, 31894, 31982, 32012, 32040, 32064, 32114, 32931, 32144,
  /* 11355 */ 50345, 32194, 43050, 33141, 32210, 32261, 25721, 20213, 32318, 37931, 32337, 29169, 34485, 32357, 32393,
  /* 11370 */ 32414, 32434, 32454, 29973, 35213, 32491, 37118, 31820, 32515, 46200, 30452, 29218, 35952, 22412, 32551,
  /* 11385 */ 22292, 34251, 36585, 37606, 32581, 23236, 30129, 32597, 32617, 38365, 31240, 32645, 46332, 32661, 32678,
  /* 11400 */ 31730, 29956, 22736, 40265, 43018, 32535, 32697, 44086, 32733, 48206, 22292, 32783, 32811, 33160, 27549,
  /* 11415 */ 31240, 29189, 32846, 31240, 32866, 38862, 29973, 32888, 32438, 47319, 46200, 32917, 44104, 22291, 32947,
  /* 11430 */ 32965, 22292, 34723, 31240, 32981, 32997, 33018, 33034, 33061, 43248, 33098, 43274, 33114, 33130, 33184,
  /* 11445 */ 33222, 33250, 33287, 36091, 45473, 30968, 33311, 33333, 38429, 48142, 48519, 44315, 47766, 38669, 31240,
  /* 11460 */ 33353, 38016, 32681, 46199, 48927, 22292, 42048, 31142, 33515, 38918, 33378, 33399, 33544, 29008, 32098,
  /* 11475 */ 31114, 28614, 30514, 48356, 33234, 33438, 33467, 33508, 38917, 46223, 34703, 33531, 32171, 45394, 27223,
  /* 11490 */ 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 11505 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 11520 */ 25630, 31240, 31240, 33588, 31240, 29889, 33609, 33627, 22173, 43676, 33652, 33682, 31240, 33668, 33706,
  /* 11535 */ 33713, 33729, 33786, 33744, 18268, 31240, 39626, 21299, 31239, 31240, 31240, 31240, 25567, 31240, 31240,
  /* 11550 */ 33802, 25566, 31240, 33823, 33849, 33882, 27072, 22373, 31545, 25680, 29747, 31240, 31240, 30840, 31240,
  /* 11565 */ 31240, 31240, 43507, 22850, 31240, 33906, 31240, 27402, 29973, 29973, 29973, 34814, 33925, 46200, 46200,
  /* 11580 */ 46200, 33949, 33983, 22292, 22292, 30262, 42535, 31240, 31240, 31240, 31240, 31240, 31240, 34482, 31240,
  /* 11595 */ 31240, 31240, 34002, 38013, 29973, 29973, 29973, 50552, 29973, 22269, 46200, 46200, 46200, 43869, 46200,
  /* 11610 */ 22290, 22292, 22292, 22292, 40711, 27572, 34924, 25721, 31240, 31240, 31240, 31240, 31240, 34485, 31240,
  /* 11625 */ 40126, 31240, 40887, 29973, 29973, 47592, 29973, 29439, 31820, 46200, 46200, 37178, 46200, 46202, 22412,
  /* 11640 */ 22292, 22292, 48062, 22292, 27571, 28501, 23236, 31240, 31240, 31240, 31240, 31240, 34020, 38013, 29973,
  /* 11655 */ 29973, 29973, 34041, 22736, 46200, 46200, 46200, 27157, 31822, 22410, 22292, 22292, 38033, 22292, 33160,
  /* 11670 */ 27549, 31240, 31240, 31240, 31240, 50877, 29973, 29973, 29973, 32438, 46200, 46200, 46200, 44104, 22291,
  /* 11685 */ 22292, 22292, 22292, 34723, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 46197, 46200, 46200, 46225,
  /* 11700 */ 22292, 22292, 38670, 47542, 31240, 31240, 38012, 44937, 29973, 46887, 46200, 48162, 50668, 22292, 38669,
  /* 11715 */ 31240, 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240, 38016, 38918, 48163, 22414, 40503, 41917,
  /* 11730 */ 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917, 46223, 34788, 44251, 32171, 40981,
  /* 11745 */ 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 11760 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 11775 */ 31240, 25630, 31240, 31240, 31240, 31240, 29889, 31240, 31657, 31240, 31240, 35483, 34060, 34068, 34084,
  /* 11790 */ 34090, 34106, 34122, 34174, 34137, 18268, 31240, 31240, 21299, 31239, 31240, 31240, 41870, 31240, 31240,
  /* 11805 */ 31240, 31240, 31240, 31240, 38014, 41916, 46200, 31553, 22373, 31545, 34190, 31240, 31240, 31240, 28848,
  /* 11820 */ 31240, 31240, 31240, 39242, 31240, 31240, 31240, 31240, 29973, 29973, 29973, 29973, 34814, 46200, 46200,
  /* 11835 */ 46200, 46200, 25701, 22292, 22292, 22292, 30262, 42535, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 11850 */ 31240, 25064, 31240, 26942, 38013, 29973, 29973, 29973, 29973, 29973, 34228, 46200, 46200, 46200, 46200,
  /* 11865 */ 46200, 34249, 22292, 22292, 22292, 22292, 27572, 33168, 31240, 31240, 31240, 38723, 31240, 38594, 38844,
  /* 11880 */ 31240, 31240, 34267, 34286, 29973, 29973, 34306, 29973, 29439, 31820, 46200, 29458, 46200, 46200, 46202,
  /* 11895 */ 22412, 22292, 30307, 22292, 22292, 27571, 34323, 31240, 31240, 31240, 34357, 31240, 31240, 31240, 38013,
  /* 11910 */ 29973, 29973, 29973, 29973, 30195, 46200, 46200, 46200, 46200, 46202, 22410, 22292, 22292, 22292, 22292,
  /* 11925 */ 33160, 27549, 31240, 31240, 34375, 29330, 50877, 29973, 29973, 29973, 34393, 46200, 46200, 46200, 34432,
  /* 11940 */ 22291, 22292, 22292, 34458, 34723, 46007, 34479, 34501, 34545, 34564, 45313, 34585, 34601, 27184, 34621,
  /* 11955 */ 34657, 39487, 34678, 34719, 25188, 31240, 36299, 45103, 34290, 34739, 38994, 46655, 34763, 45983, 43308,
  /* 11970 */ 38669, 31240, 49491, 38016, 34804, 27026, 48601, 28540, 34848, 27240, 38016, 38918, 48163, 22414, 40503,
  /* 11985 */ 41917, 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917, 46223, 34333, 33383, 34902,
  /* 12000 */ 34918, 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 12015 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 12030 */ 31240, 31240, 25630, 31240, 31240, 31240, 31240, 29889, 31240, 31240, 31240, 31240, 32629, 31240, 31240,
  /* 12045 */ 31240, 31240, 28088, 25651, 44609, 28067, 34940, 31240, 31240, 34969, 31239, 31240, 31240, 25438, 31240,
  /* 12060 */ 39638, 31240, 25438, 35019, 39634, 26441, 48307, 35068, 35087, 34463, 35122, 35151, 31240, 31240, 43132,
  /* 12075 */ 28848, 19498, 43213, 31240, 31240, 31240, 31240, 31240, 31240, 29973, 29973, 29973, 38395, 34814, 46200,
  /* 12090 */ 46200, 38879, 46200, 25701, 22292, 22292, 36558, 30262, 42535, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 12105 */ 31240, 31240, 31240, 35172, 28297, 38013, 29973, 29973, 29973, 29973, 29973, 35191, 46200, 46200, 46200,
  /* 12120 */ 46200, 30360, 22290, 22292, 22292, 22292, 22292, 50759, 33168, 31240, 36977, 31240, 31240, 31240, 31240,
  /* 12135 */ 31240, 31240, 31240, 28930, 40887, 35212, 29973, 29973, 29973, 29439, 27795, 46200, 46200, 46200, 46200,
  /* 12150 */ 46202, 43326, 22292, 22292, 22292, 22292, 27571, 33167, 31240, 31240, 31240, 42639, 31240, 31240, 31240,
  /* 12165 */ 38013, 29973, 29973, 29973, 28909, 30195, 46200, 46200, 46200, 46200, 35229, 22410, 22292, 22292, 22292,
  /* 12180 */ 50337, 33160, 27549, 31240, 31240, 46578, 31240, 50877, 29973, 29973, 29973, 29440, 46200, 46200, 46200,
  /* 12195 */ 46201, 22291, 22292, 22292, 22292, 34723, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 46197, 46200,
  /* 12210 */ 46200, 46225, 22292, 22292, 38670, 31240, 40348, 31240, 48465, 29973, 29973, 46198, 46200, 48162, 22292,
  /* 12225 */ 22292, 42071, 31240, 22799, 35259, 40771, 46199, 49261, 22292, 48186, 27240, 38016, 38918, 48163, 22414,
  /* 12240 */ 40503, 41917, 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917, 46223, 34333, 33383,
  /* 12255 */ 32171, 45394, 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 12270 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 12285 */ 31240, 31240, 31240, 25630, 31240, 31240, 43998, 31240, 29889, 20943, 21018, 21999, 28643, 28653, 35281,
  /* 12300 */ 35289, 35305, 35320, 35332, 35348, 35410, 35363, 18268, 31240, 31240, 22253, 24977, 31240, 31240, 31240,
  /* 12315 */ 35426, 35459, 31240, 50374, 35499, 35471, 46852, 49678, 35527, 35549, 34662, 37537, 35579, 31240, 31240,
  /* 12330 */ 31240, 35600, 31240, 35624, 31240, 31240, 31240, 24172, 25759, 31240, 33317, 37345, 29973, 33833, 35653,
  /* 12345 */ 31996, 29564, 46200, 35678, 25701, 35714, 35748, 43346, 49289, 42535, 31240, 27905, 34377, 35767, 35785,
  /* 12360 */ 26519, 24512, 37271, 35801, 35833, 35850, 35812, 34569, 29973, 49379, 35870, 35915, 22269, 31427, 46200,
  /* 12375 */ 30009, 31966, 43026, 22290, 26753, 22292, 49440, 37511, 33152, 33168, 31240, 31240, 31240, 31240, 43805,
  /* 12390 */ 35968, 29697, 31240, 31240, 31240, 33554, 49107, 29973, 29973, 45680, 47908, 29555, 36005, 46200, 46200,
  /* 12405 */ 34823, 36269, 36026, 39709, 22292, 22292, 48619, 37568, 36060, 31240, 29089, 36077, 36114, 36135, 36164,
  /* 12420 */ 31650, 36192, 29973, 29529, 50029, 36219, 39975, 46200, 37460, 36235, 36261, 36285, 36315, 22292, 36337,
  /* 12435 */ 36371, 35732, 34877, 44261, 36412, 47850, 31215, 35243, 50877, 36437, 34747, 33572, 29542, 36480, 39999,
  /* 12450 */ 47256, 36513, 37550, 30081, 36539, 36574, 38208, 31240, 31240, 45869, 36608, 27885, 33076, 40628, 47446,
  /* 12465 */ 36641, 46295, 45006, 48840, 42221, 38670, 31240, 36662, 27293, 38012, 29973, 29973, 46198, 46200, 48162,
  /* 12480 */ 22292, 22292, 38669, 36684, 22799, 40954, 41754, 32759, 44523, 36710, 36731, 27240, 36762, 38918, 48163,
  /* 12495 */ 22414, 40503, 27014, 22931, 31495, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 36784, 36800, 34333,
  /* 12510 */ 33383, 32171, 45394, 35563, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 12525 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 12540 */ 31240, 31240, 31240, 31240, 25630, 31240, 31240, 18795, 31240, 29889, 31240, 31240, 31240, 31240, 32629,
  /* 12555 */ 31240, 35052, 18803, 30997, 28592, 36836, 36881, 36851, 18268, 31240, 31240, 21299, 31239, 31240, 31240,
  /* 12570 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38014, 41916, 46200, 31553, 22373, 31545, 25680, 31240,
  /* 12585 */ 31240, 31240, 28848, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 29973, 29973, 38613, 29973,
  /* 12600 */ 34814, 46200, 46200, 36489, 46200, 25701, 22292, 22292, 36897, 30262, 42535, 31240, 31240, 31240, 31240,
  /* 12615 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 29973, 22269, 46200,
  /* 12630 */ 46200, 46200, 46200, 46200, 22290, 22292, 22292, 22292, 22292, 27572, 33168, 31240, 31240, 31240, 31240,
  /* 12645 */ 31240, 31240, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 29973, 29973, 29439, 31820, 46200, 46200,
  /* 12660 */ 46200, 46200, 46202, 22412, 22292, 22292, 22292, 22292, 27571, 33167, 31240, 31240, 31240, 31240, 31240,
  /* 12675 */ 31240, 31240, 38013, 29973, 29973, 29973, 29973, 30195, 46200, 46200, 46200, 46200, 46202, 22410, 22292,
  /* 12690 */ 22292, 22292, 22292, 33160, 27549, 31240, 31240, 31240, 31240, 50877, 29973, 29973, 29973, 29440, 46200,
  /* 12705 */ 46200, 46200, 46201, 22291, 22292, 22292, 22292, 34723, 31240, 31240, 31240, 31240, 40887, 29973, 29973,
  /* 12720 */ 46197, 46200, 46200, 46225, 22292, 22292, 38670, 31240, 31240, 31240, 38012, 29973, 29973, 46198, 46200,
  /* 12735 */ 48162, 22292, 22292, 38669, 31240, 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240, 38016, 38918,
  /* 12750 */ 48163, 22414, 40503, 41917, 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917, 46223,
  /* 12765 */ 34333, 33383, 32171, 45394, 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 12780 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 12795 */ 31240, 31240, 31240, 31240, 31240, 25630, 31240, 31240, 34158, 31240, 29889, 31240, 31240, 31240, 31240,
  /* 12810 */ 32629, 31240, 31240, 31240, 31240, 28088, 25651, 44609, 28067, 18268, 31240, 31240, 21299, 31239, 31240,
  /* 12825 */ 48750, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38014, 41916, 46200, 31553, 22373, 31545, 25680,
  /* 12840 */ 31240, 31240, 31240, 28848, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 29973, 29973, 29973,
  /* 12855 */ 29973, 34814, 46200, 46200, 46200, 46200, 25701, 22292, 22292, 22292, 30262, 42535, 31240, 31240, 31240,
  /* 12870 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 29973, 22269,
  /* 12885 */ 46200, 46200, 46200, 46200, 46200, 22290, 22292, 22292, 22292, 22292, 27572, 33168, 31240, 39601, 31240,
  /* 12900 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 26984, 29973, 29973, 29973, 29973, 29439, 31878, 46200,
  /* 12915 */ 46200, 46200, 46200, 46202, 36916, 22292, 22292, 22292, 22292, 27571, 33167, 31240, 31240, 31240, 31240,
  /* 12930 */ 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 30195, 46200, 46200, 46200, 46200, 46202, 22410,
  /* 12945 */ 22292, 22292, 22292, 22292, 33160, 27549, 31240, 31240, 31240, 31240, 50877, 29973, 29973, 29973, 29440,
  /* 12960 */ 46200, 46200, 46200, 46201, 22291, 22292, 22292, 22292, 34723, 31240, 31240, 31240, 31240, 40887, 29973,
  /* 12975 */ 29973, 46197, 46200, 46200, 46225, 22292, 22292, 38670, 31240, 31240, 31240, 38012, 29973, 29973, 46198,
  /* 12990 */ 46200, 48162, 22292, 22292, 38669, 31240, 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240, 38016,
  /* 13005 */ 38918, 48163, 22414, 40503, 41917, 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917,
  /* 13020 */ 46223, 34333, 33383, 32171, 45394, 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 13035 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 13050 */ 31240, 31240, 31240, 31240, 31240, 31240, 25630, 31240, 31240, 21249, 31240, 29889, 31240, 26080, 31240,
  /* 13065 */ 49527, 36951, 37001, 37013, 37029, 37035, 37051, 37067, 37134, 37082, 18268, 31508, 31240, 21299, 31239,
  /* 13080 */ 36625, 42668, 41870, 31240, 31515, 31240, 36617, 37229, 36623, 37150, 48230, 37200, 27099, 36035, 50534,
  /* 13095 */ 37216, 18764, 31240, 31240, 37245, 31240, 31240, 37269, 37287, 43948, 31240, 18771, 37311, 37331, 33564,
  /* 13110 */ 49716, 28145, 37383, 39443, 37410, 31930, 37428, 37476, 37498, 22292, 37584, 32245, 37622, 31240, 24187,
  /* 13125 */ 31240, 31240, 31240, 35769, 31240, 31240, 31240, 31240, 31240, 38013, 37757, 45530, 29973, 36455, 29973,
  /* 13140 */ 37638, 37659, 32048, 46200, 32529, 45947, 34249, 37685, 29061, 22292, 37708, 31464, 33168, 31240, 31240,
  /* 13155 */ 35989, 30871, 31240, 37970, 31240, 37727, 31240, 31240, 40887, 29973, 29973, 47170, 37745, 37773, 31820,
  /* 13170 */ 46200, 46200, 42432, 37796, 37831, 22412, 22292, 22292, 37561, 37869, 37904, 33167, 31240, 37929, 31240,
  /* 13185 */ 31240, 44975, 31240, 31240, 38013, 42324, 29973, 29973, 29973, 30195, 46200, 37947, 46200, 46200, 46202,
  /* 13200 */ 22410, 48392, 22292, 22292, 22292, 33160, 36044, 31240, 37968, 39037, 37986, 38007, 41898, 29973, 29973,
  /* 13215 */ 47599, 36245, 46200, 46200, 45724, 50327, 38032, 22292, 38897, 34723, 31240, 38049, 31240, 38067, 40887,
  /* 13230 */ 44944, 29973, 46197, 35899, 46200, 46225, 28036, 22292, 38670, 31240, 49224, 31240, 38012, 29973, 40235,
  /* 13245 */ 46198, 46200, 38084, 22292, 39873, 38669, 31240, 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240,
  /* 13260 */ 38016, 38918, 48163, 22414, 40503, 41917, 48161, 22373, 38015, 40789, 46223, 28111, 38106, 38129, 38145,
  /* 13275 */ 46154, 42822, 34333, 33383, 38181, 45394, 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 13290 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 13305 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25630, 31240, 31240, 19393, 31240, 29889, 31240, 21334,
  /* 13320 */ 31240, 31240, 47629, 38224, 38232, 38248, 38262, 38269, 38285, 38348, 38300, 18268, 30642, 31240, 21299,
  /* 13335 */ 31239, 31240, 38364, 31240, 31240, 39036, 31240, 30643, 39028, 39035, 38381, 38417, 33414, 34442, 22373,
  /* 13350 */ 31545, 25680, 31240, 28885, 31240, 28848, 31240, 20207, 23270, 31240, 31240, 31240, 28081, 44365, 22394,
  /* 13365 */ 29973, 41939, 46350, 34814, 26703, 46200, 38445, 38466, 25701, 38491, 22293, 35751, 38509, 38525, 38541,
  /* 13380 */ 34004, 38588, 25825, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38013, 36446, 38610, 39776, 29973,
  /* 13395 */ 29973, 22269, 32128, 46200, 38629, 46200, 46200, 22290, 38649, 22292, 38686, 22292, 27572, 33168, 31240,
  /* 13410 */ 31240, 38703, 28817, 31240, 31240, 38720, 38739, 31240, 31240, 40887, 36464, 29973, 29973, 38774, 30154,
  /* 13425 */ 31820, 41495, 46200, 46200, 38797, 22594, 22412, 29034, 22292, 22292, 38819, 27571, 33167, 31240, 31240,
  /* 13440 */ 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 30195, 46200, 46200, 46200, 46200,
  /* 13455 */ 46202, 22410, 22292, 22292, 22292, 22292, 33160, 27549, 31240, 31240, 31240, 31240, 50877, 29973, 29973,
  /* 13470 */ 29973, 29440, 46200, 46200, 46200, 46201, 22291, 22292, 22292, 22292, 34723, 38841, 31240, 31240, 31240,
  /* 13485 */ 40887, 38860, 29973, 46197, 38878, 46200, 46225, 38895, 22292, 38670, 31240, 31240, 31240, 38012, 29973,
  /* 13500 */ 29973, 46198, 47301, 48162, 22292, 31108, 38669, 31240, 22799, 38016, 29973, 46199, 48160, 22292, 50464,
  /* 13515 */ 45847, 38016, 49318, 28462, 38825, 27495, 38913, 38934, 38959, 38015, 40789, 46223, 28111, 38916, 33381,
  /* 13530 */ 28111, 38917, 31188, 38982, 33383, 32171, 45394, 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 13545 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 13560 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25630, 31240, 31240, 38572, 31240, 28304, 31240,
  /* 13575 */ 21108, 39015, 44268, 39053, 39091, 39115, 39135, 39119, 39099, 39151, 39200, 39166, 18268, 33271, 31620,
  /* 13590 */ 41248, 39216, 39232, 31240, 39266, 39288, 39310, 50099, 39326, 49914, 39354, 39389, 39419, 39467, 39503,
  /* 13605 */ 33482, 31545, 25680, 22858, 31240, 31240, 19973, 26901, 39519, 39538, 39566, 29295, 31240, 39582, 39617,
  /* 13620 */ 31337, 40526, 29973, 39654, 34814, 30002, 39674, 38633, 46200, 25701, 39694, 22292, 48974, 22537, 39730,
  /* 13635 */ 31240, 39746, 28585, 19152, 31240, 31240, 31240, 25182, 31240, 31240, 27331, 38013, 39764, 29973, 45305,
  /* 13650 */ 29973, 29973, 39799, 31939, 46200, 39815, 46200, 46200, 39836, 36552, 22292, 39871, 22292, 27572, 33168,
  /* 13665 */ 31240, 31240, 31240, 31240, 31240, 39889, 31240, 39365, 39907, 39926, 39943, 29973, 29973, 27421, 29973,
  /* 13680 */ 39968, 39991, 46200, 46200, 50049, 46200, 40015, 40062, 22292, 22292, 40306, 22292, 40086, 33167, 39910,
  /* 13695 */ 40111, 40326, 42927, 31240, 25531, 40148, 18386, 33045, 40178, 40203, 40229, 30195, 43528, 40251, 33451,
  /* 13710 */ 37441, 46202, 22410, 40287, 47392, 40677, 40303, 43909, 40322, 46535, 40342, 40364, 40393, 40413, 29973,
  /* 13725 */ 40429, 43240, 31782, 46200, 40452, 27175, 42404, 40475, 47810, 49966, 43073, 40494, 48869, 31240, 31240,
  /* 13740 */ 29866, 40519, 36768, 40542, 33860, 47279, 40566, 44533, 36321, 48957, 38670, 40590, 31240, 38704, 38012,
  /* 13755 */ 40613, 48548, 31061, 40650, 48162, 40666, 40693, 38669, 40727, 40745, 38016, 40769, 47212, 48160, 41548,
  /* 13770 */ 50464, 27240, 38016, 40787, 40805, 32795, 27875, 40826, 40842, 40858, 40884, 40903, 40925, 40947, 38916,
  /* 13785 */ 33381, 28111, 38917, 46223, 40868, 40970, 32171, 45394, 27844, 40997, 31240, 31240, 31240, 31240, 31240,
  /* 13800 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 13815 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25630, 31240, 31240, 31240, 41019, 29889,
  /* 13830 */ 31240, 21942, 41041, 31240, 35511, 41061, 41069, 41085, 41099, 41106, 41122, 41174, 41137, 41190, 41206,
  /* 13845 */ 41226, 40377, 37253, 41264, 41288, 36148, 41306, 41344, 41372, 41388, 41404, 41420, 34212, 41464, 41511,
  /* 13860 */ 41527, 41564, 41589, 41620, 31240, 41642, 24721, 25941, 31240, 41670, 41687, 36985, 31240, 31240, 27339,
  /* 13875 */ 31240, 29973, 38401, 41725, 41748, 41770, 46200, 32078, 41803, 26710, 25701, 22292, 41819, 44165, 37524,
  /* 13890 */ 42535, 31240, 31240, 41847, 31240, 26382, 30341, 45618, 41869, 26127, 34548, 31240, 41887, 41914, 44476,
  /* 13905 */ 41933, 29973, 44741, 41955, 46200, 41991, 42007, 46200, 27038, 42026, 22431, 40070, 22292, 22292, 42064,
  /* 13920 */ 36061, 42087, 42147, 35834, 31240, 42167, 31240, 31240, 31240, 31240, 26498, 40887, 29973, 47136, 47233,
  /* 13935 */ 29973, 29439, 31820, 46200, 37453, 37184, 46200, 46202, 22412, 22292, 35725, 50816, 22292, 27571, 33167,
  /* 13950 */ 31240, 31240, 40729, 31240, 47028, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 42185, 46200, 46200,
  /* 13965 */ 46200, 46200, 22491, 42244, 22292, 22292, 22292, 22292, 42264, 27549, 33264, 42306, 31240, 31240, 32398,
  /* 13980 */ 42323, 40634, 29973, 29440, 42340, 38803, 46200, 46201, 42357, 42360, 22292, 22292, 29498, 35377, 31240,
  /* 13995 */ 31240, 31240, 45890, 32475, 29973, 34886, 44140, 46200, 38943, 49205, 22292, 38670, 42376, 31240, 31240,
  /* 14010 */ 38012, 29973, 29973, 46198, 46200, 48162, 22292, 22292, 38669, 49779, 22799, 36865, 29973, 42394, 34605,
  /* 14025 */ 22704, 50464, 22791, 35637, 42420, 42455, 42491, 40503, 42527, 42551, 42576, 38015, 40789, 46223, 28111,
  /* 14040 */ 38916, 33381, 28111, 38917, 46223, 32746, 40810, 32171, 45394, 32565, 27236, 31240, 31240, 31240, 31240,
  /* 14055 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 14070 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25630, 31240, 31240, 31240, 45226,
  /* 14085 */ 29889, 31240, 31240, 42601, 23324, 42624, 42661, 31240, 22213, 42684, 42697, 42713, 42728, 42744, 18268,
  /* 14100 */ 31240, 35384, 21299, 31239, 31240, 31240, 49617, 23383, 31240, 31240, 42789, 35390, 31240, 38758, 35929,
  /* 14115 */ 42809, 42845, 34693, 31545, 25680, 23360, 42878, 31240, 28848, 31240, 38324, 42896, 31240, 42924, 31240,
  /* 14130 */ 23362, 31240, 42943, 42972, 46341, 42988, 27515, 22472, 50617, 43004, 27123, 43042, 43066, 34863, 42862,
  /* 14145 */ 36746, 42535, 43089, 31240, 45256, 19090, 31240, 43125, 43148, 31240, 31240, 31240, 31240, 38013, 29973,
  /* 14160 */ 29973, 33082, 29973, 29973, 22269, 46200, 46200, 31957, 46200, 46200, 22290, 22292, 22292, 36929, 22292,
  /* 14175 */ 27572, 45400, 43171, 45867, 26894, 31240, 31240, 32850, 31240, 43206, 27674, 31240, 40887, 29973, 43229,
  /* 14190 */ 29973, 29973, 30172, 31820, 46200, 43264, 46200, 46200, 22676, 22412, 22292, 43290, 22292, 22292, 27571,
  /* 14205 */ 33167, 31240, 39593, 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973, 47936, 29973, 45703, 46200,
  /* 14220 */ 46200, 44807, 46200, 46202, 43324, 22292, 22292, 43342, 22292, 33160, 27549, 31240, 31240, 31240, 31240,
  /* 14235 */ 50877, 29973, 29973, 29973, 29440, 46200, 46200, 46200, 46201, 22291, 22292, 22292, 22292, 34723, 31240,
  /* 14250 */ 42880, 31240, 31240, 43362, 29973, 29973, 46197, 46200, 46200, 46225, 22292, 22292, 40095, 31240, 31240,
  /* 14265 */ 31240, 38012, 29973, 29973, 46198, 46200, 48162, 22292, 22292, 38669, 31240, 22799, 38016, 29973, 46199,
  /* 14280 */ 48160, 22292, 50464, 43382, 43412, 44056, 41975, 22414, 26788, 41917, 48161, 22373, 38015, 40789, 46223,
  /* 14295 */ 28111, 38916, 33381, 28111, 38917, 46223, 34333, 33383, 32171, 45394, 27223, 27236, 31240, 31240, 31240,
  /* 14310 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 14325 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25630, 31240, 31240, 31240,
  /* 14340 */ 31240, 29889, 31240, 31240, 31240, 31240, 32629, 31240, 31240, 31240, 31240, 28088, 25651, 44609, 28067,
  /* 14355 */ 18268, 31240, 31240, 21299, 31239, 31240, 31240, 43439, 31240, 25976, 25979, 25982, 48421, 48428, 43457,
  /* 14370 */ 34044, 35693, 44878, 25705, 31545, 43487, 31240, 31240, 31240, 28848, 31240, 31240, 31240, 31240, 31240,
  /* 14385 */ 31240, 31240, 31240, 29973, 29973, 29973, 29973, 34814, 46200, 46200, 46200, 46200, 25701, 22292, 22292,
  /* 14400 */ 22292, 30262, 42535, 31240, 31240, 31240, 26462, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38013,
  /* 14415 */ 29973, 29973, 29973, 29973, 29973, 43523, 46200, 46200, 46200, 46200, 46200, 43544, 22292, 22292, 22292,
  /* 14430 */ 22292, 27572, 33168, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 40887, 29973,
  /* 14445 */ 29973, 29973, 29973, 29439, 31820, 46200, 46200, 46200, 46200, 46202, 22412, 22292, 22292, 22292, 22292,
  /* 14460 */ 27571, 33167, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 30195,
  /* 14475 */ 46200, 46200, 46200, 46200, 46202, 22410, 22292, 22292, 22292, 22292, 33160, 27549, 31240, 31240, 31240,
  /* 14490 */ 31240, 50877, 29973, 29973, 29973, 29440, 46200, 46200, 46200, 46201, 22291, 22292, 22292, 22292, 34723,
  /* 14505 */ 31240, 31240, 31240, 31240, 40887, 29973, 29973, 46197, 46200, 46200, 46225, 22292, 22292, 38670, 31240,
  /* 14520 */ 31240, 31240, 38012, 28152, 29973, 46198, 43563, 48162, 49698, 22292, 38669, 31240, 22799, 38016, 29973,
  /* 14535 */ 46199, 48160, 22292, 50464, 27240, 38016, 38918, 48163, 22414, 40503, 41917, 48161, 22373, 38015, 40789,
  /* 14550 */ 46223, 28111, 38916, 33381, 28111, 38917, 46223, 34333, 33383, 32171, 45394, 27223, 27236, 31240, 31240,
  /* 14565 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 14580 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25630, 31240, 31240,
  /* 14595 */ 31240, 34203, 30618, 31240, 31240, 31010, 31240, 36176, 43582, 23040, 43611, 43624, 43631, 43647, 43698,
  /* 14610 */ 43662, 18268, 26579, 30801, 21299, 35608, 41239, 43500, 31699, 43714, 43734, 43753, 43769, 43797, 43821,
  /* 14625 */ 35003, 37164, 43849, 43885, 34778, 43925, 43941, 31240, 31240, 31240, 19439, 43964, 43984, 28970, 25403,
  /* 14640 */ 31240, 31240, 33611, 44022, 29973, 46146, 29973, 44038, 44072, 46200, 44102, 42511, 44120, 44156, 39714,
  /* 14655 */ 22292, 36396, 30414, 44181, 31240, 31240, 31240, 31240, 44197, 41272, 31240, 44981, 31240, 44204, 19098,
  /* 14670 */ 32872, 29973, 44048, 29973, 50594, 44222, 44238, 46200, 44284, 46200, 27045, 45368, 44305, 22292, 44339,
  /* 14685 */ 22292, 22354, 38196, 33168, 31240, 31240, 31240, 44358, 29139, 35034, 44381, 39522, 44399, 44411, 44427,
  /* 14700 */ 29973, 50264, 44462, 44492, 28410, 44512, 46200, 44556, 39820, 44572, 22274, 44591, 22292, 41604, 47739,
  /* 14715 */ 44625, 40478, 33167, 28951, 31240, 31240, 18903, 44644, 47102, 40397, 32275, 40187, 29973, 44672, 29973,
  /* 14730 */ 30195, 27962, 44691, 35891, 46200, 46202, 22410, 47350, 38493, 22292, 22292, 37913, 44711, 41045, 41290,
  /* 14745 */ 31240, 31240, 50877, 44734, 29973, 29973, 43423, 44757, 46200, 46200, 40574, 32236, 22292, 22292, 48068,
  /* 14760 */ 34723, 31240, 26490, 31240, 31240, 44780, 29973, 29973, 44802, 46200, 45745, 31458, 22292, 44628, 38670,
  /* 14775 */ 31240, 29181, 31240, 38012, 29973, 29973, 46198, 46200, 48162, 22292, 22292, 38669, 31240, 22799, 38016,
  /* 14790 */ 29973, 46199, 48160, 22292, 50464, 49483, 37096, 44823, 45557, 44863, 40503, 41917, 48161, 22373, 44924,
  /* 14805 */ 34341, 32178, 33206, 38916, 33381, 28111, 38917, 46223, 33492, 44960, 44997, 32824, 27223, 27236, 31240,
  /* 14820 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 14835 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25630, 31240,
  /* 14850 */ 31240, 31240, 25037, 29889, 45062, 46458, 45022, 45048, 45082, 45119, 45032, 45135, 45149, 45165, 45181,
  /* 14865 */ 45196, 45212, 45249, 23204, 31240, 33295, 31239, 31240, 21397, 31240, 23240, 26255, 31240, 45272, 49786,
  /* 14880 */ 45279, 45295, 45329, 45359, 30036, 45384, 31545, 25680, 45416, 45436, 19145, 28848, 45454, 31240, 31240,
  /* 14895 */ 31240, 41448, 25007, 45489, 42645, 26663, 45508, 45525, 29973, 34814, 45546, 29225, 46200, 46200, 45573,
  /* 14910 */ 45589, 42038, 22292, 30262, 42535, 31240, 34994, 31240, 48756, 20970, 45611, 31240, 31240, 31240, 31240,
  /* 14925 */ 24518, 38013, 41732, 49113, 29973, 29973, 50795, 22269, 22484, 31948, 46200, 46200, 40271, 22290, 45634,
  /* 14940 */ 22944, 22292, 22292, 46249, 33168, 31240, 31240, 32418, 31240, 45654, 29322, 25685, 47110, 19984, 38068,
  /* 14955 */ 45673, 29973, 29973, 39952, 29398, 45696, 45719, 46200, 46200, 41486, 45740, 45761, 45804, 22292, 22292,
  /* 14970 */ 30405, 42470, 45825, 22835, 45863, 41702, 31240, 30756, 31240, 31240, 47059, 45885, 29973, 29973, 45906,
  /* 14985 */ 29973, 30195, 46200, 46200, 27148, 45943, 46202, 22410, 22292, 30324, 45595, 22292, 33160, 27549, 31240,
  /* 15000 */ 33758, 31240, 45963, 50877, 29973, 31745, 45927, 22576, 46200, 44134, 33866, 46201, 45982, 40703, 43547,
  /* 15015 */ 22292, 34723, 31240, 31240, 35982, 46971, 40887, 29973, 29973, 46197, 46200, 46200, 46225, 22292, 22292,
  /* 15030 */ 49470, 49059, 31240, 45999, 46023, 29973, 47144, 46198, 46200, 46049, 22292, 50069, 28390, 46069, 46092,
  /* 15045 */ 46120, 29973, 41477, 48160, 46170, 37482, 27240, 38016, 46192, 46218, 31173, 40503, 41917, 48161, 22373,
  /* 15060 */ 32369, 27741, 39480, 28111, 46879, 46241, 46265, 46281, 22760, 34333, 33383, 32171, 45394, 27223, 27236,
  /* 15075 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 15090 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 25630,
  /* 15105 */ 31240, 31240, 31240, 21417, 29889, 31240, 31240, 33362, 31240, 46317, 45775, 45788, 46366, 46382, 46397,
  /* 15120 */ 46413, 46428, 46444, 46474, 22194, 31240, 46497, 34984, 22557, 49040, 23001, 27553, 46520, 46563, 46609,
  /* 15135 */ 46600, 46796, 46625, 46641, 46671, 37394, 46687, 47796, 46713, 46736, 18896, 46759, 25121, 31240, 31240,
  /* 15150 */ 43155, 33967, 46783, 25524, 46812, 46828, 46868, 38159, 46903, 46919, 39403, 47974, 42439, 22658, 42341,
  /* 15165 */ 46940, 31194, 42210, 36386, 40931, 42535, 46956, 44718, 46999, 40753, 30877, 47017, 31240, 31240, 47052,
  /* 15180 */ 47075, 47091, 26286, 47126, 47160, 47194, 29973, 47228, 22269, 47249, 47272, 47295, 46200, 47317, 47335,
  /* 15195 */ 47377, 47422, 47462, 36900, 37711, 47481, 31240, 26963, 31240, 47508, 47527, 31240, 47564, 39068, 31516,
  /* 15210 */ 39748, 40887, 47580, 37108, 29973, 48121, 47615, 47645, 47663, 35943, 46200, 35533, 47690, 47735, 47755,
  /* 15225 */ 44891, 22292, 39855, 47782, 33167, 46743, 47843, 31240, 45465, 47866, 31240, 48457, 47889, 47901, 36203,
  /* 15240 */ 47924, 32284, 37780, 46301, 44289, 47959, 47990, 46202, 48006, 48029, 48049, 49431, 41541, 33160, 42585,
  /* 15255 */ 31240, 20036, 31240, 48084, 19992, 32499, 48116, 29973, 47178, 33422, 48137, 48158, 40909, 50428, 48179,
  /* 15270 */ 48202, 44342, 34723, 31240, 46843, 46767, 31240, 48222, 42956, 33337, 29794, 45343, 29245, 48611, 47361,
  /* 15285 */ 38687, 38670, 48246, 31240, 31240, 48281, 48303, 48323, 26691, 29801, 48350, 49960, 48372, 38669, 48408,
  /* 15300 */ 48446, 34953, 43366, 39432, 42290, 48481, 30290, 27240, 38016, 38918, 48163, 22414, 40503, 41917, 48161,
  /* 15315 */ 22373, 38015, 40789, 28030, 32159, 48505, 42198, 48535, 31386, 48571, 48587, 33383, 32171, 45394, 47406,
  /* 15330 */ 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 15345 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 15360 */ 25630, 31240, 31240, 31240, 31240, 48635, 31240, 31240, 48682, 31240, 41356, 47704, 47712, 48705, 47712,
  /* 15375 */ 47719, 48721, 48772, 48736, 18268, 31240, 31240, 21299, 48788, 28322, 31240, 31240, 31240, 31240, 42608,
  /* 15390 */ 31240, 48807, 31240, 26841, 39783, 49354, 48826, 44908, 32223, 48862, 48885, 31240, 31240, 28848, 31240,
  /* 15405 */ 31240, 25072, 48903, 31240, 31240, 31240, 48904, 32302, 29973, 29973, 29973, 35882, 48920, 46200, 46200,
  /* 15420 */ 46200, 48943, 48990, 22292, 22292, 36715, 42535, 49010, 31240, 36668, 49026, 31240, 31240, 31240, 48658,
  /* 15435 */ 49056, 34359, 32341, 38013, 29973, 49075, 49093, 47943, 46924, 22269, 50635, 44695, 40459, 32024, 33890,
  /* 15450 */ 22290, 45809, 36935, 50660, 49129, 35098, 33168, 31240, 31240, 49164, 32601, 31240, 31240, 31240, 38051,
  /* 15465 */ 31240, 31240, 40887, 29404, 29973, 29973, 29973, 29439, 49183, 33933, 46200, 46200, 46200, 46202, 49201,
  /* 15480 */ 37692, 22292, 22292, 22292, 27571, 33167, 41321, 31240, 49221, 31240, 31240, 31240, 31240, 49240, 29973,
  /* 15495 */ 29973, 29973, 29973, 30195, 49256, 46200, 46200, 46200, 46202, 49277, 22292, 22292, 22292, 22292, 33160,
  /* 15510 */ 36355, 31240, 31240, 47873, 31240, 50877, 49305, 29973, 29973, 29440, 49341, 46200, 46200, 44837, 35135,
  /* 15525 */ 22292, 22292, 43300, 34723, 47511, 31240, 31240, 31240, 40887, 29973, 29973, 46197, 46200, 46200, 46225,
  /* 15540 */ 22292, 22292, 38670, 31240, 31240, 31240, 38012, 29973, 29973, 46198, 46200, 48162, 22292, 22292, 38669,
  /* 15555 */ 31240, 22799, 38016, 49376, 31394, 48160, 49148, 50464, 27240, 38016, 38918, 48163, 22414, 40503, 41917,
  /* 15570 */ 48161, 22373, 38015, 40789, 46223, 28111, 47203, 28532, 49395, 38917, 46223, 34333, 33383, 49418, 49456,
  /* 15585 */ 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 15600 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 15615 */ 31240, 25630, 31240, 31240, 31240, 31240, 49507, 49569, 49543, 34526, 31240, 46547, 31240, 34514, 49566,
  /* 15630 */ 23166, 40597, 49588, 49640, 49603, 18268, 31240, 31240, 21299, 31239, 31240, 31240, 31240, 31240, 31240,
  /* 15645 */ 31240, 31240, 31240, 31240, 28198, 41916, 41970, 36523, 22373, 31545, 25680, 31240, 43682, 39250, 28848,
  /* 15660 */ 31240, 31240, 31240, 31240, 31240, 49656, 31240, 31240, 49077, 29973, 29973, 49674, 34814, 31921, 46200,
  /* 15675 */ 39678, 46200, 25701, 49694, 22292, 44323, 30262, 42535, 31240, 31240, 31240, 31240, 31240, 31240, 27286,
  /* 15690 */ 31240, 31240, 38332, 31240, 38013, 29973, 29973, 49714, 29973, 29973, 22269, 46200, 22232, 46200, 46200,
  /* 15705 */ 46200, 22290, 22292, 42475, 22292, 22292, 27572, 33168, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 15720 */ 31240, 31240, 31240, 40887, 29973, 29973, 29973, 29973, 29439, 31820, 46200, 46200, 46200, 46200, 46202,
  /* 15735 */ 22412, 22292, 22292, 22292, 22292, 27571, 33167, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38013,
  /* 15750 */ 29973, 29973, 29973, 29973, 30195, 46200, 46200, 46200, 46200, 46202, 22410, 22292, 22292, 22292, 22292,
  /* 15765 */ 33160, 27549, 31240, 41210, 31240, 31240, 50877, 29973, 29973, 29973, 29440, 46200, 46200, 46200, 46201,
  /* 15780 */ 22291, 22292, 22292, 22292, 34723, 31240, 41328, 31240, 31240, 40887, 29973, 29973, 46197, 46200, 46200,
  /* 15795 */ 46225, 22292, 22292, 38670, 31240, 31240, 31240, 38012, 29973, 29973, 46198, 46200, 48162, 22292, 22292,
  /* 15810 */ 38669, 49572, 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240, 38016, 38918, 48163, 22414, 40503,
  /* 15825 */ 41917, 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917, 46223, 34333, 33383, 32171,
  /* 15840 */ 45394, 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 15855 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 15870 */ 31240, 31240, 25630, 31240, 31240, 31240, 31240, 49732, 31240, 21125, 31240, 26542, 49764, 49802, 31240,
  /* 15885 */ 49826, 49840, 49853, 49869, 49884, 49900, 18268, 31240, 31240, 21299, 31239, 31240, 31240, 31240, 31240,
  /* 15900 */ 31240, 31240, 31240, 31240, 31240, 38014, 50407, 30229, 31553, 36346, 49946, 49982, 31240, 31240, 31240,
  /* 15915 */ 28848, 31240, 31240, 31240, 31240, 50005, 31240, 31240, 31240, 29973, 29973, 29973, 29973, 34814, 46200,
  /* 15930 */ 46200, 46200, 46200, 25701, 22292, 22292, 22292, 30262, 42535, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 15945 */ 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 29973, 22269, 46200, 46200, 46200,
  /* 15960 */ 46200, 46200, 22290, 22292, 22292, 22292, 22292, 27572, 33168, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 15975 */ 50110, 31240, 31240, 31240, 50023, 29973, 29973, 29973, 29973, 29439, 50045, 46200, 46200, 46200, 46200,
  /* 15990 */ 46202, 50065, 22292, 22292, 22292, 22292, 27571, 33167, 31240, 31240, 43182, 31240, 31240, 31240, 31240,
  /* 16005 */ 38013, 29973, 38165, 29973, 50738, 30195, 46200, 37412, 46200, 46200, 50085, 22410, 22292, 37880, 22292,
  /* 16020 */ 22950, 33160, 27549, 31240, 31240, 31240, 31240, 50877, 29973, 29973, 29973, 29440, 46200, 46200, 46200,
  /* 16035 */ 46201, 22291, 22292, 22292, 22292, 34723, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 46197, 46200,
  /* 16050 */ 46200, 46225, 22292, 22292, 38670, 31240, 31240, 31240, 38012, 29973, 29973, 46198, 46200, 48162, 22292,
  /* 16065 */ 22292, 38669, 31240, 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240, 38016, 38918, 48163, 22414,
  /* 16080 */ 40503, 41917, 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917, 46223, 34333, 33383,
  /* 16095 */ 32171, 45394, 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 16110 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 16125 */ 31240, 31240, 31240, 25864, 31240, 31240, 31240, 31240, 29889, 31240, 31240, 31240, 31240, 32629, 31240,
  /* 16140 */ 31240, 31240, 31240, 26389, 50134, 50185, 50149, 18268, 31240, 31240, 21299, 50201, 31240, 50224, 31240,
  /* 16155 */ 31240, 28171, 28174, 31240, 26140, 26147, 50250, 41916, 42506, 44847, 22373, 31545, 25680, 31240, 31240,
  /* 16170 */ 24801, 28848, 25374, 25635, 20244, 31240, 31240, 31240, 31240, 31240, 29973, 29973, 50280, 35265, 34814,
  /* 16185 */ 46200, 49185, 46200, 32092, 25701, 22292, 30059, 22292, 50301, 42535, 50361, 31240, 31240, 31240, 31240,
  /* 16200 */ 31240, 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 29973, 22269, 46200, 46200,
  /* 16215 */ 46200, 46200, 46200, 22290, 22292, 22292, 22292, 22292, 27572, 33168, 31240, 31240, 31240, 31240, 31240,
  /* 16230 */ 31240, 35854, 31240, 31240, 31240, 40887, 29973, 27768, 29973, 29973, 29927, 31820, 46200, 38450, 46200,
  /* 16245 */ 46200, 43566, 22412, 22292, 45638, 22292, 22292, 27571, 33167, 39891, 31240, 31240, 31240, 31240, 31240,
  /* 16260 */ 31240, 38013, 28346, 29973, 29973, 29973, 30195, 44575, 46200, 46200, 46200, 46202, 22410, 49142, 22292,
  /* 16275 */ 22292, 22292, 33160, 27549, 31240, 31240, 31240, 31240, 50877, 29973, 29973, 29973, 29440, 46200, 46200,
  /* 16290 */ 46200, 46201, 22291, 22292, 22292, 22292, 34723, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 46197,
  /* 16305 */ 46200, 46200, 46225, 22292, 22292, 38670, 31240, 31240, 31240, 38012, 29973, 29973, 46198, 46200, 48162,
  /* 16320 */ 22292, 22292, 38669, 31240, 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240, 38016, 38918, 48163,
  /* 16335 */ 22414, 40503, 41917, 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917, 46223, 34333,
  /* 16350 */ 33383, 32171, 45394, 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 16365 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 16380 */ 31240, 31240, 31240, 31240, 25630, 31240, 31240, 31240, 31240, 29889, 31240, 31240, 31240, 31240, 32629,
  /* 16395 */ 31240, 31240, 31240, 31240, 28088, 25651, 44609, 28067, 50390, 31240, 31240, 21299, 31239, 31240, 22634,
  /* 16410 */ 31240, 31240, 31240, 21918, 31240, 31240, 31240, 50399, 38781, 46200, 50423, 47827, 50444, 50480, 31240,
  /* 16425 */ 49624, 31240, 28848, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 50503, 29973, 29973, 29973, 44675,
  /* 16440 */ 34814, 46200, 46200, 46200, 41779, 25701, 22292, 22292, 22292, 50521, 42535, 31240, 25869, 31240, 31240,
  /* 16455 */ 31240, 31240, 31240, 31240, 41871, 31240, 31240, 38013, 44786, 29973, 29973, 50550, 29973, 22269, 42282,
  /* 16470 */ 46200, 22328, 46200, 46200, 22290, 36815, 22292, 36820, 22292, 27572, 33168, 31240, 31240, 50568, 31240,
  /* 16485 */ 31240, 31240, 31240, 31240, 31240, 31240, 40887, 29973, 50591, 29973, 29973, 29439, 50610, 27464, 50633,
  /* 16500 */ 46200, 46200, 46202, 50651, 29421, 50684, 22292, 22292, 27571, 33167, 31240, 31240, 31240, 31240, 31240,
  /* 16515 */ 31240, 50705, 38013, 29973, 29973, 50733, 29973, 31867, 46200, 46200, 44764, 46200, 27983, 22410, 22292,
  /* 16530 */ 22292, 50754, 22292, 47437, 27549, 31240, 31240, 26010, 31240, 50877, 29973, 29973, 29973, 29440, 46200,
  /* 16545 */ 46200, 46200, 46201, 22291, 22292, 22292, 22292, 30491, 31240, 31240, 48791, 31240, 27505, 29973, 29973,
  /* 16560 */ 42273, 46200, 46200, 42560, 22292, 22292, 38670, 31240, 31240, 50775, 38012, 29973, 50793, 46198, 41787,
  /* 16575 */ 48162, 22292, 50811, 38669, 31240, 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240, 38016, 38918,
  /* 16590 */ 48163, 22414, 40503, 41917, 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917, 46223,
  /* 16605 */ 34333, 33383, 32171, 45394, 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 16620 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 16635 */ 31240, 31240, 31240, 31240, 31240, 25630, 31240, 31240, 31240, 31240, 29889, 31240, 31240, 31240, 31240,
  /* 16650 */ 32629, 50832, 31240, 31240, 31240, 28088, 25651, 44609, 28067, 18268, 31240, 31240, 21299, 31239, 31240,
  /* 16665 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38014, 41916, 46200, 31553, 22373, 31545, 25680,
  /* 16680 */ 31240, 31240, 31240, 28848, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 29973, 29973, 29973,
  /* 16695 */ 29973, 34814, 46200, 46200, 46200, 46200, 25701, 22292, 22292, 22292, 30262, 42535, 31240, 31240, 31240,
  /* 16710 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 29973, 22269,
  /* 16725 */ 46200, 46200, 46200, 46200, 46200, 22290, 22292, 22292, 22292, 22292, 27572, 33168, 31240, 31240, 31240,
  /* 16740 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 29973, 29973, 29439, 31820, 46200,
  /* 16755 */ 46200, 46200, 46200, 46202, 22412, 22292, 22292, 22292, 22292, 27571, 33167, 31240, 31240, 31240, 31240,
  /* 16770 */ 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 30195, 46200, 46200, 46200, 46200, 46202, 22410,
  /* 16785 */ 22292, 22292, 22292, 22292, 33160, 27549, 31240, 31240, 31240, 31240, 50877, 29973, 29973, 29973, 29440,
  /* 16800 */ 46200, 46200, 46200, 46201, 22291, 22292, 22292, 22292, 34723, 31240, 31240, 31240, 31240, 40887, 29973,
  /* 16815 */ 29973, 46197, 46200, 46200, 46225, 22292, 22292, 38670, 31240, 31240, 31240, 38012, 29973, 29973, 46198,
  /* 16830 */ 46200, 48162, 22292, 22292, 38669, 31240, 22799, 38016, 29973, 46199, 48160, 22292, 50464, 27240, 38016,
  /* 16845 */ 38918, 48163, 22414, 40503, 41917, 48161, 22373, 38015, 40789, 46223, 28111, 38916, 33381, 28111, 38917,
  /* 16860 */ 46223, 34333, 33383, 32171, 45394, 27223, 27236, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 16875 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 16890 */ 31240, 31240, 31240, 31240, 31240, 31240, 20777, 31240, 31240, 31240, 31240, 42114, 49930, 49928, 18829,
  /* 16905 */ 18358, 50856, 42129, 42131, 42126, 18355, 18838, 50893, 50924, 50908, 18268, 31240, 31240, 21299, 31239,
  /* 16920 */ 31240, 51194, 50940, 31240, 31240, 31240, 31240, 31240, 31240, 21789, 20430, 18461, 20356, 18464, 20726,
  /* 16935 */ 19688, 18286, 42767, 18305, 28848, 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758, 20424, 24669,
  /* 16950 */ 18411, 18439, 19194, 19232, 20089, 18480, 18997, 18986, 19237, 20094, 18485, 19002, 18501, 31240, 31240,
  /* 16965 */ 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468, 18671, 18664,
  /* 16980 */ 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712, 19063, 31240, 41151,
  /* 16995 */ 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866, 18882, 19629,
  /* 17010 */ 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062, 24959, 19079, 19114,
  /* 17025 */ 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292, 19315, 19338, 19361,
  /* 17040 */ 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521, 19544, 19574,
  /* 17055 */ 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755, 19777, 19795,
  /* 17070 */ 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024, 20060, 20110, 20126,
  /* 17085 */ 19886, 20142, 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314, 20330, 20380,
  /* 17100 */ 20396, 25481, 18930, 25494, 20446, 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564, 20519, 20606,
  /* 17115 */ 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 17130 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 17145 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 20777, 31240, 31240, 31240, 31240, 27611, 31240, 31240,
  /* 17160 */ 40029, 31240, 32629, 35435, 35443, 50994, 51008, 51015, 50007, 50979, 51031, 18268, 31240, 31240, 21299,
  /* 17175 */ 31239, 31240, 51194, 31240, 31240, 31240, 50234, 31240, 31240, 50231, 21789, 18673, 18461, 20734, 20740,
  /* 17190 */ 20726, 19688, 18286, 42767, 18305, 28848, 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758, 20424,
  /* 17205 */ 24669, 18411, 18439, 19834, 19232, 20089, 18480, 18997, 20345, 19237, 20094, 18485, 19002, 18501, 31240,
  /* 17220 */ 31240, 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468, 18671,
  /* 17235 */ 18664, 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712, 19063, 31240,
  /* 17250 */ 41151, 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866, 18882,
  /* 17265 */ 19629, 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062, 24959, 19079,
  /* 17280 */ 19114, 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292, 19315, 19338,
  /* 17295 */ 19361, 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521, 19544,
  /* 17310 */ 19574, 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755, 19777,
  /* 17325 */ 19795, 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024, 20060, 20110,
  /* 17340 */ 20126, 19886, 20142, 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314, 20330,
  /* 17355 */ 20380, 20396, 25481, 18930, 25494, 20446, 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564, 20519,
  /* 17370 */ 20606, 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 17385 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 17400 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 20777, 31240, 31240, 31240, 31240, 24968, 31240,
  /* 17415 */ 31240, 31240, 31240, 40162, 19739, 51047, 51051, 51074, 51081, 26149, 51067, 51097, 18268, 31240, 31240,
  /* 17430 */ 21299, 31239, 31240, 51194, 51113, 31240, 20255, 31240, 31240, 31240, 20251, 21789, 18673, 18461, 20734,
  /* 17445 */ 18464, 20726, 19688, 18286, 42767, 18305, 28848, 31240, 42307, 31240, 31240, 18321, 18342, 18374, 42758,
  /* 17460 */ 20424, 24669, 18411, 18439, 20494, 19232, 20089, 18480, 18997, 19865, 19237, 20094, 18485, 19002, 18501,
  /* 17475 */ 31240, 31240, 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671, 18650, 20468,
  /* 17490 */ 18671, 18664, 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461, 18712, 19063,
  /* 17505 */ 31240, 41151, 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588, 18854, 18866,
  /* 17520 */ 18882, 19629, 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018, 19062, 24959,
  /* 17535 */ 19079, 19114, 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269, 19292, 19315,
  /* 17550 */ 19338, 19361, 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420, 19455, 19521,
  /* 17565 */ 19544, 19574, 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704, 19726, 19755,
  /* 17580 */ 19777, 19795, 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008, 20024, 20060,
  /* 17595 */ 20110, 20126, 19886, 20142, 19876, 19892, 20148, 20164, 20192, 20229, 20271, 25468, 20311, 20298, 20314,
  /* 17610 */ 20330, 20380, 20396, 25481, 18930, 25494, 20446, 18674, 18461, 18734, 20484, 26195, 20510, 20535, 20564,
  /* 17625 */ 20519, 20606, 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240, 31240, 31240,
  /* 17640 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 17655 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 20777, 31240, 31240, 31240, 31240, 27611,
  /* 17670 */ 31240, 31240, 31240, 31240, 32629, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 51137, 18268, 31240,
  /* 17685 */ 31240, 21299, 31239, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38014, 41916, 46200,
  /* 17700 */ 31553, 22373, 31545, 22169, 31240, 31240, 31240, 28848, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 17715 */ 31240, 29973, 29973, 29973, 29973, 31912, 46200, 46200, 46200, 46200, 30258, 22292, 22292, 22292, 30262,
  /* 17730 */ 42535, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973,
  /* 17745 */ 29973, 29973, 29973, 22269, 46200, 46200, 46200, 46200, 46200, 22290, 22292, 22292, 22292, 22292, 27572,
  /* 17760 */ 33168, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 40887, 29973, 29973, 29973,
  /* 17775 */ 29973, 29439, 31820, 46200, 46200, 46200, 46200, 46202, 22412, 22292, 22292, 22292, 22292, 27571, 33167,
  /* 17790 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 38013, 29973, 29973, 29973, 29973, 30195, 46200, 46200,
  /* 17805 */ 46200, 46200, 46202, 22410, 22292, 22292, 22292, 22292, 33160, 27549, 31240, 31240, 31240, 31240, 50877,
  /* 17820 */ 29973, 29973, 29973, 29440, 46200, 46200, 46200, 46201, 22291, 22292, 22292, 22292, 34723, 31240, 31240,
  /* 17835 */ 31240, 31240, 40887, 29973, 29973, 46197, 46200, 46200, 46225, 22292, 22292, 38670, 31240, 31240, 31240,
  /* 17850 */ 38012, 29973, 29973, 46198, 46200, 48162, 22292, 22292, 38669, 31240, 22799, 38016, 29973, 46199, 48160,
  /* 17865 */ 22292, 50464, 27240, 38016, 38918, 48163, 22414, 40503, 41917, 48161, 22373, 38015, 40789, 46223, 28111,
  /* 17880 */ 38916, 33381, 28111, 38917, 46223, 34333, 33383, 32171, 45394, 27223, 27236, 31240, 31240, 31240, 31240,
  /* 17895 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 17910 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 17925 */ 31240, 31240, 31240, 41025, 31240, 31240, 46104, 51167, 51171, 51171, 37853, 43441, 37845, 51187, 31240,
  /* 17940 */ 31240, 31240, 31240, 31240, 31240, 51194, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 21789, 18673,
  /* 17955 */ 18461, 20734, 18464, 20726, 19688, 18286, 42767, 18305, 31240, 31240, 42307, 31240, 31240, 18321, 18342,
  /* 17970 */ 18374, 42758, 20424, 24669, 18411, 18439, 19194, 19232, 20089, 18480, 18997, 18986, 19237, 20094, 18485,
  /* 17985 */ 19002, 18501, 31240, 31240, 18517, 31240, 31240, 31240, 18541, 41434, 31240, 18581, 50575, 18612, 18671,
  /* 18000 */ 18650, 20468, 18671, 18664, 18452, 26204, 18690, 25230, 18461, 18709, 18728, 26207, 18693, 25233, 18461,
  /* 18015 */ 18712, 19063, 31240, 41151, 18750, 23065, 37991, 18787, 18820, 31240, 42101, 26635, 21793, 23872, 19588,
  /* 18030 */ 18854, 18866, 18882, 19629, 25151, 18919, 18946, 18957, 18973, 19629, 25151, 18919, 18946, 18957, 19018,
  /* 18045 */ 19062, 24959, 19079, 19114, 19130, 50487, 19168, 41853, 19184, 19210, 19558, 19823, 20410, 19253, 19269,
  /* 18060 */ 19292, 19315, 19338, 19361, 19262, 19285, 19308, 19331, 19354, 19377, 19389, 19409, 31240, 19425, 45420,
  /* 18075 */ 19455, 19521, 19544, 19574, 19616, 25265, 19647, 24848, 19665, 25263, 19645, 24846, 19663, 19681, 19704,
  /* 18090 */ 19726, 19755, 19777, 19795, 20460, 19811, 19850, 19925, 19942, 19908, 19924, 19941, 19958, 22053, 20008,
  /* 18105 */ 20024, 20060, 20110, 20126, 19886, 20142, 19876, 19892, 20148, 20164, 20192, 51210, 20271, 25468, 20311,
  /* 18120 */ 20298, 20314, 20330, 51248, 20396, 25481, 18930, 25494, 51264, 18674, 18461, 18734, 20484, 26195, 20510,
  /* 18135 */ 20535, 20564, 20519, 20606, 20580, 20622, 20652, 19484, 20668, 20698, 20714, 20756, 31240, 31240, 31240,
  /* 18150 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240,
  /* 18165 */ 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 31240, 1, 12290, 3, 0, 0, 0, 0, 0,
  /* 18184 */ 0, 0, 90411, 90411, 90411, 90411, 0, 94508, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 90411, 94508, 301, 302,
  /* 18205 */ 0, 2134016, 94508, 94508, 90411, 90411, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508,
  /* 18220 */ 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508,
  /* 18235 */ 94508, 94508, 0, 94508, 90411, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 367, 94508,
  /* 18251 */ 90411, 94508, 94508, 94508, 94508, 94508, 94508, 94508, 69632, 73728, 94508, 94508, 94508, 94508, 94508,
  /* 18266 */ 65536, 94508, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 310, 311, 0, 0, 2457600, 0, 0, 0, 0, 0,
  /* 18294 */ 0, 0, 0, 0, 0, 0, 0, 0, 305, 0, 0, 2908160, 2912256, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3121152, 0,
  /* 18322 */ 2875392, 0, 0, 2424832, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 305, 305, 0, 305, 0, 2625536, 0, 2699264,
  /* 18346 */ 2715648, 0, 0, 2772992, 2805760, 2830336, 0, 2867200, 2924544, 0, 0, 0, 0, 0, 0, 0, 1138688, 0, 0, 0, 0,
  /* 18367 */ 0, 0, 1138688, 0, 0, 0, 0, 0, 0, 0, 0, 2805760, 2924544, 0, 0, 0, 0, 0, 2924544, 0, 0, 0, 0, 0, 0, 0,
  /* 18393 */ 2495, 0, 537, 537, 537, 537, 537, 537, 537, 537, 2211, 537, 537, 537, 537, 537, 0, 0, 2732032, 2772992,
  /* 18413 */ 2179072, 2179072, 2179072, 2805760, 2179072, 2830336, 2179072, 2179072, 2179072, 2867200, 2179072,
  /* 18424 */ 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 301, 0,
  /* 18437 */ 0, 0, 2924544, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18450 */ 2179072, 3121152, 2179072, 2179072, 2179072, 2125824, 0, 2125824, 2125824, 2125824, 2408448, 2125824,
  /* 18462 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18473 */ 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 2125824, 2830336, 2125824, 2125824, 2125824, 2867200,
  /* 18486 */ 2125824, 2125824, 2125824, 2125824, 2924544, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18497 */ 2125824, 2125824, 2125824, 2125824, 2457600, 2179072, 2179072, 2179072, 2179072, 2457600, 2125824,
  /* 18508 */ 2125824, 2125824, 2125824, 2457600, 2125824, 2125824, 2125824, 2125824, 2183168, 0, 2617344, 0, 0, 0, 0,
  /* 18523 */ 0, 2789376, 0, 0, 0, 0, 0, 0, 0, 0, 309, 309, 309, 0, 0, 0, 0, 0, 0, 0, 0, 2801664, 0, 0, 0, 0, 2142208,
  /* 18550 */ 0, 0, 0, 0, 0, 0, 0, 0, 254410, 254410, 254410, 254410, 254410, 254410, 254410, 254410, 254410, 254410,
  /* 18568 */ 254410, 254410, 254410, 254410, 254410, 254410, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2408448, 0, 0, 2584576, 0,
  /* 18589 */ 0, 0, 0, 2842624, 0, 0, 2842624, 0, 0, 0, 0, 0, 1093, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1103, 2412544, 0, 0,
  /* 18615 */ 2842624, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2408448, 2179072, 2179072, 2179072, 2125824, 0,
  /* 18630 */ 2126728, 2126728, 2126728, 2409352, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728,
  /* 18641 */ 2126728, 2126803, 2126803, 2126803, 2126803, 2126803, 2593747, 2126803, 2126803, 2584576, 2179072,
  /* 18652 */ 2179072, 2179072, 2179072, 2179072, 2617344, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18663 */ 2662400, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3129344, 2179072, 2179072, 2179072,
  /* 18674 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18685 */ 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2617344, 2125824, 2125824,
  /* 18696 */ 2125824, 2125824, 2125824, 2125824, 2662400, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18707 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3129344, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18718 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2179072, 2125824, 2125824, 0, 0, 2125824,
  /* 18731 */ 2125824, 2125824, 2408448, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18742 */ 2125824, 2125824, 2125824, 2125824, 2125824, 0, 2502656, 0, 0, 0, 0, 2600960, 0, 0, 2768896, 2777088,
  /* 18758 */ 2781184, 0, 2822144, 0, 0, 2887680, 0, 0, 0, 0, 0, 0, 1094, 1095, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1095, 0, 0,
  /* 18784 */ 0, 0, 1247, 0, 0, 0, 2854912, 2871296, 0, 0, 2887680, 0, 0, 0, 0, 0, 0, 0, 0, 336, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18812 */ 0, 0, 0, 0, 0, 0, 0, 2082, 0, 0, 0, 0, 3059712, 0, 0, 0, 3137536, 0, 0, 0, 0, 0, 0, 0, 0, 1138688, 0, 0,
  /* 18840 */ 1138688, 0, 0, 0, 0, 1138688, 1138688, 0, 0, 1138688, 0, 0, 1138688, 0, 2179072, 2768896, 2777088,
  /* 18857 */ 2781184, 2797568, 2822144, 2179072, 2179072, 2179072, 2887680, 2179072, 2916352, 2179072, 2179072,
  /* 18868 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3043328, 2179072, 3067904, 2179072, 2179072,
  /* 18879 */ 2179072, 2179072, 3104768, 2179072, 2179072, 3137536, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 18890 */ 2179072, 2179072, 2179072, 2179072, 3211264, 2179072, 0, 0, 0, 0, 0, 0, 1109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 18912 */ 2445, 0, 0, 2448, 0, 0, 0, 2125824, 2125824, 2125824, 2641920, 2125824, 2125824, 2125824, 2125824,
  /* 18927 */ 2125824, 2125824, 2719744, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18938 */ 2125824, 2125824, 3141632, 2125824, 2125824, 2498560, 2125824, 2125824, 2768896, 2777088, 2781184,
  /* 18949 */ 2797568, 2822144, 2125824, 2125824, 2125824, 2887680, 2125824, 2916352, 2125824, 2125824, 2125824,
  /* 18960 */ 2125824, 2125824, 2125824, 2125824, 3043328, 2125824, 3067904, 2125824, 2125824, 2125824, 2125824,
  /* 18971 */ 2125824, 3104768, 2125824, 2125824, 3137536, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18982 */ 2125824, 2125824, 2125824, 3211264, 2125824, 0, 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 18995 */ 2424832, 2433024, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3121152, 2125824, 2125824,
  /* 19006 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 2179072, 2125824, 2125824,
  /* 19018 */ 2125824, 2125824, 3137536, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19029 */ 2125824, 3211264, 2125824, 2179072, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19040 */ 2125824, 2125824, 2125824, 2125824, 2125824, 1053, 2125824, 2125824, 2125824, 0, 0, 0, 0, 1073, 1077, 0,
  /* 19056 */ 0, 1081, 1085, 0, 2424832, 2433024, 2125824, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824,
  /* 19069 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0, 2605056, 0, 0, 0, 0, 2891776,
  /* 19088 */ 0, 2928640, 0, 0, 0, 0, 0, 0, 0, 1609, 0, 0, 0, 0, 0, 0, 0, 0, 1707, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19118 */ 3166208, 3174400, 0, 0, 3223552, 3039232, 0, 0, 0, 0, 0, 3076096, 2650112, 0, 0, 2809856, 0, 0, 0, 0, 0,
  /* 19139 */ 0, 0, 0, 0, 0, 3092480, 0, 0, 0, 0, 0, 1122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1611, 0, 0, 1614, 0, 1616, 0,
  /* 19168 */ 3194880, 0, 0, 2576384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2387968, 0, 2682880, 0, 0, 0, 0, 0, 0, 3117056,
  /* 19193 */ 2387968, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 0, 2125824, 2125824, 2125824,
  /* 19206 */ 2125824, 2125824, 2424832, 2433024, 2179072, 2179072, 2453504, 2179072, 2473984, 2482176, 2179072,
  /* 19217 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2531328, 2179072, 2179072, 2179072, 2125824, 1807, 2125824,
  /* 19229 */ 2125824, 2125824, 2408448, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19240 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2625536, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19251 */ 2125824, 2699264, 2179072, 3174400, 2179072, 2179072, 3194880, 3198976, 2179072, 0, 0, 0, 0, 0, 0,
  /* 19266 */ 2387968, 2125824, 2125824, 2125824, 2420736, 2125824, 2125824, 2125824, 2125824, 2125824, 2453504,
  /* 19277 */ 2125824, 2473984, 2482176, 2125824, 2125824, 2125824, 2125824, 2125824, 2473984, 2482176, 2125824,
  /* 19288 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2531328, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19299 */ 2125824, 2125824, 2605056, 2125824, 2629632, 2125824, 2125824, 2650112, 2125824, 2605056, 2125824,
  /* 19310 */ 2629632, 2125824, 2125824, 2650112, 2125824, 2125824, 2125824, 2707456, 2125824, 2736128, 2125824,
  /* 19321 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2891776, 2125824, 2125824, 2125824,
  /* 19332 */ 2125824, 2125824, 2125824, 2891776, 2125824, 2125824, 2928640, 2125824, 2125824, 2125824, 2125824,
  /* 19343 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3039232, 2125824, 2125824, 3076096, 2125824, 2125824,
  /* 19354 */ 2125824, 3039232, 2125824, 2125824, 3076096, 2125824, 2125824, 2125824, 3125248, 2125824, 2125824,
  /* 19365 */ 3145728, 2125824, 2125824, 2125824, 3174400, 2125824, 2125824, 3194880, 3198976, 2125824, 0, 0, 2125824,
  /* 19378 */ 2125824, 3194880, 3198976, 2125824, 2179072, 2125824, 2125824, 2179072, 2179072, 3117056, 3223552,
  /* 19389 */ 2125824, 2125824, 3117056, 3223552, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 340, 0, 0, 0, 0, 2818048, 2850816,
  /* 19412 */ 0, 2920448, 0, 0, 3006464, 0, 0, 3026944, 0, 0, 3149824, 0, 3207168, 0, 0, 0, 0, 2727936, 0, 0, 0,
  /* 19433 */ 3088384, 0, 0, 0, 0, 3072000, 0, 0, 0, 0, 0, 0, 1138, 367, 367, 0, 0, 1141, 0, 0, 0, 1144, 0, 0, 2637824,
  /* 19458 */ 0, 0, 0, 0, 2621440, 0, 3186688, 2904064, 0, 2965504, 0, 0, 2179072, 2125824, 2125824, 2179072, 2179072,
  /* 19475 */ 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 237568, 2125824, 2125824, 2125824,
  /* 19487 */ 2125824, 2125824, 3096576, 2125824, 2527232, 2125824, 2125824, 2125824, 2125824, 2125824, 3096576, 0, 0,
  /* 19500 */ 0, 0, 0, 0, 1151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 302, 0, 0, 0, 0, 0, 2179072, 2416640, 2179072, 2179072,
  /* 19525 */ 2179072, 2445312, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 19536 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2126728, 2126728, 2126728, 2179072, 2551808, 2179072,
  /* 19547 */ 2179072, 2179072, 2179072, 2179072, 2637824, 2179072, 2179072, 2179072, 2179072, 2727936, 2752512,
  /* 19558 */ 2179072, 2179072, 2179072, 2179072, 2605056, 2179072, 2629632, 2179072, 2179072, 2650112, 2179072,
  /* 19569 */ 2179072, 2179072, 2707456, 2179072, 2736128, 2179072, 2846720, 2850816, 2179072, 2899968, 2920448,
  /* 19580 */ 2179072, 2179072, 2949120, 2179072, 2179072, 2998272, 2179072, 3006464, 2179072, 2179072, 2179072,
  /* 19591 */ 2179072, 2641920, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2719744, 2179072, 2179072,
  /* 19602 */ 2179072, 2179072, 2179072, 2179072, 2179072, 0, 1349, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19614 */ 2424832, 2433024, 3026944, 2179072, 3072000, 3088384, 3100672, 2179072, 2179072, 2179072, 2179072,
  /* 19625 */ 2179072, 2179072, 2179072, 3227648, 0, 0, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 19638 */ 2125824, 2125824, 2125824, 2125824, 2461696, 2465792, 2125824, 2125824, 2125824, 2125824, 2551808,
  /* 19649 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2637824, 2125824, 2125824, 2125824, 2125824, 2727936,
  /* 19660 */ 2752512, 2125824, 2125824, 3006464, 2125824, 2125824, 3026944, 2125824, 3072000, 3088384, 2125824,
  /* 19671 */ 3100672, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3227648, 0, 3227648, 2179072,
  /* 19683 */ 2125824, 2125824, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19702 */ 2424832, 2433024, 2510848, 2514944, 0, 0, 2547712, 2596864, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 306, 0, 0,
  /* 19724 */ 0, 0, 0, 0, 0, 3182592, 2670592, 0, 2744320, 0, 0, 0, 0, 0, 2932736, 0, 0, 0, 0, 0, 0, 0, 1163264, 0,
  /* 19748 */ 1163264, 0, 0, 0, 0, 1163264, 0, 3063808, 0, 2543616, 2666496, 0, 2633728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 19771 */ 308, 309, 0, 0, 0, 0, 0, 2961408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 311, 310, 3215360, 0, 0, 0,
  /* 19799 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2494464, 2179072, 2179072,
  /* 19810 */ 2514944, 2179072, 2179072, 2932736, 2179072, 2179072, 2179072, 3002368, 2179072, 2179072, 2179072,
  /* 19821 */ 2179072, 3063808, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2891776, 2179072,
  /* 19832 */ 2179072, 2928640, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 905, 2125824, 2125824,
  /* 19845 */ 2125824, 2125824, 2125824, 2424832, 2433024, 2179072, 2179072, 3182592, 2125824, 2125824, 2125824,
  /* 19856 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2494464, 2125824, 2125824, 2514944, 2125824, 0, 0, 979,
  /* 19869 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2424832, 2433024, 2125824, 2125824, 2125824, 2125824,
  /* 19880 */ 2125824, 2125824, 3133440, 2125824, 2125824, 3158016, 3170304, 3178496, 2396160, 2400256, 2125824,
  /* 19891 */ 2125824, 2441216, 2125824, 2469888, 2125824, 2125824, 2125824, 2519040, 2125824, 2125824, 2125824,
  /* 19902 */ 2125824, 2588672, 2125824, 2613248, 2646016, 2125824, 2125824, 2125824, 2125824, 3182592, 2125824,
  /* 19913 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2494464, 2125824, 2125824, 2514944,
  /* 19924 */ 2125824, 2125824, 2125824, 2543616, 2547712, 2125824, 2125824, 2596864, 2125824, 2125824, 2125824,
  /* 19935 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2932736, 2125824,
  /* 19946 */ 2125824, 2125824, 3002368, 2125824, 2125824, 2125824, 2125824, 3063808, 2125824, 2125824, 2125824,
  /* 19957 */ 2125824, 2125824, 2125824, 2125824, 2125824, 3182592, 2179072, 2125824, 2125824, 2179072, 2179072,
  /* 19968 */ 2125824, 2125824, 2125824, 2125824, 2441216, 0, 0, 0, 0, 0, 1137, 0, 367, 367, 0, 1140, 0, 0, 0, 0, 0, 0,
  /* 19990 */ 0, 2117, 0, 0, 0, 0, 0, 0, 0, 0, 2769, 0, 0, 0, 0, 0, 0, 537, 3178496, 2646016, 2613248, 2703360, 0, 0, 0,
  /* 20015 */ 0, 2981888, 0, 0, 3051520, 3133440, 0, 2985984, 2396160, 0, 3158016, 0, 0, 0, 2740224, 0, 0, 0, 0, 0,
  /* 20035 */ 2793472, 0, 0, 0, 0, 0, 0, 0, 2727, 0, 0, 0, 0, 0, 0, 0, 0, 111047, 111047, 0, 111047, 111047, 111047,
  /* 20058 */ 111047, 111047, 0, 2469888, 2506752, 2756608, 0, 0, 2580480, 0, 0, 0, 2396160, 2400256, 2179072, 2179072,
  /* 20074 */ 2441216, 2179072, 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824,
  /* 20085 */ 2125824, 2125824, 2125824, 241664, 2125824, 2125824, 2125824, 2125824, 2699264, 2125824, 2715648, 2125824,
  /* 20097 */ 2723840, 2125824, 2732032, 2772992, 2125824, 2125824, 2125824, 2805760, 2125824, 2830336, 2125824,
  /* 20108 */ 2125824, 2125824, 2469888, 2179072, 2179072, 2179072, 2519040, 2179072, 2179072, 2179072, 2179072,
  /* 20119 */ 2588672, 2179072, 2613248, 2646016, 2179072, 2179072, 2695168, 2756608, 2179072, 2179072, 2179072,
  /* 20130 */ 2936832, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3133440, 2179072, 2179072,
  /* 20141 */ 3158016, 2125824, 2588672, 2125824, 2613248, 2646016, 2125824, 2125824, 2695168, 2756608, 2125824,
  /* 20152 */ 2125824, 2125824, 2125824, 2936832, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20163 */ 2125824, 3133440, 2125824, 2125824, 3158016, 3170304, 3178496, 2506752, 2506752, 2506752, 2179072,
  /* 20174 */ 2179072, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 306, 2424832, 2433024,
  /* 20192 */ 2486272, 0, 0, 0, 0, 0, 2678784, 2859008, 3010560, 0, 3112960, 3203072, 0, 0, 3047424, 0, 0, 0, 0, 0,
  /* 20212 */ 1166, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2027, 0, 0, 2030, 2031, 0, 3153920, 2940928, 0, 2760704, 3141, 0, 0,
  /* 20236 */ 0, 0, 2957312, 0, 0, 2826240, 3162112, 2428928, 0, 0, 0, 0, 0, 1182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 20260 */ 1159168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3022848, 2764800, 2572288, 0, 0, 3055616, 2179072, 2428928,
  /* 20279 */ 2437120, 2179072, 2486272, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 905, 2126728,
  /* 20292 */ 2126728, 2126728, 2126728, 2126728, 2425736, 2433928, 2760704, 2764800, 2785280, 2859008, 2973696,
  /* 20303 */ 2125824, 3010560, 2125824, 3022848, 2125824, 2125824, 2125824, 2125824, 3153920, 2125824, 2428928,
  /* 20314 */ 2437120, 2125824, 2486272, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20325 */ 2654208, 2678784, 2760704, 2764800, 2785280, 2859008, 2973696, 2125824, 3010560, 2125824, 3022848,
  /* 20336 */ 2125824, 2125824, 2125824, 2125824, 3153920, 2179072, 3055616, 2125824, 3055616, 2125824, 0, 0, 980,
  /* 20349 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2424832, 2433024, 2125824, 2125824, 2125824, 2125824,
  /* 20360 */ 2125824, 0, 2125824, 2126804, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20372 */ 2125824, 2125824, 2125824, 2125824, 2125824, 245760, 0, 0, 3055616, 0, 2490368, 2498560, 0, 0, 0, 0,
  /* 20388 */ 2879488, 0, 0, 0, 3141, 0, 0, 2838528, 0, 3231744, 2568192, 2564096, 0, 2945024, 2179072, 2179072,
  /* 20404 */ 2498560, 2179072, 2179072, 2179072, 2555904, 2564096, 2179072, 2179072, 2179072, 2179072, 3039232,
  /* 20415 */ 2179072, 2179072, 3076096, 2179072, 2179072, 3125248, 2179072, 2179072, 3145728, 2179072, 2179072,
  /* 20426 */ 2179072, 2179072, 2424832, 2433024, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 20437 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2126729, 2945024, 0, 0, 0, 0, 0,
  /* 20452 */ 2748416, 2883584, 0, 3141, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2543616, 2547712, 2179072, 2179072,
  /* 20467 */ 2596864, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2801664,
  /* 20478 */ 2813952, 2179072, 2834432, 2842624, 2179072, 2179072, 0, 3014656, 0, 0, 0, 0, 2994176, 2179072, 2179072,
  /* 20493 */ 2502656, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 0, 904, 2125824, 2125824, 2125824,
  /* 20506 */ 2125824, 2125824, 2424832, 2433024, 2125824, 2125824, 3014656, 2125824, 2125824, 2125824, 2125824,
  /* 20517 */ 2125824, 2502656, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20528 */ 2125824, 2125824, 2125824, 2125824, 2592768, 2125824, 2125824, 2125824, 2125824, 3014656, 2125824,
  /* 20539 */ 2125824, 2125824, 0, 0, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 20555 */ 3141632, 2126728, 2126728, 2499464, 2126728, 2126728, 2126728, 2556808, 2565000, 2179072, 2179072,
  /* 20566 */ 2592768, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824,
  /* 20577 */ 2125824, 2125824, 2592768, 2535424, 2179072, 2609152, 2179072, 2863104, 2179072, 2179072, 2179072,
  /* 20588 */ 3035136, 2125824, 2449408, 2125824, 2535424, 2125824, 2609152, 2125824, 0, 0, 1442, 2125824, 2125824,
  /* 20601 */ 2125824, 2125824, 2125824, 2424832, 2433024, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 20612 */ 2449408, 0, 2535424, 3035136, 0, 0, 0, 2179072, 2449408, 2179072, 2863104, 2125824, 2125824, 2125824,
  /* 20626 */ 3035136, 2125824, 2125824, 2449408, 2125824, 2535424, 2125824, 2609152, 2125824, 2863104, 2125824,
  /* 20637 */ 2125824, 2125824, 0, 0, 0, 301, 0, 0, 0, 305, 0, 0, 0, 2424832, 2433024, 2125824, 3035136, 2125824,
  /* 20655 */ 2527232, 0, 0, 0, 2179072, 2527232, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2527232, 0,
  /* 20669 */ 2404352, 2179072, 2179072, 2179072, 2179072, 3031040, 2404352, 2125824, 2125824, 2125824, 2125824,
  /* 20680 */ 3031040, 2404352, 2125824, 2125824, 2125824, 0, 0, 180224, 0, 0, 0, 0, 0, 0, 0, 0, 2424832, 2433024,
  /* 20698 */ 2125824, 2125824, 3031040, 2539520, 0, 2953216, 2179072, 2658304, 2977792, 2179072, 2125824, 2658304,
  /* 20710 */ 2977792, 2125824, 2125824, 2658304, 2977792, 2125824, 2711552, 2560000, 2179072, 2560000, 2125824,
  /* 20721 */ 2560000, 2125824, 2179072, 2125824, 2125824, 2179072, 2125824, 2125824, 2179072, 2179072, 2179072,
  /* 20732 */ 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 2125824, 2125824, 2125824, 2125824,
  /* 20744 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 1146880, 0, 2125824,
  /* 20757 */ 2125824, 2990080, 2990080, 2990080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 306, 306, 0, 306, 1, 12290, 3,
  /* 20780 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 306, 0, 0, 111047, 111047, 111047, 455, 455, 111047, 455, 455, 455,
  /* 20805 */ 455, 455, 455, 455, 455, 455, 455, 111047, 111047, 111047, 111047, 111047, 111047, 111047, 111047, 111047,
  /* 20821 */ 111047, 455, 111047, 111047, 111047, 111047, 111047, 111047, 0, 0, 0, 0, 0, 0, 0, 0, 2134016, 0, 0, 0, 0,
  /* 20842 */ 0, 0, 57344, 111047, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 1, 12290, 3, 0, 0,
  /* 20866 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 118784, 301, 0, 305, 118784, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 325, 326,
  /* 20895 */ 0, 305, 305, 305, 305, 305, 305, 305, 305, 0, 0, 305, 0, 0, 0, 0, 305, 0, 0, 0, 305, 119200, 73728, 0, 0,
  /* 20920 */ 0, 0, 0, 65536, 0, 305, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 33399, 302, 0, 2134016, 49787, 306, 0,
  /* 20944 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 0, 2105634, 12290, 3, 0, 0, 296, 0, 0, 0, 0, 296, 0, 0, 0, 0,
  /* 20974 */ 0, 0, 0, 1625, 0, 1627, 0, 0, 0, 1631, 0, 0, 122880, 122880, 0, 122880, 122880, 122880, 122880, 122880,
  /* 20994 */ 122880, 122880, 122880, 122880, 122880, 122880, 122880, 122880, 0, 0, 0, 0, 122880, 122880, 122880,
  /* 21009 */ 122880, 122880, 122880, 122880, 122880, 122880, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 333, 384, 386,
  /* 21031 */ 0, 0, 0, 0, 0, 0, 122880, 0, 0, 122880, 122880, 122880, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21058 */ 0, 0, 308, 204800, 204800, 205108, 0, 0, 122880, 0, 0, 0, 122880, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0,
  /* 21081 */ 122880, 122880, 122880, 122880, 122880, 122880, 0, 2105634, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301,
  /* 21100 */ 302, 0, 2134016, 367, 0, 0, 0, 147456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 385, 0, 0, 0, 389, 742, 0, 0, 0,
  /* 21128 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 1903, 2125824, 2125824, 2125824, 2408448, 2125824, 2125824,
  /* 21149 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 1053,
  /* 21161 */ 0, 0, 0, 0, 0, 131072, 131072, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 131072, 0, 0, 131072, 0, 0, 0, 0,
  /* 21186 */ 131072, 131072, 131072, 131072, 131072, 131072, 131072, 131072, 0, 0, 131072, 0, 0, 0, 0, 131072, 0, 0, 0,
  /* 21205 */ 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 131072, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0,
  /* 21229 */ 2134016, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 135168, 0, 0, 135168, 0, 0, 0, 0, 135168,
  /* 21246 */ 0, 0, 135168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 338, 339, 0, 0, 0, 0, 135168, 1, 12290, 3, 0, 0, 2183168, 0,
  /* 21273 */ 0, 0, 0, 0, 301, 302, 0, 2134016, 0, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 632, 633, 0, 2134016, 636,
  /* 21298 */ 637, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 1, 12290, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21329 */ 139264, 302, 0, 306, 139264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 388, 340, 0, 306, 306, 306, 306, 306,
  /* 21355 */ 306, 306, 306, 0, 0, 306, 0, 0, 0, 0, 306, 0, 0, 0, 306, 69632, 139684, 0, 0, 0, 0, 0, 65536, 0, 306, 1,
  /* 21381 */ 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 33402, 0, 2134016, 305, 49790, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21407 */ 0, 0, 0, 0, 639, 0, 0, 0, 0, 61440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 356, 357, 358, 359, 1, 12290, 3,
  /* 21436 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 303, 303, 0, 0, 303, 303, 143663, 303, 303, 303, 303, 303, 303, 303,
  /* 21462 */ 303, 303, 368, 303, 0, 143663, 303, 303, 303, 303, 303, 303, 143663, 373, 303, 303, 303, 303, 303, 303,
  /* 21482 */ 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 143663, 303, 303, 143663, 303, 303, 303, 143733, 303,
  /* 21501 */ 303, 303, 143733, 69632, 73728, 303, 303, 143663, 303, 303, 65536, 303, 303, 303, 303, 303, 303, 303, 303,
  /* 21520 */ 143663, 303, 143663, 143663, 143663, 143663, 303, 143663, 143663, 143663, 143663, 143663, 143663, 143663,
  /* 21534 */ 303, 0, 303, 0, 303, 303, 303, 303, 143663, 143663, 143663, 143663, 143663, 143663, 143663, 143663,
  /* 21550 */ 143663, 303, 303, 303, 303, 143663, 303, 143663, 143663, 143663, 143663, 143663, 143663, 143663, 143733,
  /* 21565 */ 143663, 143663, 143663, 303, 303, 143663, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 143733,
  /* 21583 */ 303, 303, 303, 303, 143733, 143733, 143733, 143733, 143733, 143733, 143733, 143733, 143663, 143663,
  /* 21597 */ 143733, 143663, 143663, 143663, 143663, 143663, 143663, 143663, 143663, 143663, 143663, 143663, 143663,
  /* 21610 */ 143663, 143663, 143663, 143663, 143663, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016,
  /* 21630 */ 0, 0, 0, 155648, 155648, 0, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648,
  /* 21645 */ 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648, 155648,
  /* 21658 */ 155648, 155648, 155648, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 0, 0, 1167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 0,
  /* 21685 */ 0, 0, 155648, 0, 155648, 0, 12290, 3, 0, 0, 2183168, 126976, 0, 0, 0, 0, 301, 302, 0, 2134016, 208896, 0,
  /* 21707 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 737, 159744, 159744, 159744, 159744, 159744, 159744, 159744,
  /* 21729 */ 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 159744, 163840, 159744, 159744, 159744,
  /* 21742 */ 159744, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 159744, 159744, 159744, 159744, 159744, 159744,
  /* 21761 */ 159744, 159744, 159744, 163840, 159744, 159744, 159744, 159744, 159744, 159744, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21779 */ 2134752, 0, 0, 0, 0, 0, 0, 0, 0, 2142208, 0, 0, 0, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2179072,
  /* 21801 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2461696, 2465792, 159744, 0, 25158, 159744, 0, 0, 0,
  /* 21816 */ 159744, 159744, 0, 0, 0, 25158, 25158, 159744, 25158, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302,
  /* 21838 */ 0, 2134016, 25158, 25158, 25158, 25158, 25158, 25158, 25158, 25158, 25158, 159744, 25158, 159744, 159744,
  /* 21853 */ 159744, 159744, 25158, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936,
  /* 21866 */ 167936, 167936, 167936, 167936, 167936, 167936, 0, 0, 0, 0, 0, 0, 0, 167936, 167936, 167936, 0, 0, 167936,
  /* 21885 */ 0, 0, 0, 0, 0, 0, 0, 0, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 167936, 1, 12290,
  /* 21904 */ 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 1176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 21933 */ 739, 0, 0, 0, 0, 0, 172032, 0, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 345, 0, 0, 0, 0, 0, 0, 0, 0, 172032,
  /* 21960 */ 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 0, 0, 0, 0, 0, 0, 172032, 172032, 0, 172032, 0, 0, 172032,
  /* 21985 */ 172032, 0, 172032, 0, 0, 0, 0, 172032, 0, 0, 0, 0, 0, 1198, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 401, 0, 0, 0, 0,
  /* 22014 */ 0, 172032, 172032, 172032, 0, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 22028 */ 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032, 172032,
  /* 22041 */ 172032, 172032, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 2200249, 0, 0, 0, 0, 0, 0, 0, 0, 2936832, 2969600, 0, 0,
  /* 22065 */ 3080192, 0, 0, 2695168, 172032, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 1, 291,
  /* 22087 */ 3, 0, 0, 0, 297, 0, 0, 0, 0, 0, 0, 0, 0, 0, 302, 0, 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128, 176128,
  /* 22113 */ 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 176128, 0, 0, 0, 0, 0, 0,
  /* 22130 */ 0, 176128, 176128, 176128, 0, 0, 176128, 0, 0, 0, 0, 0, 0, 0, 0, 176128, 176128, 176128, 176128, 176128,
  /* 22150 */ 176128, 176128, 176128, 176128, 1, 0, 3, 78117, 78117, 295, 0, 630, 0, 0, 0, 301, 302, 0, 2134016, 583,
  /* 22170 */ 583, 583, 78117, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 402, 0, 0, 0, 0, 0, 0, 0, 1108, 0, 0, 0, 0, 0, 0, 0,
  /* 22201 */ 0, 0, 0, 0, 661, 0, 0, 664, 0, 0, 0, 1196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 511, 518, 518, 559, 559,
  /* 22231 */ 1388, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1851, 559, 0, 0, 0, 0, 1675,
  /* 22253 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 693, 694, 0, 367, 367, 537, 537, 537, 1348, 0, 559, 559, 559, 559, 559,
  /* 22279 */ 559, 559, 559, 559, 559, 559, 559, 559, 2302, 0, 0, 26017, 0, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 22301 */ 583, 583, 583, 583, 583, 583, 583, 1497, 0, 0, 0, 0, 2022, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2032, 559, 559,
  /* 22327 */ 2266, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1867, 559, 0, 0, 583, 583,
  /* 22348 */ 583, 583, 583, 583, 583, 2316, 583, 583, 583, 583, 583, 583, 583, 1975, 583, 583, 583, 1980, 583, 583,
  /* 22368 */ 583, 583, 583, 583, 2353, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 0, 0, 0, 537,
  /* 22390 */ 537, 537, 537, 2518, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1273, 537, 537, 537, 0,
  /* 22411 */ 0, 0, 0, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 537, 559, 2648, 583, 583,
  /* 22433 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1937, 2811, 537, 537, 537, 537, 537, 537,
  /* 22454 */ 537, 537, 537, 537, 537, 537, 0, 0, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2231, 559, 559, 559, 559,
  /* 22476 */ 559, 559, 1368, 559, 559, 559, 559, 1378, 559, 559, 559, 559, 559, 559, 1828, 559, 559, 559, 559, 559,
  /* 22496 */ 559, 559, 559, 559, 559, 2622, 559, 559, 559, 0, 0, 559, 2859, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 22517 */ 559, 559, 559, 559, 559, 0, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1011, 583, 583, 583, 2908, 583,
  /* 22538 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 0, 1534, 1535, 1536, 0, 0, 0, 2934, 0, 0, 0, 0, 0,
  /* 22562 */ 0, 0, 0, 0, 0, 0, 0, 724, 0, 0, 0, 537, 537, 2999, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 22587 */ 537, 537, 0, 2220, 559, 559, 3039, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 22608 */ 0, 2305, 583, 583, 3081, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 0, 0, 736, 0, 0,
  /* 22631 */ 0, 0, 3143, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 739, 0, 0, 0, 0, 537, 537, 559, 3186, 559, 559, 559, 3189,
  /* 22658 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 1408, 559, 559, 559, 1415, 1417, 559, 559, 3197, 559, 559,
  /* 22678 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 0, 2306, 583, 3218, 583, 583, 583, 583, 583,
  /* 22699 */ 583, 583, 583, 583, 3226, 583, 583, 583, 583, 583, 583, 3313, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 22720 */ 2900, 583, 583, 583, 583, 583, 583, 537, 537, 537, 3281, 537, 537, 537, 3282, 3283, 537, 537, 537, 537,
  /* 22740 */ 537, 537, 537, 0, 2558, 0, 0, 0, 0, 559, 559, 559, 559, 559, 559, 3300, 3301, 559, 559, 559, 559, 559,
  /* 22762 */ 559, 559, 559, 559, 583, 583, 3560, 583, 3561, 583, 583, 583, 583, 583, 3319, 3320, 583, 583, 583, 583,
  /* 22782 */ 583, 583, 583, 583, 583, 537, 537, 559, 559, 583, 0, 0, 0, 3331, 0, 0, 3334, 0, 0, 0, 0, 3141, 0, 0, 0, 0,
  /* 22808 */ 0, 0, 0, 0, 0, 0, 0, 752, 0, 0, 0, 0, 537, 537, 537, 3354, 537, 537, 537, 537, 559, 559, 559, 559, 559,
  /* 22833 */ 559, 3363, 559, 537, 537, 2395, 2396, 559, 559, 2399, 2400, 583, 583, 2403, 2404, 0, 1553, 0, 0, 0, 0, 0,
  /* 22855 */ 1213, 0, 1102, 0, 0, 0, 0, 0, 0, 0, 0, 1096, 1097, 1098, 1099, 0, 0, 0, 0, 583, 3379, 583, 583, 583, 583,
  /* 22880 */ 583, 583, 3385, 583, 583, 583, 3389, 583, 537, 559, 559, 559, 559, 559, 3369, 559, 559, 559, 3373, 559,
  /* 22900 */ 583, 583, 583, 583, 583, 583, 1526, 583, 583, 583, 583, 583, 0, 537, 583, 559, 537, 3506, 537, 537, 537,
  /* 22921 */ 537, 537, 537, 537, 537, 559, 559, 559, 559, 3518, 559, 559, 559, 559, 559, 3423, 559, 3425, 3426, 559,
  /* 22941 */ 3428, 559, 3430, 583, 583, 583, 583, 583, 1942, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2683,
  /* 22961 */ 583, 583, 583, 583, 583, 184928, 184928, 184928, 184928, 184928, 184928, 184928, 184928, 0, 0, 184928, 0,
  /* 22978 */ 0, 0, 0, 184928, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 0, 0, 0, 307, 0, 0,
  /* 23003 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 753, 0, 0, 0, 192968, 192968, 192968, 192968, 192968, 192968, 192968,
  /* 23024 */ 192968, 192968, 192968, 192968, 192968, 192968, 192968, 192968, 192968, 0, 192968, 192968, 192968, 0, 0,
  /* 23039 */ 192968, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 192968, 192968, 0, 192968, 192968, 192968,
  /* 23062 */ 192968, 192968, 192968, 0, 0, 0, 0, 0, 0, 0, 0, 3084288, 3104768, 3108864, 0, 0, 0, 0, 3190784, 0, 1,
  /* 23083 */ 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 304, 0, 0, 0, 0, 0, 0, 0, 304, 0, 0, 409,
  /* 23109 */ 409, 409, 0, 409, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 304, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23136 */ 0, 0, 0, 0, 0, 0, 0, 790, 409, 409, 409, 409, 409, 409, 409, 409, 0, 0, 409, 0, 0, 0, 0, 409, 1177, 0, 0,
  /* 23163 */ 0, 0, 1181, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 1549, 0, 0, 0, 1555, 0, 0, 0, 1561, 0, 0, 0,
  /* 23194 */ 1567, 0, 0, 0, 0, 0, 0, 0, 2200248, 2200248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 665, 0, 0, 1555,
  /* 23223 */ 2016, 0, 0, 0, 0, 1561, 2018, 0, 0, 0, 0, 1567, 2020, 0, 2018, 0, 2020, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 23251 */ 0, 773, 0, 0, 0, 0, 309, 0, 309, 0, 0, 0, 0, 0, 0, 0, 0, 0, 309, 0, 0, 0, 0, 0, 0, 1183, 0, 0, 0, 0, 0, 0,
  /* 23283 */ 0, 0, 0, 537, 537, 537, 2498, 2499, 537, 537, 0, 0, 0, 204800, 204800, 0, 204800, 204800, 204800, 204800,
  /* 23303 */ 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 204800, 205109, 204800, 204800,
  /* 23316 */ 205108, 205109, 204800, 205108, 204800, 205108, 204800, 204800, 0, 0, 0, 0, 0, 0, 0, 349, 0, 407, 0, 0, 0,
  /* 23337 */ 0, 0, 407, 204800, 1, 12290, 3, 0, 0, 2183797, 0, 0, 0, 0, 0, 301, 302, 151552, 2134016, 305, 306, 0,
  /* 23359 */ 212992, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1100, 0, 0, 0, 0, 0, 2200249, 0, 0, 0, 151552, 0, 0, 0, 0, 0,
  /* 23388 */ 0, 0, 0, 0, 0, 0, 771, 0, 0, 0, 0, 2126728, 2831240, 2126728, 2126728, 2126728, 2868104, 2126728, 2126728,
  /* 23407 */ 2126728, 2126728, 2925448, 2126728, 2126728, 2126728, 2126728, 2126728, 978, 2126803, 2126803, 2126803,
  /* 23419 */ 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 0, 2502656, 0,
  /* 23432 */ 2868179, 2126803, 2126803, 2126803, 2126803, 2925523, 2126803, 2126803, 2126803, 2126803, 2126803,
  /* 23443 */ 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 0, 0,
  /* 23456 */ 0, 2126803, 3122131, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803,
  /* 23468 */ 2126803, 0, 2179072, 2126803, 2126728, 2179072, 2179072, 2179072, 2179072, 2179072, 2126728, 2126728,
  /* 23480 */ 2126728, 2126728, 2126728, 0, 2126803, 2126803, 2417619, 2126803, 2126803, 2126803, 2446291, 2126803,
  /* 23492 */ 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2424832,
  /* 23511 */ 2433024, 2457600, 2179072, 2179072, 2179072, 2179072, 2458504, 2126728, 2126728, 2126728, 2126728,
  /* 23522 */ 2458579, 2126803, 2126803, 2126803, 2126803, 2183168, 0, 0, 2126803, 2126803, 2126803, 2409427, 2126803,
  /* 23535 */ 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2585555, 2126803,
  /* 23546 */ 2126803, 2126803, 2126803, 2126803, 2618323, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803,
  /* 23557 */ 2663379, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2626515, 2126803,
  /* 23568 */ 2126803, 2126803, 2126803, 2126803, 2126803, 2700243, 3130323, 2126803, 2126803, 2126803, 2126803,
  /* 23579 */ 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2179072, 2126803, 2126728,
  /* 23590 */ 2126728, 2847624, 2851720, 2126728, 2900872, 2921352, 2126728, 2126728, 2950024, 2126728, 2126728,
  /* 23601 */ 2999176, 2126728, 3007368, 2126728, 2126728, 2933640, 2126728, 2126728, 2126728, 3003272, 2126728,
  /* 23612 */ 2126728, 2126728, 2126728, 3064712, 2126728, 2126728, 2126728, 2126728, 2700168, 2126728, 2716552,
  /* 23623 */ 2126728, 2724744, 2126728, 2732936, 2773896, 2126728, 2126728, 2126728, 2806664, 2769800, 2777992,
  /* 23634 */ 2782088, 2798472, 2823048, 2126728, 2126728, 2126728, 2888584, 2126728, 2917256, 2126728, 2126728,
  /* 23645 */ 2126728, 2126728, 2126728, 2524040, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728,
  /* 23656 */ 2126728, 2601864, 2126728, 0, 0, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803,
  /* 23669 */ 2126803, 2126803, 2126803, 2462675, 2466771, 2126803, 2126803, 3138515, 2126803, 2126803, 2126803,
  /* 23680 */ 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 3212243, 2126803, 2179072, 2126803, 2126803,
  /* 23691 */ 3195859, 3199955, 2126803, 2179072, 2126803, 2126728, 2179072, 2179072, 3117056, 3223552, 2126728,
  /* 23702 */ 2126728, 3117960, 3224456, 2769875, 2778067, 2782163, 2798547, 2823123, 2126803, 2126803, 2126803,
  /* 23713 */ 2888659, 2126803, 2917331, 2126803, 2126803, 2126803, 2126803, 2126803, 2892755, 2126803, 2126803,
  /* 23724 */ 2929619, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 3183571, 2179072,
  /* 23735 */ 2126803, 2126728, 2179072, 2179072, 2126728, 2126728, 2126803, 2126803, 2441216, 0, 2126728, 2179072,
  /* 23747 */ 2179072, 2179072, 2179072, 2126728, 2126728, 2126728, 2126728, 2126803, 2126803, 2126803, 2126803, 0, 0,
  /* 23760 */ 0, 0, 2179072, 3174400, 2179072, 2179072, 3194880, 3198976, 2179072, 0, 0, 0, 0, 0, 0, 2388872, 2126728,
  /* 23777 */ 2126728, 2126728, 2642824, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2720648, 2126728,
  /* 23788 */ 2126728, 2126728, 2126728, 2126728, 2126728, 3134344, 2126728, 2126728, 3158920, 3171208, 3179400,
  /* 23799 */ 2397139, 2401235, 2126803, 2126803, 2126728, 2421640, 2126728, 2126728, 2126728, 2126728, 2126728,
  /* 23810 */ 2454408, 2126728, 2474888, 2483080, 2126728, 2126728, 2126728, 2126728, 2126728, 3097480, 2126803,
  /* 23821 */ 2528211, 2126803, 2126803, 2126803, 2126803, 2126803, 3097555, 0, 0, 2126728, 2532232, 2126728, 2126728,
  /* 23834 */ 2126728, 2126728, 2126728, 2126728, 2126728, 2605960, 2126728, 2630536, 2126728, 2126728, 2651016,
  /* 23845 */ 2126728, 2126728, 3015560, 2126728, 2126728, 2126728, 2126803, 2126803, 2503635, 2126803, 2126803,
  /* 23856 */ 2126803, 2126803, 2126803, 2126803, 2126803, 3015635, 2126803, 2126803, 2126803, 0, 0, 0, 0, 0, 0, 0,
  /* 23872 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2523136, 2179072, 2179072, 2179072, 2179072,
  /* 23883 */ 2179072, 2179072, 2179072, 2179072, 2600960, 2929544, 2126728, 2126728, 2126728, 2126728, 2126728,
  /* 23894 */ 2126728, 2126728, 2126728, 2126728, 3040136, 2126728, 2126728, 3077000, 2126728, 2126728, 2126728,
  /* 23905 */ 3183496, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2495443, 2126803,
  /* 23916 */ 2126803, 2515923, 2126728, 3126152, 2126728, 2126728, 3146632, 2126728, 2126728, 2126728, 3175304,
  /* 23927 */ 2126728, 2126728, 3195784, 3199880, 2126728, 0, 0, 0, 0, 0, 0, 1199, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 0,
  /* 23951 */ 122880, 122880, 0, 0, 0, 0, 0, 0, 2388947, 2126803, 2126803, 2126803, 2421715, 2126803, 2126803, 2126803,
  /* 23967 */ 2126803, 2126803, 2454483, 2126803, 2556883, 2565075, 2126803, 2126803, 2126803, 2126803, 2126803,
  /* 23978 */ 2126803, 2126803, 2126803, 2126803, 2126803, 3142611, 2945024, 2945928, 2474963, 2483155, 2126803,
  /* 23989 */ 2126803, 2126803, 2126803, 2126803, 2126803, 2532307, 2126803, 2126803, 2126803, 2126803, 2126803,
  /* 24000 */ 2126803, 2126803, 2449408, 0, 2535424, 3035136, 0, 0, 0, 2179072, 2449408, 2179072, 2606035, 2126803,
  /* 24014 */ 2630611, 2126803, 2126803, 2651091, 2126803, 2126803, 2126803, 2708435, 2126803, 2737107, 2126803,
  /* 24025 */ 2126803, 2126803, 2126803, 2642899, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2720723,
  /* 24036 */ 2126803, 2126803, 2126803, 2126803, 2126803, 2847699, 2851795, 2126803, 2900947, 2921427, 2126803,
  /* 24047 */ 2126803, 2950099, 2126803, 2126803, 2999251, 2126803, 2126803, 3040211, 2126803, 2126803, 3077075,
  /* 24058 */ 2126803, 2126803, 2126803, 3126227, 2126803, 2126803, 3146707, 2126803, 2126803, 2126803, 3175379,
  /* 24069 */ 3026944, 2179072, 3072000, 3088384, 3100672, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 24080 */ 2179072, 3227648, 0, 0, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728,
  /* 24093 */ 2126728, 2126728, 2462600, 2466696, 2126728, 2126728, 2417544, 2126728, 2126728, 2126728, 2446216,
  /* 24104 */ 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728,
  /* 24115 */ 2126728, 2126728, 2585480, 2126728, 2126728, 2126728, 2552712, 2126728, 2126728, 2126728, 2126728,
  /* 24126 */ 2126728, 2638728, 2126728, 2126728, 2126728, 2126728, 2728840, 2753416, 2126728, 2126728, 2544520,
  /* 24137 */ 2548616, 2126728, 2126728, 2597768, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728,
  /* 24148 */ 2126728, 2126728, 2126728, 3142536, 2126803, 2126803, 2499539, 2126803, 2126803, 2126728, 3027848,
  /* 24159 */ 2126728, 3072904, 3089288, 2126728, 3101576, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728,
  /* 24170 */ 2126728, 3228552, 0, 0, 0, 0, 0, 1225, 0, 0, 0, 0, 0, 0, 0, 0, 1230, 0, 0, 0, 0, 0, 1578, 1579, 0, 0, 0,
  /* 24197 */ 0, 0, 0, 0, 0, 0, 537, 537, 537, 537, 537, 2500, 537, 3007443, 2126803, 2126803, 3027923, 2126803,
  /* 24215 */ 3072979, 3089363, 2126803, 3101651, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803,
  /* 24226 */ 2802643, 2814931, 2126803, 2835411, 2843603, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803,
  /* 24237 */ 2126803, 2126803, 3044307, 2126803, 3068883, 2126803, 2126803, 2126803, 2126803, 2126803, 3105747,
  /* 24248 */ 3228627, 2179072, 2126803, 2126728, 2179072, 2179072, 2126728, 2126728, 2126803, 2126803, 0, 0, 0, 0, 0,
  /* 24263 */ 0, 0, 1152, 0, 0, 0, 0, 1157, 0, 0, 0, 2179072, 2179072, 3182592, 2126728, 2126728, 2126728, 2126728,
  /* 24281 */ 2126728, 2126728, 2126728, 2126728, 2495368, 2126728, 2126728, 2515848, 2126728, 2126728, 3138440,
  /* 24292 */ 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 3212168, 2126728, 0, 0,
  /* 24305 */ 980, 2126803, 2126803, 2126803, 2126803, 2126803, 2425811, 2434003, 2126803, 2126803, 2126803, 2126803,
  /* 24317 */ 2126803, 2524115, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2601939,
  /* 24328 */ 2126803, 3170304, 3178496, 2397064, 2401160, 2126728, 2126728, 2442120, 2126728, 2470792, 2126728,
  /* 24339 */ 2126728, 2126728, 2519944, 2126728, 2126728, 2126728, 2618248, 2126728, 2126728, 2126728, 2126728,
  /* 24350 */ 2126728, 2126728, 2663304, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2802568, 2814856,
  /* 24361 */ 2126728, 2835336, 2843528, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 3122056, 2126728,
  /* 24372 */ 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728,
  /* 24383 */ 2126728, 2626440, 2126728, 2126728, 2126728, 2589576, 2126728, 2614152, 2646920, 2126728, 2126728,
  /* 24394 */ 2696072, 2757512, 2126728, 2126728, 2126728, 2126728, 2937736, 2126728, 2126728, 2708360, 2126728,
  /* 24405 */ 2737032, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2892680, 2126728,
  /* 24416 */ 2126728, 2126728, 3130248, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728,
  /* 24427 */ 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126803, 2126803, 2126803,
  /* 24438 */ 2442195, 2126803, 2470867, 2126803, 2126803, 2126803, 2520019, 2126803, 2126803, 2126803, 2126803,
  /* 24449 */ 2589651, 2126803, 2614227, 2646995, 2126803, 2696147, 2757587, 2126803, 2126803, 2126803, 2126803,
  /* 24460 */ 2937811, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2933715, 2126803,
  /* 24471 */ 2126803, 2126803, 3003347, 2126803, 2126803, 2126803, 2126803, 3064787, 2126803, 2126803, 2126803,
  /* 24482 */ 3134419, 2126803, 2126803, 3158995, 3171283, 3179475, 2506752, 2507731, 2507656, 2179072, 2179072,
  /* 24493 */ 2126728, 2126728, 2126803, 2126803, 0, 0, 0, 0, 0, 1623, 0, 0, 0, 0, 0, 1629, 0, 0, 1632, 0, 0, 0, 0, 0,
  /* 24517 */ 1654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1581, 0, 0, 0, 0, 0, 3153920, 2126728, 2429832, 2438024, 2126728,
  /* 24539 */ 2487176, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2655112, 2679688,
  /* 24550 */ 2761608, 2765704, 2786184, 2859912, 2974600, 2126728, 3011464, 2126728, 3023752, 2126728, 2126728,
  /* 24561 */ 2126728, 2126728, 3154824, 2126803, 2429907, 2438099, 2126803, 2487251, 2126803, 2126803, 2126803,
  /* 24572 */ 2126803, 2126803, 2126803, 2126803, 2126803, 2655187, 2679763, 2761683, 2765779, 2786259, 2859987,
  /* 24583 */ 2974675, 2126803, 3011539, 2126803, 3023827, 2126803, 2126803, 2126803, 2126803, 3154899, 2179072,
  /* 24594 */ 3055616, 2126728, 3056520, 2126803, 2716627, 2126803, 2724819, 2126803, 2733011, 2773971, 2126803,
  /* 24605 */ 2126803, 2126803, 2806739, 2126803, 2831315, 2126803, 2126803, 2126803, 2544595, 2548691, 2126803,
  /* 24616 */ 2126803, 2597843, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2126803, 2552787,
  /* 24627 */ 2126803, 2126803, 2126803, 2126803, 2126803, 2638803, 2126803, 2126803, 2126803, 2126803, 2728915,
  /* 24638 */ 2753491, 3056595, 0, 2490368, 2498560, 0, 0, 0, 0, 2879488, 0, 0, 0, 3141, 0, 0, 2838528, 2946003, 0, 0,
  /* 24658 */ 0, 0, 0, 2748416, 2883584, 0, 3141, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2625536, 2179072, 2179072,
  /* 24675 */ 2179072, 2179072, 2179072, 2179072, 2699264, 2179072, 2715648, 2179072, 2723840, 2179072, 2179072,
  /* 24686 */ 2179072, 2592768, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2126728, 2126728,
  /* 24697 */ 2126728, 2126728, 2126728, 2593672, 2535424, 2179072, 2609152, 2179072, 2863104, 2179072, 2179072,
  /* 24708 */ 2179072, 3035136, 2126728, 2450312, 2126728, 2536328, 2126728, 2610056, 2126728, 2126803, 2990080,
  /* 24719 */ 2990984, 2991059, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1128, 0, 0, 0, 0, 2864008, 2126728, 2126728, 2126728,
  /* 24741 */ 3036040, 2126728, 2126803, 2450387, 2126803, 2536403, 2126803, 2610131, 2126803, 2864083, 2126803,
  /* 24752 */ 2126803, 3032019, 2539520, 0, 2953216, 2179072, 2658304, 2977792, 2179072, 2126728, 2659208, 2978696,
  /* 24764 */ 2126728, 2126803, 2659283, 2126803, 3036115, 2126803, 2527232, 0, 0, 0, 2179072, 2527232, 2179072,
  /* 24777 */ 2179072, 2179072, 2179072, 2179072, 2126728, 2528136, 0, 2404352, 2179072, 2179072, 2179072, 2179072,
  /* 24789 */ 3031040, 2405256, 2126728, 2126728, 2126728, 2126728, 3031944, 2405331, 2126803, 2126803, 3118035,
  /* 24800 */ 3224531, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1129, 0, 0, 0, 2978771, 2126803, 2711552, 2560000, 2179072,
  /* 24822 */ 2560904, 2126728, 2560979, 2126803, 2179072, 2126728, 2126803, 2179072, 2126728, 2126803, 2179072,
  /* 24833 */ 2125824, 2125824, 2179072, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824,
  /* 24844 */ 2125824, 245760, 2125824, 2125824, 2125824, 2125824, 2846720, 2850816, 2125824, 2899968, 2920448, 2125824,
  /* 24856 */ 2125824, 2949120, 2125824, 2125824, 2998272, 2125824, 3006464, 2125824, 0, 221184, 221184, 0, 0, 0, 0, 0,
  /* 24872 */ 0, 0, 0, 0, 221184, 221184, 0, 0, 221184, 221184, 221184, 0, 0, 0, 0, 0, 0, 221184, 0, 0, 221184, 221184,
  /* 24894 */ 221184, 221184, 221184, 221184, 221184, 221184, 221184, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 0, 0, 0, 0,
  /* 24914 */ 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184, 221184,
  /* 24927 */ 221184, 221184, 221184, 221184, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 0, 0, 0,
  /* 24949 */ 2801664, 0, 0, 0, 0, 2142208, 0, 0, 0, 98304, 0, 0, 0, 0, 0, 0, 0, 2473984, 2478080, 0, 0, 0, 0, 0, 0, 0,
  /* 24975 */ 0, 1163264, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 706, 0, 0, 0, 0, 0, 53248, 0, 0, 0, 0, 0, 2662400, 0, 2813952,
  /* 25002 */ 0, 0, 0, 0, 2375680, 0, 0, 0, 0, 0, 0, 1226, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1643, 0, 0, 0, 0, 0, 0, 0, 0, 306,
  /* 25033 */ 0, 0, 0, 2461696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 353, 354, 355, 0, 0, 0, 0, 0, 0, 0, 0, 3059712, 0, 0, 0,
  /* 25061 */ 3137536, 0, 98304, 0, 0, 0, 0, 0, 0, 0, 1679, 0, 0, 0, 0, 0, 0, 0, 0, 1186, 0, 0, 0, 1190, 0, 0, 0,
  /* 25088 */ 2125824, 2179072, 2179072, 2179072, 2179072, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 25099 */ 2125824, 2125824, 301, 0, 302, 0, 0, 0, 302, 0, 305, 0, 0, 0, 305, 0, 306, 0, 0, 0, 2473984, 2478080, 0,
  /* 25122 */ 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 1142, 0, 0, 0, 2179072, 3174400, 2179072, 2179072, 3194880, 3198976,
  /* 25143 */ 2179072, 905, 0, 0, 0, 905, 0, 2387968, 2125824, 2125824, 2125824, 2125824, 2125824, 2523136, 2125824,
  /* 25158 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2600960, 2125824, 2125824, 3125248,
  /* 25169 */ 2125824, 2125824, 3145728, 2125824, 2125824, 2125824, 3174400, 2125824, 2125824, 3194880, 3198976,
  /* 25180 */ 2125824, 980, 0, 0, 0, 0, 0, 1664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3129, 0, 0, 0, 0, 0, 0, 0, 980, 0,
  /* 25208 */ 2387968, 2125824, 2125824, 2125824, 2420736, 2125824, 2125824, 2125824, 2125824, 2125824, 2453504,
  /* 25219 */ 2125824, 0, 24576, 980, 2125824, 2125824, 2125824, 2125824, 2125824, 2424832, 2433024, 2125824, 2125824,
  /* 25232 */ 2125824, 2125824, 2125824, 2125824, 2801664, 2813952, 2125824, 2834432, 2842624, 2125824, 2125824,
  /* 25243 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3026944, 2179072, 3072000, 3088384, 3100672,
  /* 25254 */ 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 3227648, 905, 0, 2125824, 2125824, 2416640,
  /* 25267 */ 2125824, 2125824, 2125824, 2445312, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 25278 */ 2125824, 2125824, 2125824, 2125824, 3026944, 2125824, 3072000, 3088384, 2125824, 3100672, 2125824,
  /* 25289 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3227648, 980, 225886, 225886, 225886, 225886,
  /* 25301 */ 225886, 225886, 225886, 225886, 225737, 225737, 225886, 225737, 225737, 225737, 225737, 225902, 1, 12290,
  /* 25315 */ 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 1, 12290, 3, 0, 0, 0, 0, 249856, 0, 0, 0, 249856,
  /* 25340 */ 0, 0, 0, 0, 0, 249856, 249856, 0, 249856, 249856, 249856, 249856, 249856, 249856, 1, 12290, 3, 0, 0,
  /* 25359 */ 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 305, 306, 0, 0, 217088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25385 */ 1156, 0, 0, 0, 0, 1, 12290, 3, 0, 0, 0, 0, 0, 253952, 0, 0, 0, 253952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25415 */ 1205, 1206, 0, 0, 254410, 1, 12290, 0, 0, 0, 2183168, 0, 0, 270336, 0, 0, 301, 302, 0, 2134016, 305, 306,
  /* 25437 */ 200704, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 754, 0, 0, 2945024, 0, 0, 0, 0, 0, 2748416, 2883584, 0,
  /* 25463 */ 20480, 0, 0, 0, 0, 2179072, 2179072, 2179072, 2654208, 2678784, 2760704, 2764800, 2859008, 2973696,
  /* 25477 */ 2179072, 3010560, 2179072, 3022848, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072, 2179072,
  /* 25488 */ 3141632, 2125824, 2125824, 2498560, 2125824, 2125824, 2125824, 2555904, 2564096, 2125824, 2125824,
  /* 25499 */ 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 3141632, 2945024, 2945024, 1,
  /* 25511 */ 12290, 2113828, 0, 0, 0, 0, 0, 0, 298, 0, 0, 0, 298, 0, 0, 0, 0, 0, 0, 1227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25540 */ 2470, 0, 0, 0, 0, 0, 0, 266240, 266240, 266240, 266240, 266240, 266240, 266240, 266240, 0, 0, 266240, 0,
  /* 25559 */ 0, 0, 0, 266240, 0, 0, 266240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 772, 0, 0, 0, 266240, 1, 12290,
  /* 25586 */ 2113828, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 274432, 274432, 274432, 274432, 274432,
  /* 25604 */ 274432, 274432, 274432, 0, 0, 274432, 0, 0, 0, 0, 274432, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301,
  /* 25627 */ 302, 0, 2134016, 1, 12290, 3, 78117, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1172, 0, 0, 0, 0, 537, 537,
  /* 25653 */ 583, 559, 559, 559, 559, 559, 537, 559, 559, 559, 583, 583, 537, 583, 559, 537, 2922, 559, 2924, 583,
  /* 25673 */ 2926, 0, 0, 0, 0, 0, 2932, 583, 583, 583, 78117, 1072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1185, 0, 0, 0, 0,
  /* 25701 */ 559, 26017, 1348, 980, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1052, 0, 0, 0, 0, 0, 0,
  /* 25724 */ 2016, 0, 0, 0, 0, 0, 2018, 0, 0, 0, 0, 0, 2020, 0, 2463, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 698, 0,
  /* 25755 */ 0, 0, 0, 2098, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1244, 0, 0, 0, 0, 0, 0, 0, 434, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25788 */ 0, 0, 0, 1218, 0, 0, 0, 0, 537, 537, 584, 560, 560, 560, 560, 560, 537, 560, 560, 560, 584, 584, 537, 584,
  /* 25812 */ 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 1608, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 25840 */ 0, 537, 560, 537, 560, 537, 537, 560, 584, 584, 584, 584, 584, 584, 584, 584, 584, 560, 584, 560, 537,
  /* 25861 */ 560, 560, 584, 1, 12290, 3, 78118, 295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1584, 0, 0, 0, 0, 282624, 282624,
  /* 25887 */ 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624,
  /* 25900 */ 282624, 0, 0, 282624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282624, 282624,
  /* 25926 */ 282624, 282624, 282624, 282624, 282624, 282624, 282624, 282624, 0, 282624, 282624, 282624, 282624, 282624,
  /* 25940 */ 282624, 0, 0, 0, 0, 0, 0, 0, 367, 367, 1139, 0, 0, 0, 0, 0, 0, 282624, 1, 12290, 3, 0, 0, 2183168, 0, 0,
  /* 25966 */ 0, 0, 0, 301, 302, 0, 2134016, 0, 0, 1197, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 786, 0, 0, 0, 0, 0, 0,
  /* 25996 */ 0, 0, 0, 3158016, 3141, 0, 0, 2740224, 0, 0, 0, 0, 0, 2793472, 0, 0, 0, 0, 0, 0, 0, 2742, 0, 0, 0, 0, 0,
  /* 26023 */ 0, 0, 0, 225737, 225737, 225737, 225737, 225737, 225737, 225737, 225737, 225737, 225737, 225737, 225737,
  /* 26038 */ 225737, 225737, 225737, 225737, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 286720, 286720, 0, 286720, 286720, 286720,
  /* 26058 */ 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720,
  /* 26071 */ 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 286720, 0, 0, 0, 0, 0, 0, 0, 380, 0, 383,
  /* 26090 */ 0, 0, 0, 383, 0, 0, 286720, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 3153920,
  /* 26113 */ 2940928, 0, 2760704, 3261, 0, 0, 0, 0, 2957312, 0, 0, 2826240, 3162112, 2428928, 0, 0, 0, 0, 0, 1677, 0,
  /* 26134 */ 0, 0, 0, 0, 0, 1684, 0, 0, 0, 0, 0, 0, 731, 0, 787, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1163264, 0,
  /* 26165 */ 3055616, 0, 2490368, 2498560, 0, 0, 0, 0, 2879488, 0, 0, 0, 3338, 0, 0, 2838528, 2945024, 0, 0, 0, 0, 0,
  /* 26187 */ 2748416, 2883584, 0, 3338, 0, 0, 0, 0, 2179072, 2179072, 2179072, 3014656, 2179072, 2179072, 2125824,
  /* 26202 */ 2125824, 2502656, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824, 2125824,
  /* 26213 */ 2125824, 2125824, 2125824, 2125824, 2584576, 2125824, 2125824, 2125824, 2125824, 2125824, 0, 0, 0, 311, 0,
  /* 26228 */ 0, 0, 0, 0, 310, 0, 310, 311, 0, 310, 310, 0, 0, 0, 310, 310, 311, 311, 0, 0, 0, 0, 0, 0, 310, 410, 311,
  /* 26255 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 792, 0, 0, 0, 311, 415, 0, 0, 69632, 73728, 0, 0, 0, 0, 0,
  /* 26285 */ 65536, 0, 0, 0, 0, 0, 1714, 0, 1716, 1690, 537, 537, 537, 537, 537, 537, 537, 537, 3017, 537, 3019, 537,
  /* 26307 */ 537, 537, 537, 537, 459, 459, 459, 485, 485, 459, 485, 485, 485, 485, 485, 485, 485, 510, 485, 485, 485,
  /* 26328 */ 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 485, 530, 485, 485, 485, 485, 485, 485, 538, 561, 538,
  /* 26349 */ 561, 538, 538, 561, 538, 538, 585, 561, 561, 561, 561, 561, 538, 561, 561, 561, 585, 585, 538, 585, 1,
  /* 26370 */ 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 1624, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26398 */ 558, 581, 558, 581, 558, 558, 581, 585, 585, 585, 585, 585, 585, 585, 585, 585, 561, 585, 561, 538, 561,
  /* 26419 */ 561, 585, 305, 306, 0, 0, 0, 0, 0, 641, 0, 0, 644, 645, 0, 0, 0, 0, 0, 0, 0, 2936, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 26449 */ 537, 537, 537, 844, 537, 537, 537, 537, 0, 0, 0, 0, 670, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1613, 0, 0, 0,
  /* 26477 */ 0, 367, 0, 0, 700, 0, 0, 0, 0, 0, 0, 0, 707, 0, 0, 0, 0, 0, 0, 0, 2949, 0, 0, 0, 0, 0, 0, 0, 0, 2129, 0,
  /* 26508 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1645, 0, 0, 0, 0, 743, 0, 0, 0, 0, 0,
  /* 26541 */ 641, 0, 0, 0, 0, 0, 0, 0, 0, 0, 363, 0, 0, 0, 0, 0, 363, 0, 758, 0, 0, 0, 0, 764, 0, 0, 768, 0, 0, 0, 0,
  /* 26572 */ 775, 0, 0, 0, 0, 0, 2023, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 660, 0, 0, 0, 0, 0, 0, 0, 0, 779, 0, 0, 0, 0, 0,
  /* 26604 */ 0, 0, 783, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 644, 783, 0, 0, 0, 0, 644, 0, 0, 0, 0, 0, 0, 807, 0,
  /* 26636 */ 0, 0, 0, 0, 0, 0, 3018752, 3211264, 0, 2691072, 0, 0, 3219456, 0, 0, 0, 0, 0, 0, 779, 732, 779, 0, 537,
  /* 26660 */ 537, 839, 843, 537, 537, 537, 537, 537, 537, 1265, 537, 537, 537, 1269, 537, 537, 1280, 537, 537, 537,
  /* 26680 */ 537, 869, 873, 875, 537, 882, 537, 885, 537, 537, 899, 537, 537, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 26701 */ 559, 3192, 559, 559, 559, 559, 559, 559, 1366, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1432,
  /* 26721 */ 559, 559, 559, 559, 559, 559, 913, 917, 559, 559, 559, 559, 559, 559, 943, 947, 949, 559, 956, 559, 959,
  /* 26742 */ 559, 559, 973, 559, 559, 0, 583, 583, 583, 988, 992, 583, 583, 583, 583, 583, 583, 1928, 583, 583, 583,
  /* 26763 */ 583, 583, 583, 583, 583, 583, 1945, 583, 583, 583, 583, 583, 583, 583, 1018, 1022, 1024, 583, 1031, 583,
  /* 26783 */ 1034, 583, 583, 1048, 583, 583, 0, 0, 0, 0, 0, 0, 0, 0, 3141, 0, 3397, 0, 3399, 537, 537, 843, 992, 917,
  /* 26807 */ 839, 1058, 885, 537, 537, 913, 1063, 959, 559, 559, 0, 988, 1068, 1034, 583, 583, 78117, 1072, 0, 0, 1074,
  /* 26828 */ 1078, 0, 0, 1082, 1086, 0, 0, 0, 0, 0, 0, 309, 204800, 0, 0, 0, 0, 0, 0, 0, 0, 537, 537, 537, 537, 537,
  /* 26854 */ 537, 858, 537, 1145, 0, 0, 0, 0, 1150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 409, 0, 0, 0, 0, 0, 1194, 0, 0, 0, 0,
  /* 26884 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1207, 0, 0, 0, 0, 0, 2037, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1154, 0, 0, 0, 0, 0,
  /* 26916 */ 0, 559, 559, 559, 1423, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2846, 559,
  /* 26937 */ 0, 0, 0, 0, 1606, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1708, 0, 0, 0, 0, 0, 0, 0, 0, 1663, 0, 0, 0, 0, 0, 0,
  /* 26969 */ 0, 0, 0, 0, 0, 2028, 2029, 0, 0, 0, 0, 1712, 0, 0, 1713, 0, 0, 0, 0, 537, 537, 537, 537, 537, 537, 537,
  /* 26995 */ 537, 537, 2147, 537, 537, 537, 537, 537, 1726, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1739, 537,
  /* 27015 */ 537, 537, 537, 537, 537, 3408, 537, 3410, 3411, 537, 3413, 537, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 27035 */ 559, 559, 3296, 559, 559, 559, 559, 559, 559, 1892, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 27055 */ 1879, 559, 559, 559, 1884, 559, 537, 537, 537, 1348, 1808, 559, 559, 559, 559, 559, 1815, 559, 559, 559,
  /* 27075 */ 559, 559, 0, 583, 583, 981, 583, 583, 583, 583, 583, 583, 1012, 1821, 559, 559, 559, 559, 559, 559, 559,
  /* 27096 */ 559, 559, 1834, 559, 559, 559, 559, 559, 0, 583, 583, 982, 583, 583, 583, 998, 583, 583, 583, 559, 559,
  /* 27117 */ 559, 559, 1873, 559, 559, 1876, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1430, 559, 559, 559, 559,
  /* 27137 */ 559, 559, 559, 559, 1889, 559, 559, 559, 559, 559, 1894, 559, 559, 559, 559, 559, 559, 559, 559, 2593,
  /* 27157 */ 559, 559, 559, 559, 559, 559, 559, 559, 2609, 559, 559, 559, 559, 559, 559, 559, 559, 2842, 559, 559, 559,
  /* 27178 */ 559, 559, 559, 559, 559, 2852, 559, 559, 559, 559, 559, 559, 559, 559, 3044, 559, 559, 559, 559, 559, 559,
  /* 27199 */ 559, 559, 3058, 559, 3060, 559, 559, 559, 559, 559, 26017, 1904, 583, 583, 583, 583, 583, 1911, 583, 583,
  /* 27219 */ 583, 583, 583, 1917, 583, 583, 0, 537, 537, 559, 559, 583, 583, 537, 559, 583, 537, 559, 583, 537, 559,
  /* 27240 */ 583, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3141, 0, 0, 0, 583, 1969, 583, 583, 1972, 583, 583, 583, 583, 583,
  /* 27266 */ 583, 583, 583, 583, 583, 1985, 2002, 537, 537, 537, 2006, 559, 559, 559, 2010, 583, 583, 583, 0, 2014, 0,
  /* 27287 */ 0, 0, 0, 0, 0, 1655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3147, 0, 0, 0, 0, 0, 0, 0, 2084, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27319 */ 1659, 0, 0, 0, 0, 0, 0, 0, 1692, 0, 0, 1695, 0, 0, 0, 0, 0, 0, 0, 1706, 0, 0, 0, 0, 0, 0, 0, 0, 1241, 0,
  /* 27349 */ 0, 0, 0, 0, 0, 0, 0, 2119, 0, 0, 2126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2051, 0, 0, 0, 0, 0, 0, 0, 2118,
  /* 27380 */ 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2148, 537, 537, 2151, 537, 537, 537, 537, 537, 537,
  /* 27401 */ 2159, 537, 537, 537, 537, 537, 537, 537, 1266, 537, 537, 537, 537, 537, 1278, 537, 537, 537, 537, 2192,
  /* 27421 */ 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2188, 537, 559, 2236, 559, 559, 559,
  /* 27442 */ 559, 559, 559, 2244, 559, 559, 559, 559, 559, 559, 559, 559, 3214, 559, 559, 559, 583, 583, 583, 583, 559,
  /* 27463 */ 2278, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2250, 0, 0, 583, 583,
  /* 27484 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2320, 583, 0, 0, 0, 3393, 0, 0, 0, 0, 3141, 0, 0, 0, 0,
  /* 27509 */ 537, 537, 537, 537, 537, 2992, 537, 537, 537, 537, 537, 537, 537, 1348, 905, 559, 559, 559, 1354, 559,
  /* 27529 */ 559, 559, 583, 2323, 583, 583, 583, 583, 583, 583, 2331, 583, 583, 583, 583, 583, 583, 583, 1035, 583,
  /* 27549 */ 583, 583, 583, 583, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 640, 0, 0, 0, 583, 2365, 583, 583, 583, 583, 583,
  /* 27576 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 537, 583, 559, 2392, 537, 537, 537, 537, 559, 559, 559, 559,
  /* 27597 */ 583, 583, 583, 583, 2014, 0, 2016, 0, 2018, 0, 2020, 0, 0, 2406, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 0, 0,
  /* 27624 */ 0, 0, 0, 0, 0, 2414, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1218, 2427, 0, 0, 0, 0, 0, 2431, 0, 0,
  /* 27655 */ 0, 0, 0, 0, 0, 0, 0, 367, 0, 0, 0, 0, 131072, 131072, 0, 0, 0, 0, 2455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 27685 */ 2120, 0, 0, 0, 0, 0, 0, 2464, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2473, 0, 0, 0, 0, 0, 0, 310, 445, 459, 459, 459,
  /* 27714 */ 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 459, 537, 2503, 537, 537, 537, 537, 537, 537,
  /* 27735 */ 537, 537, 537, 537, 537, 2511, 537, 537, 537, 537, 537, 537, 3467, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 27756 */ 559, 559, 2829, 559, 559, 2833, 559, 559, 537, 537, 537, 2545, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 27776 */ 537, 537, 537, 537, 537, 2176, 537, 537, 2554, 537, 537, 537, 537, 537, 537, 0, 2558, 0, 0, 0, 0, 559,
  /* 27798 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2234, 559, 559, 2575, 559, 559, 559, 559, 559,
  /* 27819 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 1883, 559, 0, 0, 0, 0, 583, 583, 583, 583, 583, 583, 583,
  /* 27841 */ 583, 583, 2633, 583, 583, 0, 537, 537, 559, 559, 583, 583, 537, 559, 583, 537, 559, 583, 3619, 2676, 583,
  /* 27862 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2686, 583, 0, 3391, 0, 0, 3394, 0, 0, 0, 3141,
  /* 27885 */ 0, 0, 0, 0, 537, 537, 537, 537, 2991, 537, 537, 537, 537, 2995, 537, 537, 0, 0, 0, 2712, 0, 0, 0, 0, 0, 0,
  /* 27911 */ 0, 0, 0, 0, 0, 0, 1585, 0, 0, 0, 0, 0, 2722, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2735, 537, 537, 537,
  /* 27940 */ 2802, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2201, 2202, 537, 559, 559, 559,
  /* 27960 */ 559, 2850, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2571, 559, 559, 559, 559, 559,
  /* 27981 */ 559, 3040, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2623, 0, 0, 583, 3390, 0,
  /* 28002 */ 3392, 0, 0, 0, 0, 0, 3141, 3396, 0, 3398, 0, 537, 3401, 537, 3403, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 28025 */ 537, 537, 537, 559, 3416, 559, 559, 559, 559, 559, 3480, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 28046 */ 3087, 583, 583, 583, 583, 583, 3418, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 583,
  /* 28066 */ 3432, 583, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 1238, 0, 0, 0, 0, 0,
  /* 28093 */ 0, 0, 0, 0, 537, 559, 537, 559, 537, 537, 559, 3434, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 28115 */ 583, 583, 0, 0, 0, 0, 0, 0, 0, 537, 537, 537, 537, 537, 537, 537, 537, 3461, 3449, 0, 0, 0, 3452, 0, 0,
  /* 28140 */ 537, 537, 537, 537, 3457, 537, 537, 537, 537, 537, 537, 1327, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 28161 */ 537, 3171, 537, 537, 537, 537, 537, 312, 313, 314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 787, 0, 0, 0, 0,
  /* 28189 */ 0, 0, 0, 423, 0, 0, 0, 0, 446, 0, 0, 0, 0, 0, 0, 0, 0, 537, 537, 537, 537, 537, 853, 537, 537, 0, 0, 0,
  /* 28217 */ 446, 446, 423, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 446, 529, 446, 529, 529, 529,
  /* 28238 */ 446, 529, 529, 529, 529, 529, 446, 539, 562, 539, 562, 539, 539, 562, 539, 539, 586, 562, 562, 562, 562,
  /* 28259 */ 562, 539, 562, 562, 562, 586, 586, 539, 586, 586, 586, 586, 586, 586, 586, 586, 586, 562, 586, 562, 612,
  /* 28280 */ 617, 617, 586, 623, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 1705, 0, 0,
  /* 28306 */ 0, 0, 0, 0, 0, 0, 0, 367, 341, 295, 0, 0, 0, 0, 0, 1666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 726, 0,
  /* 28338 */ 537, 1788, 537, 537, 537, 537, 537, 1794, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2508, 537, 537,
  /* 28358 */ 537, 537, 537, 537, 559, 559, 559, 559, 1890, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 28379 */ 559, 3431, 583, 583, 583, 1986, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 537, 583, 559, 537,
  /* 28400 */ 3245, 559, 3247, 583, 3249, 3250, 537, 537, 537, 2504, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 28420 */ 537, 537, 537, 2215, 0, 0, 537, 537, 2555, 537, 537, 537, 537, 0, 2558, 0, 0, 0, 0, 559, 559, 559, 559,
  /* 28443 */ 559, 559, 559, 559, 559, 559, 559, 559, 2233, 559, 559, 559, 559, 2564, 559, 559, 559, 559, 2568, 559,
  /* 28463 */ 559, 559, 559, 559, 559, 559, 559, 3372, 559, 559, 583, 583, 583, 583, 583, 0, 0, 0, 0, 583, 583, 583,
  /* 28485 */ 583, 583, 583, 2630, 583, 583, 583, 583, 2634, 2687, 583, 583, 583, 583, 537, 583, 559, 537, 537, 537,
  /* 28505 */ 537, 559, 559, 559, 559, 583, 583, 583, 583, 2014, 0, 2016, 537, 3463, 537, 537, 3465, 537, 559, 559, 559,
  /* 28526 */ 559, 559, 559, 559, 559, 3474, 559, 559, 559, 559, 559, 3524, 559, 559, 583, 583, 583, 583, 583, 583, 583,
  /* 28547 */ 583, 3315, 583, 583, 583, 583, 583, 583, 583, 3476, 559, 559, 3478, 559, 559, 583, 583, 583, 583, 583,
  /* 28567 */ 583, 583, 583, 3488, 583, 1, 12290, 3, 78117, 78452, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 1593,
  /* 28592 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 546, 569, 546, 569, 546, 546, 569, 3490, 583, 583, 3492, 583, 583, 0, 0, 0, 0,
  /* 28618 */ 0, 0, 0, 537, 537, 537, 537, 537, 537, 3459, 537, 537, 0, 0, 0, 315, 316, 317, 318, 319, 320, 321, 322,
  /* 28641 */ 323, 324, 0, 0, 0, 0, 0, 0, 333, 0, 0, 0, 0, 0, 0, 0, 333, 0, 0, 69632, 73728, 0, 421, 421, 0, 0, 65536,
  /* 28668 */ 421, 0, 315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 755, 0, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 28701 */ 0, 0, 1101, 0, 0, 425, 433, 424, 433, 0, 315, 433, 447, 460, 460, 460, 460, 460, 460, 460, 460, 460, 460,
  /* 28724 */ 460, 460, 460, 460, 460, 460, 460, 460, 481, 486, 486, 497, 486, 486, 486, 486, 486, 486, 486, 486, 512,
  /* 28745 */ 512, 525, 525, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 512, 526, 526, 526, 526, 526, 526,
  /* 28766 */ 540, 563, 540, 563, 540, 540, 563, 540, 540, 587, 563, 563, 563, 563, 563, 540, 563, 563, 563, 587, 587,
  /* 28787 */ 609, 587, 587, 587, 587, 587, 587, 587, 587, 610, 611, 587, 611, 609, 611, 611, 610, 1, 12290, 3, 78117,
  /* 28808 */ 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 2049, 2050, 0, 0, 0, 0, 0, 0, 0, 0, 1240, 0, 0, 0,
  /* 28837 */ 0, 0, 0, 0, 682, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 0, 367, 698, 0, 0, 0,
  /* 28869 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 788, 0, 0, 0, 730, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1116, 0, 0, 0,
  /* 28902 */ 0, 0, 0, 698, 0, 0, 0, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2549, 537, 537, 537, 537, 537, 537,
  /* 28925 */ 1035, 583, 583, 78117, 1072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2131, 0, 0, 0, 0, 0, 0, 0, 0, 1212, 0, 0, 0,
  /* 28954 */ 0, 0, 0, 0, 0, 0, 0, 0, 2409, 2410, 0, 0, 0, 0, 0, 1224, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1191, 0,
  /* 28985 */ 0, 537, 537, 1260, 537, 1263, 537, 537, 537, 537, 537, 537, 537, 537, 1277, 537, 1282, 537, 537, 1286,
  /* 29005 */ 537, 537, 1289, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 3414, 559, 559, 559, 559,
  /* 29025 */ 26017, 1348, 980, 583, 583, 1445, 583, 583, 1449, 583, 583, 583, 583, 583, 583, 583, 2330, 583, 583, 583,
  /* 29045 */ 583, 2335, 583, 583, 583, 583, 583, 1463, 583, 1468, 583, 583, 1472, 583, 583, 1475, 583, 583, 583, 583,
  /* 29065 */ 583, 583, 1943, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2358, 583, 583, 583, 583, 583, 583, 0, 0, 0,
  /* 29087 */ 1576, 1577, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2422, 2423, 0, 0, 2426, 0, 0, 0, 1621, 0, 0, 0, 0, 0, 0, 0,
  /* 29116 */ 0, 0, 0, 0, 0, 1630, 0, 0, 0, 0, 0, 1652, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1659, 0, 0, 0, 0, 0, 0, 2061, 0,
  /* 29147 */ 0, 0, 0, 0, 0, 0, 0, 2069, 0, 0, 0, 0, 1676, 0, 1678, 0, 0, 0, 0, 0, 0, 1685, 0, 0, 0, 0, 0, 0, 2074, 0,
  /* 29177 */ 0, 0, 0, 2078, 0, 0, 0, 0, 0, 0, 0, 3136, 0, 0, 0, 0, 0, 0, 0, 0, 2728, 0, 0, 0, 0, 0, 0, 0, 559, 559,
  /* 29207 */ 1824, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1836, 559, 559, 559, 559, 559, 559, 2283, 559, 559,
  /* 29227 */ 559, 559, 559, 559, 559, 559, 559, 559, 1394, 559, 559, 559, 1398, 559, 559, 559, 1871, 1872, 559, 559,
  /* 29247 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 3064, 559, 26017, 0, 583, 583, 583, 583, 583,
  /* 29268 */ 583, 583, 583, 583, 583, 583, 583, 583, 1920, 1968, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 29289 */ 583, 583, 583, 583, 1967, 2055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1222, 0, 2018, 0, 2020, 0, 0,
  /* 29317 */ 0, 0, 0, 0, 2408, 0, 0, 0, 0, 0, 0, 0, 2041, 0, 0, 0, 0, 0, 0, 0, 0, 2757, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29349 */ 2454, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1646, 0, 0, 0, 2736, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 29381 */ 0, 1617, 0, 0, 0, 2765, 0, 0, 2768, 0, 0, 0, 0, 0, 0, 0, 2772, 537, 537, 537, 537, 537, 2195, 537, 537,
  /* 29406 */ 537, 537, 537, 537, 537, 537, 537, 537, 2160, 537, 537, 537, 537, 537, 2895, 583, 583, 583, 583, 583, 583,
  /* 29427 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 2337, 3011, 3012, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 29447 */ 537, 537, 537, 537, 537, 537, 0, 0, 559, 559, 3053, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 29469 */ 559, 559, 559, 559, 2264, 3093, 583, 3095, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 29489 */ 583, 0, 0, 188416, 583, 3242, 583, 583, 583, 583, 537, 583, 559, 537, 537, 559, 559, 583, 583, 0, 0, 2929,
  /* 29511 */ 0, 0, 0, 583, 3609, 0, 537, 537, 559, 559, 583, 583, 537, 559, 583, 537, 559, 583, 537, 537, 537, 537,
  /* 29533 */ 537, 2519, 537, 537, 537, 537, 537, 537, 2524, 537, 537, 537, 537, 537, 537, 2814, 537, 537, 537, 537,
  /* 29553 */ 537, 537, 0, 0, 559, 559, 559, 559, 559, 559, 2228, 559, 559, 559, 559, 559, 559, 559, 1391, 559, 559,
  /* 29574 */ 559, 559, 559, 559, 559, 559, 559, 2271, 559, 559, 559, 559, 559, 559, 326, 326, 376, 0, 0, 0, 0, 0, 0, 0,
  /* 29598 */ 0, 0, 0, 0, 0, 0, 1224, 0, 0, 0, 0, 376, 0, 435, 441, 0, 448, 461, 461, 461, 461, 461, 461, 461, 461, 461,
  /* 29624 */ 461, 461, 461, 461, 461, 461, 461, 461, 461, 461, 487, 487, 498, 487, 487, 487, 487, 487, 487, 487, 487,
  /* 29645 */ 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 541, 564, 541, 564, 541,
  /* 29666 */ 541, 564, 541, 541, 588, 564, 564, 564, 564, 564, 541, 564, 564, 564, 588, 588, 541, 588, 1, 12290, 3,
  /* 29687 */ 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 2088, 0, 0, 0, 0, 0, 0, 0, 0, 0, 369, 0, 0,
  /* 29716 */ 0, 0, 0, 0, 588, 588, 588, 588, 588, 588, 588, 588, 588, 564, 588, 564, 541, 564, 564, 588, 0, 0, 790, 0,
  /* 29740 */ 0, 0, 0, 0, 0, 0, 790, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1102, 0, 0, 0, 0, 790, 0, 0, 0, 0, 537,
  /* 29772 */ 537, 537, 537, 537, 537, 537, 537, 537, 537, 2996, 537, 862, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 29793 */ 537, 537, 537, 537, 559, 559, 559, 3030, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 3202, 559, 559,
  /* 29814 */ 559, 559, 559, 0, 0, 1106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1115, 0, 1117, 1118, 0, 0, 0, 1120, 1121, 0, 0, 0,
  /* 29841 */ 0, 0, 0, 0, 0, 0, 0, 0, 2434, 0, 0, 0, 0, 0, 1187, 0, 1106, 0, 1237, 0, 0, 0, 0, 0, 1121, 0, 0, 0, 0, 0,
  /* 29871 */ 0, 0, 2975, 0, 0, 0, 0, 0, 0, 2982, 0, 0, 1220, 0, 0, 0, 1252, 1120, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0,
  /* 29900 */ 295, 0, 0, 0, 0, 537, 537, 1261, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 29922 */ 2216, 0, 537, 537, 1287, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2217, 0,
  /* 29943 */ 1300, 537, 537, 537, 537, 537, 537, 537, 537, 1310, 537, 537, 1312, 537, 537, 537, 537, 537, 537, 2547,
  /* 29963 */ 537, 537, 537, 537, 537, 537, 537, 2552, 537, 1316, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 29984 */ 537, 537, 537, 537, 537, 1754, 537, 1340, 537, 537, 537, 537, 537, 1348, 905, 559, 559, 1353, 559, 559,
  /* 30004 */ 559, 559, 559, 559, 1367, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1862, 559, 559, 559, 559,
  /* 30024 */ 1868, 559, 559, 559, 1403, 559, 559, 1405, 559, 559, 559, 1409, 559, 559, 559, 559, 559, 0, 583, 583, 986,
  /* 30045 */ 583, 583, 583, 583, 583, 583, 1015, 559, 26017, 1348, 980, 583, 583, 1446, 583, 583, 583, 583, 583, 583,
  /* 30065 */ 583, 583, 583, 1492, 583, 583, 583, 583, 583, 583, 583, 1498, 583, 583, 583, 1502, 583, 583, 583, 583,
  /* 30085 */ 583, 583, 583, 583, 583, 583, 583, 2892, 2893, 583, 583, 583, 1618, 1619, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30110 */ 0, 0, 0, 1159, 1160, 537, 537, 537, 2005, 559, 559, 559, 2009, 583, 583, 583, 2013, 0, 2014, 0, 0, 0, 0,
  /* 30133 */ 0, 0, 2419, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 253952, 0, 0, 0, 0, 537, 2150, 537, 537, 537, 537, 537,
  /* 30159 */ 537, 537, 537, 537, 537, 537, 537, 537, 537, 0, 2218, 537, 2166, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 30180 */ 537, 537, 537, 537, 537, 537, 0, 2219, 537, 537, 537, 537, 2207, 537, 2209, 537, 537, 537, 537, 537, 537,
  /* 30201 */ 537, 0, 0, 0, 0, 0, 0, 559, 559, 559, 2235, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 30224 */ 559, 559, 559, 960, 2251, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 965,
  /* 30245 */ 559, 559, 559, 559, 2294, 559, 2296, 559, 559, 559, 559, 559, 559, 559, 0, 0, 980, 583, 583, 583, 583,
  /* 30266 */ 583, 583, 583, 583, 583, 583, 583, 583, 0, 537, 583, 559, 0, 0, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 30288 */ 583, 2318, 583, 583, 583, 583, 583, 583, 3323, 583, 583, 583, 583, 537, 537, 559, 559, 583, 2322, 583,
  /* 30308 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2351, 2338, 583, 583, 583, 583, 583,
  /* 30329 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2659, 2476, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 30356 */ 1649, 2562, 559, 2563, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1901, 559,
  /* 30376 */ 559, 559, 2603, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2263, 559, 0, 0, 0,
  /* 30398 */ 0, 583, 583, 583, 2628, 583, 2629, 583, 583, 583, 583, 583, 583, 583, 2356, 2357, 583, 583, 583, 583, 583,
  /* 30419 */ 583, 583, 1528, 1529, 583, 583, 583, 0, 537, 583, 559, 537, 537, 2790, 537, 537, 537, 537, 537, 537, 537,
  /* 30440 */ 537, 537, 537, 537, 537, 537, 537, 2799, 537, 559, 559, 2837, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 30461 */ 559, 559, 559, 559, 559, 2275, 2276, 583, 2906, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 30481 */ 583, 583, 583, 1516, 583, 583, 583, 3243, 583, 583, 583, 537, 583, 559, 537, 537, 559, 559, 583, 583, 0,
  /* 30502 */ 2928, 0, 0, 0, 0, 537, 537, 537, 537, 3406, 537, 537, 537, 537, 537, 537, 537, 537, 559, 559, 559, 559,
  /* 30524 */ 559, 559, 3472, 559, 559, 559, 559, 559, 559, 3421, 559, 559, 559, 559, 559, 559, 559, 559, 559, 583, 583,
  /* 30545 */ 583, 583, 3484, 583, 583, 583, 583, 583, 583, 583, 583, 3437, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 30566 */ 0, 0, 0, 0, 0, 3542, 0, 537, 537, 537, 3462, 537, 537, 537, 537, 537, 559, 559, 559, 559, 559, 559, 559,
  /* 30589 */ 559, 559, 3475, 328, 329, 330, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1229, 0, 0, 0, 0, 0, 327, 375, 330,
  /* 30617 */ 374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 0, 295, 0, 0, 0, 350, 327, 0, 0, 374, 374, 404, 0, 330, 0, 0, 0, 0,
  /* 30646 */ 0, 0, 0, 0, 658, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 329, 0, 0, 0, 449, 462, 462, 462, 462, 462, 462, 462,
  /* 30674 */ 462, 475, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 462, 488, 488, 462, 488, 488, 503, 505,
  /* 30695 */ 488, 488, 503, 488, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 531, 514, 514,
  /* 30716 */ 514, 514, 514, 514, 542, 565, 542, 565, 542, 542, 565, 542, 542, 589, 565, 565, 565, 565, 565, 542, 565,
  /* 30737 */ 565, 565, 589, 589, 542, 589, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0,
  /* 30762 */ 2442, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2026, 0, 0, 0, 0, 0, 0, 589, 589, 589, 589, 589, 589, 589, 589, 589, 565,
  /* 30789 */ 589, 565, 542, 565, 565, 589, 0, 0, 0, 0, 654, 655, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 676, 677, 0, 0, 0, 0,
  /* 30817 */ 666, 667, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 679, 680, 681, 0, 0, 0, 685, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367,
  /* 30848 */ 367, 0, 0, 0, 0, 0, 1102, 0, 367, 0, 0, 0, 0, 0, 0, 703, 704, 0, 0, 0, 0, 0, 710, 0, 0, 0, 0, 0, 2048, 0,
  /* 30878 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 1628, 0, 0, 0, 0, 0, 0, 0, 714, 0, 716, 0, 0, 0, 0, 0, 0, 723, 0, 0, 0, 727, 0,
  /* 30910 */ 0, 759, 0, 0, 0, 765, 766, 0, 0, 0, 0, 0, 774, 0, 776, 0, 0, 0, 0, 0, 825, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367,
  /* 30941 */ 0, 307, 0, 0, 0, 0, 793, 0, 796, 0, 0, 0, 0, 793, 796, 0, 0, 0, 796, 796, 793, 0, 0, 0, 0, 0, 2060, 0, 0,
  /* 30970 */ 0, 0, 0, 0, 0, 0, 0, 0, 537, 537, 537, 3161, 537, 537, 0, 703, 0, 0, 813, 0, 0, 0, 0, 0, 813, 813, 816, 0,
  /* 30998 */ 0, 0, 0, 0, 0, 336, 0, 0, 336, 0, 0, 336, 0, 0, 0, 0, 0, 0, 350, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1187, 1189, 0,
  /* 31029 */ 0, 0, 0, 0, 774, 0, 0, 0, 825, 805, 825, 0, 537, 537, 840, 537, 846, 537, 537, 859, 537, 537, 870, 537,
  /* 31053 */ 876, 537, 537, 884, 887, 892, 537, 900, 537, 537, 559, 559, 559, 559, 559, 559, 559, 3190, 3191, 559, 559,
  /* 31074 */ 559, 559, 3195, 559, 914, 559, 920, 559, 559, 933, 559, 559, 944, 559, 950, 559, 559, 958, 961, 966, 559,
  /* 31095 */ 974, 559, 559, 0, 583, 583, 583, 989, 583, 995, 583, 583, 1008, 583, 583, 583, 583, 583, 3232, 583, 583,
  /* 31116 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 3445, 583, 0, 0, 0, 583, 1019, 583, 1025, 583, 583, 1033,
  /* 31137 */ 1036, 1041, 583, 1049, 583, 583, 0, 0, 0, 0, 0, 0, 0, 0, 3335, 3336, 0, 3141, 0, 3340, 0, 537, 583, 559,
  /* 31161 */ 840, 537, 1059, 892, 537, 914, 559, 1064, 966, 559, 0, 989, 583, 583, 583, 583, 583, 3382, 583, 3384, 583,
  /* 31182 */ 583, 583, 583, 583, 583, 537, 559, 559, 559, 559, 559, 3558, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 31203 */ 583, 1477, 583, 583, 583, 583, 583, 1069, 1041, 583, 78117, 1072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2745,
  /* 31227 */ 0, 0, 0, 0, 0, 0, 0, 1135, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 327, 0, 0,
  /* 31259 */ 0, 0, 1149, 0, 0, 0, 0, 0, 0, 0, 0, 1158, 0, 0, 0, 0, 0, 0, 2467, 0, 0, 0, 0, 0, 0, 0, 0, 0, 326, 400, 0,
  /* 31290 */ 0, 0, 326, 0, 0, 0, 0, 1127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1668, 0, 0, 0, 0, 1195, 0, 0, 0, 0, 0, 0,
  /* 31322 */ 0, 0, 0, 0, 0, 0, 0, 0, 1175, 737, 1283, 537, 537, 537, 1288, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 31346 */ 537, 537, 537, 1274, 537, 537, 537, 537, 537, 1303, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 31367 */ 537, 537, 537, 3185, 537, 537, 537, 1318, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1334, 537,
  /* 31387 */ 537, 537, 537, 537, 537, 3549, 3550, 537, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 31407 */ 3298, 559, 559, 537, 537, 537, 537, 1344, 537, 537, 1348, 905, 559, 559, 559, 559, 559, 559, 559, 936,
  /* 31427 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 1832, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1361, 559,
  /* 31448 */ 559, 559, 559, 559, 559, 1376, 559, 559, 559, 1381, 559, 559, 559, 559, 583, 3070, 583, 583, 583, 583,
  /* 31468 */ 583, 583, 583, 583, 583, 583, 1996, 583, 583, 537, 583, 559, 559, 26017, 1348, 980, 583, 583, 583, 583,
  /* 31488 */ 583, 583, 583, 583, 583, 583, 1454, 583, 583, 583, 583, 583, 3439, 583, 3441, 3442, 583, 3444, 583, 3446,
  /* 31508 */ 0, 0, 0, 0, 0, 0, 656, 657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2123, 583, 583, 1520, 583, 583,
  /* 31537 */ 583, 583, 583, 583, 1530, 583, 583, 0, 537, 583, 559, 537, 537, 537, 537, 537, 559, 559, 559, 559, 559, 0,
  /* 31559 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2878, 583, 583, 2882, 1573, 0, 1575, 0, 0, 0, 0, 0,
  /* 31582 */ 0, 0, 0, 0, 0, 0, 0, 1588, 1602, 0, 0, 0, 0, 1607, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 722, 0, 0, 0, 0, 0, 1634,
  /* 31613 */ 0, 0, 0, 0, 0, 1640, 1641, 0, 0, 0, 0, 0, 0, 0, 0, 674, 0, 0, 0, 0, 0, 0, 0, 1650, 1651, 0, 0, 0, 0, 0, 0,
  /* 31644 */ 0, 0, 1657, 0, 0, 1659, 0, 0, 0, 0, 0, 0, 2482, 0, 0, 0, 0, 0, 0, 0, 0, 0, 382, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 31675 */ 1661, 1662, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1696, 0, 0, 0, 1699, 0, 0, 0, 1703, 1704, 0, 0, 0, 0, 0,
  /* 31704 */ 0, 0, 0, 0, 0, 751, 0, 0, 0, 0, 0, 0, 0, 1695, 0, 0, 0, 1715, 1575, 1575, 1717, 537, 1719, 537, 1720,
  /* 31729 */ 1721, 537, 537, 537, 537, 537, 2531, 537, 537, 537, 537, 2535, 537, 537, 537, 2540, 537, 537, 537, 537,
  /* 31749 */ 537, 2793, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2185, 537, 537, 537, 537, 537, 1723, 537,
  /* 31769 */ 537, 537, 1727, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1740, 537, 537, 537, 537, 537, 2813, 537,
  /* 31789 */ 537, 2816, 537, 537, 2819, 537, 0, 0, 2820, 537, 537, 537, 1744, 537, 537, 537, 537, 1748, 537, 1750, 537,
  /* 31810 */ 537, 537, 537, 537, 537, 537, 2216, 2558, 0, 0, 0, 0, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 31832 */ 559, 559, 559, 559, 0, 2624, 537, 537, 537, 1758, 1759, 1761, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 31852 */ 1769, 1770, 1771, 537, 537, 1774, 1775, 537, 537, 537, 537, 537, 537, 537, 1783, 537, 537, 537, 537, 537,
  /* 31872 */ 537, 2557, 0, 0, 0, 0, 0, 0, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2232, 559, 559, 559, 1787,
  /* 31895 */ 537, 537, 537, 537, 537, 537, 537, 1795, 537, 537, 537, 537, 537, 537, 537, 537, 1295, 537, 537, 537, 537,
  /* 31916 */ 537, 537, 537, 0, 905, 559, 559, 559, 559, 559, 559, 559, 559, 1374, 559, 559, 559, 559, 559, 559, 559,
  /* 31937 */ 559, 1407, 559, 559, 559, 559, 559, 559, 559, 559, 1831, 559, 559, 559, 559, 559, 559, 559, 559, 1846,
  /* 31957 */ 559, 559, 559, 559, 559, 559, 559, 559, 1861, 559, 559, 559, 559, 559, 559, 559, 559, 1877, 559, 559, 559,
  /* 31978 */ 559, 559, 559, 1885, 537, 537, 1806, 1348, 0, 1811, 559, 1813, 559, 1814, 559, 1816, 559, 1818, 559, 559,
  /* 31998 */ 559, 559, 559, 1364, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1383, 559, 1822, 559, 559, 559, 559,
  /* 32018 */ 559, 559, 559, 559, 559, 1835, 559, 559, 559, 559, 559, 559, 1875, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 32039 */ 1886, 1839, 559, 559, 559, 559, 1843, 559, 1845, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1847, 559,
  /* 32059 */ 559, 559, 559, 559, 559, 1853, 1854, 1856, 559, 559, 559, 559, 559, 559, 559, 559, 1864, 1865, 1866, 559,
  /* 32079 */ 559, 559, 559, 559, 1390, 559, 559, 559, 559, 559, 559, 559, 1397, 559, 559, 559, 559, 559, 1426, 559,
  /* 32099 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 3429, 559, 583, 583, 583, 1869, 1870, 559, 559, 559,
  /* 32119 */ 559, 559, 559, 559, 1878, 559, 559, 559, 1882, 559, 559, 559, 559, 559, 1827, 559, 559, 559, 559, 559,
  /* 32139 */ 559, 559, 559, 559, 1838, 26017, 0, 1907, 583, 1909, 583, 1910, 583, 1912, 583, 1914, 583, 583, 583, 1918,
  /* 32159 */ 583, 583, 583, 583, 583, 3494, 0, 0, 3497, 3498, 0, 0, 0, 537, 537, 537, 537, 537, 537, 559, 559, 559,
  /* 32181 */ 559, 559, 559, 583, 583, 583, 583, 583, 3485, 583, 583, 583, 583, 583, 583, 1939, 583, 1941, 583, 583,
  /* 32201 */ 583, 583, 583, 583, 583, 583, 1949, 1950, 1952, 583, 583, 1987, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 32221 */ 583, 1998, 537, 583, 559, 537, 537, 537, 895, 537, 559, 559, 559, 969, 559, 0, 583, 583, 583, 583, 583,
  /* 32242 */ 2873, 583, 2874, 583, 583, 583, 583, 583, 583, 583, 1527, 583, 583, 583, 583, 0, 1272, 1458, 1365, 1775,
  /* 32262 */ 537, 2004, 537, 1870, 559, 2008, 559, 1966, 583, 2012, 583, 0, 2014, 0, 0, 0, 0, 0, 0, 2494, 0, 0, 537,
  /* 32285 */ 537, 537, 537, 537, 537, 537, 537, 2548, 537, 537, 537, 537, 537, 537, 537, 537, 2795, 537, 537, 537, 537,
  /* 32306 */ 537, 537, 537, 537, 1267, 537, 537, 537, 1276, 537, 537, 537, 0, 0, 2035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32332 */ 0, 0, 1245, 0, 0, 0, 0, 0, 2058, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1709, 0, 0, 0, 0, 0, 2097, 0, 0, 0,
  /* 32363 */ 0, 0, 0, 2104, 0, 2106, 0, 0, 0, 0, 0, 0, 0, 3454, 537, 537, 537, 537, 537, 537, 537, 537, 886, 537, 537,
  /* 32388 */ 537, 537, 537, 559, 559, 0, 0, 0, 0, 2115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2770, 0, 0, 0, 537, 0, 2031,
  /* 32416 */ 0, 2125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2040, 0, 2041, 0, 0, 2136, 0, 0, 537, 537, 537, 537, 537,
  /* 32443 */ 537, 537, 537, 537, 537, 537, 537, 537, 2558, 0, 559, 537, 537, 537, 2152, 537, 2154, 537, 537, 537, 537,
  /* 32464 */ 537, 537, 2162, 537, 2164, 537, 537, 537, 537, 537, 3000, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 32484 */ 537, 537, 537, 3007, 537, 537, 537, 2190, 537, 537, 537, 537, 537, 537, 2197, 537, 537, 537, 537, 537,
  /* 32504 */ 537, 537, 537, 537, 2781, 537, 2784, 537, 537, 537, 537, 559, 559, 2237, 559, 2239, 559, 559, 559, 559,
  /* 32524 */ 559, 559, 2247, 559, 2249, 559, 559, 559, 559, 559, 1874, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 32544 */ 559, 559, 2596, 559, 559, 559, 559, 583, 583, 2324, 583, 2326, 583, 583, 583, 583, 583, 583, 2334, 583,
  /* 32564 */ 2336, 583, 583, 0, 537, 537, 559, 559, 583, 583, 537, 559, 583, 3616, 3617, 3618, 537, 2239, 537, 2394,
  /* 32584 */ 537, 537, 559, 2398, 559, 559, 583, 2402, 583, 583, 2014, 0, 2016, 0, 0, 0, 2430, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 32609 */ 0, 0, 0, 0, 2052, 0, 0, 0, 0, 0, 2439, 0, 0, 0, 0, 0, 2444, 0, 2446, 2447, 0, 0, 0, 0, 0, 0, 0, 69632,
  /* 32637 */ 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 2477, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2488, 2446, 2502, 537, 537,
  /* 32664 */ 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1786, 2514, 537, 2516, 537, 537, 537,
  /* 32684 */ 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 3287, 537, 2600, 559, 559, 559, 2605, 559, 559,
  /* 32704 */ 559, 559, 559, 559, 559, 2612, 559, 559, 559, 559, 559, 559, 2567, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 32725 */ 559, 559, 1393, 559, 559, 559, 559, 559, 0, 0, 0, 0, 583, 583, 583, 583, 583, 583, 583, 583, 2632, 583,
  /* 32747 */ 583, 583, 0, 3567, 0, 3569, 537, 537, 537, 537, 537, 537, 537, 559, 559, 559, 559, 559, 559, 3292, 559,
  /* 32768 */ 559, 559, 559, 559, 559, 559, 559, 559, 2582, 559, 559, 559, 559, 559, 559, 583, 583, 2662, 583, 583, 583,
  /* 32789 */ 583, 2666, 583, 583, 583, 2671, 583, 583, 583, 583, 583, 583, 3383, 583, 583, 583, 583, 583, 583, 583,
  /* 32809 */ 537, 559, 583, 583, 583, 2678, 583, 583, 583, 583, 583, 583, 583, 583, 2684, 583, 583, 583, 0, 3603, 0,
  /* 32830 */ 537, 537, 537, 537, 559, 559, 559, 559, 583, 583, 583, 583, 1549, 2014, 0, 0, 0, 0, 0, 2739, 0, 0, 0, 0,
  /* 32854 */ 0, 0, 0, 0, 0, 0, 0, 0, 2079, 0, 0, 0, 0, 0, 0, 0, 2766, 2767, 0, 0, 0, 0, 0, 0, 0, 0, 0, 537, 537, 537,
  /* 32884 */ 537, 537, 537, 1722, 2801, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2807, 537, 537, 537,
  /* 32904 */ 537, 537, 537, 2803, 537, 537, 537, 537, 537, 537, 537, 2809, 537, 2848, 559, 559, 559, 559, 559, 559,
  /* 32924 */ 559, 559, 559, 559, 559, 559, 2855, 559, 559, 559, 559, 559, 1891, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 32945 */ 559, 1902, 583, 2884, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2350, 583,
  /* 32965 */ 583, 583, 2897, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2904, 2945, 0, 0, 0, 0, 0, 0,
  /* 32988 */ 0, 0, 0, 2952, 2953, 0, 2954, 0, 2956, 0, 0, 0, 0, 2958, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2940, 0, 0, 0,
  /* 33017 */ 0, 0, 0, 0, 0, 2972, 0, 0, 0, 0, 2977, 2978, 0, 2980, 0, 0, 2983, 0, 0, 0, 2986, 537, 537, 537, 537, 537,
  /* 33043 */ 537, 2993, 537, 537, 537, 537, 537, 537, 537, 2506, 537, 537, 2509, 2510, 537, 537, 537, 537, 2997, 537,
  /* 33063 */ 537, 537, 537, 537, 537, 537, 3003, 537, 537, 537, 537, 537, 3009, 537, 537, 537, 537, 537, 3001, 537,
  /* 33083 */ 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1766, 537, 537, 537, 537, 3025, 3026, 537, 559, 559,
  /* 33103 */ 559, 559, 559, 559, 3033, 559, 559, 559, 559, 559, 3037, 3052, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 33123 */ 3059, 3061, 559, 559, 559, 559, 3065, 559, 3067, 3068, 559, 583, 583, 583, 583, 583, 583, 3075, 583, 583,
  /* 33143 */ 583, 583, 583, 583, 1974, 583, 583, 583, 1978, 583, 583, 583, 583, 583, 583, 1991, 1993, 583, 583, 583,
  /* 33163 */ 583, 583, 537, 583, 559, 537, 537, 537, 537, 559, 559, 559, 559, 583, 583, 583, 583, 0, 0, 0, 0, 3079,
  /* 33185 */ 583, 583, 583, 583, 583, 583, 583, 3085, 583, 583, 583, 583, 583, 3091, 583, 583, 583, 583, 1027, 583,
  /* 33205 */ 583, 583, 583, 583, 583, 583, 583, 0, 0, 0, 0, 0, 3500, 0, 537, 537, 537, 583, 3094, 583, 583, 583, 583,
  /* 33228 */ 583, 583, 583, 583, 3101, 3103, 583, 583, 583, 583, 583, 583, 3495, 3496, 0, 0, 0, 0, 0, 3502, 3503, 3504,
  /* 33250 */ 3107, 583, 3109, 3110, 583, 537, 583, 559, 537, 3115, 559, 3117, 583, 3119, 0, 0, 0, 0, 0, 0, 2714, 0, 0,
  /* 33273 */ 0, 0, 0, 0, 0, 0, 0, 659, 0, 0, 662, 663, 0, 0, 0, 0, 0, 0, 3125, 0, 0, 3128, 0, 0, 0, 0, 0, 0, 0, 0, 690,
  /* 33304 */ 0, 0, 0, 0, 0, 367, 367, 537, 537, 537, 537, 537, 3166, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 33327 */ 537, 1271, 537, 537, 537, 537, 537, 537, 537, 3176, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 33348 */ 537, 537, 3022, 537, 537, 0, 0, 3260, 0, 3141, 3262, 0, 0, 3265, 0, 0, 0, 0, 0, 0, 0, 399, 0, 0, 0, 0, 0,
  /* 33375 */ 399, 0, 0, 559, 3365, 559, 559, 559, 559, 559, 559, 559, 559, 559, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 33397 */ 0, 0, 583, 583, 583, 583, 3381, 583, 583, 583, 583, 583, 583, 583, 583, 583, 537, 559, 559, 559, 559, 924,
  /* 33419 */ 559, 559, 938, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2828, 559, 2831, 559, 559, 559, 559, 537, 537,
  /* 33440 */ 537, 3507, 537, 3509, 537, 537, 537, 537, 3514, 3515, 3516, 559, 559, 559, 559, 559, 559, 2591, 559, 559,
  /* 33460 */ 559, 559, 559, 559, 559, 559, 2599, 3519, 559, 3521, 559, 559, 559, 559, 3526, 3527, 3528, 3529, 583, 583,
  /* 33480 */ 583, 3532, 583, 583, 583, 583, 1028, 583, 583, 583, 583, 1046, 583, 583, 583, 0, 0, 0, 0, 537, 537, 537,
  /* 33502 */ 537, 537, 3574, 537, 559, 559, 3534, 583, 583, 583, 583, 3539, 0, 0, 0, 0, 0, 0, 0, 537, 537, 537, 537,
  /* 33525 */ 537, 537, 537, 537, 537, 3350, 3577, 559, 559, 559, 3581, 559, 583, 583, 3583, 583, 583, 583, 3587, 583,
  /* 33545 */ 0, 0, 0, 0, 0, 0, 0, 3395, 3141, 0, 0, 0, 0, 537, 537, 537, 537, 537, 2143, 537, 537, 537, 537, 537, 537,
  /* 33570 */ 537, 1293, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2805, 537, 537, 537, 2808, 537, 2810, 0, 0, 0,
  /* 33591 */ 331, 332, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2964, 0, 0, 0, 2968, 0, 371, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 33622 */ 0, 0, 0, 1246, 0, 0, 0, 0, 371, 0, 0, 0, 379, 381, 0, 0, 0, 0, 0, 0, 0, 417, 417, 0, 0, 0, 0, 0, 417, 0,
  /* 33652 */ 0, 0, 414, 0, 0, 0, 414, 69632, 73728, 0, 371, 371, 0, 426, 65536, 371, 0, 0, 371, 426, 495, 499, 495,
  /* 33675 */ 495, 504, 495, 495, 495, 504, 495, 426, 426, 332, 426, 0, 0, 426, 426, 0, 0, 0, 0, 0, 0, 0, 0, 737, 0, 0,
  /* 33701 */ 0, 0, 0, 0, 0, 426, 426, 426, 426, 426, 426, 426, 426, 426, 426, 426, 426, 426, 426, 426, 426, 543, 566,
  /* 33724 */ 543, 566, 543, 543, 566, 543, 543, 590, 566, 566, 566, 566, 566, 543, 566, 566, 566, 590, 590, 543, 590,
  /* 33745 */ 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 2726, 0, 0, 0, 0, 2731, 0, 0,
  /* 33772 */ 0, 0, 0, 0, 0, 69632, 73728, 221184, 0, 0, 0, 0, 65536, 0, 590, 590, 590, 590, 590, 590, 590, 590, 590,
  /* 33795 */ 566, 590, 566, 543, 566, 566, 590, 0, 0, 0, 0, 772, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122880, 0, 0, 0, 0,
  /* 33823 */ 0, 772, 0, 0, 0, 0, 0, 0, 537, 833, 537, 537, 537, 537, 537, 537, 537, 1328, 537, 537, 1332, 537, 537,
  /* 33846 */ 537, 537, 537, 863, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 559, 559, 3029, 559,
  /* 33867 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2854, 559, 559, 559, 559, 906, 559, 559, 559, 559, 559,
  /* 33888 */ 559, 937, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1896, 559, 559, 559, 559, 559, 559, 0, 0, 1234, 0,
  /* 33910 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1586, 0, 0, 559, 1359, 559, 559, 559, 559, 559, 1371, 559, 559, 559,
  /* 33936 */ 559, 559, 559, 559, 559, 559, 2245, 559, 559, 559, 559, 559, 559, 559, 26017, 1348, 980, 583, 583, 583,
  /* 33956 */ 583, 583, 583, 583, 583, 1452, 583, 583, 583, 293, 1072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1204, 0, 0, 0,
  /* 33982 */ 0, 583, 583, 1464, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1481, 583, 583, 0,
  /* 34003 */ 1700, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1587, 0, 0, 0, 0, 0, 2480, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34035 */ 0, 184728, 184928, 184928, 0, 184928, 537, 537, 2544, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 34054 */ 537, 537, 537, 903, 559, 559, 427, 427, 0, 427, 436, 0, 427, 427, 463, 463, 463, 463, 463, 463, 463, 463,
  /* 34076 */ 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 463, 489, 489, 463, 489, 489, 489, 489, 489, 489, 489,
  /* 34097 */ 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 489, 544, 567, 544,
  /* 34118 */ 567, 544, 544, 567, 544, 544, 591, 567, 567, 567, 567, 567, 544, 567, 567, 567, 591, 591, 544, 591, 1,
  /* 34139 */ 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 2741, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34167 */ 337, 0, 0, 0, 0, 0, 0, 591, 591, 591, 591, 591, 591, 591, 591, 591, 567, 591, 567, 544, 567, 567, 591,
  /* 34190 */ 583, 583, 583, 78117, 1072, 0, 0, 1075, 1079, 0, 0, 1083, 1087, 0, 0, 0, 0, 0, 0, 350, 351, 352, 0, 0, 0,
  /* 34215 */ 0, 0, 0, 0, 688, 537, 537, 841, 845, 848, 537, 856, 537, 537, 537, 537, 1348, 1809, 559, 559, 559, 559,
  /* 34237 */ 559, 559, 559, 559, 559, 559, 559, 559, 583, 3215, 583, 583, 26017, 1905, 583, 583, 583, 583, 583, 583,
  /* 34257 */ 583, 583, 583, 583, 583, 583, 583, 583, 2362, 2363, 0, 0, 2092, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34283 */ 1647, 0, 0, 2135, 0, 0, 0, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 3172, 537,
  /* 34305 */ 537, 2179, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2178, 559, 2393,
  /* 34325 */ 537, 537, 537, 2397, 559, 559, 559, 2401, 583, 583, 583, 0, 0, 0, 0, 537, 537, 537, 537, 537, 537, 537,
  /* 34347 */ 559, 559, 559, 559, 559, 3471, 559, 559, 559, 559, 0, 2438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34373 */ 1596, 0, 0, 2737, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1600, 0, 537, 2812, 537, 537, 537, 537, 537,
  /* 34400 */ 537, 537, 537, 537, 537, 537, 0, 0, 559, 559, 559, 559, 559, 559, 559, 2229, 559, 559, 559, 559, 559, 559,
  /* 34422 */ 559, 2620, 559, 559, 559, 559, 559, 559, 0, 2624, 559, 559, 2860, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 34443 */ 559, 559, 559, 559, 0, 583, 583, 583, 583, 583, 583, 999, 583, 583, 1013, 583, 583, 583, 583, 2909, 583,
  /* 34464 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1050, 583, 0, 0, 0, 0, 0, 2947, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 34490 */ 0, 0, 0, 0, 0, 1659, 0, 0, 0, 0, 0, 0, 2957, 0, 0, 0, 0, 0, 2960, 0, 2962, 0, 0, 2965, 0, 0, 0, 0, 0, 0,
  /* 34520 */ 377, 0, 0, 0, 0, 0, 0, 0, 362, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192968, 192968, 192968, 0, 0, 2970,
  /* 34548 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1697, 0, 0, 0, 0, 0, 0, 2987, 537, 537, 537, 537, 537, 537, 537,
  /* 34576 */ 537, 537, 537, 537, 537, 1737, 537, 537, 537, 537, 537, 537, 3013, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 34597 */ 3021, 537, 537, 3024, 537, 537, 537, 3027, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 34617 */ 559, 559, 3308, 583, 559, 559, 559, 3054, 559, 559, 559, 559, 559, 559, 559, 559, 559, 3063, 559, 559,
  /* 34637 */ 559, 559, 559, 2241, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1433, 559, 559, 559, 559,
  /* 34657 */ 3066, 559, 559, 559, 3069, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1051, 583, 0, 0, 0, 583,
  /* 34679 */ 583, 583, 583, 3096, 583, 583, 583, 583, 583, 583, 583, 583, 583, 3105, 583, 583, 583, 583, 1029, 583,
  /* 34699 */ 583, 583, 583, 1047, 583, 583, 583, 0, 0, 0, 0, 537, 537, 3571, 537, 537, 537, 3575, 559, 559, 583, 3108,
  /* 34721 */ 583, 583, 583, 537, 583, 559, 537, 537, 559, 559, 583, 583, 0, 0, 0, 0, 0, 0, 537, 537, 537, 537, 537,
  /* 34744 */ 3177, 537, 3179, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2796, 2797, 537, 537, 537, 537, 2800, 3207,
  /* 34764 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 583, 583, 3216, 583, 583, 583, 583, 1030, 1032,
  /* 34784 */ 583, 583, 1043, 583, 583, 583, 583, 0, 0, 0, 0, 3570, 537, 537, 537, 537, 537, 537, 3576, 559, 3278, 537,
  /* 34806 */ 537, 537, 537, 537, 537, 537, 537, 3284, 537, 537, 537, 537, 537, 537, 537, 1348, 905, 559, 559, 559, 559,
  /* 34827 */ 559, 559, 559, 559, 2284, 559, 559, 559, 559, 559, 559, 559, 559, 2298, 559, 559, 559, 559, 559, 0, 0,
  /* 34848 */ 583, 583, 3321, 583, 583, 583, 583, 583, 583, 583, 583, 537, 537, 559, 559, 583, 583, 583, 583, 1485, 583,
  /* 34869 */ 583, 583, 583, 583, 583, 583, 583, 1495, 583, 583, 583, 583, 583, 2690, 2691, 2692, 537, 537, 537, 537,
  /* 34889 */ 559, 559, 559, 559, 559, 559, 559, 3034, 559, 559, 559, 559, 559, 0, 537, 537, 3592, 3593, 537, 537, 559,
  /* 34910 */ 559, 3596, 3597, 559, 559, 583, 583, 3600, 3601, 583, 583, 0, 0, 0, 537, 537, 537, 537, 559, 559, 559,
  /* 34931 */ 559, 583, 583, 583, 583, 0, 2014, 0, 0, 305, 306, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 646, 0, 0, 0, 0, 0, 0,
  /* 34959 */ 537, 537, 537, 537, 537, 3273, 537, 537, 537, 3277, 0, 0, 0, 0, 686, 687, 0, 0, 0, 0, 692, 0, 0, 0, 367,
  /* 34984 */ 367, 0, 0, 0, 0, 0, 0, 0, 0, 705, 0, 0, 0, 0, 0, 0, 0, 1580, 1581, 0, 0, 0, 0, 0, 0, 0, 798, 537, 537,
  /* 35013 */ 842, 537, 537, 537, 537, 860, 0, 0, 0, 0, 754, 0, 0, 0, 0, 0, 754, 754, 0, 0, 819, 0, 0, 0, 0, 0, 2073, 0,
  /* 35041 */ 0, 2075, 0, 0, 0, 0, 0, 0, 0, 736, 409, 0, 0, 0, 0, 0, 0, 0, 336, 0, 0, 0, 0, 0, 336, 0, 0, 559, 559, 918,
  /* 35071 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2303, 0, 559, 559, 559, 975, 559, 0,
  /* 35093 */ 583, 583, 583, 583, 993, 583, 583, 583, 583, 583, 583, 1992, 583, 583, 583, 583, 583, 583, 537, 583, 559,
  /* 35114 */ 537, 537, 559, 559, 583, 583, 0, 3120, 844, 993, 918, 537, 537, 537, 537, 901, 559, 559, 559, 559, 975, 0,
  /* 35136 */ 583, 583, 583, 583, 2872, 583, 583, 583, 583, 583, 583, 2879, 583, 2881, 583, 583, 583, 1050, 78117, 1072,
  /* 35156 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225886, 225886, 225886, 225737, 225886, 0, 0, 1689, 0, 0, 0, 0, 0, 0, 0,
  /* 35182 */ 0, 0, 0, 0, 0, 0, 1710, 0, 0, 537, 1805, 537, 1348, 0, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 35206 */ 559, 559, 1380, 559, 559, 559, 2149, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 35227 */ 537, 2189, 2615, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 0, 0, 0, 0, 0, 0, 2755,
  /* 35250 */ 0, 0, 0, 0, 2760, 0, 0, 0, 2762, 0, 0, 0, 3269, 0, 0, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 35275 */ 537, 1333, 537, 537, 537, 537, 0, 0, 0, 0, 437, 0, 0, 334, 464, 464, 464, 464, 464, 464, 464, 464, 464,
  /* 35298 */ 464, 464, 464, 464, 464, 464, 464, 464, 464, 482, 490, 490, 482, 490, 490, 490, 490, 490, 490, 490, 490,
  /* 35319 */ 515, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 532, 523, 523, 523, 523, 523,
  /* 35340 */ 523, 545, 568, 545, 568, 545, 545, 568, 545, 545, 592, 568, 568, 568, 568, 568, 545, 568, 568, 568, 592,
  /* 35361 */ 592, 545, 592, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 2935, 0, 0, 0,
  /* 35387 */ 0, 0, 0, 0, 0, 0, 675, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 167936, 0, 0, 0, 592, 592, 592, 592, 592, 592,
  /* 35416 */ 592, 592, 592, 568, 592, 568, 545, 568, 568, 592, 0, 0, 760, 0, 0, 763, 0, 0, 767, 0, 0, 0, 0, 0, 0, 0,
  /* 35442 */ 454, 1151447, 1151447, 1151447, 1151447, 1151447, 1151447, 1151447, 1151447, 1151447, 1151447, 1151447,
  /* 35454 */ 1151447, 1151447, 1151447, 1151447, 1151447, 0, 0, 0, 0, 781, 0, 0, 0, 0, 0, 0, 0, 785, 0, 0, 0, 0, 0, 0,
  /* 35478 */ 826, 781, 0, 0, 826, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 427, 65536, 0, 0, 785, 0, 0, 808, 0,
  /* 35505 */ 0, 0, 0, 0, 808, 808, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 348, 347, 65536, 346, 559, 559, 559,
  /* 35530 */ 921, 559, 929, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2286, 559, 559, 559, 559, 559, 559,
  /* 35551 */ 559, 976, 559, 0, 583, 583, 583, 583, 583, 996, 583, 1004, 583, 583, 0, 537, 537, 559, 559, 583, 583,
  /* 35572 */ 3613, 3614, 3615, 537, 559, 583, 537, 583, 1070, 1051, 78117, 1072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35595 */ 229376, 0, 0, 0, 0, 1132, 1133, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 709, 0, 0, 0,
  /* 35625 */ 0, 0, 0, 1165, 0, 0, 0, 0, 0, 0, 0, 1173, 0, 0, 0, 0, 0, 0, 537, 537, 537, 3345, 537, 537, 537, 537, 3349,
  /* 35652 */ 537, 1338, 537, 537, 537, 1345, 537, 537, 1348, 905, 559, 559, 559, 559, 559, 559, 559, 1370, 559, 1375,
  /* 35672 */ 559, 559, 1379, 559, 559, 1382, 559, 1421, 559, 559, 1425, 559, 559, 559, 559, 559, 1431, 559, 559, 559,
  /* 35692 */ 1438, 559, 559, 559, 559, 926, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2287, 2288,
  /* 35712 */ 2289, 559, 1457, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1476, 583, 583, 583, 583, 583, 583, 2343,
  /* 35732 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 2682, 583, 583, 583, 2685, 583, 583, 583, 583, 1484, 583,
  /* 35752 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1515, 583, 583, 0, 1603, 0, 0, 0, 0, 0, 0, 0,
  /* 35776 */ 0, 0, 0, 0, 0, 0, 0, 1648, 0, 0, 0, 0, 0, 1622, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1633, 0, 1672, 0, 0, 0, 0,
  /* 35807 */ 0, 0, 0, 0, 0, 0, 0, 0, 1686, 0, 0, 0, 0, 0, 537, 537, 537, 537, 537, 537, 537, 537, 2146, 537, 537, 537,
  /* 35833 */ 1688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2042, 0, 0, 0, 1702, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 35865 */ 0, 2091, 0, 0, 0, 537, 537, 1773, 537, 537, 537, 537, 537, 537, 537, 537, 1782, 537, 537, 537, 537, 537,
  /* 35887 */ 537, 1347, 1348, 905, 559, 559, 559, 559, 559, 559, 559, 2592, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 35907 */ 559, 3045, 559, 559, 559, 559, 559, 559, 537, 537, 1790, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 35927 */ 1799, 1801, 537, 537, 537, 537, 537, 880, 537, 537, 537, 537, 898, 537, 537, 537, 559, 559, 559, 559, 559,
  /* 35948 */ 2255, 559, 559, 2258, 559, 559, 559, 559, 559, 559, 559, 2297, 559, 559, 2300, 2301, 559, 559, 0, 0, 0, 0,
  /* 35970 */ 2072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2080, 0, 0, 0, 0, 0, 0, 2959, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2038, 0,
  /* 36000 */ 2039, 0, 0, 0, 0, 559, 559, 559, 559, 2240, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 36022 */ 1396, 559, 559, 559, 0, 0, 583, 583, 583, 583, 583, 583, 2315, 583, 583, 583, 583, 583, 583, 583, 1037,
  /* 36043 */ 583, 583, 583, 583, 583, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2708, 0, 0, 2240, 537, 537, 537, 537, 559, 559, 559,
  /* 36068 */ 559, 583, 583, 583, 583, 0, 0, 0, 2015, 0, 2428, 0, 0, 0, 0, 0, 0, 0, 0, 2433, 0, 0, 2436, 0, 0, 0, 0, 0,
  /* 36096 */ 0, 3135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 301, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 36128 */ 0, 0, 266240, 266240, 266240, 0, 266240, 2451, 0, 0, 0, 0, 0, 0, 0, 2459, 0, 0, 0, 2461, 0, 0, 0, 0, 0, 0,
  /* 36154 */ 642, 748, 749, 750, 0, 0, 0, 0, 0, 756, 0, 0, 0, 0, 2465, 2466, 0, 0, 2469, 0, 0, 2472, 0, 0, 0, 0, 0, 0,
  /* 36182 */ 0, 69632, 73728, 0, 0, 0, 352, 350, 65536, 0, 0, 0, 0, 0, 2492, 0, 0, 0, 0, 537, 2496, 537, 537, 537, 537,
  /* 36207 */ 537, 537, 537, 2520, 537, 537, 537, 2523, 537, 537, 2525, 537, 537, 2543, 537, 537, 537, 537, 537, 537,
  /* 36227 */ 537, 537, 537, 2550, 537, 537, 537, 2553, 559, 2588, 559, 559, 559, 559, 559, 559, 559, 2594, 559, 559,
  /* 36247 */ 559, 559, 559, 559, 559, 2826, 559, 559, 559, 559, 559, 559, 2834, 559, 2601, 559, 559, 559, 559, 559,
  /* 36267 */ 559, 2608, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2299, 559, 559, 559, 559, 0, 0, 559, 559, 2616,
  /* 36288 */ 559, 559, 559, 2619, 559, 559, 559, 559, 559, 559, 559, 0, 0, 0, 0, 0, 0, 3144, 0, 0, 0, 0, 0, 0, 0, 3151,
  /* 36314 */ 0, 0, 0, 0, 0, 583, 2626, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 3088, 583, 3090, 583,
  /* 36336 */ 583, 583, 2649, 583, 583, 583, 583, 583, 583, 2654, 583, 583, 583, 583, 583, 583, 583, 1040, 583, 583,
  /* 36356 */ 583, 583, 583, 0, 0, 0, 0, 0, 2704, 0, 0, 0, 0, 0, 0, 2660, 583, 583, 583, 583, 583, 583, 2667, 583, 583,
  /* 36381 */ 583, 583, 583, 583, 2674, 583, 583, 583, 583, 1501, 583, 583, 583, 1508, 1510, 583, 583, 583, 583, 583,
  /* 36401 */ 583, 1503, 583, 583, 583, 583, 583, 583, 583, 1517, 583, 2711, 0, 0, 0, 0, 0, 0, 0, 2715, 0, 0, 0, 0, 0,
  /* 36426 */ 0, 0, 537, 3455, 537, 3456, 537, 537, 537, 3460, 537, 537, 537, 2775, 537, 537, 537, 537, 537, 2780, 537,
  /* 36447 */ 537, 537, 537, 537, 537, 537, 537, 1732, 537, 537, 537, 537, 537, 537, 537, 537, 1779, 537, 537, 537, 537,
  /* 36468 */ 537, 537, 537, 537, 2158, 537, 537, 537, 537, 2163, 537, 537, 559, 559, 2822, 559, 559, 559, 559, 559,
  /* 36488 */ 2827, 559, 559, 559, 559, 559, 559, 559, 1406, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2610, 559,
  /* 36508 */ 559, 559, 559, 559, 559, 2858, 559, 559, 559, 559, 559, 559, 559, 2863, 559, 559, 559, 559, 559, 559, 0,
  /* 36529 */ 583, 583, 583, 583, 583, 583, 1002, 583, 583, 583, 583, 2896, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 36550 */ 583, 2902, 583, 583, 583, 583, 583, 1927, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1511, 583,
  /* 36570 */ 583, 583, 583, 583, 2905, 583, 2907, 583, 583, 583, 583, 583, 583, 583, 2912, 583, 583, 583, 583, 583,
  /* 36590 */ 583, 2370, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1932, 583, 583, 583, 583, 583, 583, 0, 0, 0, 2971,
  /* 36612 */ 0, 0, 0, 0, 2976, 0, 0, 0, 0, 0, 0, 0, 657, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 725, 0, 0, 559, 559,
  /* 36643 */ 559, 559, 3041, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1411, 559, 559, 559, 0, 0, 0,
  /* 36665 */ 0, 3133, 3134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1596, 0, 0, 0, 0, 0, 0, 0, 0, 3253, 0, 0, 0, 0, 0, 3256, 0,
  /* 36695 */ 0, 0, 0, 0, 0, 0, 1177, 1177, 0, 0, 0, 1181, 1659, 0, 0, 583, 583, 583, 583, 3311, 583, 583, 583, 583,
  /* 36719 */ 583, 583, 583, 583, 583, 583, 583, 1533, 0, 1276, 1462, 1369, 583, 583, 583, 583, 3322, 583, 583, 583,
  /* 36739 */ 583, 583, 583, 537, 537, 559, 559, 583, 583, 583, 583, 1523, 583, 583, 583, 583, 583, 583, 583, 0, 1275,
  /* 36760 */ 1461, 1368, 0, 0, 0, 0, 3342, 0, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 3006, 537, 3008,
  /* 36782 */ 537, 537, 537, 537, 537, 3547, 537, 3548, 537, 537, 537, 559, 559, 559, 559, 559, 559, 3554, 559, 3555,
  /* 36802 */ 559, 559, 559, 559, 583, 583, 583, 583, 583, 583, 3562, 583, 3563, 583, 583, 583, 583, 1926, 583, 583,
  /* 36822 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 1963, 583, 583, 583, 583, 546, 546, 593, 569, 569, 569, 569,
  /* 36843 */ 569, 546, 569, 569, 569, 593, 593, 546, 593, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0,
  /* 36866 */ 0, 0, 0, 0, 0, 3271, 537, 537, 537, 537, 537, 537, 537, 3276, 537, 593, 593, 593, 593, 593, 593, 593, 593,
  /* 36889 */ 593, 569, 593, 569, 546, 569, 569, 593, 583, 583, 1499, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 36910 */ 583, 583, 583, 1983, 1984, 583, 0, 0, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2319, 583, 583,
  /* 36931 */ 583, 583, 583, 1957, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1946, 583, 583, 583, 583, 583, 405,
  /* 36952 */ 0, 0, 0, 0, 383, 0, 69632, 73728, 0, 0, 0, 0, 428, 65536, 0, 0, 0, 0, 0, 2087, 0, 0, 0, 0, 1659, 0, 0, 0,
  /* 36980 */ 0, 0, 0, 0, 2024, 0, 0, 0, 0, 0, 0, 0, 0, 1201, 0, 0, 0, 0, 0, 0, 0, 428, 428, 0, 428, 0, 442, 428, 428,
  /* 37009 */ 465, 465, 465, 472, 465, 465, 465, 465, 465, 465, 465, 465, 472, 465, 465, 465, 465, 465, 465, 465, 465,
  /* 37030 */ 479, 465, 491, 491, 465, 491, 491, 491, 491, 491, 491, 491, 491, 491, 491, 491, 491, 491, 491, 491, 491,
  /* 37051 */ 491, 491, 491, 491, 491, 491, 491, 491, 534, 547, 570, 547, 570, 547, 547, 570, 547, 547, 594, 570, 570,
  /* 37072 */ 570, 570, 570, 547, 570, 570, 570, 594, 594, 547, 594, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301,
  /* 37095 */ 302, 0, 0, 0, 0, 0, 0, 3343, 537, 537, 537, 537, 3347, 537, 537, 537, 537, 537, 537, 2170, 537, 537, 2173,
  /* 37118 */ 537, 537, 537, 537, 537, 537, 537, 2210, 537, 537, 2213, 2214, 537, 537, 0, 0, 594, 594, 594, 594, 594,
  /* 37139 */ 594, 594, 594, 594, 570, 594, 570, 547, 570, 570, 594, 0, 738, 657, 0, 0, 0, 0, 0, 537, 834, 537, 537,
  /* 37162 */ 537, 849, 537, 537, 537, 537, 537, 881, 883, 537, 537, 894, 537, 537, 537, 537, 559, 559, 559, 559, 559,
  /* 37183 */ 2267, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2272, 559, 559, 559, 559, 907, 559, 559, 559,
  /* 37204 */ 923, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 962, 1037, 583, 583, 293, 1072, 0, 0, 1075, 1079,
  /* 37225 */ 0, 0, 1083, 1087, 0, 0, 0, 0, 0, 0, 657, 0, 657, 0, 0, 0, 0, 817, 0, 0, 0, 0, 1134, 0, 1136, 0, 0, 367,
  /* 37253 */ 367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 708, 0, 0, 0, 0, 1178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 37285 */ 1669, 1670, 0, 0, 0, 1095, 1094, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 282624, 282624, 282624, 282624, 282624,
  /* 37308 */ 282624, 282624, 282624, 1248, 0, 0, 1094, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2107, 0, 0, 0, 537, 1259,
  /* 37333 */ 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1272, 1279, 537, 537, 537, 537, 537, 1290, 537, 537,
  /* 37353 */ 537, 537, 537, 537, 537, 1298, 537, 537, 537, 537, 537, 878, 537, 537, 537, 537, 537, 537, 537, 537, 559,
  /* 37374 */ 559, 559, 559, 3470, 559, 559, 559, 559, 559, 537, 537, 1341, 537, 537, 537, 537, 1348, 905, 559, 1351,
  /* 37394 */ 559, 559, 559, 559, 559, 0, 583, 583, 987, 583, 583, 583, 583, 1006, 1010, 1016, 559, 1386, 559, 559, 559,
  /* 37415 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2586, 1420, 559, 559, 559, 559, 559, 559, 559,
  /* 37436 */ 559, 559, 559, 559, 1434, 559, 559, 559, 559, 559, 559, 2607, 559, 559, 559, 559, 2611, 559, 559, 559,
  /* 37456 */ 559, 559, 559, 2256, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2583, 559, 559, 559, 559, 559, 559,
  /* 37477 */ 26017, 1348, 980, 583, 1444, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 3327, 537, 3328, 559,
  /* 37497 */ 3329, 583, 1458, 1465, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1479, 583, 583, 583, 583, 583, 1973,
  /* 37517 */ 583, 583, 583, 583, 583, 583, 1981, 583, 583, 583, 583, 583, 1525, 583, 583, 583, 583, 583, 583, 0, 537,
  /* 37538 */ 583, 559, 537, 537, 537, 1060, 902, 559, 559, 559, 1065, 976, 0, 583, 583, 583, 2871, 583, 583, 583, 583,
  /* 37559 */ 583, 2876, 583, 583, 583, 583, 583, 583, 2355, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2386, 583,
  /* 37579 */ 583, 583, 583, 2155, 2327, 583, 583, 583, 1500, 583, 583, 583, 583, 583, 583, 583, 1513, 583, 583, 583,
  /* 37599 */ 583, 583, 1469, 583, 583, 583, 1474, 583, 583, 583, 583, 583, 583, 583, 2384, 583, 583, 2387, 2388, 583,
  /* 37619 */ 583, 2154, 2326, 537, 537, 1327, 537, 537, 559, 559, 1420, 559, 559, 583, 583, 1513, 583, 583, 1072, 1804,
  /* 37639 */ 537, 537, 1348, 1809, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1849, 559, 559, 559,
  /* 37659 */ 559, 559, 559, 1825, 1826, 559, 559, 559, 559, 1833, 559, 559, 559, 559, 559, 559, 559, 2851, 559, 559,
  /* 37679 */ 559, 559, 559, 559, 559, 2857, 1921, 1922, 583, 583, 583, 583, 1929, 583, 583, 583, 583, 583, 583, 583,
  /* 37699 */ 583, 583, 2332, 583, 583, 583, 583, 583, 583, 583, 583, 1970, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 37720 */ 583, 583, 583, 583, 1999, 2000, 2001, 0, 2096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1711, 0, 537,
  /* 37746 */ 537, 537, 537, 2194, 537, 537, 537, 537, 537, 537, 2199, 537, 537, 537, 537, 537, 537, 1730, 1731, 537,
  /* 37766 */ 537, 537, 537, 1738, 537, 537, 537, 537, 2204, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 37787 */ 0, 0, 0, 0, 0, 0, 559, 559, 2561, 559, 559, 559, 2280, 559, 559, 559, 559, 559, 559, 2285, 559, 559, 559,
  /* 37810 */ 559, 559, 559, 559, 3213, 559, 559, 559, 559, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 3078, 583,
  /* 37831 */ 559, 2291, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 0, 0, 0, 0, 0, 0, 106496, 0,
  /* 37853 */ 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 0, 0, 0, 0, 0, 0, 0, 583, 583,
  /* 37871 */ 583, 2367, 583, 583, 583, 583, 583, 583, 2372, 583, 583, 583, 583, 583, 583, 2652, 583, 583, 583, 583,
  /* 37891 */ 583, 583, 583, 583, 583, 3325, 583, 583, 537, 537, 559, 559, 583, 583, 2378, 583, 583, 583, 583, 583, 583,
  /* 37912 */ 583, 583, 583, 583, 583, 583, 537, 583, 559, 2693, 537, 537, 537, 2695, 559, 559, 559, 0, 2415, 0, 0, 0,
  /* 37934 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2054, 0, 559, 559, 559, 559, 2577, 559, 559, 559, 559, 559, 559, 559,
  /* 37959 */ 559, 559, 559, 559, 559, 1881, 559, 559, 559, 0, 2721, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2081, 0,
  /* 37986 */ 0, 0, 0, 0, 2753, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2797568, 0, 0, 0, 0, 2763, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38017 */ 0, 0, 0, 0, 0, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2883, 583, 583, 583, 583, 583, 583, 583,
  /* 38040 */ 583, 583, 583, 583, 583, 583, 583, 583, 2675, 0, 2946, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2109, 0,
  /* 38067 */ 2969, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2134, 559, 559, 559, 559, 3211, 559, 559, 559, 559,
  /* 38093 */ 559, 559, 559, 583, 583, 583, 583, 583, 583, 583, 583, 583, 3489, 537, 537, 537, 537, 3508, 537, 3510,
  /* 38113 */ 537, 537, 537, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 3036, 559, 559, 559, 3520, 559, 3522,
  /* 38133 */ 559, 559, 559, 559, 583, 583, 583, 583, 583, 583, 583, 3533, 583, 3535, 583, 583, 583, 583, 0, 0, 0, 0, 0,
  /* 38156 */ 0, 0, 3544, 537, 537, 537, 537, 537, 1291, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2522, 537,
  /* 38177 */ 537, 537, 537, 537, 0, 537, 3591, 537, 537, 537, 537, 559, 3595, 559, 559, 559, 559, 583, 3599, 583, 583,
  /* 38198 */ 583, 583, 1989, 583, 583, 583, 583, 1995, 583, 583, 583, 537, 583, 559, 537, 537, 559, 559, 583, 583,
  /* 38218 */ 2927, 0, 0, 2930, 2931, 0, 0, 0, 0, 0, 438, 0, 0, 450, 466, 466, 466, 466, 466, 466, 466, 466, 466, 476,
  /* 38242 */ 466, 466, 466, 466, 466, 466, 466, 466, 466, 450, 450, 466, 450, 450, 450, 450, 450, 450, 450, 450, 516,
  /* 38263 */ 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 548, 571, 548, 571, 548, 548,
  /* 38284 */ 571, 548, 548, 595, 571, 571, 571, 571, 571, 548, 571, 571, 571, 595, 595, 548, 595, 1, 12290, 3, 78117,
  /* 38305 */ 78452, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 114688, 0, 241664, 258048, 0, 0, 0, 0, 0, 0, 0,
  /* 38331 */ 1168, 0, 0, 0, 0, 0, 0, 0, 0, 1693, 0, 0, 0, 0, 0, 0, 0, 595, 595, 595, 595, 595, 595, 595, 595, 595, 571,
  /* 38358 */ 595, 571, 548, 571, 571, 595, 728, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2462, 0, 0, 658, 0, 0, 0,
  /* 38387 */ 0, 0, 537, 537, 537, 537, 537, 850, 537, 537, 537, 537, 537, 1325, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 38409 */ 537, 537, 537, 1297, 537, 537, 537, 537, 864, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 38430 */ 537, 559, 559, 559, 3188, 559, 559, 559, 559, 559, 559, 559, 3193, 559, 559, 559, 559, 559, 559, 1404,
  /* 38450 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2261, 559, 559, 559, 559, 559, 1422, 559, 559,
  /* 38471 */ 559, 559, 559, 1429, 559, 559, 559, 559, 559, 559, 559, 1427, 559, 559, 559, 559, 559, 559, 1437, 559,
  /* 38491 */ 583, 1459, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2658, 583, 583, 583, 583,
  /* 38512 */ 1522, 583, 583, 583, 583, 583, 583, 583, 583, 0, 1273, 1459, 1366, 537, 537, 537, 1539, 537, 559, 559,
  /* 38532 */ 559, 1543, 559, 583, 583, 583, 1547, 583, 1072, 0, 1551, 0, 0, 0, 1557, 0, 0, 0, 1563, 0, 0, 0, 1569, 0,
  /* 38556 */ 0, 0, 0, 0, 0, 135168, 0, 0, 135168, 135168, 135168, 135168, 135168, 0, 135168, 135168, 0, 0, 0, 0, 0, 0,
  /* 38578 */ 0, 0, 0, 0, 0, 0, 0, 341, 342, 343, 0, 0, 577536, 0, 0, 1592, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2077, 0, 0, 0,
  /* 38608 */ 0, 0, 537, 537, 1743, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1313, 537, 537,
  /* 38629 */ 559, 559, 559, 1858, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1413, 559, 559, 583,
  /* 38650 */ 583, 1923, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1934, 583, 583, 583, 583, 583, 1990, 583, 583,
  /* 38670 */ 583, 583, 583, 583, 583, 537, 583, 559, 537, 537, 559, 559, 583, 583, 0, 0, 1954, 583, 583, 583, 583, 583,
  /* 38692 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 3106, 2033, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 38719 */ 3152, 0, 0, 2085, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2053, 0, 0, 0, 0, 0, 0, 2099, 0, 0, 0, 0, 0,
  /* 38749 */ 2105, 0, 0, 0, 0, 0, 0, 0, 2062, 0, 0, 0, 0, 0, 0, 0, 0, 537, 836, 537, 537, 537, 537, 537, 537, 537,
  /* 38775 */ 2191, 537, 537, 537, 537, 2196, 537, 537, 537, 537, 537, 537, 537, 537, 537, 896, 537, 537, 537, 537, 559,
  /* 38796 */ 559, 2277, 559, 559, 559, 559, 2282, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2845, 559,
  /* 38816 */ 559, 559, 559, 2364, 583, 583, 583, 583, 2369, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 38836 */ 3388, 583, 583, 537, 559, 0, 0, 2933, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2092, 0, 0, 537, 2998, 537,
  /* 38863 */ 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2788, 3038, 559, 559, 559, 559, 559,
  /* 38884 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1418, 583, 3080, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 38905 */ 583, 583, 583, 583, 583, 583, 2916, 583, 537, 537, 3404, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 38926 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 3419, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 38947 */ 583, 583, 583, 583, 583, 583, 583, 3076, 583, 583, 583, 583, 583, 3435, 583, 583, 583, 583, 583, 583, 583,
  /* 38968 */ 583, 583, 583, 583, 0, 0, 0, 0, 3499, 0, 3501, 537, 537, 537, 583, 583, 3566, 0, 0, 0, 0, 537, 537, 537,
  /* 38992 */ 537, 537, 537, 537, 559, 559, 3187, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 952, 559,
  /* 39013 */ 559, 559, 390, 392, 342, 0, 0, 0, 0, 0, 0, 341, 0, 0, 342, 0, 0, 0, 0, 0, 0, 658, 0, 658, 0, 0, 0, 0, 0,
  /* 39042 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2748, 0, 0, 0, 389, 0, 0, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0,
  /* 39072 */ 0, 2100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2716, 0, 0, 0, 0, 0, 0, 0, 0, 341, 0, 0, 443, 0, 0, 467, 467, 467,
  /* 39102 */ 467, 467, 467, 467, 467, 467, 549, 572, 549, 572, 549, 549, 572, 473, 467, 467, 467, 467, 467, 467, 467,
  /* 39123 */ 467, 467, 467, 467, 467, 477, 477, 467, 478, 467, 467, 467, 478, 467, 467, 467, 496, 473, 496, 496, 496,
  /* 39144 */ 496, 496, 496, 496, 496, 467, 467, 549, 549, 596, 572, 572, 572, 572, 572, 549, 572, 572, 572, 596, 596,
  /* 39165 */ 549, 596, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 266240, 0, 0, 0, 0,
  /* 39191 */ 0, 0, 0, 0, 0, 0, 0, 266240, 0, 596, 596, 596, 596, 596, 596, 596, 596, 596, 572, 596, 572, 549, 572, 572,
  /* 39215 */ 596, 367, 0, 0, 0, 0, 0, 702, 0, 0, 0, 0, 0, 0, 0, 0, 711, 0, 713, 0, 0, 0, 0, 0, 0, 0, 721, 0, 0, 0, 0,
  /* 39246 */ 0, 0, 0, 1200, 0, 0, 0, 0, 0, 0, 0, 0, 1125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 746, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39279 */ 0, 0, 0, 2471, 0, 0, 0, 0, 0, 0, 0, 0, 0, 762, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2963, 0, 0, 0, 0, 0, 659,
  /* 39311 */ 0, 778, 0, 0, 0, 0, 0, 0, 0, 782, 0, 0, 0, 0, 791, 0, 802, 0, 799, 782, 0, 0, 804, 0, 663, 0, 778, 0, 0,
  /* 39340 */ 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 376, 0, 65536, 0, 0, 659, 821, 0, 778, 0, 0, 0, 0, 0, 827, 0, 0, 0,
  /* 39368 */ 0, 0, 0, 0, 2102, 0, 0, 0, 0, 0, 0, 0, 0, 1594, 0, 0, 1597, 1598, 1599, 0, 1601, 0, 782, 659, 831, 0, 0,
  /* 39395 */ 0, 0, 537, 835, 537, 537, 537, 851, 537, 537, 537, 537, 537, 1346, 537, 1348, 905, 1350, 559, 559, 559,
  /* 39416 */ 559, 559, 1357, 865, 537, 537, 537, 537, 879, 537, 537, 537, 537, 897, 537, 537, 537, 559, 559, 559, 559,
  /* 39437 */ 559, 3291, 559, 559, 559, 3295, 559, 559, 559, 559, 559, 559, 1365, 1372, 559, 559, 559, 559, 559, 559,
  /* 39457 */ 559, 559, 559, 2621, 559, 559, 559, 559, 0, 2624, 908, 559, 559, 559, 925, 559, 559, 939, 559, 559, 559,
  /* 39478 */ 559, 953, 559, 559, 559, 559, 559, 559, 3481, 583, 583, 583, 583, 583, 583, 583, 583, 583, 3086, 583, 583,
  /* 39499 */ 583, 583, 583, 583, 559, 971, 559, 559, 559, 0, 583, 583, 983, 583, 583, 583, 1000, 583, 583, 1014, 0, 0,
  /* 39521 */ 1163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2108, 0, 2110, 0, 0, 0, 0, 1180, 0, 0, 0, 0, 0, 0, 1097, 0,
  /* 39551 */ 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 0, 0, 423, 0, 65536, 0, 0, 0, 0, 1099, 0, 0, 0, 0, 0, 0, 1203, 0, 0, 0,
  /* 39580 */ 0, 1208, 1232, 0, 0, 0, 0, 0, 0, 1137, 0, 0, 1243, 0, 0, 0, 0, 0, 0, 0, 2420, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39609 */ 2025, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1222, 0, 0, 0, 0, 1254, 0, 0, 0, 0, 0, 0, 0, 673, 0, 0, 0, 0, 0, 0, 0,
  /* 39641 */ 0, 754, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 537, 537, 537, 1320, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 39667 */ 537, 537, 537, 537, 3184, 537, 537, 559, 559, 559, 1389, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 39688 */ 559, 559, 559, 1416, 559, 559, 583, 1460, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 39708 */ 1482, 583, 583, 583, 583, 2327, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1478, 1480, 583,
  /* 39728 */ 583, 583, 537, 537, 1538, 537, 537, 559, 559, 1542, 559, 559, 583, 583, 1546, 583, 583, 1072, 0, 1574, 0,
  /* 39749 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2133, 0, 537, 537, 1725, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 39775 */ 1736, 537, 537, 537, 537, 537, 537, 1763, 537, 537, 537, 537, 537, 537, 537, 537, 537, 895, 537, 537, 537,
  /* 39796 */ 537, 559, 559, 537, 537, 537, 1348, 0, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1820, 559, 559,
  /* 39817 */ 559, 559, 1859, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2273, 559, 559, 559, 26017, 0,
  /* 39838 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1916, 583, 583, 583, 583, 583, 2328, 583, 583, 583, 583,
  /* 39859 */ 583, 583, 583, 583, 583, 583, 583, 2373, 583, 583, 583, 583, 583, 1955, 583, 583, 583, 583, 583, 583, 583,
  /* 39880 */ 583, 583, 583, 583, 583, 583, 583, 3240, 583, 2070, 2071, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2412,
  /* 39906 */ 0, 0, 0, 2113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2411, 0, 2413, 2124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 39937 */ 0, 0, 0, 0, 0, 155648, 0, 0, 0, 0, 537, 537, 537, 2141, 2142, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 39960 */ 2183, 2184, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2206, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 39980 */ 537, 537, 0, 0, 0, 0, 0, 0, 559, 2560, 559, 0, 0, 559, 559, 559, 2225, 559, 2227, 559, 559, 559, 559, 559,
  /* 40004 */ 559, 559, 559, 559, 2843, 2844, 559, 559, 559, 559, 2847, 559, 559, 559, 2293, 559, 559, 559, 559, 559,
  /* 40024 */ 559, 559, 559, 559, 559, 0, 0, 0, 0, 0, 0, 1150976, 0, 1150976, 0, 0, 0, 0, 0, 0, 0, 1110, 0, 0, 0, 0, 0,
  /* 40051 */ 0, 0, 0, 670, 0, 0, 0, 0, 0, 732, 0, 0, 0, 583, 583, 583, 2312, 583, 2314, 583, 583, 583, 583, 583, 583,
  /* 40076 */ 583, 583, 1944, 583, 583, 583, 1948, 583, 583, 1953, 583, 583, 583, 2380, 583, 583, 583, 583, 583, 583,
  /* 40096 */ 583, 583, 583, 583, 537, 583, 559, 3114, 537, 3116, 559, 3118, 583, 0, 0, 0, 0, 2416, 0, 0, 0, 0, 0, 0,
  /* 40120 */ 2421, 0, 0, 0, 2424, 2425, 0, 0, 0, 0, 0, 2116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1127, 0, 0, 1130, 1131, 0,
  /* 40148 */ 0, 0, 2478, 0, 0, 0, 0, 0, 2484, 0, 0, 0, 0, 2487, 0, 0, 0, 0, 0, 0, 1163264, 419, 419, 0, 0, 0, 0, 0,
  /* 40176 */ 419, 0, 537, 2515, 537, 2517, 537, 537, 537, 537, 2521, 537, 537, 537, 537, 537, 537, 537, 537, 2507, 537,
  /* 40197 */ 537, 537, 537, 537, 2512, 537, 537, 2527, 537, 537, 537, 537, 537, 537, 537, 2534, 537, 537, 537, 537,
  /* 40217 */ 537, 537, 537, 1348, 905, 559, 559, 1352, 559, 559, 1356, 559, 2542, 537, 537, 537, 537, 2546, 537, 537,
  /* 40237 */ 537, 537, 537, 537, 537, 537, 537, 537, 537, 3183, 537, 537, 537, 537, 2574, 559, 559, 559, 559, 559,
  /* 40257 */ 2579, 559, 2581, 559, 559, 559, 559, 2585, 559, 559, 559, 559, 559, 2566, 559, 559, 559, 559, 559, 559,
  /* 40277 */ 559, 559, 559, 559, 559, 1898, 559, 559, 559, 559, 583, 583, 583, 2636, 583, 583, 2639, 2640, 583, 583,
  /* 40297 */ 583, 583, 583, 2645, 583, 2647, 583, 583, 2677, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 40317 */ 583, 583, 2361, 583, 583, 583, 2698, 583, 583, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2435, 0, 0, 0, 0, 0, 0,
  /* 40345 */ 2723, 2724, 2725, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3138, 0, 0, 0, 0, 0, 0, 0, 2738, 0, 0, 0, 0, 0, 0, 0,
  /* 40374 */ 2744, 0, 2746, 0, 0, 0, 0, 0, 0, 688, 0, 0, 0, 0, 0, 0, 695, 367, 367, 2749, 0, 0, 2752, 0, 0, 0, 0, 0, 0,
  /* 40403 */ 0, 0, 0, 0, 0, 0, 2486, 0, 0, 0, 0, 2764, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2773, 537, 537, 537,
  /* 40432 */ 2791, 537, 537, 2794, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1268, 537, 537, 537, 537, 537, 537,
  /* 40452 */ 559, 559, 559, 2838, 559, 559, 2841, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1863, 559, 559,
  /* 40472 */ 559, 559, 559, 0, 2869, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2389, 537,
  /* 40493 */ 583, 583, 2918, 2919, 2920, 537, 537, 559, 559, 583, 583, 0, 0, 0, 0, 0, 0, 0, 0, 3141, 0, 0, 0, 0, 537,
  /* 40518 */ 537, 0, 2984, 0, 0, 537, 537, 2989, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1296, 537, 537, 537, 537,
  /* 40540 */ 537, 537, 537, 537, 537, 537, 3014, 537, 537, 3016, 537, 537, 537, 537, 537, 537, 537, 537, 537, 3170,
  /* 40560 */ 537, 537, 537, 537, 537, 537, 559, 559, 559, 559, 3055, 559, 559, 3057, 559, 559, 559, 559, 559, 559, 559,
  /* 40581 */ 559, 559, 2864, 559, 559, 559, 559, 559, 0, 3121, 0, 3123, 0, 0, 0, 3127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 556,
  /* 40607 */ 579, 556, 579, 556, 556, 579, 537, 3163, 3164, 537, 537, 537, 537, 3168, 3169, 537, 537, 537, 537, 537,
  /* 40627 */ 3173, 537, 537, 537, 537, 537, 3015, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2798, 537,
  /* 40647 */ 537, 537, 537, 3196, 559, 559, 559, 559, 559, 3200, 559, 559, 559, 559, 559, 559, 559, 559, 3206, 583,
  /* 40667 */ 583, 583, 3219, 3220, 583, 583, 583, 583, 3224, 3225, 583, 583, 583, 583, 583, 583, 2665, 583, 583, 583,
  /* 40687 */ 583, 583, 583, 2673, 583, 583, 3229, 583, 583, 583, 583, 583, 583, 583, 583, 3235, 583, 583, 583, 583,
  /* 40707 */ 583, 583, 583, 2889, 583, 583, 583, 583, 583, 583, 583, 583, 1976, 583, 583, 583, 583, 583, 583, 583, 0,
  /* 40728 */ 3251, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2437, 0, 0, 0, 0, 0, 3141, 0, 0, 3264, 0, 0, 0, 0, 0, 0,
  /* 40759 */ 0, 0, 1610, 0, 0, 0, 0, 0, 0, 0, 537, 3279, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 40783 */ 537, 537, 537, 3288, 537, 3352, 537, 537, 537, 537, 537, 537, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 40804 */ 559, 559, 559, 559, 3367, 559, 559, 559, 559, 559, 559, 559, 583, 583, 583, 583, 583, 583, 583, 583, 0,
  /* 40825 */ 3589, 3402, 537, 537, 537, 537, 3407, 537, 537, 537, 537, 3412, 537, 537, 559, 559, 3417, 559, 559, 559,
  /* 40845 */ 559, 3422, 559, 559, 559, 559, 3427, 559, 559, 559, 583, 583, 3433, 583, 583, 583, 583, 3438, 583, 583,
  /* 40865 */ 583, 583, 3443, 583, 583, 583, 0, 0, 0, 0, 537, 537, 537, 3572, 3573, 537, 537, 559, 559, 0, 0, 3450, 0,
  /* 40888 */ 0, 0, 0, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 3464, 537, 537, 3466, 559,
  /* 40910 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2866, 559, 559, 559, 0, 559, 3477, 559, 559, 3479, 559,
  /* 40931 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1532, 583, 0, 537, 583, 559, 583, 3491, 583, 583, 3493,
  /* 40952 */ 583, 0, 0, 0, 0, 0, 0, 0, 537, 537, 537, 537, 537, 537, 3274, 537, 537, 537, 559, 3578, 3579, 559, 559,
  /* 40975 */ 559, 583, 583, 583, 3584, 3585, 583, 583, 583, 0, 0, 0, 3604, 537, 537, 537, 3606, 559, 559, 559, 3608,
  /* 40996 */ 583, 3620, 3621, 537, 559, 583, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3148, 0, 0, 0, 0, 0, 344, 345, 346, 347,
  /* 41023 */ 348, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 0, 0, 0, 0, 393, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41055 */ 0, 0, 2718, 0, 2719, 0, 347, 347, 348, 347, 0, 346, 347, 451, 468, 468, 468, 468, 468, 468, 468, 468, 468,
  /* 41078 */ 468, 468, 468, 468, 468, 468, 468, 468, 468, 483, 492, 492, 500, 492, 502, 492, 492, 502, 502, 492, 502,
  /* 41099 */ 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 550, 573, 550, 573, 550,
  /* 41120 */ 550, 573, 550, 550, 597, 573, 573, 573, 573, 573, 550, 573, 573, 573, 597, 597, 550, 597, 1, 12290, 3,
  /* 41141 */ 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 2461696, 0, 0, 0, 0, 0, 0, 0, 0, 0, 301, 0,
  /* 41169 */ 0, 0, 0, 0, 0, 597, 597, 597, 597, 597, 597, 597, 597, 597, 573, 597, 573, 550, 573, 573, 597, 305, 306,
  /* 41192 */ 0, 0, 0, 0, 0, 0, 642, 0, 0, 0, 0, 647, 648, 649, 650, 651, 652, 653, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41222 */ 2732, 0, 0, 0, 0, 0, 668, 669, 0, 671, 672, 0, 0, 0, 0, 0, 678, 0, 0, 0, 0, 0, 0, 718, 0, 720, 0, 0, 0, 0,
  /* 41252 */ 0, 0, 0, 689, 0, 0, 0, 0, 0, 0, 367, 367, 712, 0, 0, 715, 0, 717, 0, 719, 0, 0, 0, 0, 0, 0, 0, 0, 1642, 0,
  /* 41282 */ 0, 0, 0, 0, 0, 0, 0, 729, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2734, 0, 757, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41315 */ 769, 770, 0, 0, 0, 757, 0, 0, 0, 0, 0, 2405, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2951, 0, 0, 0, 0, 0, 0, 0, 777,
  /* 41346 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 784, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 422, 422, 0, 0, 65536, 422, 0, 795,
  /* 41374 */ 0, 0, 688, 0, 0, 668, 0, 688, 0, 800, 671, 719, 0, 688, 801, 0, 0, 0, 0, 757, 0, 0, 0, 0, 0, 0, 0, 0, 750,
  /* 41403 */ 810, 811, 0, 0, 0, 0, 0, 0, 750, 0, 0, 815, 695, 0, 0, 0, 820, 0, 0, 0, 822, 0, 0, 0, 688, 695, 0, 0, 688,
  /* 41432 */ 820, 820, 0, 0, 0, 0, 0, 0, 2662400, 0, 2813952, 0, 0, 0, 0, 2375680, 0, 0, 0, 0, 0, 0, 1091, 1214, 0, 0,
  /* 41458 */ 0, 0, 0, 0, 1221, 0, 537, 537, 871, 874, 877, 537, 537, 537, 889, 893, 537, 537, 537, 537, 559, 559, 559,
  /* 41481 */ 3290, 559, 559, 559, 3293, 559, 559, 559, 559, 559, 559, 559, 2269, 2270, 559, 559, 559, 559, 559, 559,
  /* 41501 */ 559, 2243, 559, 559, 559, 559, 2248, 559, 559, 559, 559, 915, 919, 922, 559, 930, 559, 559, 559, 945, 948,
  /* 41522 */ 951, 559, 559, 559, 963, 967, 559, 559, 559, 559, 0, 583, 583, 583, 990, 994, 997, 583, 1005, 583, 583,
  /* 41543 */ 583, 583, 583, 2679, 2680, 583, 583, 583, 583, 583, 583, 583, 583, 583, 3316, 583, 583, 583, 583, 583,
  /* 41563 */ 583, 583, 1020, 1023, 1026, 583, 583, 583, 1038, 1042, 583, 583, 583, 583, 0, 0, 0, 0, 2703, 0, 0, 0,
  /* 41585 */ 2707, 0, 0, 0, 1054, 1055, 1056, 841, 537, 889, 893, 1061, 915, 559, 963, 967, 1066, 0, 990, 583, 583,
  /* 41606 */ 583, 583, 2341, 583, 583, 583, 583, 583, 583, 2347, 583, 2349, 583, 2352, 1038, 1042, 1071, 78117, 1072,
  /* 41625 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 131072, 0, 0, 0, 1107, 0, 0, 0, 0, 1111, 0, 0, 1114,
  /* 41654 */ 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 0, 135168, 135168, 0, 0, 65536, 135168, 1161, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41679 */ 0, 0, 0, 0, 0, 0, 0, 172032, 0, 0, 0, 1128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1192, 0, 0, 0, 0, 0, 2418, 0, 0,
  /* 41710 */ 0, 0, 0, 0, 0, 0, 0, 0, 1666, 0, 0, 0, 0, 0, 0, 537, 537, 537, 1304, 537, 537, 1308, 537, 537, 537, 537,
  /* 41736 */ 537, 537, 537, 537, 537, 1733, 537, 537, 537, 537, 537, 537, 537, 537, 1319, 537, 537, 1326, 537, 537,
  /* 41756 */ 537, 537, 537, 537, 537, 537, 537, 537, 537, 3285, 537, 537, 537, 537, 1339, 537, 537, 537, 537, 537, 537,
  /* 41777 */ 1348, 905, 559, 559, 559, 559, 559, 559, 559, 1428, 559, 559, 559, 559, 559, 559, 559, 559, 559, 3201,
  /* 41797 */ 559, 559, 559, 559, 559, 559, 1401, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1412, 559, 559,
  /* 41818 */ 1419, 1483, 583, 583, 583, 583, 583, 583, 583, 1490, 583, 583, 1494, 583, 583, 583, 583, 583, 1486, 583,
  /* 41838 */ 583, 583, 583, 583, 583, 583, 583, 1496, 583, 0, 0, 0, 1590, 1591, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 41863 */ 3125248, 3145728, 0, 0, 0, 2928640, 0, 744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1687, 0, 0, 1591,
  /* 41890 */ 0, 0, 0, 0, 0, 0, 537, 1718, 537, 537, 537, 537, 537, 537, 537, 2779, 537, 537, 537, 537, 537, 537, 2787,
  /* 41913 */ 537, 537, 1724, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 559, 559, 559, 537,
  /* 41934 */ 537, 1757, 537, 537, 1762, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1311, 537, 537, 537, 537,
  /* 41954 */ 537, 537, 537, 537, 1348, 0, 559, 1812, 559, 559, 559, 559, 559, 559, 559, 1819, 559, 559, 559, 559, 927,
  /* 41975 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 583, 3375, 583, 583, 3377, 559, 559, 1841, 559,
  /* 41995 */ 559, 559, 559, 559, 559, 559, 559, 1848, 559, 559, 559, 1852, 559, 559, 1857, 559, 559, 559, 559, 559,
  /* 42015 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 2303, 2624, 26017, 0, 583, 1908, 583, 583, 583, 583, 583,
  /* 42035 */ 583, 583, 1915, 583, 583, 583, 583, 583, 1487, 583, 583, 583, 1491, 583, 583, 583, 583, 583, 583, 583,
  /* 42055 */ 3324, 583, 583, 583, 537, 537, 559, 559, 583, 583, 583, 583, 1988, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 42076 */ 583, 537, 583, 559, 3244, 537, 3246, 559, 3248, 583, 0, 0, 1075, 0, 0, 0, 2017, 0, 1079, 0, 0, 0, 2019, 0,
  /* 42100 */ 1083, 0, 0, 0, 0, 0, 0, 2916352, 0, 3211264, 2465792, 0, 0, 2719744, 0, 0, 0, 0, 0, 0, 0, 1138688, 0, 367,
  /* 42124 */ 0, 0, 0, 1138688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1138688, 0, 0, 0, 0, 0, 2021, 0, 1087, 0, 0,
  /* 42153 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 131072, 0, 0, 0, 2056, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42183 */ 2747, 0, 537, 537, 537, 2556, 537, 537, 537, 0, 0, 0, 2559, 0, 1809, 559, 559, 559, 559, 559, 559, 3525,
  /* 42205 */ 559, 583, 583, 583, 3530, 583, 583, 583, 583, 583, 1488, 583, 583, 583, 583, 1493, 583, 583, 583, 583,
  /* 42225 */ 583, 583, 3098, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1977, 583, 583, 583, 583, 583, 583, 0, 2625,
  /* 42246 */ 0, 1905, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1196, 537, 583, 559, 583, 2688, 583,
  /* 42267 */ 583, 583, 537, 583, 559, 537, 537, 537, 537, 559, 559, 559, 559, 559, 3032, 559, 559, 559, 559, 559, 559,
  /* 42288 */ 559, 1830, 559, 559, 559, 559, 559, 559, 559, 559, 559, 3304, 559, 559, 559, 559, 583, 583, 2720, 0, 0, 0,
  /* 42310 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2138112, 2774, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 42335 */ 537, 537, 537, 537, 2513, 2821, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 42356 */ 1439, 0, 583, 2870, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2894, 583, 583, 0,
  /* 42377 */ 3122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2943, 0, 537, 3289, 559, 559, 559, 559, 559, 559, 559,
  /* 42403 */ 3294, 559, 559, 559, 559, 559, 559, 559, 2862, 559, 559, 2865, 559, 559, 2868, 559, 0, 537, 537, 537, 537,
  /* 42424 */ 3355, 537, 537, 537, 559, 559, 559, 3360, 559, 559, 559, 559, 559, 559, 2268, 559, 559, 559, 559, 559,
  /* 42444 */ 559, 559, 559, 559, 559, 1395, 559, 559, 559, 559, 1400, 3364, 559, 559, 559, 559, 559, 3370, 559, 559,
  /* 42464 */ 559, 559, 583, 583, 583, 3376, 583, 583, 583, 583, 2368, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 42485 */ 583, 1947, 583, 583, 583, 583, 583, 583, 583, 3380, 583, 583, 583, 583, 583, 3386, 583, 583, 583, 583,
  /* 42505 */ 537, 559, 559, 559, 559, 928, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1410, 559, 559, 559,
  /* 42526 */ 559, 537, 537, 537, 3405, 537, 537, 537, 3409, 537, 537, 537, 537, 537, 559, 559, 559, 559, 559, 583, 583,
  /* 42547 */ 583, 583, 583, 1072, 559, 559, 3420, 559, 559, 559, 3424, 559, 559, 559, 559, 559, 559, 583, 583, 583,
  /* 42567 */ 583, 583, 3074, 583, 583, 583, 583, 583, 583, 583, 583, 3436, 583, 583, 583, 3440, 583, 583, 583, 583,
  /* 42587 */ 583, 583, 0, 0, 0, 2702, 0, 0, 2705, 2706, 0, 0, 2709, 2710, 391, 0, 0, 0, 395, 391, 0, 0, 0, 0, 0, 0, 0,
  /* 42614 */ 0, 0, 0, 726, 0, 0, 0, 0, 0, 0, 0, 0, 0, 407, 0, 349, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0,
  /* 42643 */ 0, 2441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1226, 1256, 1257, 0, 1226, 0, 0, 0, 0, 0, 439, 0, 0, 0, 0, 0, 0, 0,
  /* 42673 */ 0, 0, 0, 0, 738, 0, 0, 0, 0, 738, 0, 518, 518, 518, 518, 0, 0, 0, 0, 0, 0, 0, 0, 0, 518, 518, 518, 518,
  /* 42701 */ 518, 518, 518, 518, 518, 551, 574, 551, 574, 551, 551, 574, 551, 551, 598, 574, 574, 574, 574, 574, 551,
  /* 42722 */ 574, 574, 574, 598, 598, 551, 598, 598, 598, 598, 598, 598, 598, 598, 598, 574, 598, 574, 613, 618, 618,
  /* 42743 */ 598, 624, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 0, 2924544, 0, 0, 0, 0,
  /* 42769 */ 0, 0, 0, 2732032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 305, 305, 0, 0, 0, 0, 0, 0, 675, 747, 0, 0, 0, 0, 0, 0, 0,
  /* 42800 */ 0, 0, 0, 0, 0, 163840, 0, 0, 0, 909, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 954, 559, 559,
  /* 42824 */ 559, 559, 559, 559, 3559, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2641, 583, 583, 583, 583, 583, 583,
  /* 42845 */ 559, 972, 559, 559, 559, 0, 583, 583, 984, 583, 583, 583, 583, 583, 583, 583, 1504, 583, 583, 583, 583,
  /* 42866 */ 583, 583, 583, 583, 1507, 583, 583, 583, 583, 583, 583, 583, 0, 1105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 42892 */ 0, 0, 2955, 0, 0, 0, 1179, 0, 0, 0, 1184, 0, 0, 0, 0, 1100, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 318, 319,
  /* 42919 */ 319, 424, 425, 65536, 432, 0, 0, 1210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2449, 0, 2450, 537, 537,
  /* 42945 */ 537, 1262, 537, 537, 537, 537, 537, 537, 537, 537, 1275, 537, 537, 537, 537, 537, 537, 3002, 537, 537,
  /* 42965 */ 537, 537, 537, 537, 537, 537, 3010, 537, 1285, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 42986 */ 537, 1299, 537, 537, 537, 1321, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1337, 559, 559,
  /* 43006 */ 1402, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1414, 559, 559, 559, 559, 559, 2578, 559, 2580,
  /* 43026 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 1895, 1897, 559, 559, 559, 559, 559, 559, 26017, 1348, 980,
  /* 43046 */ 583, 583, 583, 1447, 583, 583, 583, 583, 583, 583, 583, 583, 1960, 1961, 1962, 583, 583, 1965, 1966, 583,
  /* 43066 */ 583, 1461, 583, 583, 583, 583, 1471, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2911, 583, 583, 2914,
  /* 43086 */ 583, 583, 2917, 0, 1552, 0, 0, 0, 1558, 0, 0, 0, 1564, 0, 0, 0, 1570, 0, 0, 0, 0, 0, 308, 0, 0, 0, 0, 0,
  /* 43114 */ 0, 0, 0, 0, 0, 374, 0, 0, 375, 0, 0, 0, 0, 0, 0, 1638, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1126, 0, 0, 0, 0,
  /* 43146 */ 0, 0, 0, 0, 0, 0, 1653, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1185, 0, 1188, 0, 0, 0, 0, 0, 1193, 0, 0, 0, 0, 1559,
  /* 43176 */ 0, 0, 0, 0, 0, 1565, 0, 0, 0, 0, 0, 0, 0, 2432, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 172032, 0, 172032, 172032,
  /* 43203 */ 172032, 172032, 172032, 2095, 0, 0, 0, 0, 0, 2101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1170, 0, 0, 0, 0, 0, 0, 537,
  /* 43230 */ 537, 537, 2168, 537, 537, 537, 537, 2172, 537, 2174, 537, 537, 537, 537, 537, 537, 537, 2804, 537, 537,
  /* 43250 */ 537, 537, 537, 537, 537, 537, 537, 3018, 3020, 537, 537, 537, 3023, 537, 559, 559, 2253, 559, 559, 559,
  /* 43270 */ 559, 2257, 559, 2259, 559, 559, 559, 559, 559, 559, 559, 3043, 559, 559, 559, 559, 559, 3049, 559, 559,
  /* 43290 */ 583, 583, 2340, 583, 583, 583, 583, 2344, 583, 2346, 583, 583, 583, 583, 583, 583, 583, 2910, 583, 583,
  /* 43310 */ 583, 583, 583, 583, 583, 583, 3234, 583, 3236, 583, 583, 583, 583, 583, 2307, 0, 0, 0, 583, 583, 583, 583,
  /* 43332 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 2321, 583, 583, 583, 2663, 583, 583, 583, 583, 583, 583, 583,
  /* 43353 */ 583, 583, 583, 583, 583, 1514, 583, 583, 1518, 0, 0, 2985, 0, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 43375 */ 537, 537, 537, 537, 3286, 537, 537, 583, 3330, 0, 0, 0, 3332, 0, 0, 0, 0, 0, 0, 3141, 3339, 0, 0, 0, 0, 0,
  /* 43401 */ 330, 0, 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 3341, 0, 0, 0, 0, 0, 537, 3344, 537, 537, 3346, 537, 537,
  /* 43425 */ 537, 537, 537, 537, 537, 2815, 537, 537, 537, 537, 537, 0, 0, 559, 745, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 43451 */ 0, 0, 0, 0, 106496, 0, 0, 0, 786, 0, 0, 0, 0, 0, 537, 537, 537, 537, 537, 852, 537, 537, 537, 537, 537,
  /* 43476 */ 1729, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1741, 583, 583, 583, 78117, 1072, 0, 0, 1076, 1080, 0,
  /* 43497 */ 0, 1084, 1088, 0, 0, 0, 0, 0, 0, 735, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1202, 0, 0, 0, 0, 0, 0, 537, 537, 537,
  /* 43526 */ 1348, 1810, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2570, 559, 559, 2573, 26017, 1906,
  /* 43546 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2903, 583, 583, 559, 559, 3198, 559,
  /* 43567 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2304, 0, 350, 350, 352, 350, 0, 0, 350,
  /* 43589 */ 350, 0, 0, 0, 0, 351, 0, 0, 0, 0, 0, 0, 776, 0, 788, 0, 805, 0, 0, 0, 0, 796, 0, 0, 0, 350, 350, 352, 350,
  /* 43618 */ 350, 350, 350, 350, 350, 509, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350, 350,
  /* 43639 */ 350, 552, 575, 552, 575, 552, 552, 575, 552, 552, 599, 575, 575, 575, 575, 575, 552, 575, 575, 575, 599,
  /* 43660 */ 599, 552, 599, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 331, 0, 0, 0, 0, 0,
  /* 43687 */ 0, 0, 0, 0, 0, 1113, 0, 0, 0, 0, 0, 599, 599, 599, 599, 599, 599, 599, 599, 599, 575, 599, 575, 552, 575,
  /* 43712 */ 575, 599, 0, 0, 0, 761, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266240, 0, 0, 0, 0, 0, 676, 0, 0, 0, 0, 0, 0,
  /* 43743 */ 0, 0, 0, 0, 0, 0, 0, 2474, 2475, 0, 0, 0, 0, 797, 798, 0, 0, 0, 0, 798, 0, 0, 0, 0, 0, 798, 0, 0, 797, 0,
  /* 43773 */ 0, 0, 0, 0, 751, 0, 0, 806, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 163840, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 812,
  /* 43801 */ 0, 806, 0, 660, 0, 0, 0, 0, 0, 0, 0, 0, 2063, 0, 0, 0, 2066, 0, 0, 0, 0, 0, 0, 0, 823, 0, 0, 0, 0, 0, 0,
  /* 43832 */ 798, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 167936, 0, 0, 0, 0, 65536, 0, 910, 916, 559, 559, 559, 559, 934,
  /* 43856 */ 559, 559, 559, 559, 559, 955, 957, 559, 559, 559, 559, 559, 2606, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 43877 */ 559, 559, 559, 1880, 559, 559, 559, 559, 968, 559, 559, 559, 559, 0, 583, 583, 985, 991, 583, 583, 583,
  /* 43898 */ 583, 1009, 583, 583, 583, 583, 2381, 583, 2383, 583, 583, 583, 583, 583, 583, 583, 537, 583, 559, 537,
  /* 43918 */ 2694, 537, 537, 559, 2696, 559, 559, 537, 583, 559, 842, 883, 537, 894, 537, 916, 957, 559, 968, 559, 0,
  /* 43939 */ 991, 1032, 583, 1043, 583, 78117, 1072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1216, 0, 0, 0, 0, 0, 0, 0, 1146,
  /* 43966 */ 0, 1148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 274432, 274432, 0, 274432, 0, 1162, 0, 1164, 0, 0, 0, 0,
  /* 43992 */ 1169, 0, 0, 0, 0, 1174, 0, 0, 0, 0, 0, 333, 334, 335, 0, 0, 0, 0, 0, 0, 0, 0, 1215, 0, 0, 0, 0, 1220, 0,
  /* 44021 */ 0, 0, 0, 1250, 0, 0, 0, 0, 1253, 0, 0, 0, 0, 0, 0, 0, 1174, 537, 1317, 537, 537, 537, 537, 537, 537, 537,
  /* 44047 */ 1331, 537, 537, 537, 537, 537, 537, 537, 1747, 537, 537, 537, 537, 537, 537, 537, 537, 559, 3359, 559,
  /* 44067 */ 559, 3361, 559, 559, 559, 537, 537, 1342, 1343, 537, 537, 537, 1348, 905, 559, 559, 559, 559, 1355, 559,
  /* 44087 */ 559, 559, 559, 559, 2618, 559, 559, 559, 559, 559, 559, 559, 559, 0, 2624, 1385, 1387, 559, 559, 559, 559,
  /* 44108 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2624, 559, 559, 559, 1424, 559, 559, 559, 559, 559,
  /* 44129 */ 559, 559, 559, 1435, 1436, 559, 559, 559, 559, 559, 2840, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 44149 */ 559, 559, 3047, 559, 559, 559, 559, 559, 26017, 1348, 980, 583, 583, 583, 583, 1448, 583, 583, 583, 583,
  /* 44169 */ 583, 583, 583, 1505, 583, 583, 1512, 583, 583, 583, 583, 583, 537, 1537, 537, 537, 1540, 559, 1541, 559,
  /* 44189 */ 559, 1544, 583, 1545, 583, 583, 1548, 1072, 0, 0, 1620, 0, 0, 0, 0, 0, 1626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44216 */ 0, 0, 0, 0, 167936, 167936, 537, 1789, 537, 537, 537, 537, 537, 537, 537, 537, 1797, 537, 537, 537, 537,
  /* 44237 */ 1803, 537, 537, 537, 1348, 0, 559, 559, 559, 559, 559, 559, 559, 1817, 559, 559, 559, 559, 559, 559, 3582,
  /* 44258 */ 583, 583, 583, 583, 583, 583, 583, 0, 0, 2701, 0, 0, 0, 0, 0, 0, 0, 0, 0, 389, 0, 0, 0, 0, 0, 389, 559,
  /* 44285 */ 559, 559, 559, 1842, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2584, 559, 559, 559,
  /* 44305 */ 26017, 0, 583, 583, 583, 583, 583, 583, 583, 1913, 583, 583, 583, 583, 583, 583, 583, 3222, 583, 583, 583,
  /* 44326 */ 583, 583, 583, 583, 583, 1509, 583, 583, 583, 583, 583, 583, 583, 583, 1938, 583, 583, 583, 583, 583, 583,
  /* 44347 */ 583, 583, 583, 583, 583, 583, 583, 583, 2915, 583, 583, 2043, 2044, 0, 2046, 2047, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44371 */ 0, 0, 0, 1255, 0, 0, 0, 0, 0, 0, 2083, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176128, 176128, 2111,
  /* 44400 */ 2112, 0, 2114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2122, 0, 0, 2127, 2128, 0, 0, 0, 0, 0, 2132, 0, 0, 0, 0, 0,
  /* 44429 */ 0, 0, 2138, 537, 537, 537, 537, 537, 537, 2145, 537, 537, 537, 537, 537, 537, 2156, 537, 537, 537, 537,
  /* 44450 */ 537, 537, 537, 537, 537, 537, 2782, 537, 537, 2786, 537, 537, 2180, 537, 537, 537, 537, 537, 537, 537,
  /* 44470 */ 537, 537, 537, 537, 537, 2187, 537, 537, 537, 537, 537, 1746, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 44490 */ 1753, 537, 537, 537, 537, 2193, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 3415,
  /* 44510 */ 559, 559, 0, 0, 2222, 559, 559, 559, 559, 559, 559, 559, 2230, 559, 559, 559, 559, 559, 559, 559, 3303,
  /* 44531 */ 559, 559, 559, 559, 559, 559, 583, 583, 3071, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2669, 583, 583,
  /* 44552 */ 583, 583, 583, 583, 559, 559, 559, 559, 2254, 559, 559, 559, 559, 559, 559, 2260, 559, 2262, 559, 2265,
  /* 44572 */ 559, 559, 2279, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2572, 559, 0, 0,
  /* 44593 */ 2309, 583, 583, 583, 583, 583, 583, 583, 2317, 583, 583, 583, 583, 583, 583, 2899, 583, 583, 583, 583,
  /* 44613 */ 583, 583, 583, 583, 583, 559, 583, 559, 537, 559, 559, 583, 583, 583, 2366, 583, 583, 583, 583, 583, 583,
  /* 44634 */ 583, 583, 583, 583, 583, 583, 583, 3104, 583, 583, 0, 2452, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2460, 0, 0, 0, 0,
  /* 44660 */ 0, 0, 0, 69632, 73728, 172032, 0, 0, 0, 0, 65536, 0, 537, 537, 2528, 537, 537, 537, 537, 537, 537, 537,
  /* 44682 */ 537, 537, 537, 537, 537, 537, 1335, 537, 537, 559, 559, 559, 2576, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 44703 */ 559, 559, 559, 559, 559, 1850, 559, 559, 2697, 583, 583, 583, 2699, 2700, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 44727 */ 1582, 1583, 0, 0, 0, 0, 0, 537, 537, 537, 537, 2777, 537, 2778, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 44749 */ 537, 1796, 537, 537, 537, 537, 537, 537, 559, 559, 559, 559, 2824, 559, 2825, 559, 559, 559, 559, 559,
  /* 44769 */ 559, 559, 559, 559, 559, 2595, 559, 559, 559, 559, 559, 0, 0, 0, 0, 537, 2988, 537, 537, 537, 537, 537,
  /* 44791 */ 537, 537, 537, 537, 537, 1735, 537, 537, 537, 537, 537, 537, 537, 537, 559, 3028, 559, 559, 559, 559, 559,
  /* 44812 */ 559, 559, 559, 559, 559, 559, 559, 2597, 559, 559, 559, 537, 537, 537, 537, 537, 3356, 537, 537, 3358,
  /* 44832 */ 559, 559, 559, 559, 3362, 559, 559, 559, 559, 559, 2861, 559, 559, 559, 559, 559, 559, 559, 559, 559, 0,
  /* 44853 */ 583, 583, 583, 583, 583, 583, 1003, 583, 583, 583, 3378, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 44873 */ 3387, 583, 583, 583, 537, 559, 559, 559, 559, 977, 0, 583, 583, 583, 583, 583, 583, 1001, 583, 583, 583,
  /* 44894 */ 583, 583, 2342, 583, 583, 2345, 583, 583, 583, 583, 583, 583, 583, 1930, 583, 583, 583, 583, 583, 583,
  /* 44914 */ 583, 583, 1044, 583, 583, 583, 583, 0, 0, 0, 0, 0, 0, 3451, 0, 3453, 0, 537, 537, 537, 537, 537, 3458,
  /* 44937 */ 537, 537, 537, 537, 537, 537, 3167, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 3005, 537, 537, 537,
  /* 44958 */ 537, 537, 559, 559, 559, 3580, 559, 559, 583, 583, 583, 583, 583, 3586, 583, 583, 3588, 0, 0, 0, 0, 0,
  /* 44980 */ 2456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1667, 0, 0, 0, 0, 0, 3590, 537, 537, 537, 537, 537, 537, 559, 559,
  /* 45006 */ 559, 559, 559, 559, 583, 583, 583, 583, 3073, 583, 583, 583, 583, 3077, 583, 583, 0, 0, 0, 0, 396, 397, 0,
  /* 45029 */ 398, 0, 0, 0, 0, 0, 398, 0, 0, 0, 0, 0, 353, 0, 0, 370, 0, 0, 398, 403, 0, 0, 0, 0, 0, 370, 378, 406, 0,
  /* 45058 */ 0, 0, 0, 0, 370, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221184, 0, 0, 0, 411, 413, 0, 0, 370, 378,
  /* 45088 */ 0, 69632, 73728, 0, 0, 0, 0, 429, 65536, 0, 0, 0, 0, 0, 2481, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 537, 537,
  /* 45115 */ 3160, 537, 537, 537, 429, 429, 0, 429, 0, 413, 429, 452, 0, 0, 0, 0, 0, 0, 0, 370, 0, 411, 0, 493, 493, 0,
  /* 45141 */ 493, 493, 493, 493, 493, 493, 493, 493, 519, 519, 519, 519, 452, 452, 452, 452, 527, 452, 452, 528, 452,
  /* 45162 */ 519, 533, 519, 519, 519, 533, 519, 519, 519, 519, 519, 535, 553, 576, 553, 576, 553, 553, 576, 553, 553,
  /* 45183 */ 600, 576, 576, 576, 576, 576, 553, 576, 576, 576, 600, 600, 553, 600, 600, 600, 600, 600, 600, 600, 600,
  /* 45204 */ 600, 576, 600, 576, 614, 619, 619, 600, 625, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0,
  /* 45227 */ 0, 0, 0, 0, 349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 691, 0, 0, 0, 0, 367, 367, 305, 306, 0, 0, 0, 639, 0, 0, 0,
  /* 45258 */ 0, 0, 0, 0, 0, 0, 0, 1595, 0, 0, 0, 0, 0, 0, 0, 792, 0, 0, 773, 0, 0, 0, 0, 792, 0, 0, 0, 0, 0, 0, 0, 792,
  /* 45290 */ 0, 0, 0, 0, 0, 0, 773, 0, 792, 0, 0, 0, 0, 537, 837, 537, 537, 537, 537, 537, 537, 537, 1764, 537, 537,
  /* 45315 */ 537, 537, 537, 537, 537, 537, 537, 3004, 537, 537, 537, 537, 537, 537, 866, 868, 537, 537, 537, 537, 537,
  /* 45336 */ 537, 537, 537, 537, 537, 537, 537, 559, 559, 559, 559, 559, 3042, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 45357 */ 3050, 559, 911, 559, 559, 559, 559, 559, 559, 940, 942, 559, 559, 559, 559, 559, 559, 559, 1893, 559, 559,
  /* 45378 */ 559, 559, 1899, 559, 559, 559, 1017, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 0, 0, 0,
  /* 45400 */ 537, 537, 537, 537, 559, 559, 559, 559, 583, 583, 583, 583, 0, 0, 1553, 0, 1089, 0, 0, 1091, 0, 0, 0, 0,
  /* 45424 */ 0, 0, 0, 0, 0, 0, 0, 0, 2445312, 0, 2846720, 0, 1104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225711,
  /* 45453 */ 0, 0, 0, 1147, 0, 0, 0, 0, 0, 1153, 0, 1155, 0, 0, 0, 0, 0, 0, 0, 2443, 0, 0, 0, 0, 0, 0, 0, 0, 3146, 0,
  /* 45483 */ 0, 0, 3149, 3150, 0, 0, 0, 1226, 1235, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2733, 0, 0, 1284, 537, 537,
  /* 45511 */ 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2541, 1301, 537, 537, 537, 1305, 537,
  /* 45531 */ 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1752, 537, 537, 537, 1358, 559, 559, 559, 1362,
  /* 45551 */ 559, 559, 1373, 559, 559, 1377, 559, 559, 559, 559, 559, 559, 559, 3371, 559, 559, 559, 3374, 583, 583,
  /* 45571 */ 583, 583, 559, 26017, 1348, 980, 583, 583, 583, 583, 583, 583, 583, 1451, 583, 583, 583, 1455, 583, 583,
  /* 45591 */ 1466, 583, 583, 1470, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2670, 583, 583, 583, 583, 583, 0,
  /* 45612 */ 1635, 0, 0, 0, 1639, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1656, 0, 1658, 0, 0, 0, 1660, 583, 583, 583, 1924, 583,
  /* 45639 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2348, 583, 583, 583, 0, 0, 2057, 0, 0, 0, 0, 0, 0,
  /* 45663 */ 0, 0, 0, 0, 0, 0, 0, 2761, 0, 0, 0, 0, 2137, 0, 537, 537, 2140, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 45688 */ 537, 2198, 537, 537, 537, 537, 537, 537, 537, 537, 2205, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 45709 */ 537, 0, 0, 2220, 0, 0, 0, 559, 559, 559, 0, 0, 559, 559, 2224, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 45732 */ 559, 559, 559, 559, 2867, 559, 559, 0, 559, 559, 559, 559, 2281, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 45753 */ 559, 559, 559, 559, 3062, 559, 559, 559, 559, 559, 2292, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 45774 */ 559, 0, 0, 0, 0, 0, 358, 0, 0, 469, 469, 469, 469, 469, 469, 469, 469, 474, 469, 469, 469, 469, 469, 469,
  /* 45798 */ 469, 469, 469, 469, 469, 474, 0, 0, 583, 583, 2311, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 45820 */ 1933, 583, 583, 583, 583, 583, 583, 2379, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 537, 583,
  /* 45841 */ 559, 2921, 537, 2923, 559, 2925, 583, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3337, 3141, 0, 0, 0, 1559, 0, 1565, 0,
  /* 45867 */ 1571, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2967, 0, 0, 0, 0, 2491, 0, 0, 0, 0, 0, 537, 537, 537,
  /* 45897 */ 537, 537, 537, 537, 2994, 537, 537, 537, 537, 537, 537, 537, 2529, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 45918 */ 537, 2539, 537, 537, 537, 537, 537, 1776, 1777, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2806,
  /* 45938 */ 537, 537, 537, 537, 537, 559, 559, 559, 2604, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 45959 */ 559, 1900, 559, 559, 0, 0, 2751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2771, 0, 537, 2307, 583, 583, 583,
  /* 45986 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 3228, 0, 0, 0, 3142, 0, 0, 0, 3145, 0, 0, 0,
  /* 46010 */ 0, 0, 0, 0, 0, 2937, 0, 0, 0, 2941, 0, 0, 0, 3153, 0, 0, 0, 0, 0, 0, 3156, 0, 3158, 537, 537, 537, 537,
  /* 46037 */ 537, 537, 537, 1778, 537, 537, 1781, 537, 537, 537, 537, 537, 559, 559, 3209, 559, 559, 559, 559, 559,
  /* 46057 */ 559, 559, 559, 559, 583, 583, 583, 583, 3531, 583, 583, 583, 0, 0, 0, 0, 3254, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46083 */ 0, 0, 2076, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3141, 0, 3263, 0, 0, 0, 0, 3267, 0, 0, 0, 0, 0, 0, 0, 106496, 0,
  /* 46113 */ 106496, 0, 0, 0, 0, 106496, 0, 0, 0, 0, 0, 3270, 0, 537, 537, 537, 3272, 537, 537, 537, 3275, 537, 537,
  /* 46136 */ 537, 537, 537, 1793, 537, 537, 537, 537, 537, 1798, 537, 537, 537, 537, 537, 537, 1292, 1294, 537, 537,
  /* 46156 */ 537, 537, 537, 537, 537, 537, 537, 3551, 559, 559, 559, 559, 559, 559, 583, 3309, 583, 583, 583, 3312,
  /* 46176 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2891, 583, 583, 583, 583, 583, 3351, 537, 3353, 537,
  /* 46196 */ 537, 537, 537, 537, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 0, 0,
  /* 46218 */ 559, 559, 3366, 559, 3368, 559, 559, 559, 559, 559, 559, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 46239 */ 583, 583, 559, 559, 559, 559, 3523, 559, 559, 559, 583, 583, 583, 583, 583, 583, 583, 583, 1994, 583, 583,
  /* 46260 */ 583, 583, 1733, 1924, 1828, 583, 583, 3536, 583, 583, 583, 0, 3540, 0, 0, 0, 0, 0, 537, 537, 3545, 537,
  /* 46282 */ 3546, 537, 537, 537, 537, 537, 537, 537, 559, 559, 3552, 559, 3553, 559, 559, 559, 559, 559, 3056, 559,
  /* 46302 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2569, 559, 559, 559, 559, 412, 358, 0, 0, 0, 0, 0,
  /* 46324 */ 69632, 73728, 0, 0, 0, 0, 0, 65536, 0, 0, 0, 0, 0, 2493, 0, 0, 0, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 46349 */ 1309, 537, 537, 537, 537, 537, 537, 537, 537, 1329, 537, 537, 537, 537, 537, 1336, 537, 469, 480, 469, 0,
  /* 46370 */ 0, 469, 0, 0, 0, 0, 0, 0, 0, 0, 520, 520, 524, 524, 524, 524, 469, 469, 469, 469, 469, 469, 469, 474, 469,
  /* 46395 */ 524, 520, 524, 524, 520, 524, 524, 524, 524, 524, 536, 554, 577, 554, 577, 554, 554, 577, 554, 554, 601,
  /* 46416 */ 577, 577, 577, 577, 577, 554, 577, 577, 577, 601, 601, 554, 601, 601, 601, 601, 601, 601, 601, 601, 601,
  /* 46437 */ 577, 601, 577, 615, 620, 620, 601, 626, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0,
  /* 46461 */ 0, 0, 378, 0, 0, 0, 0, 370, 0, 387, 0, 353, 0, 305, 306, 0, 0, 0, 0, 640, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2118,
  /* 46491 */ 2119, 0, 0, 2121, 0, 0, 0, 683, 684, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 367, 367, 0, 0, 0, 0, 1143, 1101, 0,
  /* 46520 */ 0, 0, 0, 780, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 789, 0, 0, 0, 0, 0, 2713, 0, 0, 0, 0, 0, 2717, 0, 0, 0, 0, 0,
  /* 46552 */ 0, 0, 69632, 73728, 0, 372, 372, 0, 0, 65536, 372, 794, 0, 0, 0, 0, 0, 0, 794, 0, 0, 0, 0, 0, 0, 794, 0,
  /* 46579 */ 0, 0, 0, 0, 2740, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1228, 0, 0, 0, 0, 1231, 0, 0, 661, 0, 0, 0, 0, 809, 0, 0,
  /* 46610 */ 0, 0, 0, 640, 0, 0, 0, 789, 0, 794, 0, 780, 0, 809, 0, 0, 640, 0, 0, 780, 794, 832, 0, 537, 838, 537, 537,
  /* 46637 */ 537, 537, 857, 861, 867, 537, 872, 537, 537, 537, 537, 537, 890, 537, 537, 537, 537, 537, 559, 559, 559,
  /* 46658 */ 559, 559, 3199, 559, 559, 559, 559, 559, 559, 559, 559, 3205, 559, 912, 559, 559, 559, 559, 931, 935, 941,
  /* 46679 */ 559, 946, 559, 559, 559, 559, 559, 964, 583, 1021, 583, 583, 583, 583, 583, 1039, 583, 583, 583, 583, 583,
  /* 46700 */ 0, 0, 0, 537, 537, 537, 3605, 559, 559, 559, 3607, 583, 583, 1039, 583, 583, 78117, 1072, 0, 0, 0, 0, 0,
  /* 46723 */ 0, 0, 0, 0, 0, 0, 2130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1092, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2407, 0, 0,
  /* 46755 */ 0, 0, 0, 0, 0, 0, 1119, 0, 0, 0, 1123, 1124, 0, 0, 0, 0, 0, 0, 0, 0, 2961, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 46786 */ 1211, 0, 0, 1092, 0, 0, 0, 1217, 0, 1219, 0, 0, 0, 0, 0, 0, 780, 0, 0, 0, 0, 0, 0, 0, 780, 780, 0, 1233,
  /* 46814 */ 0, 1236, 1193, 0, 1217, 1239, 0, 1242, 0, 0, 0, 0, 0, 1123, 0, 0, 0, 0, 1251, 0, 0, 0, 0, 0, 1251, 0, 0,
  /* 46841 */ 1142, 1251, 0, 0, 0, 0, 0, 2948, 0, 0, 2950, 0, 0, 0, 0, 0, 0, 0, 826, 537, 537, 537, 537, 847, 537, 855,
  /* 46867 */ 537, 1258, 537, 537, 537, 537, 1264, 537, 537, 537, 537, 1270, 537, 537, 537, 537, 537, 537, 537, 3511,
  /* 46887 */ 537, 537, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 3194, 559, 1302, 537, 537, 537, 537,
  /* 46908 */ 1307, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1315, 537, 537, 537, 1322, 1324, 537, 537, 537, 537,
  /* 46928 */ 537, 537, 537, 537, 537, 537, 537, 537, 1800, 537, 537, 537, 559, 26017, 1348, 980, 1443, 583, 583, 583,
  /* 46948 */ 583, 583, 1450, 583, 583, 583, 583, 1456, 0, 0, 1553, 0, 0, 0, 1559, 0, 0, 0, 1565, 0, 0, 0, 1571, 0, 0,
  /* 46973 */ 0, 0, 0, 2973, 2974, 0, 0, 0, 0, 2979, 0, 0, 0, 0, 0, 0, 0, 69632, 73728, 266240, 0, 0, 0, 0, 65536, 0,
  /* 46999 */ 1589, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 233472, 0, 0, 0, 1636, 1637, 0, 0, 0, 0, 0, 0, 1644, 0,
  /* 47029 */ 0, 0, 0, 0, 0, 0, 2458, 0, 0, 0, 0, 0, 0, 0, 0, 1680, 1681, 1682, 1683, 0, 0, 0, 0, 0, 0, 0, 1674, 0, 0,
  /* 47058 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2485, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1690, 1691, 0, 0, 0, 1694, 0, 0, 0, 0,
  /* 47089 */ 0, 1698, 0, 0, 1701, 0, 0, 0, 0, 0, 0, 0, 1698, 0, 0, 0, 0, 0, 0, 0, 2468, 0, 0, 0, 0, 0, 0, 0, 0, 2103,
  /* 47119 */ 0, 0, 0, 0, 0, 0, 0, 537, 537, 537, 537, 1728, 537, 537, 537, 537, 1734, 537, 537, 537, 537, 537, 537,
  /* 47142 */ 537, 2171, 537, 537, 537, 537, 537, 537, 537, 537, 537, 3181, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 47163 */ 537, 1745, 537, 537, 537, 537, 1749, 537, 537, 537, 537, 537, 537, 537, 2182, 537, 537, 537, 537, 537,
  /* 47183 */ 537, 537, 537, 537, 2817, 537, 537, 537, 0, 0, 559, 537, 537, 537, 537, 1760, 537, 537, 537, 1765, 537,
  /* 47204 */ 537, 537, 537, 537, 537, 537, 537, 3512, 537, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 3297,
  /* 47225 */ 559, 559, 559, 537, 537, 537, 1791, 1792, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 47245 */ 2186, 537, 537, 537, 559, 1823, 559, 559, 559, 559, 1829, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 47265 */ 559, 2853, 559, 559, 559, 2856, 559, 559, 1840, 559, 559, 559, 559, 1844, 559, 559, 559, 559, 559, 559,
  /* 47285 */ 559, 559, 559, 559, 3046, 559, 3048, 559, 559, 559, 559, 1855, 559, 559, 559, 1860, 559, 559, 559, 559,
  /* 47305 */ 559, 559, 559, 559, 559, 559, 559, 3203, 559, 559, 559, 559, 1887, 1888, 559, 559, 559, 559, 559, 559,
  /* 47325 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 2835, 26017, 0, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 47346 */ 583, 583, 583, 1919, 583, 583, 583, 583, 2637, 583, 583, 583, 583, 583, 2642, 583, 583, 583, 583, 583,
  /* 47366 */ 583, 3084, 583, 583, 583, 583, 583, 583, 583, 583, 3092, 583, 583, 583, 1925, 583, 583, 583, 583, 583,
  /* 47386 */ 583, 583, 583, 583, 583, 1936, 583, 583, 583, 583, 2651, 583, 583, 583, 583, 583, 583, 583, 583, 2657,
  /* 47406 */ 583, 583, 0, 537, 3610, 559, 3611, 583, 3612, 537, 559, 583, 537, 559, 583, 537, 583, 583, 583, 1940, 583,
  /* 47427 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 1951, 583, 583, 583, 583, 2689, 537, 583, 559, 537, 537, 537,
  /* 47448 */ 537, 559, 559, 559, 559, 3031, 559, 559, 559, 559, 3035, 559, 559, 559, 583, 583, 1956, 583, 583, 583,
  /* 47468 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 3447, 0, 3448, 537, 2003, 537, 537, 559, 2007, 559, 559,
  /* 47489 */ 583, 2011, 583, 583, 0, 0, 0, 0, 0, 0, 0, 0, 3141, 0, 0, 0, 0, 3400, 537, 0, 0, 2045, 0, 0, 0, 0, 0, 0, 0,
  /* 47518 */ 0, 0, 0, 0, 0, 0, 2942, 0, 0, 0, 0, 0, 0, 2059, 0, 0, 0, 0, 2064, 2065, 0, 0, 2067, 2068, 0, 0, 0, 0, 0,
  /* 47547 */ 3126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1171, 0, 0, 0, 0, 0, 0, 0, 0, 2086, 0, 0, 0, 0, 0, 2090, 0, 0, 0, 0,
  /* 47578 */ 2093, 2094, 537, 537, 537, 537, 2153, 537, 537, 2157, 537, 537, 537, 2161, 537, 537, 537, 537, 537, 537,
  /* 47598 */ 2181, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2818, 537, 537, 0, 0, 559, 2203, 537, 537, 537,
  /* 47619 */ 537, 2208, 537, 537, 537, 537, 537, 537, 537, 537, 0, 0, 0, 0, 0, 388, 0, 69632, 73728, 0, 0, 0, 0, 0,
  /* 47643 */ 65536, 0, 2220, 0, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 3051, 559,
  /* 47664 */ 559, 559, 2238, 559, 559, 2242, 559, 559, 559, 2246, 559, 559, 559, 559, 559, 559, 583, 3482, 583, 3483,
  /* 47684 */ 583, 583, 583, 3487, 583, 583, 2290, 559, 559, 559, 559, 2295, 559, 559, 559, 559, 559, 559, 559, 559, 0,
  /* 47705 */ 0, 0, 0, 0, 444, 0, 0, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470,
  /* 47728 */ 555, 578, 555, 578, 555, 555, 578, 2307, 0, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 47749 */ 583, 583, 2360, 583, 583, 583, 583, 583, 583, 2325, 583, 583, 2329, 583, 583, 583, 2333, 583, 583, 583,
  /* 47769 */ 583, 583, 583, 3233, 583, 583, 583, 583, 583, 583, 583, 583, 3241, 2377, 583, 583, 583, 583, 2382, 583,
  /* 47789 */ 583, 583, 583, 583, 583, 583, 583, 537, 583, 559, 537, 537, 890, 537, 537, 559, 559, 964, 559, 559, 0,
  /* 47810 */ 583, 583, 583, 583, 583, 2887, 583, 583, 2890, 583, 583, 583, 583, 583, 583, 583, 1473, 583, 583, 583,
  /* 47830 */ 583, 583, 583, 583, 583, 1045, 583, 583, 583, 583, 0, 0, 0, 0, 0, 0, 0, 2417, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 47857 */ 0, 0, 2729, 2730, 0, 0, 0, 0, 0, 0, 0, 2453, 0, 0, 0, 2457, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2743, 0, 0, 0, 0,
  /* 47887 */ 0, 0, 0, 0, 2490, 0, 0, 0, 0, 0, 0, 537, 537, 2497, 537, 537, 537, 537, 537, 537, 2505, 537, 537, 537,
  /* 47911 */ 537, 537, 537, 537, 537, 537, 2212, 537, 537, 537, 537, 0, 0, 2526, 537, 537, 537, 537, 537, 537, 537,
  /* 47932 */ 2533, 537, 537, 2537, 537, 537, 537, 537, 537, 537, 2532, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 47952 */ 1780, 537, 537, 537, 537, 537, 537, 2587, 559, 559, 2589, 559, 2590, 559, 559, 559, 559, 559, 559, 559,
  /* 47972 */ 559, 2598, 559, 559, 559, 559, 1363, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 1384, 559, 2602,
  /* 47992 */ 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 2613, 2614, 0, 0, 0, 0, 583, 583, 2627, 583,
  /* 48014 */ 583, 583, 583, 583, 583, 583, 583, 583, 3100, 583, 3102, 583, 583, 583, 583, 583, 583, 2635, 583, 583,
  /* 48034 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2374, 2375, 2376, 583, 583, 583, 583, 2650, 583,
  /* 48054 */ 583, 583, 2653, 583, 583, 2655, 583, 2656, 583, 583, 583, 583, 583, 2354, 583, 583, 583, 583, 583, 583,
  /* 48074 */ 583, 583, 583, 583, 583, 2913, 583, 583, 583, 583, 0, 2750, 0, 0, 0, 2754, 0, 2756, 0, 0, 0, 0, 0, 0, 0,
  /* 48099 */ 0, 111047, 111047, 111047, 111047, 111047, 111047, 111047, 111047, 111047, 111047, 111047, 111047, 111047,
  /* 48113 */ 111047, 111047, 111047, 2789, 537, 537, 537, 2792, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 48132 */ 537, 2200, 537, 537, 537, 2836, 559, 559, 559, 2839, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 48152 */ 559, 559, 3204, 559, 559, 559, 559, 2849, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 48173 */ 559, 583, 583, 583, 583, 583, 583, 583, 2885, 583, 583, 583, 2888, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 48194 */ 583, 3326, 583, 537, 537, 559, 559, 583, 583, 583, 583, 2898, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 48215 */ 583, 583, 583, 2644, 583, 2646, 583, 0, 0, 0, 0, 537, 537, 537, 2990, 537, 537, 537, 537, 537, 537, 537,
  /* 48237 */ 537, 888, 537, 537, 537, 537, 537, 559, 559, 0, 0, 0, 3124, 0, 0, 0, 0, 0, 0, 0, 3130, 0, 0, 0, 0, 0, 0,
  /* 48264 */ 0, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155648, 155648, 155648, 0, 0, 0, 0, 0, 3154, 3155, 0, 0, 0, 0,
  /* 48291 */ 537, 537, 537, 537, 537, 537, 2144, 537, 537, 537, 537, 537, 537, 537, 537, 3165, 537, 537, 537, 537, 537,
  /* 48312 */ 537, 537, 537, 537, 537, 537, 537, 901, 537, 559, 559, 537, 537, 3175, 537, 537, 537, 537, 537, 3180, 537,
  /* 48333 */ 3182, 537, 537, 537, 537, 537, 537, 559, 3468, 559, 3469, 559, 559, 559, 3473, 559, 559, 559, 3208, 559,
  /* 48353 */ 3210, 559, 559, 559, 559, 559, 559, 559, 559, 583, 583, 583, 583, 583, 583, 3486, 583, 583, 583, 583, 583,
  /* 48374 */ 583, 583, 3231, 583, 583, 583, 583, 583, 583, 3237, 583, 3239, 583, 583, 583, 583, 583, 3082, 583, 583,
  /* 48394 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 2643, 583, 583, 583, 583, 0, 0, 3252, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 48419 */ 0, 3257, 0, 0, 0, 0, 0, 0, 786, 0, 786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 111047, 0, 0, 0, 0, 0,
  /* 48450 */ 3141, 0, 0, 0, 0, 0, 3266, 0, 0, 0, 0, 0, 0, 0, 2483, 0, 0, 0, 0, 0, 0, 0, 0, 3157, 0, 537, 537, 537, 537,
  /* 48479 */ 537, 537, 583, 583, 583, 3310, 583, 583, 583, 3314, 583, 583, 583, 583, 583, 583, 583, 583, 2385, 583,
  /* 48499 */ 583, 583, 583, 583, 2390, 2391, 3505, 537, 537, 537, 537, 537, 537, 537, 537, 3513, 559, 559, 559, 3517,
  /* 48519 */ 559, 559, 559, 559, 559, 3212, 559, 559, 559, 559, 559, 559, 583, 583, 583, 3217, 583, 583, 583, 583,
  /* 48539 */ 3538, 583, 0, 0, 0, 0, 3541, 0, 3543, 537, 537, 537, 537, 537, 537, 3178, 537, 537, 537, 537, 537, 537,
  /* 48561 */ 537, 537, 537, 1330, 537, 537, 537, 537, 537, 537, 559, 559, 3556, 3557, 559, 559, 583, 583, 583, 583,
  /* 48581 */ 583, 583, 583, 583, 583, 3564, 3565, 583, 583, 0, 0, 3568, 0, 537, 537, 537, 537, 537, 537, 537, 559, 559,
  /* 48603 */ 559, 559, 559, 3302, 559, 559, 559, 559, 559, 559, 559, 559, 583, 583, 583, 3072, 583, 583, 583, 583, 583,
  /* 48624 */ 583, 583, 583, 2371, 583, 583, 583, 583, 583, 583, 583, 360, 361, 0, 0, 0, 0, 0, 0, 0, 367, 0, 295, 0, 0,
  /* 48649 */ 0, 0, 0, 0, 0, 155648, 155648, 0, 155648, 0, 0, 0, 0, 0, 0, 0, 1665, 0, 0, 0, 0, 0, 0, 0, 0, 122880,
  /* 48675 */ 122880, 0, 122880, 122880, 122880, 122880, 0, 0, 0, 0, 394, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2758,
  /* 48699 */ 2759, 0, 0, 0, 0, 0, 470, 470, 484, 0, 0, 484, 361, 361, 361, 506, 361, 361, 361, 361, 470, 470, 555, 555,
  /* 48723 */ 602, 578, 578, 578, 578, 578, 555, 578, 578, 578, 602, 602, 555, 602, 1, 12290, 3, 78117, 78117, 295, 0,
  /* 48744 */ 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 733, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1612, 0, 0, 0, 0, 0, 602, 602,
  /* 48774 */ 602, 602, 602, 602, 602, 602, 602, 578, 602, 578, 555, 578, 578, 602, 367, 0, 699, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 48799 */ 0, 0, 0, 0, 0, 2966, 0, 0, 0, 0, 699, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2981, 0, 0, 969, 559, 559,
  /* 48829 */ 559, 559, 0, 583, 583, 583, 583, 583, 583, 583, 1007, 583, 583, 583, 583, 583, 3083, 583, 583, 583, 583,
  /* 48850 */ 583, 583, 583, 583, 583, 583, 583, 3318, 583, 583, 583, 583, 583, 1044, 583, 78117, 1072, 0, 0, 0, 0, 0,
  /* 48872 */ 0, 0, 0, 0, 0, 0, 2938, 2939, 0, 0, 0, 0, 2944, 0, 1090, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245760,
  /* 48902 */ 0, 0, 0, 0, 0, 1190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 559, 559, 1360, 559, 559, 559, 1369, 559, 559,
  /* 48929 */ 559, 559, 559, 559, 559, 559, 559, 559, 3305, 559, 559, 559, 583, 583, 1440, 26017, 1348, 980, 583, 583,
  /* 48949 */ 583, 583, 583, 583, 583, 583, 583, 1453, 583, 583, 583, 583, 583, 3097, 583, 583, 3099, 583, 583, 583,
  /* 48969 */ 583, 583, 583, 583, 1489, 583, 583, 583, 583, 583, 583, 583, 583, 1506, 583, 583, 583, 583, 583, 583, 583,
  /* 48990 */ 583, 1462, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2672, 583, 583, 583, 0,
  /* 49011 */ 0, 0, 1554, 0, 0, 0, 1560, 0, 0, 0, 1566, 0, 0, 0, 1572, 0, 0, 1604, 1605, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49039 */ 1615, 0, 0, 0, 0, 0, 734, 0, 0, 0, 640, 734, 0, 740, 741, 640, 0, 1671, 0, 1673, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49067 */ 0, 0, 0, 0, 0, 3131, 3132, 0, 537, 1742, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 49090 */ 537, 1281, 537, 1755, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1768, 537, 537, 537,
  /* 49110 */ 537, 537, 2155, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1751, 537, 537, 537, 537, 583, 583,
  /* 49131 */ 583, 1971, 583, 583, 583, 583, 583, 583, 583, 583, 1982, 583, 583, 583, 583, 583, 2638, 583, 583, 583,
  /* 49151 */ 583, 583, 583, 583, 583, 583, 583, 3317, 583, 583, 583, 583, 583, 0, 2034, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49176 */ 0, 0, 0, 0, 249856, 0, 0, 0, 2221, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 49199 */ 1399, 559, 0, 2308, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 3089, 583, 583,
  /* 49220 */ 583, 0, 0, 2429, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3139, 0, 0, 2489, 0, 0, 0, 0, 0, 0, 0, 0, 537,
  /* 49250 */ 537, 537, 537, 537, 537, 2501, 559, 559, 559, 559, 2565, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 49271 */ 559, 559, 3307, 559, 583, 583, 0, 0, 0, 0, 583, 583, 583, 583, 583, 583, 583, 2631, 583, 583, 583, 583,
  /* 49293 */ 583, 1524, 583, 583, 583, 1531, 583, 583, 0, 537, 583, 559, 537, 537, 537, 2776, 537, 537, 537, 537, 537,
  /* 49314 */ 537, 2783, 537, 2785, 537, 537, 537, 537, 537, 537, 3357, 537, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 49334 */ 559, 559, 559, 559, 559, 3299, 559, 559, 559, 559, 2823, 559, 559, 559, 559, 559, 559, 2830, 559, 2832,
  /* 49354 */ 559, 559, 559, 559, 559, 932, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 3306, 559, 559, 583,
  /* 49375 */ 583, 537, 537, 3280, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1767, 537, 537, 583,
  /* 49396 */ 583, 583, 3537, 583, 583, 0, 0, 0, 0, 0, 0, 0, 537, 537, 537, 537, 537, 537, 3348, 537, 537, 537, 0, 537,
  /* 49420 */ 537, 537, 537, 3594, 537, 559, 559, 559, 559, 3598, 559, 583, 583, 583, 583, 583, 2664, 583, 583, 2668,
  /* 49440 */ 583, 583, 583, 583, 583, 583, 583, 1958, 583, 583, 583, 583, 1964, 583, 583, 583, 583, 3602, 583, 0, 0, 0,
  /* 49462 */ 537, 537, 537, 537, 559, 559, 559, 559, 583, 583, 583, 583, 583, 3111, 3112, 3113, 537, 537, 559, 559,
  /* 49482 */ 583, 583, 0, 0, 0, 0, 0, 3333, 0, 0, 0, 0, 0, 3141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3268, 0, 0, 362, 0, 0,
  /* 49512 */ 0, 0, 0, 0, 367, 0, 295, 0, 0, 0, 0, 0, 0, 0, 196608, 0, 0, 0, 0, 0, 0, 0, 0, 405, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49544 */ 0, 0, 0, 377, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3137, 0, 0, 0, 0, 0, 0, 0, 0, 372, 0, 0, 372, 0, 0, 0, 0,
  /* 49576 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3258, 0, 3259, 556, 556, 603, 579, 579, 579, 579, 579, 556, 579, 579, 579, 603,
  /* 49601 */ 603, 556, 603, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 747, 0, 0, 0, 0, 0,
  /* 49628 */ 0, 0, 0, 0, 0, 1112, 0, 0, 0, 0, 0, 0, 603, 603, 603, 603, 603, 603, 603, 603, 603, 579, 603, 579, 556,
  /* 49653 */ 579, 579, 603, 1223, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254410, 0, 537, 537, 537, 1323, 537,
  /* 49679 */ 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 902, 537, 559, 559, 583, 583, 583, 1467, 583, 583,
  /* 49700 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 3227, 583, 583, 583, 537, 1756, 537, 537, 537, 537, 537,
  /* 49721 */ 537, 537, 537, 537, 537, 537, 537, 537, 537, 1314, 537, 0, 0, 0, 363, 364, 365, 366, 0, 0, 367, 0, 295, 0,
  /* 49745 */ 0, 0, 0, 0, 0, 0, 286720, 0, 0, 0, 0, 0, 0, 0, 0, 286720, 286720, 286720, 0, 0, 364, 0, 363, 0, 0, 0,
  /* 49771 */ 69632, 73728, 0, 0, 0, 0, 430, 65536, 0, 0, 0, 0, 0, 3255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 690, 0, 0, 0,
  /* 49799 */ 773, 0, 0, 430, 430, 0, 430, 0, 364, 430, 453, 0, 0, 0, 0, 0, 0, 0, 0, 159744, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49828 */ 0, 494, 494, 0, 501, 501, 501, 501, 507, 508, 501, 501, 521, 521, 521, 521, 453, 453, 453, 453, 453, 453,
  /* 49850 */ 453, 453, 453, 521, 521, 521, 521, 521, 521, 521, 521, 521, 557, 580, 557, 580, 557, 557, 580, 557, 557,
  /* 49871 */ 604, 580, 580, 580, 580, 580, 557, 580, 580, 580, 604, 604, 557, 604, 604, 604, 604, 604, 604, 604, 604,
  /* 49892 */ 604, 580, 604, 580, 616, 621, 621, 604, 627, 1, 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0,
  /* 49915 */ 0, 0, 0, 0, 778, 804, 0, 804, 799, 0, 0, 0, 818, 0, 0, 0, 0, 0, 0, 1138688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 49945 */ 1138688, 537, 583, 559, 537, 537, 891, 537, 537, 559, 559, 965, 559, 559, 0, 583, 583, 583, 583, 583,
  /* 49965 */ 3221, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2901, 583, 583, 583, 583, 583, 1040, 583, 583,
  /* 49985 */ 78117, 1072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131072, 0, 131072, 131072, 131072, 0, 131072, 1209, 0, 0, 0,
  /* 50009 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1151447, 0, 0, 0, 0, 0, 537, 2139, 537, 537, 537, 537, 537, 537, 537,
  /* 50036 */ 537, 537, 537, 2536, 537, 537, 537, 537, 537, 0, 0, 559, 2223, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 50057 */ 559, 559, 559, 559, 559, 2274, 559, 559, 0, 0, 583, 2310, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 50078 */ 583, 583, 583, 3238, 583, 583, 583, 559, 559, 559, 2617, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 50099 */ 0, 0, 0, 0, 0, 799, 0, 0, 0, 0, 702, 0, 0, 0, 0, 0, 0, 0, 2089, 0, 0, 0, 0, 0, 0, 0, 0, 172032, 0, 0, 0,
  /* 50130 */ 0, 0, 172032, 0, 558, 558, 605, 581, 581, 581, 581, 581, 558, 581, 581, 581, 605, 605, 558, 605, 1, 12290,
  /* 50152 */ 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 814, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 537,
  /* 50180 */ 3159, 537, 537, 537, 3162, 605, 605, 605, 605, 605, 605, 605, 605, 605, 581, 605, 581, 558, 581, 581, 605,
  /* 50201 */ 367, 0, 0, 0, 0, 701, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 262144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 731, 0, 0, 0, 0, 0,
  /* 50233 */ 0, 0, 0, 0, 0, 0, 0, 1155072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 830, 0, 0, 0, 0, 0, 537, 537, 537, 537,
  /* 50262 */ 537, 854, 537, 537, 537, 537, 537, 2169, 537, 537, 537, 537, 537, 537, 2175, 537, 2177, 537, 537, 537,
  /* 50282 */ 537, 537, 1306, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 2538, 537, 537, 537, 1519,
  /* 50302 */ 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 0, 537, 583, 559, 537, 537, 886, 537, 537, 559,
  /* 50323 */ 559, 960, 559, 559, 0, 583, 583, 583, 583, 583, 583, 583, 583, 2875, 583, 583, 583, 583, 583, 583, 583,
  /* 50344 */ 2681, 583, 583, 583, 583, 583, 583, 583, 583, 1931, 583, 583, 583, 583, 1935, 583, 583, 1550, 0, 0, 0,
  /* 50365 */ 1556, 0, 0, 0, 1562, 0, 0, 0, 1568, 0, 0, 0, 0, 0, 0, 803, 0, 0, 0, 0, 0, 0, 808, 0, 0, 305, 306, 0, 0, 0,
  /* 50395 */ 0, 0, 0, 0, 643, 0, 0, 0, 0, 0, 0, 739, 537, 537, 537, 537, 537, 537, 537, 537, 891, 537, 537, 537, 537,
  /* 50420 */ 537, 559, 559, 970, 559, 559, 559, 559, 0, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2877, 583,
  /* 50441 */ 2880, 583, 583, 537, 583, 559, 1057, 537, 537, 896, 537, 1062, 559, 559, 970, 559, 0, 1067, 583, 583, 583,
  /* 50462 */ 583, 2886, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 537, 537, 559, 559, 583, 583, 1045, 583,
  /* 50483 */ 78117, 1072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2686976, 2736128, 0, 0, 2531328, 2707456, 0, 0, 1249, 0, 0,
  /* 50507 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2200248, 2200248, 583, 583, 1521, 583, 583, 583, 583, 583, 583, 583,
  /* 50531 */ 583, 583, 0, 537, 583, 559, 537, 537, 888, 537, 537, 559, 559, 962, 559, 559, 0, 583, 583, 537, 1772, 537,
  /* 50553 */ 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1785, 537, 0, 0, 0, 0, 2036, 0, 0, 0, 0,
  /* 50577 */ 0, 0, 0, 0, 0, 0, 0, 2895872, 0, 0, 0, 0, 0, 2392064, 2165, 537, 2167, 537, 537, 537, 537, 537, 537, 537,
  /* 50601 */ 537, 537, 537, 537, 537, 537, 1784, 537, 537, 0, 0, 559, 559, 559, 559, 2226, 559, 559, 559, 559, 559,
  /* 50622 */ 559, 559, 559, 559, 1392, 559, 559, 559, 559, 559, 559, 559, 2252, 559, 559, 559, 559, 559, 559, 559, 559,
  /* 50643 */ 559, 559, 559, 559, 559, 559, 1837, 559, 0, 0, 583, 583, 583, 583, 2313, 583, 583, 583, 583, 583, 583,
  /* 50664 */ 583, 583, 583, 1959, 583, 583, 583, 583, 583, 583, 583, 583, 3223, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 50685 */ 2339, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 1979, 583, 583, 583, 583, 0,
  /* 50706 */ 0, 0, 2479, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192968, 192968, 192968, 192968, 192968, 192968, 192968,
  /* 50728 */ 192968, 192968, 192968, 0, 192968, 537, 537, 537, 537, 2530, 537, 537, 537, 537, 537, 537, 537, 537, 537,
  /* 50747 */ 537, 537, 537, 2551, 537, 537, 537, 583, 2661, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583,
  /* 50768 */ 583, 583, 1997, 583, 537, 583, 559, 3140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2200249, 151552,
  /* 50793 */ 537, 3174, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 1802, 537, 583, 583, 583,
  /* 50814 */ 3230, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 583, 2359, 583, 583, 583, 583, 0, 0, 0, 0,
  /* 50836 */ 440, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237568, 0, 0, 0, 0, 0, 0, 0, 1138688, 0, 1138688, 0, 0, 0, 1138688,
  /* 50863 */ 1139106, 1139106, 0, 0, 0, 0, 0, 1139106, 0, 0, 0, 0, 0, 131072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 50891 */ 0, 537, 0, 1138688, 0, 0, 1138688, 1138688, 0, 0, 0, 0, 0, 1139295, 1139295, 1139295, 1138688, 1139295, 1,
  /* 50910 */ 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 1139295, 1139295, 1139295, 1139295, 1139295,
  /* 50929 */ 1139295, 1139295, 1139295, 0, 1138688, 1139295, 1138688, 1138688, 1138688, 1138688, 1139295, 0, 1142784,
  /* 50942 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856,
  /* 50964 */ 249856, 249856, 249856, 249856, 249856, 249856, 249856, 249856, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 454, 0,
  /* 50985 */ 0, 0, 1151447, 1151447, 0, 1151447, 1151498, 1151498, 1151498, 1151447, 1151447, 1151447, 454, 454,
  /* 50999 */ 1151447, 454, 454, 454, 454, 454, 454, 454, 454, 1151498, 1151498, 1151498, 1151498, 1151498, 1151498,
  /* 51014 */ 1151498, 1151498, 1151498, 1151498, 1151498, 1151498, 1151498, 1151498, 1151498, 1151498, 0, 0, 0, 0, 0,
  /* 51029 */ 0, 0, 1151498, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 0, 1163264, 1163264, 0,
  /* 51051 */ 1163264, 1163264, 0, 1163264, 1163264, 0, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264,
  /* 51064 */ 1163264, 1163264, 1163264, 0, 0, 0, 0, 0, 1163264, 0, 1163264, 1163264, 1163264, 1163264, 1163264,
  /* 51079 */ 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 1163264, 0, 0,
  /* 51092 */ 0, 0, 0, 0, 0, 1163264, 1, 12290, 3, 0, 0, 2183168, 0, 0, 0, 0, 0, 301, 302, 0, 2134016, 0, 0, 1167360, 0,
  /* 51117 */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254410, 254410, 0, 254410, 254410, 254410, 254410, 254410, 0, 1,
  /* 51139 */ 12290, 3, 78117, 78117, 295, 0, 0, 0, 0, 0, 301, 302, 0, 0, 0, 0, 0, 824, 779, 0, 0, 0, 0, 0, 828, 829,
  /* 51165 */ 779, 779, 106496, 106496, 106496, 0, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496,
  /* 51179 */ 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 106496, 0, 0, 0, 0, 0, 2183168, 0, 0, 0,
  /* 51197 */ 0, 0, 0, 0, 0, 2134016, 0, 0, 0, 0, 0, 0, 0, 3153920, 2940928, 0, 2760704, 0, 0, 0, 0, 0, 2957312, 0, 0,
  /* 51222 */ 2826240, 3162112, 2428928, 0, 0, 0, 0, 0, 155648, 155648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  /* 51247 */ 736, 3055616, 0, 2490368, 2498560, 0, 0, 0, 0, 2879488, 0, 0, 0, 0, 0, 0, 2838528, 2945024, 0, 0, 0, 0, 0,
  /* 51270 */ 2748416, 2883584, 0, 0, 0, 0, 0, 0, 2179072, 2179072, 2179072, 3014656, 2179072, 2179072, 2126728,
  /* 51285 */ 2126728, 2503560, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 2126728, 3044232, 2126728,
  /* 51296 */ 3068808, 2126728, 2126728, 2126728, 2126728, 2126728, 3105672
];

XQueryParser.EXPECTED =
[
  /*    0 */ 1019, 1027, 1028, 1026, 1022, 1032, 1036, 1040, 1044, 1048, 1132, 1057, 1651, 1062, 1069, 1132, 2489, 1210,
  /*   18 */ 1074, 1078, 1132, 2942, 1650, 1082, 1132, 1132, 1178, 1178, 1089, 1115, 1094, 1122, 1123, 1205, 1132, 1132,
  /*   36 */ 1761, 1101, 1132, 1107, 1178, 1178, 1114, 1115, 1115, 1121, 1122, 1153, 1127, 1131, 1132, 1314, 1137, 1277,
  /*   54 */ 1178, 1178, 1210, 1115, 1115, 1151, 1122, 1122, 1097, 1143, 1132, 3044, 3012, 1178, 1178, 1089, 1115, 1149,
  /*   72 */ 1122, 1122, 1154, 1158, 1425, 1955, 1178, 1179, 1115, 1090, 1122, 1122, 1164, 1384, 1277, 1178, 1114, 1117,
  /*   90 */ 1122, 1170, 1385, 1176, 1109, 1116, 1122, 1183, 1192, 1280, 1151, 1189, 1194, 1198, 1202, 1283, 1209, 1214,
  /*  108 */ 1110, 1216, 1220, 1224, 1228, 1232, 1236, 1237, 1241, 1244, 1248, 1252, 1256, 1260, 1264, 1132, 2853, 1132,
  /*  126 */ 2712, 1883, 1132, 1132, 1132, 1132, 1268, 1132, 1132, 1132, 2516, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
  /*  144 */ 1132, 1132, 1287, 1132, 1132, 1132, 2463, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
  /*  162 */ 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
  /*  180 */ 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
  /*  198 */ 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
  /*  216 */ 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 2231, 1392, 1132, 1599, 1510, 1292, 1296, 1300,
  /*  234 */ 1304, 1308, 1312, 1132, 1132, 1318, 1322, 1458, 1329, 1333, 1334, 2027, 1392, 1132, 1132, 2014, 1985, 1366,
  /*  252 */ 1338, 1132, 1807, 1424, 2036, 1351, 1132, 1357, 1635, 1132, 1132, 1370, 1377, 1683, 1383, 1132, 2699, 1132,
  /*  270 */ 1132, 2335, 1132, 1132, 1132, 1389, 1132, 1132, 1402, 1406, 1410, 1132, 2494, 1416, 1132, 2494, 1416, 1132,
  /*  288 */ 1132, 2006, 1132, 2424, 1702, 1422, 1132, 2480, 1429, 1132, 2293, 1132, 1132, 1434, 1132, 1441, 1445, 1132,
  /*  306 */ 1445, 1132, 1452, 1132, 3063, 1132, 1462, 1466, 2133, 1133, 1466, 1676, 1515, 1846, 1070, 1849, 1465, 1692,
  /*  324 */ 1967, 1471, 1788, 2997, 2317, 1475, 1484, 1488, 2024, 2319, 1494, 1492, 1498, 1505, 1509, 1132, 1139, 1514,
  /*  342 */ 1658, 1519, 1523, 1527, 1531, 1534, 1538, 1065, 1132, 1545, 2648, 1549, 1830, 1553, 1557, 1563, 2136, 1139,
  /*  360 */ 1514, 2710, 2258, 1567, 2380, 1571, 1575, 1132, 1580, 1132, 2897, 1132, 2827, 1064, 1424, 2255, 2829, 1586,
  /*  378 */ 1590, 1596, 1132, 1132, 1603, 1132, 1132, 1611, 1132, 1617, 1430, 1623, 1628, 2009, 1632, 2201, 1657, 1132,
  /*  396 */ 2207, 1132, 1132, 2207, 1132, 2355, 1430, 1641, 2533, 1645, 2386, 1649, 1132, 2685, 1132, 1132, 1655, 1132,
  /*  414 */ 2108, 2074, 1662, 1666, 1670, 1915, 1670, 1900, 1675, 2176, 1680, 1687, 2151, 1940, 1691, 2151, 2106, 1696,
  /*  432 */ 1271, 3032, 3031, 2964, 2221, 1708, 1712, 1717, 1713, 1723, 1996, 1727, 1738, 1731, 1735, 2510, 2508, 1742,
  /*  450 */ 1746, 1750, 1754, 1132, 1759, 1856, 1765, 1769, 1773, 1777, 1781, 1783, 1576, 1787, 1792, 1801, 1805, 1811,
  /*  468 */ 1815, 1827, 2995, 2996, 1132, 1759, 2048, 2271, 1834, 1839, 2431, 1843, 1132, 2451, 1132, 2577, 1854, 1132,
  /*  486 */ 1132, 1860, 1865, 1889, 1835, 2531, 1624, 1893, 1132, 2100, 1899, 1132, 1592, 1914, 1132, 1132, 1051, 2399,
  /*  504 */ 1904, 1908, 1132, 1912, 1132, 1132, 1919, 1132, 1132, 1919, 1132, 1132, 2046, 1928, 1932, 1939, 2412, 1132,
  /*  522 */ 1138, 1944, 1132, 2635, 1313, 1132, 1950, 2438, 1954, 1871, 1132, 1871, 1132, 1868, 1132, 1962, 1959, 1989,
  /*  540 */ 1966, 2043, 1989, 1966, 2441, 1971, 2161, 2160, 1132, 1977, 2415, 2361, 1823, 2362, 2696, 1982, 1448, 2425,
  /*  558 */ 1437, 1993, 2000, 2021, 2013, 2018, 2031, 2035, 1132, 2040, 2675, 1797, 2052, 2056, 2060, 2064, 2068, 1132,
  /*  576 */ 2072, 2186, 1501, 2613, 2655, 2078, 2082, 2883, 2884, 1132, 2040, 2717, 2086, 2091, 2095, 1880, 2195, 2099,
  /*  594 */ 1132, 2104, 1132, 1325, 1132, 1132, 2112, 2718, 2087, 2119, 2126, 1132, 1455, 1132, 1132, 2788, 1132, 1132,
  /*  612 */ 2130, 1132, 1132, 2148, 2186, 1412, 2155, 1132, 2248, 2159, 1132, 1418, 1988, 1132, 1418, 1988, 1132, 1874,
  /*  630 */ 2992, 2165, 2169, 2306, 1132, 1132, 1541, 1132, 1132, 2174, 1132, 2895, 2180, 2184, 1704, 1132, 1540, 1132,
  /*  648 */ 2324, 1132, 2766, 2190, 2194, 2199, 2903, 1132, 2205, 2799, 2405, 2350, 1132, 2211, 2478, 2930, 2216, 2225,
  /*  666 */ 1166, 2936, 2115, 2229, 1637, 2229, 2237, 2239, 2235, 2243, 2247, 1132, 1132, 1132, 2170, 2252, 1559, 2262,
  /*  684 */ 2275, 2279, 2283, 2286, 1132, 2144, 1132, 2290, 1973, 2297, 2301, 2305, 2310, 2311, 2315, 2170, 2323, 1606,
  /*  702 */ 2367, 2328, 2332, 1132, 1699, 1132, 1895, 1132, 1159, 2339, 2343, 2373, 2349, 1607, 2368, 3024, 2354, 1288,
  /*  720 */ 2359, 1132, 2457, 2456, 1132, 1160, 2392, 2366, 2212, 2372, 2290, 2377, 2384, 1132, 2390, 1132, 1132, 2396,
  /*  738 */ 1132, 1132, 2396, 2409, 1085, 2793, 2265, 2419, 1132, 2429, 1132, 1755, 2456, 1132, 2978, 2345, 3003, 2435,
  /*  756 */ 2445, 1132, 2449, 1132, 2455, 1132, 2461, 2467, 2471, 2475, 3009, 1132, 3011, 3018, 2484, 1818, 2488, 2493,
  /*  774 */ 2646, 2920, 2498, 2502, 2514, 2520, 2524, 2528, 2537, 2541, 2548, 2552, 2544, 2556, 2560, 2564, 2568, 2572,
  /*  792 */ 2576, 1132, 2738, 2581, 2585, 2589, 2593, 2597, 2601, 2605, 1132, 2610, 2617, 2791, 2621, 2625, 2629, 2633,
  /*  810 */ 2639, 2643, 1132, 2760, 2776, 2652, 1821, 2659, 2663, 1885, 2668, 1132, 2673, 1132, 2402, 2679, 1132, 2773,
  /*  828 */ 2777, 1922, 2689, 1795, 1132, 2741, 1132, 1132, 2958, 1132, 1132, 2693, 2752, 1132, 3070, 2703, 1923, 2707,
  /*  846 */ 1132, 2664, 2716, 1132, 1185, 2722, 1132, 1185, 2727, 1132, 2731, 2735, 2745, 1132, 1619, 1313, 1132, 2139,
  /*  864 */ 1132, 1132, 2749, 2753, 1373, 2757, 2764, 3057, 1132, 1946, 1132, 1053, 2122, 2770, 1344, 1978, 1424, 2268,
  /*  882 */ 1671, 2781, 2785, 2797, 2505, 1613, 1138, 2803, 2807, 1341, 2918, 2811, 2669, 2815, 2821, 2817, 2833, 2837,
  /*  900 */ 2843, 2839, 2824, 2847, 2851, 1132, 1132, 2606, 2857, 2861, 2865, 2869, 2873, 2877, 2881, 1132, 1347, 2003,
  /*  918 */ 2888, 1935, 2985, 2892, 1274, 2901, 2907, 1132, 2723, 2911, 1582, 1363, 1877, 1132, 1132, 2142, 1132, 1719,
  /*  936 */ 1132, 1861, 2915, 1132, 1480, 1145, 1360, 2924, 2928, 1132, 1132, 2934, 1132, 1138, 2940, 1132, 1850, 2946,
  /*  954 */ 1132, 3038, 2003, 2951, 2955, 1132, 1132, 1395, 1132, 1132, 1395, 1132, 1132, 1398, 2962, 2682, 2968, 2972,
  /*  972 */ 1132, 1132, 2219, 1132, 1467, 2976, 1132, 1172, 2947, 2982, 2989, 3001, 1138, 3007, 1132, 3016, 1132, 3022,
  /*  990 */ 3028, 3051, 1132, 3036, 1353, 1132, 3042, 3048, 3055, 1103, 1132, 3061, 1478, 3067, 1144, 1379, 1924, 2422,
  /* 1008 */ 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1060, 3074, 3077, 3081, 3093, 3098, 3093, 3101,
  /* 1026 */ 3092, 3093, 3093, 3093, 3093, 3088, 3084, 3105, 3094, 3109, 3125, 3128, 3113, 3116, 3118, 3130, 3122, 3134,
  /* 1044 */ 3138, 3142, 3146, 3150, 3154, 3158, 3209, 3177, 3165, 3177, 3177, 3775, 5476, 3177, 5337, 3473, 3177, 3174,
  /* 1062 */ 3171, 3324, 3177, 3177, 3178, 3441, 3840, 4725, 3177, 3177, 3177, 3167, 3183, 3239, 3239, 3190, 3194, 3280,
  /* 1080 */ 3204, 3207, 3214, 3749, 3326, 3177, 3177, 5651, 4107, 5775, 5779, 5779, 5779, 3198, 5779, 5779, 3185, 3239,
  /* 1098 */ 3186, 3277, 3301, 3217, 3325, 3177, 3177, 3178, 3661, 3177, 5175, 5176, 5176, 3197, 5779, 3239, 5777, 5779,
  /* 1116 */ 5779, 5779, 5779, 5180, 3239, 3238, 3239, 3239, 3239, 3239, 3223, 5178, 3264, 3266, 3227, 3208, 3177, 3177,
  /* 1134 */ 3177, 3177, 3166, 5447, 3177, 3177, 3177, 3243, 3897, 3287, 3177, 3177, 3177, 3250, 3177, 5779, 5779, 5779,
  /* 1152 */ 5780, 3239, 3239, 3239, 3256, 5178, 3241, 3177, 3177, 3177, 3251, 5049, 3258, 3242, 3177, 3177, 3178, 4512,
  /* 1170 */ 3256, 3260, 3177, 3177, 3179, 5754, 3177, 5774, 5176, 5176, 5176, 5176, 5776, 3186, 3294, 3177, 3177, 3243,
  /* 1188 */ 4884, 3239, 3298, 3323, 3325, 3177, 5772, 5176, 5176, 5779, 5779, 3200, 3239, 3305, 3323, 5221, 5176, 5776,
  /* 1206 */ 5181, 3266, 3227, 4220, 5176, 5177, 5779, 5779, 5780, 3239, 3240, 4221, 5176, 5778, 5780, 3239, 3310, 5177,
  /* 1224 */ 5780, 3240, 3314, 3199, 3283, 5179, 3318, 3333, 3321, 3337, 4786, 3350, 3354, 3371, 3371, 3371, 3372, 3358,
  /* 1242 */ 3362, 3366, 3371, 3371, 3420, 3370, 3376, 3378, 3382, 3386, 3390, 3394, 3396, 3400, 3403, 3407, 3410, 3414,
  /* 1260 */ 3417, 3424, 3428, 3432, 3436, 3684, 5503, 3452, 3469, 3177, 3480, 5394, 3958, 5800, 3177, 3177, 5672, 3177,
  /* 1278 */ 3177, 5773, 5176, 5176, 5778, 5779, 3199, 3239, 3309, 3496, 3177, 3177, 3177, 3252, 3523, 3527, 3543, 3551,
  /* 1296 */ 3555, 3560, 3556, 3563, 3567, 3571, 3574, 3578, 3582, 3586, 3589, 3596, 3592, 3600, 3245, 3981, 3606, 3488,
  /* 1314 */ 3177, 3177, 3177, 3270, 3614, 3530, 3546, 3484, 4049, 3620, 4639, 3177, 3210, 4741, 4745, 5668, 3636, 5421,
  /* 1332 */ 3641, 3648, 3177, 3177, 3656, 3177, 5663, 3696, 3700, 3177, 3243, 5507, 3177, 3248, 3531, 3177, 3328, 5531,
  /* 1350 */ 3491, 3720, 3732, 3177, 3177, 3243, 5784, 4677, 3738, 3716, 3177, 3475, 5394, 4468, 5017, 5083, 3177, 3487,
  /* 1368 */ 3486, 3688, 3537, 3177, 5479, 3177, 3490, 5711, 5491, 5162, 5110, 3177, 3177, 3244, 3177, 3733, 3177, 3177,
  /* 1386 */ 3177, 3326, 3177, 3177, 5483, 3608, 3177, 3519, 3860, 3177, 3179, 5718, 3177, 3179, 5718, 5428, 3538, 3177,
  /* 1404 */ 3177, 3768, 3773, 3177, 3177, 5537, 5104, 3780, 3177, 3177, 3247, 3177, 3834, 3791, 3177, 3177, 3328, 4800,
  /* 1422 */ 3810, 3814, 3840, 3177, 3177, 3177, 3324, 3826, 3177, 3177, 3177, 3439, 3177, 5483, 3860, 3177, 3538, 3177,
  /* 1440 */ 3678, 5550, 3177, 5045, 4244, 3177, 5103, 3839, 3177, 3538, 3177, 4009, 3177, 5102, 3838, 3177, 3602, 4754,
  /* 1458 */ 3177, 3625, 3177, 3629, 3538, 3177, 4243, 3166, 3846, 3177, 3177, 3177, 3445, 3879, 3177, 3177, 5807, 4279,
  /* 1476 */ 3177, 3675, 3177, 3659, 3177, 3177, 5529, 5533, 3177, 5548, 3177, 4280, 3674, 3678, 3674, 3678, 4279, 3177,
  /* 1494 */ 4647, 3678, 4278, 3177, 3676, 3177, 4280, 3177, 3684, 3177, 3244, 5336, 3999, 3999, 5335, 5333, 3177, 3177,
  /* 1512 */ 3177, 3516, 3901, 3177, 3177, 3177, 3538, 3910, 3177, 3177, 3917, 4007, 3177, 4008, 3921, 3925, 3929, 3931,
  /* 1530 */ 3929, 3935, 3938, 3941, 3941, 3945, 3945, 3947, 3946, 3951, 3177, 3177, 3328, 4847, 3177, 3829, 3177, 3177,
  /* 1548 */ 3497, 3955, 4692, 3177, 4502, 3963, 4535, 3967, 3972, 3980, 3986, 3177, 3177, 3458, 4828, 3993, 3177, 3177,
  /* 1566 */ 3993, 4019, 3956, 4519, 4500, 4043, 3177, 3177, 4419, 4054, 3177, 3177, 3177, 3547, 4418, 4053, 3177, 3177,
  /* 1584 */ 3476, 4381, 3956, 3842, 4501, 3861, 4092, 4065, 3177, 3177, 3631, 4434, 3328, 4082, 4087, 3177, 3712, 3501,
  /* 1602 */ 3510, 5216, 4071, 4075, 3177, 3740, 3177, 4943, 3177, 4081, 4086, 3177, 3177, 3631, 5498, 3177, 5230, 3177,
  /* 1620 */ 3177, 3643, 5453, 3443, 3177, 3177, 3177, 3632, 3902, 3177, 3177, 3497, 3713, 5482, 4091, 3177, 3744, 3488,
  /* 1638 */ 3177, 4245, 5025, 4112, 3177, 3177, 3903, 5580, 5429, 4024, 4118, 4131, 3177, 3177, 3177, 3734, 3162, 4125,
  /* 1656 */ 4129, 3905, 3177, 3177, 3177, 3728, 5562, 5396, 5427, 3842, 4140, 3177, 3177, 4145, 4150, 3177, 3177, 3177,
  /* 1674 */ 3764, 4149, 3177, 3177, 3177, 3859, 4136, 3177, 5420, 3177, 3748, 3756, 3822, 4154, 5394, 5734, 5097, 4783,
  /* 1692 */ 3177, 3177, 3177, 3872, 3997, 3177, 5420, 3177, 3752, 5024, 3177, 3769, 3177, 3177, 3328, 4839, 3997, 3177,
  /* 1710 */ 5397, 5743, 4526, 3340, 3344, 3177, 3177, 3995, 4187, 3177, 3177, 3651, 5542, 3273, 5397, 4177, 4186, 3343,
  /* 1728 */ 3177, 4191, 4197, 4211, 3219, 5394, 4210, 3218, 4203, 3218, 4203, 4697, 4211, 4697, 4219, 4217, 3535, 4225,
  /* 1746 */ 4231, 4237, 4746, 3684, 5414, 5583, 5412, 4241, 5197, 3177, 3177, 3177, 3875, 3867, 4250, 3177, 3177, 3674,
  /* 1764 */ 3234, 4002, 5347, 3840, 5365, 4257, 4264, 4272, 4293, 4297, 4301, 4303, 4303, 4304, 4308, 4312, 4313, 4317,
  /* 1782 */ 4321, 4324, 4324, 4326, 3177, 4245, 3177, 3177, 3177, 3879, 3841, 4260, 4330, 3177, 3785, 3177, 3177, 4564,
  /* 1800 */ 4684, 4067, 3177, 4337, 4703, 4948, 4205, 3177, 3177, 3704, 3699, 4342, 5543, 5749, 4714, 4348, 5316, 3913,
  /* 1818 */ 3715, 3471, 5415, 3177, 3793, 3177, 3177, 4539, 3177, 5767, 3177, 4352, 3177, 3806, 3668, 3621, 4705, 5358,
  /* 1836 */ 3177, 3177, 4423, 3616, 4724, 5702, 5493, 3328, 4397, 4402, 3177, 3865, 3167, 3847, 3177, 3177, 3177, 3464,
  /* 1854 */ 4406, 4410, 3177, 3177, 3712, 3786, 3547, 3177, 3177, 3177, 4034, 3711, 5738, 4455, 3177, 3882, 4498, 3177,
  /* 1872 */ 3883, 4499, 3177, 3906, 4569, 3177, 3968, 4707, 3177, 3975, 4729, 3177, 3989, 3177, 3177, 3243, 5369, 4386,
  /* 1890 */ 3981, 4725, 4416, 4435, 3488, 3177, 3177, 3751, 5023, 4464, 3177, 3177, 3177, 4144, 4067, 3982, 4443, 5359,
  /* 1908 */ 3177, 5479, 4425, 4559, 4527, 4448, 4482, 3177, 3177, 3177, 4145, 3631, 4462, 4466, 3177, 4156, 3177, 3177,
  /* 1926 */ 3249, 3177, 4452, 4456, 4066, 5657, 4253, 5360, 3177, 5481, 4355, 3177, 5365, 5554, 3177, 3177, 3177, 4168,
  /* 1944 */ 4475, 4466, 3177, 3177, 3776, 5477, 4156, 3177, 3959, 4486, 3679, 3177, 3177, 3177, 4220, 3674, 4493, 5360,
  /* 1962 */ 3177, 4157, 5736, 4506, 4534, 3177, 3177, 3177, 4288, 3177, 5360, 3177, 3177, 3801, 3177, 4532, 3177, 3177,
  /* 1980 */ 3177, 4392, 5550, 3177, 3345, 3177, 4160, 3683, 4858, 3177, 3177, 3177, 4633, 3537, 3177, 5551, 3177, 4185,
  /* 1998 */ 4205, 3272, 5551, 4948, 3177, 5552, 3177, 3246, 3177, 4220, 3798, 3177, 3531, 5579, 5428, 3535, 3177, 3537,
  /* 2016 */ 3177, 3482, 5552, 5549, 3536, 3536, 3177, 3537, 4948, 3177, 3677, 3177, 3665, 3672, 3673, 4545, 3536, 3537,
  /* 2034 */ 5100, 4233, 3177, 3177, 3177, 4411, 3177, 5479, 4552, 3177, 4227, 4518, 3177, 4158, 3177, 3841, 4378, 4455,
  /* 2052 */ 4568, 3177, 4574, 4581, 4181, 4585, 4589, 4593, 4597, 4601, 4605, 4613, 4609, 4612, 4617, 4621, 4627, 4623,
  /* 2070 */ 4628, 4632, 5352, 4674, 3177, 3177, 3904, 3177, 5761, 4113, 3177, 5526, 5675, 4193, 3177, 4661, 4682, 3177,
  /* 2088 */ 5397, 3177, 3248, 3249, 4284, 4469, 4690, 4696, 3453, 4701, 4711, 4737, 3177, 3177, 3177, 4430, 3290, 4736,
  /* 2106 */ 3177, 3177, 4045, 3177, 3243, 4135, 3177, 5725, 4553, 3177, 4244, 3177, 4001, 3172, 4469, 5788, 3177, 4268,
  /* 2124 */ 3177, 3981, 4750, 4791, 3177, 3976, 3328, 4773, 4757, 3177, 4344, 3851, 3177, 3637, 4006, 3177, 3644, 5457,
  /* 2142 */ 3177, 3652, 3177, 3177, 4769, 4107, 3177, 5479, 4777, 3177, 4361, 4164, 3905, 4889, 3504, 4874, 4790, 4818,
  /* 2160 */ 3177, 3177, 3177, 4533, 3177, 3248, 4467, 4890, 3505, 4809, 3177, 3177, 3177, 4686, 4685, 4823, 3177, 3177,
  /* 2178 */ 4047, 4015, 3690, 3177, 3248, 4469, 5516, 4875, 3177, 3177, 4077, 4488, 3726, 3177, 4851, 4890, 3329, 3177,
  /* 2196 */ 3177, 3177, 4733, 3328, 4857, 3177, 3177, 4096, 4100, 3328, 4511, 3177, 3177, 4104, 3707, 4510, 3177, 3177,
  /* 2214 */ 3177, 4780, 4022, 3476, 3177, 3178, 5753, 3177, 3177, 5019, 3177, 4858, 3177, 3177, 4863, 3177, 5025, 3177,
  /* 2232 */ 3177, 4179, 3177, 3177, 5149, 3177, 3866, 3177, 4245, 3177, 4000, 3177, 5148, 3177, 3866, 4000, 3177, 3177,
  /* 2250 */ 3177, 4796, 5041, 3177, 3177, 3804, 3177, 3177, 3868, 3177, 3177, 4013, 4879, 4826, 4852, 4937, 3177, 4870,
  /* 2268 */ 3177, 4374, 5478, 3177, 4386, 3177, 4275, 4888, 4894, 4898, 4901, 4903, 4907, 4911, 4915, 4924, 4921, 4917,
  /* 2286 */ 4928, 4928, 4928, 4931, 4829, 4158, 4943, 3177, 4411, 3833, 3816, 4935, 3177, 5766, 4941, 4947, 4952, 4959,
  /* 2304 */ 4965, 4971, 3177, 3177, 3177, 4815, 4977, 3177, 3177, 4985, 3177, 4996, 5509, 3177, 3177, 4280, 3177, 4280,
  /* 2322 */ 3177, 5041, 3177, 3177, 3177, 4846, 3489, 3177, 3177, 3533, 5007, 5014, 5684, 3177, 4412, 3821, 3762, 5030,
  /* 2340 */ 3177, 3177, 4039, 4056, 5034, 3177, 3177, 4281, 5077, 5043, 3177, 3177, 3177, 4856, 4283, 3177, 3177, 3177,
  /* 2358 */ 4973, 5050, 3488, 3177, 3177, 4289, 4158, 3177, 4057, 3177, 3177, 3177, 5000, 3490, 4108, 3177, 3177, 3177,
  /* 2376 */ 5039, 5582, 4873, 3890, 3177, 4426, 4032, 4038, 5155, 5309, 3177, 3177, 4333, 4127, 3251, 5049, 5073, 3177,
  /* 2394 */ 3177, 4055, 3750, 4990, 5374, 3177, 4439, 4330, 3177, 4121, 5383, 3488, 4851, 5786, 4875, 3177, 5553, 5054,
  /* 2412 */ 3177, 4460, 4481, 3177, 4157, 4332, 4646, 3177, 5139, 5062, 3177, 4470, 3177, 3177, 5551, 3177, 3538, 3874,
  /* 2430 */ 4991, 3177, 3177, 4390, 3177, 3177, 5094, 4936, 3177, 4492, 5358, 3177, 4157, 4523, 4332, 4872, 3177, 3177,
  /* 2448 */ 5108, 5114, 5072, 3177, 3177, 4396, 4401, 3855, 4992, 3177, 3177, 3177, 4988, 3854, 5118, 3177, 3177, 4425,
  /* 2466 */ 3177, 5079, 3177, 5375, 3860, 3177, 5122, 4943, 4870, 3177, 5025, 4284, 3177, 4509, 3177, 3177, 4159, 3820,
  /* 2484 */ 4281, 5081, 5375, 3860, 5574, 3177, 3177, 3177, 5176, 5135, 3177, 3177, 3177, 5206, 5553, 5058, 4471, 4338,
  /* 2502 */ 4859, 3177, 5576, 3177, 4528, 3840, 3177, 4548, 3539, 4215, 4204, 4547, 4819, 3860, 3177, 3177, 4513, 3177,
  /* 2520 */ 5143, 3177, 3177, 4758, 5137, 5057, 3174, 4285, 5153, 3177, 5188, 3177, 4560, 3177, 3177, 3749, 3532, 5187,
  /* 2538 */ 3177, 5789, 4541, 3175, 5160, 5361, 3488, 5361, 3488, 4287, 5789, 3177, 5789, 3173, 5166, 4792, 4499, 5361,
  /* 2556 */ 5362, 3177, 5519, 4792, 4569, 4287, 5518, 4792, 4569, 5362, 4286, 5519, 5364, 5195, 5363, 5185, 5584, 5192,
  /* 2574 */ 5201, 5210, 5204, 3177, 3177, 3177, 5302, 4259, 3177, 3177, 5064, 4954, 5214, 5220, 5228, 5225, 4284, 5234,
  /* 2592 */ 5238, 5244, 5240, 5246, 5250, 5254, 5258, 5262, 5265, 5269, 5272, 5273, 5274, 5278, 3177, 3177, 3177, 5321,
  /* 2610 */ 5009, 4676, 3787, 4282, 4251, 4637, 3506, 3490, 4382, 5446, 5284, 5086, 3177, 5035, 3692, 5288, 4114, 3177,
  /* 2628 */ 3486, 3177, 5292, 5296, 5300, 3177, 5306, 3177, 3177, 4527, 4479, 5313, 3177, 3177, 5313, 3177, 5325, 5326,
  /* 2646 */ 3177, 4577, 3177, 3177, 4494, 3893, 5341, 3177, 3164, 3177, 4643, 4651, 4655, 5426, 5351, 3177, 5678, 5356,
  /* 2664 */ 3177, 3177, 3177, 5433, 5373, 3177, 3177, 3177, 5507, 5379, 5372, 3177, 3177, 4557, 3177, 4811, 5387, 3473,
  /* 2682 */ 3177, 4664, 5695, 3177, 4671, 4099, 3710, 3794, 5025, 3488, 4827, 3177, 5405, 4367, 3177, 4678, 4646, 3177,
  /* 2700 */ 4159, 3758, 3723, 3490, 4382, 5713, 5419, 5425, 4826, 3783, 3177, 4717, 3177, 3177, 3462, 3177, 5472, 3177,
  /* 2718 */ 3177, 3177, 5590, 4682, 5437, 3177, 3177, 3177, 5692, 5437, 3177, 5677, 5441, 4199, 3787, 4283, 3891, 5445,
  /* 2736 */ 3714, 4157, 3177, 4720, 4803, 3177, 4570, 4364, 4368, 3243, 5026, 3177, 3784, 5461, 5465, 3177, 3783, 5409,
  /* 2754 */ 3177, 3177, 4198, 4158, 3177, 3249, 3177, 4720, 4803, 3787, 5766, 3177, 3177, 3177, 4569, 3177, 4425, 3890,
  /* 2772 */ 5488, 3177, 4722, 4258, 5555, 3890, 4955, 5330, 5391, 5498, 4266, 3534, 3981, 4425, 3492, 3327, 3177, 4762,
  /* 2790 */ 4766, 3177, 4338, 3177, 3177, 4513, 5123, 3245, 3532, 3177, 3177, 4569, 4678, 5497, 5763, 5766, 4514, 5502,
  /* 2808 */ 3177, 3245, 3534, 3177, 5513, 5765, 3324, 3177, 5169, 3177, 4027, 3177, 4027, 3840, 5447, 3177, 5449, 5542,
  /* 2826 */ 4028, 3177, 4805, 3177, 3177, 3532, 5578, 5564, 3177, 5479, 3327, 5449, 5542, 5449, 4967, 3177, 5146, 3177,
  /* 2844 */ 5523, 3177, 5541, 5018, 5724, 5542, 4026, 5480, 3177, 3177, 3177, 4657, 3457, 5547, 5559, 4948, 3346, 3674,
  /* 2862 */ 5568, 5572, 4645, 5588, 5594, 5598, 3230, 5602, 5609, 5605, 5613, 5616, 5619, 5623, 5627, 5631, 5635, 5638,
  /* 2880 */ 5642, 5646, 5650, 3177, 3177, 4668, 3177, 3177, 3177, 5655, 3684, 4467, 5661, 3177, 5667, 3177, 4833, 3177,
  /* 2898 */ 3177, 4061, 3177, 3177, 5682, 3177, 3177, 4685, 4864, 5688, 4206, 5002, 5003, 5709, 3177, 3177, 3250, 5700,
  /* 2916 */ 5428, 5732, 3177, 4842, 3177, 3177, 4576, 3860, 5482, 5084, 3177, 4246, 5706, 3177, 3177, 3177, 4835, 3610,
  /* 2934 */ 3465, 5723, 3177, 3177, 4868, 5581, 5717, 3177, 3177, 3177, 4936, 3473, 5722, 5729, 3957, 3177, 3177, 3474,
  /* 2952 */ 5394, 4252, 4048, 5085, 3177, 5344, 3177, 4882, 5401, 5374, 5742, 3177, 3177, 3177, 4980, 4172, 3245, 3177,
  /* 2970 */ 3475, 5395, 4444, 3177, 3177, 5747, 5758, 3177, 3177, 3177, 5068, 5072, 3512, 5696, 3247, 3177, 4953, 5280,
  /* 2988 */ 4358, 3475, 4251, 5017, 3177, 4961, 3176, 3177, 4372, 3177, 3177, 3177, 3887, 5771, 3177, 3177, 3177, 5090,
  /* 3006 */ 3177, 3448, 3177, 3177, 3177, 5127, 3177, 3177, 3177, 5175, 3447, 3177, 3177, 3177, 5131, 3177, 3446, 5542,
  /* 3024 */ 3177, 3177, 5156, 5172, 4155, 5535, 3244, 3177, 4981, 4173, 3177, 3177, 3178, 5794, 3177, 3177, 5319, 5694,
  /* 3042 */ 3177, 5793, 3177, 3177, 5448, 3177, 4155, 3892, 3246, 4493, 4444, 3177, 4288, 5798, 3177, 3177, 3177, 5469,
  /* 3060 */ 5478, 3660, 3177, 3177, 3177, 5484, 3177, 3164, 3250, 5804, 3177, 5010, 3786, 4282, 5822, 6664, 6348, 5829,
  /* 3078 */ 5811, 6025, 6238, 5814, 5845, 5981, 5879, 5815, 5879, 5876, 6264, 6239, 5980, 5816, 5817, 5879, 5879, 5879,
  /* 3096 */ 5879, 5978, 5880, 5979, 5816, 5879, 5875, 5879, 5879, 5878, 5879, 5879, 5882, 5900, 5902, 5903, 5906, 5905,
  /* 3114 */ 5911, 5913, 5912, 5912, 5912, 5912, 5909, 5905, 5917, 5913, 5917, 5905, 5901, 5908, 5905, 5905, 5908, 5909,
  /* 3132 */ 5916, 5913, 5914, 5919, 5921, 5924, 5923, 5927, 5929, 5928, 5931, 5925, 5934, 5933, 5934, 5934, 5934, 5936,
  /* 3150 */ 5938, 5944, 5946, 5939, 5940, 5838, 6053, 6348, 5829, 6263, 5886, 5890, 5948, 5829, 5829, 6300, 5829, 5829,
  /* 3168 */ 5829, 6329, 6008, 5970, 6001, 5829, 5829, 5829, 5824, 5829, 5829, 5829, 5829, 5822, 5856, 6045, 6045, 6870,
  /* 3186 */ 5975, 5975, 5975, 5974, 5975, 5975, 5870, 5962, 5974, 5973, 6868, 6868, 6045, 6045, 6045, 6046, 5975, 5975,
  /* 3204 */ 5975, 6863, 6299, 5886, 5863, 5863, 5829, 5829, 5829, 5820, 5847, 5829, 6470, 5893, 5829, 5829, 5829, 5837,
  /* 3222 */ 5891, 5975, 5975, 6297, 6047, 5863, 5863, 5863, 5863, 6304, 5984, 6873, 5847, 5829, 6165, 5893, 5869, 5975,
  /* 3240 */ 5975, 5975, 5975, 5829, 5829, 5829, 5832, 5829, 5829, 5829, 5833, 5829, 5829, 5829, 5834, 6671, 5975, 5975,
  /* 3258 */ 5986, 6047, 6868, 6045, 5975, 5829, 5975, 5975, 5886, 5886, 5886, 5886, 5829, 6102, 5829, 5829, 5822, 5891,
  /* 3276 */ 5829, 5973, 6868, 6869, 6045, 6045, 5857, 5975, 5870, 5829, 6868, 6872, 5863, 5860, 5829, 5819, 5993, 5995,
  /* 3294 */ 5973, 6869, 6046, 5870, 5975, 5986, 6869, 6046, 5975, 5976, 5886, 5975, 5975, 5975, 6869, 5975, 5975, 5870,
  /* 3312 */ 5829, 6297, 6297, 6868, 6868, 6869, 5975, 6297, 6869, 6046, 6869, 5870, 5829, 5829, 5829, 5841, 5829, 5829,
  /* 3330 */ 5829, 5830, 5823, 5986, 6046, 6869, 5986, 5829, 6304, 6773, 5829, 5822, 5891, 6099, 6237, 5829, 5829, 5829,
  /* 3348 */ 6281, 6026, 5992, 5850, 6040, 6014, 6016, 6020, 5849, 5849, 6036, 6042, 5849, 6093, 6037, 6039, 6085, 6080,
  /* 3366 */ 6112, 6017, 5849, 5849, 6081, 5849, 5849, 5849, 5849, 6029, 6422, 6087, 5849, 5854, 5832, 6092, 5853, 6592,
  /* 3384 */ 6094, 6095, 6111, 6082, 6114, 6117, 6115, 6116, 6118, 6119, 6118, 6129, 6119, 6119, 6119, 6120, 6122, 6121,
  /* 3402 */ 6122, 6122, 6123, 6124, 6124, 6125, 6126, 6126, 6126, 6133, 6135, 6137, 6127, 6127, 6126, 5841, 6043, 6018,
  /* 3420 */ 5851, 5850, 6039, 6084, 6041, 5852, 6139, 6141, 6143, 6145, 6148, 6151, 6147, 6150, 6131, 6130, 6153, 6127,
  /* 3438 */ 6155, 5829, 5822, 5993, 5891, 6401, 6517, 5829, 5829, 5832, 6424, 5887, 6306, 5829, 6298, 5829, 5829, 5829,
  /* 3456 */ 5842, 5858, 5829, 5829, 5829, 5857, 5829, 6643, 5829, 5829, 5822, 5976, 6415, 5829, 6585, 6276, 5829, 6265,
  /* 3474 */ 5829, 5829, 5829, 5823, 5829, 5829, 5829, 6160, 5829, 5829, 5824, 6663, 5829, 5829, 5826, 5829, 5829, 5829,
  /* 3492 */ 5885, 5829, 5829, 6781, 6470, 5829, 5829, 5829, 5865, 5831, 6175, 6175, 5961, 5829, 5829, 5818, 5829, 5829,
  /* 3510 */ 6006, 6236, 5829, 5829, 5830, 6066, 6302, 5829, 6172, 6051, 5987, 6322, 6518, 5961, 5829, 5829, 6163, 6247,
  /* 3528 */ 5829, 6235, 6168, 5829, 5829, 5829, 5889, 5829, 5829, 5829, 5890, 5829, 5829, 5829, 5891, 5829, 6701, 5825,
  /* 3546 */ 6409, 5829, 5829, 5829, 5894, 5824, 6662, 6171, 6193, 6195, 6198, 6198, 6198, 6198, 6198, 6198, 6197, 6198,
  /* 3564 */ 6198, 6200, 6201, 6203, 6203, 6203, 6204, 6203, 6206, 6208, 6210, 6210, 6210, 6211, 6215, 6212, 6215, 6213,
  /* 3582 */ 6212, 6217, 6220, 6220, 6219, 6218, 6222, 6222, 6219, 6223, 6226, 6228, 6227, 6230, 6225, 6226, 6232, 6226,
  /* 3600 */ 6231, 6234, 5829, 5829, 5830, 6595, 6867, 6321, 6323, 6492, 5826, 5829, 5833, 5829, 5829, 6246, 5829, 5829,
  /* 3618 */ 5830, 6664, 6249, 5829, 5829, 5829, 5898, 5829, 6712, 5829, 6252, 5829, 6712, 5829, 5829, 5832, 5840, 5856,
  /* 3636 */ 6704, 5829, 5829, 5829, 5956, 5829, 6256, 5829, 5829, 5832, 5855, 6275, 5829, 6290, 6259, 5829, 5822, 6858,
  /* 3654 */ 6050, 6306, 5829, 6258, 6260, 5829, 5822, 6871, 5829, 5829, 5829, 5829, 6285, 6286, 5829, 5829, 6615, 5828,
  /* 3672 */ 5829, 6287, 5829, 5829, 5829, 5958, 6026, 5829, 5829, 5829, 5836, 6296, 5829, 5829, 6304, 5829, 5829, 6049,
  /* 3690 */ 6662, 5829, 5826, 5829, 6749, 5829, 5829, 6328, 6310, 6186, 6298, 6263, 6381, 6178, 5829, 6277, 6428, 6066,
  /* 3708 */ 6528, 6334, 6107, 5829, 5829, 5829, 6235, 5829, 5829, 5829, 5884, 5829, 6310, 6002, 6317, 6024, 6345, 6341,
  /* 3726 */ 6178, 5824, 5829, 5829, 6108, 6300, 6380, 6294, 5829, 5829, 5829, 5962, 6493, 5884, 5829, 6470, 6472, 6300,
  /* 3744 */ 5829, 5987, 6323, 6492, 5885, 5865, 5829, 5829, 5829, 5835, 5887, 6685, 6524, 6327, 6329, 6275, 5966, 6864,
  /* 3762 */ 6337, 6294, 5829, 5829, 5832, 5859, 5829, 6277, 6182, 5829, 6516, 5829, 6571, 5829, 5829, 5832, 5862, 6301,
  /* 3780 */ 6480, 6341, 6178, 5829, 5829, 6618, 5829, 5829, 5829, 6669, 5829, 6481, 6294, 5829, 5829, 5832, 5897, 5829,
  /* 3798 */ 6340, 6492, 5826, 5829, 5829, 6648, 5829, 5829, 6649, 5829, 5829, 5871, 5829, 6277, 6329, 6070, 6864, 6024,
  /* 3816 */ 6033, 6341, 6178, 5829, 6329, 6066, 6008, 6298, 6263, 6337, 6263, 6517, 6294, 5829, 5829, 6649, 6061, 6330,
  /* 3834 */ 5966, 6864, 6024, 6264, 6298, 6771, 6178, 5829, 5829, 5829, 5961, 5829, 6008, 5987, 6845, 5829, 5829, 6864,
  /* 3852 */ 6771, 6178, 5829, 5829, 6670, 6415, 6005, 5987, 6349, 5829, 5829, 5829, 5872, 6071, 6516, 5829, 5829, 5829,
  /* 3870 */ 6004, 5829, 6503, 6349, 5829, 5829, 5832, 6280, 6860, 5959, 6262, 6178, 5829, 5829, 6670, 6425, 6301, 5829,
  /* 3888 */ 6503, 5826, 5829, 5829, 6672, 5829, 5829, 5829, 6596, 6591, 6414, 6059, 6334, 6506, 5829, 5829, 5829, 6108,
  /* 3906 */ 5829, 5829, 5829, 6164, 6060, 6682, 6178, 5829, 5829, 6673, 5884, 5895, 5829, 6300, 6489, 5829, 6109, 5889,
  /* 3924 */ 6596, 5968, 6353, 6054, 6355, 6356, 6356, 6356, 6356, 6359, 6356, 6357, 6362, 6361, 6362, 6362, 6363, 6364,
  /* 3942 */ 6364, 6364, 6364, 6366, 6366, 6366, 6366, 6367, 6366, 6368, 6370, 6370, 6370, 6384, 5829, 5829, 6261, 5829,
  /* 3960 */ 5829, 5961, 6669, 6383, 5829, 5827, 5827, 6376, 5829, 5829, 5829, 6169, 5829, 6072, 6073, 5829, 5829, 6675,
  /* 3978 */ 6174, 5829, 6747, 5829, 5829, 5829, 6175, 5829, 5829, 6388, 6390, 5829, 5829, 6686, 6157, 5949, 6389, 5829,
  /* 3996 */ 5829, 5832, 6427, 5847, 5829, 5829, 5829, 6089, 5829, 6235, 6393, 5829, 5829, 5829, 6178, 5829, 6503, 5829,
  /* 4014 */ 6372, 5829, 5829, 5832, 6591, 5829, 6596, 6304, 6299, 5829, 6235, 5829, 6670, 5829, 5829, 6670, 6096, 5829,
  /* 4032 */ 6408, 6157, 5829, 5829, 5832, 6857, 5898, 5829, 5829, 5829, 6179, 5829, 6073, 5829, 5829, 5839, 5836, 5829,
  /* 4050 */ 5829, 5829, 6241, 6529, 6501, 5829, 5829, 5829, 6180, 5829, 6180, 5950, 5952, 6106, 6502, 5873, 5829, 5829,
  /* 4068 */ 5829, 6184, 5837, 6065, 6527, 5952, 6334, 6107, 6178, 5829, 5829, 5847, 6300, 5830, 6399, 6064, 6066, 6312,
  /* 4086 */ 6312, 5953, 6500, 6294, 5829, 5872, 5987, 5826, 5829, 5829, 5829, 6412, 6418, 6058, 5894, 6527, 5953, 6500,
  /* 4104 */ 5830, 6417, 6063, 5892, 6293, 6349, 5829, 5829, 6401, 6324, 5829, 5829, 5829, 6188, 5829, 6297, 5812, 5829,
  /* 4122 */ 5829, 6767, 6508, 5829, 6412, 5856, 5888, 5892, 6066, 6528, 6465, 6108, 5829, 6591, 6414, 6059, 6314, 5829,
  /* 4140 */ 5836, 5829, 5987, 5826, 5829, 6412, 5856, 5891, 5894, 5894, 6527, 5953, 6773, 5829, 6004, 5829, 5829, 5829,
  /* 4158 */ 6276, 5829, 5829, 5829, 6277, 6292, 5891, 5894, 6528, 6402, 5829, 6420, 6424, 6328, 6099, 6433, 6108, 5829,
  /* 4176 */ 5829, 6261, 5961, 5829, 5832, 5829, 5832, 5833, 6067, 5832, 6427, 6185, 6236, 6000, 5829, 5837, 5891, 5829,
  /* 4194 */ 5829, 5867, 6573, 6304, 5829, 5829, 5837, 6164, 5829, 5891, 6435, 6000, 5829, 5829, 5829, 6288, 6427, 5959,
  /* 4212 */ 6237, 5829, 5829, 6304, 5829, 5829, 5891, 6437, 5829, 5829, 5829, 6297, 6868, 5959, 6000, 5829, 5829, 5868,
  /* 4230 */ 6400, 5829, 6415, 5829, 5890, 5829, 6026, 6071, 5829, 5829, 6439, 6181, 5829, 6181, 5829, 6089, 5829, 5829,
  /* 4248 */ 5829, 6003, 6499, 5829, 5829, 5829, 6299, 5829, 5829, 5847, 5829, 5829, 5868, 5829, 5829, 5857, 6443, 6089,
  /* 4266 */ 5829, 5829, 5889, 5889, 5889, 5829, 5829, 6089, 5829, 6303, 5829, 6574, 5829, 5829, 6770, 5829, 5829, 5829,
  /* 4284 */ 6067, 5829, 5829, 5829, 6071, 5829, 5829, 5829, 6062, 6089, 6303, 5829, 6581, 6377, 6580, 5990, 5989, 6445,
  /* 4302 */ 5990, 6448, 6448, 6448, 6448, 6450, 6456, 6455, 6452, 6455, 6454, 6459, 6459, 6459, 6459, 6459, 6458, 6459,
  /* 4320 */ 6458, 6459, 6459, 6460, 6461, 6461, 6461, 6461, 6462, 5829, 6305, 6649, 6662, 5829, 5829, 5829, 6412, 6175,
  /* 4338 */ 5829, 5829, 5829, 6300, 6673, 6467, 5829, 5829, 5890, 6343, 5829, 6476, 5829, 6395, 6266, 6268, 6270, 5829,
  /* 4356 */ 5829, 6844, 5829, 5829, 6847, 5829, 5830, 5822, 5856, 5864, 6776, 6024, 6517, 6403, 5826, 5829, 6267, 6269,
  /* 4374 */ 5829, 5829, 5941, 6305, 6669, 5829, 6277, 6304, 5829, 5829, 5829, 6744, 5829, 6489, 5847, 5823, 5871, 6089,
  /* 4392 */ 5829, 5829, 5941, 6473, 5830, 6495, 6497, 6301, 6031, 6031, 5883, 6077, 5955, 5829, 6498, 6052, 6032, 6322,
  /* 4410 */ 5954, 5829, 5829, 5829, 6328, 5963, 5829, 6373, 5829, 5829, 5949, 5951, 6529, 5829, 6670, 5884, 5829, 5829,
  /* 4428 */ 5829, 5871, 6279, 5993, 6431, 6069, 5856, 6063, 6301, 6101, 6505, 5961, 6669, 5829, 5857, 6324, 5829, 6299,
  /* 4446 */ 5829, 5836, 5993, 6431, 6301, 6101, 6669, 5829, 6508, 6306, 6108, 6178, 5829, 5829, 5829, 6279, 5856, 6400,
  /* 4464 */ 6100, 6332, 6482, 5829, 5829, 5829, 6347, 5829, 5829, 5829, 6349, 6668, 6431, 6301, 6183, 5856, 6400, 6100,
  /* 4482 */ 6505, 5826, 5829, 5829, 6304, 6097, 6662, 5829, 6237, 5826, 6184, 5837, 5829, 5829, 5829, 6372, 6301, 6078,
  /* 4500 */ 5829, 5829, 5829, 6379, 5829, 5829, 6305, 6108, 6178, 5829, 5830, 5822, 6602, 5829, 5829, 5829, 6470, 5829,
  /* 4518 */ 5961, 5829, 5829, 5829, 6395, 5829, 6235, 5868, 6297, 5829, 5829, 5829, 6279, 6784, 5829, 6425, 6301, 5829,
  /* 4536 */ 5829, 5829, 6386, 5829, 6400, 5829, 5829, 5965, 6067, 5829, 6503, 5829, 5890, 5959, 6237, 5829, 5856, 6510,
  /* 4554 */ 6440, 6314, 5829, 5829, 6489, 5829, 5829, 6001, 6071, 5829, 5847, 6276, 6178, 6521, 5829, 6314, 5829, 5829,
  /* 4572 */ 5829, 6421, 6304, 6000, 5829, 5829, 6004, 6464, 6349, 6519, 5829, 6000, 6523, 6526, 6681, 6678, 6531, 6534,
  /* 4590 */ 6535, 6541, 6535, 6538, 6535, 6535, 6535, 6540, 6543, 6535, 6537, 6536, 6545, 6548, 6547, 6548, 6548, 6548,
  /* 4608 */ 6549, 6551, 6553, 6552, 6551, 6551, 6551, 6551, 6552, 6554, 6556, 6556, 6558, 6557, 6556, 6560, 6560, 6560,
  /* 4626 */ 6560, 6557, 6560, 6560, 6557, 6560, 6560, 5829, 5829, 5829, 6425, 5829, 6562, 5829, 5829, 6010, 5829, 6564,
  /* 4644 */ 6340, 5829, 5829, 6026, 5829, 5829, 5958, 6566, 5829, 6568, 6338, 5829, 6570, 5829, 5829, 6030, 5829, 6271,
  /* 4662 */ 6576, 6578, 5829, 5830, 6044, 6066, 6272, 6577, 6579, 5829, 5830, 6413, 6328, 6007, 6332, 5829, 5829, 5829,
  /* 4680 */ 6662, 5829, 6178, 6479, 6474, 5829, 5829, 5829, 6420, 5856, 6597, 6108, 5829, 5829, 6068, 6375, 6446, 5829,
  /* 4698 */ 5829, 5829, 6427, 6021, 6262, 6324, 5829, 6068, 6299, 5829, 5829, 5889, 5961, 6478, 6583, 6090, 5829, 5830,
  /* 4716 */ 6469, 5829, 5829, 6774, 5829, 5829, 6698, 6320, 5883, 5829, 5829, 5829, 6324, 5829, 6027, 5829, 6027, 5819,
  /* 4734 */ 5993, 6588, 5997, 6864, 6105, 6324, 5829, 5994, 5996, 6008, 6104, 6481, 5829, 5829, 5829, 6439, 5829, 6590,
  /* 4752 */ 6026, 6477, 6769, 5964, 5998, 6105, 5829, 5829, 5829, 6463, 5829, 6594, 5994, 6274, 5966, 6104, 6011, 5829,
  /* 4770 */ 5830, 6645, 6328, 6595, 6273, 5964, 5998, 5856, 6007, 6332, 5829, 5830, 6688, 5892, 6311, 5953, 6773, 5832,
  /* 4788 */ 5849, 5821, 5829, 6666, 5829, 5829, 5829, 6446, 6412, 6668, 6769, 6344, 6667, 5994, 5959, 5883, 6314, 5829,
  /* 4806 */ 5829, 6393, 5957, 5830, 5823, 5829, 5829, 6074, 6265, 5829, 6420, 6599, 6441, 5829, 5829, 5829, 6464, 6601,
  /* 4824 */ 5883, 6011, 5829, 5831, 5829, 5829, 5829, 6471, 5860, 5829, 6164, 6314, 5829, 6662, 5829, 5822, 5883, 6011,
  /* 4842 */ 5829, 5832, 5840, 6177, 5830, 5822, 5977, 6441, 5829, 5832, 5829, 5829, 6347, 6479, 5830, 5822, 6011, 5829,
  /* 4860 */ 5829, 5829, 5960, 5832, 6601, 6011, 5829, 5829, 6662, 5824, 5829, 5829, 6181, 6052, 5829, 5829, 5829, 6590,
  /* 4878 */ 5829, 6604, 6331, 6108, 5829, 5832, 5855, 6508, 5894, 6866, 6479, 6347, 5829, 5829, 6068, 5961, 5829, 6606,
  /* 4896 */ 5890, 6607, 6606, 6610, 6608, 6055, 6614, 6055, 6055, 6055, 6055, 6614, 6056, 6057, 6617, 6620, 6626, 6622,
  /* 4914 */ 6625, 6623, 6628, 6635, 6635, 6635, 6636, 6632, 6634, 6635, 6635, 6630, 6630, 6631, 6637, 6637, 6637, 6637,
  /* 4932 */ 6639, 6640, 6642, 6651, 5829, 5829, 5829, 6479, 5829, 5829, 6654, 5829, 5829, 6265, 5829, 6659, 5829, 5829,
  /* 4950 */ 5829, 6503, 6315, 5829, 5837, 5829, 5829, 5890, 6009, 6325, 5971, 5829, 5829, 6276, 6178, 5829, 6661, 6306,
  /* 4968 */ 5829, 5841, 5829, 5829, 6677, 5829, 5829, 6282, 6283, 5829, 6655, 6657, 5829, 5832, 6430, 5891, 6099, 5834,
  /* 4986 */ 6656, 6513, 5829, 5835, 5887, 6860, 6464, 6518, 6404, 5829, 5829, 6515, 5829, 6514, 6181, 6187, 5829, 5829,
  /* 5004 */ 6289, 5829, 5829, 5829, 6309, 5829, 5837, 6007, 6263, 5884, 6012, 5848, 6660, 5829, 5836, 5829, 5829, 6670,
  /* 5022 */ 5839, 6685, 6512, 5829, 5829, 5829, 6516, 5826, 6671, 6684, 6511, 6513, 6179, 5829, 5829, 5829, 6571, 5829,
  /* 5040 */ 6420, 5891, 6612, 6294, 5826, 5829, 5829, 6181, 6299, 6671, 6859, 6173, 6505, 6403, 5829, 6001, 5829, 6001,
  /* 5058 */ 6001, 6001, 5829, 5829, 5848, 6335, 6067, 5829, 5868, 5885, 5829, 6279, 6859, 6173, 6505, 6403, 5826, 5829,
  /* 5076 */ 5829, 5829, 6067, 5829, 6067, 6067, 6067, 5829, 5829, 6303, 5829, 5829, 5829, 6746, 5829, 6611, 6293, 6349,
  /* 5094 */ 5829, 6166, 6300, 5829, 5836, 6297, 6026, 5890, 5829, 5890, 6330, 6008, 6298, 6263, 6088, 6865, 5829, 5829,
  /* 5112 */ 6304, 6011, 5829, 6280, 5864, 6173, 6005, 6464, 6518, 6404, 6470, 5860, 6276, 5829, 5829, 5864, 6464, 6492,
  /* 5130 */ 5826, 6304, 6691, 6402, 6349, 5829, 6691, 6693, 5826, 5829, 5829, 6307, 5829, 5829, 6464, 6349, 5829, 5840,
  /* 5148 */ 5829, 5829, 6516, 5829, 5829, 5829, 6243, 5829, 5829, 6308, 5829, 5837, 5829, 6695, 5829, 5829, 6319, 6299,
  /* 5166 */ 5829, 6181, 6089, 5829, 5840, 6177, 5829, 5841, 6089, 6297, 6868, 6868, 6868, 6868, 6045, 6045, 5975, 5975,
  /* 5184 */ 5983, 6313, 5829, 5829, 6313, 5826, 5829, 5829, 5829, 6313, 5829, 6313, 5829, 5829, 6071, 6071, 6071, 5829,
  /* 5202 */ 6314, 6314, 6333, 6314, 5829, 5829, 6328, 6330, 6333, 6333, 6333, 6333, 6665, 6700, 5829, 5829, 6398, 6063,
  /* 5220 */ 6700, 5848, 5829, 5829, 6868, 5868, 6652, 6703, 5868, 6244, 5829, 5829, 6406, 6407, 6276, 6300, 6276, 6276,
  /* 5238 */ 6706, 6708, 6709, 6709, 6719, 6710, 6709, 6711, 6709, 6715, 6721, 6717, 6716, 6717, 6723, 6717, 6189, 6190,
  /* 5256 */ 6725, 6726, 6727, 6728, 6727, 6730, 6191, 6725, 6191, 6725, 6732, 6734, 6734, 6736, 6735, 6734, 6738, 6735,
  /* 5274 */ 6738, 6738, 6738, 6739, 6742, 6741, 5829, 5829, 6410, 5829, 6245, 5829, 6235, 6098, 5829, 6751, 5829, 5826,
  /* 5292 */ 6586, 6796, 5829, 6346, 6158, 6753, 5829, 6161, 6250, 6755, 5829, 5829, 6420, 6496, 5829, 6391, 6758, 5829,
  /* 5310 */ 5841, 6335, 6067, 5829, 6757, 5826, 5829, 5843, 6674, 5829, 5829, 6783, 6769, 6066, 6262, 6760, 5829, 6396,
  /* 5328 */ 6761, 5829, 6000, 5829, 5841, 5958, 5829, 5829, 5958, 5829, 5829, 5829, 6076, 5961, 5829, 6649, 6003, 6068,
  /* 5346 */ 6235, 5829, 5856, 6305, 6696, 5834, 5829, 5829, 5829, 6668, 5829, 6763, 5829, 5829, 6486, 5829, 5829, 5829,
  /* 5364 */ 6313, 5829, 5829, 5829, 6314, 6768, 5864, 6765, 6504, 6491, 6404, 5829, 5829, 5829, 6612, 5832, 6768, 5864,
  /* 5382 */ 6023, 6022, 6024, 6490, 6403, 5829, 6075, 5829, 6074, 5961, 5829, 6649, 5829, 5860, 5829, 5829, 5829, 5860,
  /* 5400 */ 5829, 5896, 6779, 6771, 6518, 6421, 5856, 5864, 6778, 6618, 5829, 6618, 5829, 5860, 6181, 5829, 5829, 6181,
  /* 5418 */ 5961, 5961, 6649, 5829, 5829, 5829, 6254, 5829, 6034, 5829, 5829, 5829, 6665, 5829, 5829, 6421, 5856, 5864,
  /* 5436 */ 6066, 6298, 6771, 6403, 5826, 6068, 6265, 6068, 6265, 6744, 6473, 5829, 5848, 5829, 5829, 5829, 5840, 6275,
  /* 5454 */ 6866, 6242, 6492, 6866, 6298, 6772, 6349, 5829, 6421, 6646, 6066, 6867, 6242, 6492, 5826, 5829, 6421, 6275,
  /* 5472 */ 6100, 6771, 6403, 5826, 6301, 6298, 6492, 5829, 5829, 5829, 6670, 5829, 5829, 5829, 5987, 6349, 5829, 6415,
  /* 5490 */ 6000, 5848, 6235, 5829, 5829, 6488, 5829, 5840, 5999, 6178, 5829, 5829, 5885, 5829, 5848, 5829, 6181, 5840,
  /* 5508 */ 6178, 5829, 5829, 6514, 5829, 6279, 6096, 6178, 6068, 5961, 5829, 6446, 6314, 5829, 5829, 5829, 6670, 5841,
  /* 5526 */ 5829, 5861, 6174, 5829, 5830, 6044, 6059, 6532, 5829, 6672, 5890, 5829, 5829, 6516, 6328, 5840, 6306, 5829,
  /* 5544 */ 5829, 5829, 6674, 6324, 5829, 6503, 5829, 5829, 6281, 5829, 5829, 5829, 6001, 5829, 5829, 5829, 6672, 6026,
  /* 5562 */ 5829, 5865, 5829, 5829, 5848, 5829, 5829, 6278, 5829, 6265, 6786, 6503, 5829, 5829, 6516, 6067, 5829, 5829,
  /* 5580 */ 6304, 6299, 5829, 5829, 5829, 6181, 5829, 6313, 5958, 6503, 5829, 5958, 5829, 6276, 5988, 5846, 5829, 6788,
  /* 5598 */ 6789, 6792, 6304, 6791, 6794, 6798, 6799, 6795, 6803, 6802, 6805, 6794, 6795, 6802, 6801, 6803, 6807, 6808,
  /* 5616 */ 6810, 6812, 6810, 6819, 6819, 6817, 6814, 6817, 6816, 6818, 6831, 6819, 6831, 6819, 6820, 6821, 6823, 6822,
  /* 5634 */ 6824, 6823, 6822, 6833, 6822, 6825, 6826, 6829, 6826, 6826, 6835, 6827, 6837, 6828, 6839, 6840, 6842, 5829,
  /* 5652 */ 5829, 5829, 6688, 6446, 6000, 5837, 5829, 6175, 6324, 5848, 6849, 5829, 5829, 6524, 6346, 6851, 5829, 5829,
  /* 5670 */ 5829, 6713, 5829, 6853, 6855, 5829, 5866, 5829, 5829, 6068, 6265, 5829, 6666, 6854, 6306, 5829, 6680, 5829,
  /* 5688 */ 6666, 6854, 6306, 5884, 6783, 6769, 6066, 6665, 5885, 5829, 6281, 5829, 6689, 6176, 5829, 5829, 6574, 5829,
  /* 5706 */ 5829, 6068, 6235, 5829, 5885, 5829, 5890, 6473, 5829, 5848, 5958, 6862, 5887, 5864, 6176, 5829, 6415, 6005,
  /* 5724 */ 6306, 5829, 5829, 6670, 5856, 5829, 6261, 5829, 6261, 5829, 5829, 6665, 5829, 6235, 5868, 5829, 6277, 6304,
  /* 5742 */ 6665, 5829, 6665, 5829, 5961, 6071, 5889, 5829, 5829, 6584, 5829, 5856, 5887, 5864, 6306, 5829, 6048, 6415,
  /* 5760 */ 6103, 5829, 5942, 5829, 5829, 6068, 6068, 5829, 5829, 5829, 6484, 5967, 5829, 5829, 5829, 6868, 6868, 6868,
  /* 5778 */ 6869, 6045, 6045, 6045, 6045, 5975, 6424, 5887, 5829, 5829, 6597, 5829, 5829, 6446, 6078, 5822, 6871, 6281,
  /* 5796 */ 5829, 5829, 6347, 5829, 6670, 5829, 5987, 5829, 5829, 6299, 6670, 5829, 5958, 6008, 6351, 1075838976,
  /* 5812 */ 2097152, 0x80000000, 4194560, 4196352, -2143289344, -2143289344, 4194304, 0, 15, 16, 2, 4, 0, 0x80000000,
  /* 5826 */ 0x80000000, 0, -872415232, 0, 0, 1, 0, 2, 0, 3, 8, 0, 4, 8, 8, 16, 0, 5, 86528, 270532608, 2097152, 1024,
  /* 5848 */ 0, 16, 16, 20, 16, 21, 16, 28, 32, 64, 0, 24, 2048, 0, 28, 2048, 2048, 4096, 0, 29, 0, 32, 96, 0, 40, 0,
  /* 5874 */ 44, 4198144, 4196352, 276901888, 8540160, 4194304, 4194304, 4194432, 8425488, 4194304, 8388608, 0, 128,
  /* 5887 */ 128, 256, 512, 0, 256, 1024, 4096, 4096, 8192, 4096, 24576, 0, 300, 742391808, 239075328, -1405091840,
  /* 5903 */ 742391808, 742391808, 775946240, 775946240, -1405091840, -1371537408, 775946240, -1371537408, 775946240,
  /* 5912 */ 171966464, 171966464, 775946240, 4718592, 775946240, 239075328, 239075328, 64, 4718592, 2097216, 4720640,
  /* 5923 */ 4718848, 541589504, 4194368, -2143285440, 4194400, 4194368, 4194368, 541065280, 4718848, -2143289280,
  /* 5933 */ 776470528, -2143285408, -2143285408, -2109730976, -2143285408, 775946336, 775946304, -1908404384, 2, 24,
  /* 5943 */ 282624, -2109730976, 775946304, 776470528, 775946304, 1792, 0, 999, 259072, 4194304, 25165824, 33554432,
  /* 5955 */ -1946157056, 0, 1007, 0, 1024, 65536, 131072, 0, 1536, 2048, 16384, 16384, 65536, 512, 9476, 8392704, 0,
  /* 5972 */ 3728, 64, 524288, 96, 96, 128, 4194304, 37748736, 541065216, 541065216, -2143289344, 96, 1048576, 8200, 96,
  /* 5987 */ 524288, 2097152, 8192, 1049088, 1049088, 536936448, 16, 32, 192, 3072, 20480, 65536, 524288, 268435456, 0,
  /* 6002 */ 16384, 98304, 0, 4096, 32768, 32768, 65536, 262144, 2048, 100663296, 0, 4608, 528, 524304, 1048592,
  /* 6017 */ 2097168, 16, 84, 268435472, 16, 4096, 679936, 1048576, 2097152, 2097152, 0, 13, 262160, 16, 262144,
  /* 6032 */ 1048576, 4194304, 67108864, 0x80000000, 536936448, 20, 24, 560, 48, 80, 16, 48, 16, 64, 64, 96, 64, 128,
  /* 6050 */ 6144, 32768, 131072, 262144, 262144, 512, 512, 513, 512, 1024, 8192, 9216, 0, 384, 512, 5120, 8192, 16384,
  /* 6068 */ 0, 512, 8192, 65536, 0, 520, 0, 576, 16777216, 16777216, 33554432, 0x80000000, 1048592, 1048592, 16,
  /* 6083 */ 1049104, 3146256, 2097680, 3145744, 3146256, 16, 67108864, 0, 20480, 2098064, 17, 17, 528, 16, 524288,
  /* 6098 */ 536870912, 98304, 131072, 1048576, 8388608, 4096, 524288, 14680064, 100663296, 402653184, 536870912, 0,
  /* 6110 */ 9476, 528, 2097168, 2097168, 2228784, -161430188, -161430188, -161429680, -161430188, -161429676,
  /* 6120 */ -161429676, -161429675, -161349072, -161349072, -161347728, -161347728, -161298572, -161298572, -160774284,
  /* 6129 */ -160905388, -161429676, 148960541, -161429740, -161298576, -160299088, -161298576, -161298572, -160774288,
  /* 6138 */ -160299084, 112, 628, 21, 53, 146804757, 146812949, 146862101, -161429676, 146863389, 146863389, 146863421,
  /* 6150 */ 146863389, 148960541, 415298845, -160905388, -161298572, -18860267, -18729163, -1073741824, 0, 24610,
  /* 6160 */ 243269632, 0, 25122, 1, 32768, 8388608, 8388608, 2048, 164096, 0, 114688, 2621440, 1073741824, 32768,
  /* 6174 */ 6291456, 0, 32768, 524288, 1073741824, 0, 49152, 0, 65536, 1048576, 33554432, 1024, 98304, 393216, 0,
  /* 6189 */ 24579, -2097126910, -2030018046, -2097126878, 8, 16777216, 1073774592, 1226014816, 100665361, 100665360,
  /* 6199 */ 100665360, -2046818288, 1091799136, -2044196848, 1091799136, 1091799136, 1091803360, 1091799136,
  /* 6207 */ 1158908000, 1158908001, 1192462432, 1192462448, 1192462448, 1200851056, 1200851056, 1200851057, 1091799393,
  /* 6216 */ 1200851056, 1192462448, 1870638912, 1870638912, 1870655296, 1870638912, 1870655296, 1870655296, 1870655313,
  /* 6225 */ 1870638928, 1870655317, 1870655317, 1870655312, 1870655312, 1879027568, 1879043952, 1870655317, 1870655349,
  /* 6234 */ 1879043957, 0, 131072, 16777216, 268435456, 4194432, 3145728, 229440, 1048576, 67108864, 16384, 132096, 0,
  /* 6247 */ 131328, 131072, 1224736768, 0, 156162, 231488, 1090519040, 1157627904, 1191182336, 9437184, 231744, 520000,
  /* 6259 */ 7864320, 1862270976, 0, 262144, 2097152, 4194304, 16777216, 0, 59, 140224, 5505024, -1887436800, 0, 63,
  /* 6273 */ 192, 1024, 2048, 8192, 0, 64, 2, 8, 256, 0, 104, 104, 1862270976, 1862270976, 16252928, 0, 301056, 0,
  /* 6291 */ 503616, 98304, 1048576, 536870912, 1073741824, 150994944, 0, 524288, 1048576, 0, 8192, 131072, 32768, 0,
  /* 6305 */ 2048, 524288, 0, 3072, 0, 3584, 8192, 229376, 4194304, 33554432, 0, 3712, 393216, 524288, 64, 65536,
  /* 6321 */ 2097152, 8388608, 16777216, 134217728, 0, 4864, 117440512, 64, 256, 1536, 8192, 8388608, 33554432,
  /* 6334 */ 33554432, 67108864, 524288, 117440512, 134217728, 268288, 2097152, 134217728, 536870912, 1536, 65536,
  /* 6345 */ 4194304, 117440512, 0, 1048576, 1073741824, 0x80000000, 2097152, 1073741824, 134218240, 1050624,
  /* 6355 */ 1275208192, 4194312, 4194312, 4194344, 4194312, 541065224, 4203820, -869654016, -869654016, 1279402504,
  /* 6365 */ 1279402504, 2143549415, 2143549415, 2143549423, 2143549415, 2143549423, 2143549423, 260, 512, 1048576,
  /* 6375 */ 139264, 1275068416, 0, 1049088, 8, 4194304, 251658240, 536870912, 4203520, 0, 1050624, 520, 4333568, 999,
  /* 6389 */ 29619200, 2113929216, 0, 1210494, 1007, 1007, 139264, 0, 1735294, 1, 102, 384, 8192, 33554432, 268435456,
  /* 6404 */ 1610612736, 0x80000000, 110, 110, 0, 2621440, 0, 116736, 1, 6, 32, 256, 2048, 6, 96, 384, 1, 2, 28,
  /* 6423 */ 2097552, 4, 32, 384, 4, 256, 3584, 4, 64, 384, 25165824, 268435456, 65536, 16777216, 65536, 268435456, 256,
  /* 6440 */ 65536, 8388608, 100663296, 32, 4100, 270532608, 0, 4194304, 12845065, 12845065, 147193865, 5505537,
  /* 6452 */ 5591557, 5587465, 5591557, 5587457, 5587457, 147202057, 81003049, 13894153, 13894153, -1881791493,
  /* 6462 */ -1881791493, 0, 6291456, 33554432, 402653184, 4456448, 8388608, 5505024, 0, 8388608, 3, 2048, 268435456,
  /* 6475 */ 0x80000000, 82432, 0, 10485760, 0, 16777216, 100663296, 134217728, 0x80000000, 41, 75497472, 2097152,
  /* 6487 */ 268435456, 81920, 0, 33554432, 201326592, 268435456, 1073741824, 1073741824, 2, 56, 64, 896, 8192,
  /* 6500 */ 67108864, 402653184, 1610612736, 0, 2097152, 33554432, 134217728, 1073741824, 64, 2048, 256, 32768,
  /* 6512 */ 39845888, -134217728, 0, 39895040, 0, 67108864, 134217728, 268435456, 2048, 16785408, 8388608, 16785408, 0,
  /* 6525 */ 83886080, 2, 16384, 229376, 25165824, 100663296, 537002496, 16384, 262144, 4210696, 136581141, 136581141,
  /* 6537 */ 136581205, 136581141, 170135573, 136581205, 136646677, 136581141, 144969749, 136581141, 136583189,
  /* 6546 */ 136581143, 170135575, 138694680, 138694680, 140791836, 140791837, 140791837, 140791901, 140791837,
  /* 6555 */ 140793885, 250436735, 250436863, 250436735, 250436735, 250436863, 250436863, 131584, 536870912, 21, 266240,
  /* 6566 */ 331776, 167772160, 10485760, 134217728, 23, 0, 100663296, 284672, 0, 134217728, 64, 351232, 15204352,
  /* 6579 */ 234881024, 0, 134348800, 134348800, 7, 0, 142606336, 0, 25090, 64, 3072, 1, 4, 16, 163577856, 1, 14, 32,
  /* 6597 */ 512, 131072, 4, 4194304, 4, 128, 100663296, 1, 2048, -2147479552, 536871936, 536871936, 536872064, 458752,
  /* 6611 */ 256, 4096, 1048576, 1073742336, 512, 2760704, 515, 512, 16777216, 768, 536874624, 536874628, 536874644,
  /* 6624 */ 536874644, 536874628, 536874628, -2147478784, 603983492, 537398932, 536872576, 536872576, 536872577,
  /* 6633 */ 536872576, 536872579, 536888960, 536888960, -94330997, -94330997, -94314613, -94314613, -94330997,
  /* 6642 */ -94314613, 0, 159383552, 2, 32, 2048, 458752, 0, 536870912, 1152, 0, 537001984, 1, 3, 8072, 39878656,
  /* 6658 */ -134217728, 768, 0, 603979776, 0, 1073741824, 8, 262144, 0, 6, 8, 32, 0, 8, 128, 0, 9, 0, 12, 1664, 16384,
  /* 6679 */ 1048576, 1536, 16384, 33554432, 536870912, 256, 7680, 32768, 100663296, 2, 256, 6144, 4096, 6291456,
  /* 6693 */ 33554432, 1073741824, 65536, 67108864, 536870912, 4, 32768, 268437504, 0, 1073741825, 8486912, 0,
  /* 6705 */ 1090519040, 8486912, 8192, 24578, -2046820352, -2046820352, -2046820320, -2046820352, 0, 235712,
  /* 6715 */ -1778382848, -2046820352, 24579, 24579, -2046820348, -2046820352, -1509818368, -2046820352, -2147459069,
  /* 6724 */ 24579, -2030018046, -2030018046, -2046795774, -2046795774, -2046795742, -1778358270, -2046795774,
  /* 6732 */ -2030018046, -1493016062, -30246786, -29722498, -30246786, -30246786, -29722498, -29722498, -13469058,
  /* 6741 */ -29722498, -12944770, -12944770, 256, 262144, 24578, 0, 1275068416, 369098752, 0, 637534208, 0, 26626, 0,
  /* 6755 */ 654311424, 0, 1734782, 2116026368, 0x80000000, 1211006, 2132803584, 0, 155648, 0, 155648, 1048576, 2, 60,
  /* 6769 */ 64, 1024, 2097152, 67108864, 268435456, 536870912, 9216, 24576, 131072, 24576, 655360, 1048576, 256,
  /* 6782 */ 268435456, 1, 16, 268435456, 18874368, 0, 136314880, 274726912, 0, 274726912, 132, 132, 50331648,
  /* 6795 */ 184549376, 50331648, 0, 50331648, 50331648, 52428800, 50331904, 184549376, 184549376, 186646528, 184549440,
  /* 6806 */ 184549376, 50331780, 201443328, 50331780, 201443856, 201443856, 201574928, 201706000, 251693056, 253790208,
  /* 6816 */ 251693120, 251693056, 251693056, 251955200, 251955200, 254052352, 563686, 563686, 2660838, 563686,
  /* 6826 */ 11049446, 11049446, 145267174, 187210214, 11049446, 254052352, 251955200, 2660838, 2660838, 78158310,
  /* 6836 */ 145267174, 185113062, 187210214, 254581222, 254581222, 195598822, 262969830, 0, 34816, 67108864,
  /* 6846 */ 1073741824, 117248, 0, 248320, 379392, 296960, 100663296, 6, 480, 38912, 524288, 4, 224, 256, 7168, 32768,
  /* 6862 */ 4, 96, 262144, 524288, 16384, 131072, 524288, 524288, 64, 32, 128, 2048, 201361408
];

XQueryParser.TOKEN =
[
  "(0)",
  "PragmaContents",
  "DirCommentContents",
  "DirPIContents",
  "CDataSection",
  "Wildcard",
  "EQName",
  "URILiteral",
  "IntegerLiteral",
  "DecimalLiteral",
  "DoubleLiteral",
  "StringLiteral",
  "PredefinedEntityRef",
  "'\"\"'",
  "EscapeApos",
  "ElementContentChar",
  "QuotAttrContentChar",
  "AposAttrContentChar",
  "PITarget",
  "NCName",
  "QName",
  "S",
  "S",
  "CharRef",
  "CommentContents",
  "EOF",
  "'!'",
  "'!='",
  "'\"'",
  "'#'",
  "'#)'",
  "'$'",
  "'%'",
  "''''",
  "'('",
  "'(#'",
  "'(:'",
  "')'",
  "'*'",
  "'*'",
  "'+'",
  "','",
  "'-'",
  "'-->'",
  "'.'",
  "'..'",
  "'/'",
  "'//'",
  "'/>'",
  "':'",
  "':)'",
  "'::'",
  "':='",
  "';'",
  "'<'",
  "'<!--'",
  "'</'",
  "'<<'",
  "'<='",
  "'<?'",
  "'='",
  "'>'",
  "'>='",
  "'>>'",
  "'?'",
  "'?>'",
  "'@'",
  "'NaN'",
  "'['",
  "']'",
  "'after'",
  "'all'",
  "'allowing'",
  "'ancestor'",
  "'ancestor-or-self'",
  "'and'",
  "'any'",
  "'append'",
  "'array'",
  "'as'",
  "'ascending'",
  "'at'",
  "'attribute'",
  "'base-uri'",
  "'before'",
  "'boundary-space'",
  "'break'",
  "'by'",
  "'case'",
  "'cast'",
  "'castable'",
  "'catch'",
  "'check'",
  "'child'",
  "'collation'",
  "'collection'",
  "'comment'",
  "'constraint'",
  "'construction'",
  "'contains'",
  "'content'",
  "'context'",
  "'continue'",
  "'copy'",
  "'copy-namespaces'",
  "'count'",
  "'decimal-format'",
  "'decimal-separator'",
  "'declare'",
  "'default'",
  "'delete'",
  "'descendant'",
  "'descendant-or-self'",
  "'descending'",
  "'diacritics'",
  "'different'",
  "'digit'",
  "'distance'",
  "'div'",
  "'document'",
  "'document-node'",
  "'element'",
  "'else'",
  "'empty'",
  "'empty-sequence'",
  "'encoding'",
  "'end'",
  "'entire'",
  "'eq'",
  "'every'",
  "'exactly'",
  "'except'",
  "'exit'",
  "'external'",
  "'first'",
  "'following'",
  "'following-sibling'",
  "'for'",
  "'foreach'",
  "'foreign'",
  "'from'",
  "'ft-option'",
  "'ftand'",
  "'ftnot'",
  "'ftor'",
  "'function'",
  "'ge'",
  "'greatest'",
  "'group'",
  "'grouping-separator'",
  "'gt'",
  "'idiv'",
  "'if'",
  "'import'",
  "'in'",
  "'index'",
  "'infinity'",
  "'inherit'",
  "'insensitive'",
  "'insert'",
  "'instance'",
  "'integrity'",
  "'intersect'",
  "'into'",
  "'is'",
  "'item'",
  "'json'",
  "'json-item'",
  "'key'",
  "'language'",
  "'last'",
  "'lax'",
  "'le'",
  "'least'",
  "'let'",
  "'levels'",
  "'loop'",
  "'lowercase'",
  "'lt'",
  "'map'",
  "'minus-sign'",
  "'mod'",
  "'modify'",
  "'module'",
  "'most'",
  "'namespace'",
  "'namespace-node'",
  "'ne'",
  "'next'",
  "'no'",
  "'no-inherit'",
  "'no-preserve'",
  "'node'",
  "'nodes'",
  "'not'",
  "'object'",
  "'occurs'",
  "'of'",
  "'on'",
  "'only'",
  "'option'",
  "'or'",
  "'order'",
  "'ordered'",
  "'ordering'",
  "'paragraph'",
  "'paragraphs'",
  "'parent'",
  "'pattern-separator'",
  "'per-mille'",
  "'percent'",
  "'phrase'",
  "'position'",
  "'preceding'",
  "'preceding-sibling'",
  "'preserve'",
  "'previous'",
  "'processing-instruction'",
  "'relationship'",
  "'rename'",
  "'replace'",
  "'return'",
  "'returning'",
  "'revalidation'",
  "'same'",
  "'satisfies'",
  "'schema'",
  "'schema-attribute'",
  "'schema-element'",
  "'score'",
  "'self'",
  "'sensitive'",
  "'sentence'",
  "'sentences'",
  "'skip'",
  "'sliding'",
  "'some'",
  "'stable'",
  "'start'",
  "'stemming'",
  "'stop'",
  "'strict'",
  "'strip'",
  "'structured-item'",
  "'switch'",
  "'text'",
  "'then'",
  "'thesaurus'",
  "'times'",
  "'to'",
  "'treat'",
  "'try'",
  "'tumbling'",
  "'type'",
  "'typeswitch'",
  "'union'",
  "'unique'",
  "'unordered'",
  "'updating'",
  "'uppercase'",
  "'using'",
  "'validate'",
  "'value'",
  "'variable'",
  "'version'",
  "'weight'",
  "'when'",
  "'where'",
  "'while'",
  "'wildcards'",
  "'window'",
  "'with'",
  "'without'",
  "'word'",
  "'words'",
  "'xquery'",
  "'zero-digit'",
  "'{'",
  "'{{'",
  "'{|'",
  "'|'",
  "'||'",
  "'|}'",
  "'}'",
  "'}}'"
];

// End
